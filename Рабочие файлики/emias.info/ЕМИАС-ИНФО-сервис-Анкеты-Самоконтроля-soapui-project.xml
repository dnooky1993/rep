<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="0035a8d1-4080-4a49-bc2a-d83668fec571" activeEnvironment="Default" name="ЕМИАС.ИНФО севрис Анкеты Самоконтроля" resourceRoot="" soapui-version="5.7.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="ecd28b07-a22c-4697-a831-2611b70e5ca1" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://lkservice.test.emias.mos.ru." type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://lkservice.test.emias.mos.ru.</con:endpoint></con:endpoints><con:resource name="emc-permissions" path="/api/internal/3/emc-permissions" id="b9f703f1-23c7-4faf-b8e6-d1cf8b9848e1"><con:settings/><con:parameters><con:parameter><con:name>ssoId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="2d014af6-bbe7-40c3-b075-08d679d29760" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:emc="https://lkservice.test.emias.mos.ru./api/internal/3/emc-permissions">emc:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:emc="https://lkservice.test.emias.mos.ru./api/internal/3/emc-permissions">emc:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:emc="https://lkservice.test.emias.mos.ru./api/internal/3/emc-permissions">emc:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="7afb73ec-356a-499b-a3dd-566e7c239c30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru./api/internal/3/emc-permissions</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ssoId" value="34354365" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ssoId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="auth" path="/api/auth/1" id="9aaa364b-ec5b-40f6-9323-5d7b7d69dc25"><con:settings/><con:parameters/><con:resource name="login" path="login" id="402a3e87-894c-4392-9e5d-50cb817d578d"><con:settings/><con:parameters/><con:method name="Method 1" id="12dff9f5-1f45-4332-a143-213216bb20a8" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="http://lkservice-apigateway.test.emias.mos.ru/api/user/auth/1/login">log:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="b4bd769e-27a2-4c16-96ce-9d7a61955a25" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru.</con:endpoint><con:request>{
  "code": "string"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="confirm" path="confirm" id="973e6d1a-2d90-439f-8f25-e4355f58e761"><con:settings/><con:parameters/><con:method name="Method 1" id="fadd44db-ef35-4df8-8b14-1cc7ef0a5882" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:con1="https://lkservice.test.emias.mos.ru/api/auth/1/confirm">con1:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:con1="https://lkservice.test.emias.mos.ru/api/auth/1/confirm">con1:Fault</con:element></con:representation><con:request name="Request 1" id="8d685b7f-e34f-4908-98f4-52e27a5acdab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru.</con:endpoint><con:request>{
  "otp_code": "string",
  "refresh_token_ttl_seconds": 0,
  "access_token_ttl_seconds": 0,
  "attempt_token": "string"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="logout" path="logout" id="01b65836-18e0-42e4-bd8f-2eee5c803a99"><con:settings/><con:parameters/><con:method name="Method 1" id="616a77d0-bb4d-40f1-9884-9fcb5077f0b6" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="d52e4970-e6f1-42a3-9213-4733f70b2f78" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru.</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:resource><con:resource name="history" path="/api/2/forms/history" id="61086994-fbb5-4f5c-837d-31d45f2e11e9"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>formType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="6814969d-c790-4c6a-869a-122cf298dbdb" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>404 401 422 406</con:status><con:params/><con:element xmlns:his="https://lkservice.test.emias.mos.ru./api/2/forms/history">his:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:his="https://lkservice.test.emias.mos.ru./api/2/forms/history">his:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:his="https://lkservice.test.emias.mos.ru./api/2/forms/history">his:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:his="https://lkservice.test.emias.mos.ru./api/2/forms/history">his:Fault</con:element></con:representation><con:request name="Request 1" id="ae77ea24-0472-4e8d-8583-c61df76cb109" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#Project#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru./api/2/forms/history</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="formType" value="self_control"/>
  <con:entry key="ehrId" value="12b7ca46-74ce-43f1-8659-5e31898580db"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>formType</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="fa7aedf6-e461-454a-8195-ade7556657e0" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://login-tech.mos.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://login-tech.mos.ru</con:endpoint></con:endpoints><con:resource name="register" path="/sps/oauth/register" id="e85c3fc9-1d6f-4674-b5f0-7932c0c1d430"><con:settings/><con:parameters/><con:method name="Method 1" id="bad103e2-9b07-4c54-9baf-0057a1b9b125" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:reg="https://login-tech.mos.ru/sps/oauth/register">reg:Response</con:element></con:representation><con:request name="Request 1" id="1162e89c-c023-4360-b3e0-00fe6e004a7a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://login-tech.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="te" path="/sps/oauth/te" id="a4593ebe-1665-411a-a027-51bc8b4c8fd6"><con:settings/><con:parameters><con:parameter><con:name>code</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>redirect_uri</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>grant_type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="305bc016-286f-48ee-8871-3342586ae9fa" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:te="https://login-tech.mos.ru/sps/oauth/te">te:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:te="https://login-tech.mos.ru/sps/oauth/te">te:Response</con:element></con:representation><con:request name="Request 1" id="c47a698d-29d0-42d1-9fa7-fa3bf0cb0782" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://login-tech.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>code</con:entry><con:entry>redirect_uri</con:entry><con:entry>grant_type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="me" path="/sps/oauth/me" id="13e27417-6e31-4ad8-a414-4fcd900da676"><con:settings/><con:parameters/><con:method name="Method 1" id="7f19da64-5f33-466d-a3d7-d60086fdd053" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:me="https://login-tech.mos.ru/sps/oauth/me">me:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="7cee0c54-01a9-4d76-971f-a0f61e701c30" mediaType="application/json"><con:settings/><con:endpoint>https://login-tech.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="c385e0ef-173d-4338-a722-42c425455c09" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://emiasinfo1.emias.solit-clouds.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint></con:endpoints><con:resource name="SelfControl" path="/api/v2/selfControl/selfControl" id="3ddb998d-cc1c-4343-aa8b-fcf2ff9f375b"><con:settings/><con:parameters><con:parameter><con:name>patientId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="SelfControl 1" id="30b5aff3-b2b0-425a-a706-1efc95fc3cfe" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 403 500</con:status><con:params/><con:element xmlns:sel="http://emiasinfo1.emias.solit-clouds.ru/api/v2/selfControl">sel:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:chec="http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl">chec:Response</con:element></con:representation><con:request name="Request 1" id="d1451b9a-18f3-4843-b4c4-94797116e11b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value=""/>&#13;
  &lt;con:entry key="EI-Token" value=""/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://application-emiasinfo4.emias.solit-clouds.ru</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/selfControl/selfControl</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>patientId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="" path="/api/v2/selfControl/selfControl/{documentId}" id="1b082636-184e-400a-a481-ffd9b2e45701"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>documentId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="7b08f239-752e-4dcd-b132-823584036275" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 403 404 500</con:status><con:params/><con:element xmlns:sel="http://emiasinfo1.emias.solit-clouds.ru/api/v2/selfControl/">sel:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sel="http://emiasinfo1.emias.solit-clouds.ru/api/v2/selfControl/">sel:Response</con:element></con:representation><con:request name="Request 1" id="204227fb-86da-416c-9e8e-caa3972601df" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value=""/>&#13;
  &lt;con:entry key="EI-Token" value=""/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/selfControl/selfControl/7ce48801-c1d3-46ed-b967-2d4a29dc8602</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="documentId" value="7ce48801-c1d3-46ed-b967-2d4a29dc8602"/>
  <con:entry key="ehrId" value="8d075820-b3cb-4fbe-9666-3106776652d2"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>documentId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="checkSelfControl" path="/api/v3/selfControl/checkSelfControl" id="8dd51e63-076a-4655-a297-0b6ca53e5568"><con:settings/><con:parameters><con:parameter><con:name>patientId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="1fa569f7-e9c7-4de7-b41e-eeb762cac788" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Mock-pdn</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Mock-lk</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>503 403</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500 401 403 503 400</con:status><con:params/><con:element xmlns:chec="http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl">chec:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:chec="http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl">chec:Response</con:element></con:representation><con:request name="Request 1" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value=""/>&#13;
  &lt;con:entry key="EI-Token" value=""/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="checkSelfControl v2" path="/api/v2/selfControl/checkSelfControl" id="8dd51e63-076a-4655-a297-0b6ca53e5568"><con:settings/><con:parameters><con:parameter><con:name>patientId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="1fa569f7-e9c7-4de7-b41e-eeb762cac788" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Mock-pdn</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Mock-lk</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>503 403</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500 401 403 503 400</con:status><con:params/><con:element xmlns:chec="http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl">chec:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:chec="http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl">chec:Response</con:element></con:representation><con:request name="Request 1" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value=""/>&#13;
  &lt;con:entry key="EI-Token" value=""/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:WsdlInterface" id="ffec93d3-2cc4-4926-9250-0f0c67ab2f4a" wsaVersion="NONE" name="planServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/dnpdn/planService/v2/}planServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?wsdl"><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="planService" targetNamespace="http://emias.mos.ru/dnpdn/planService/v2/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:ns1="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="http://emias.mos.ru/dnpdn/planService/v2/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKScHJVWe_gQQbvpnTmeYTJS_v2kr_C.aPJm06yTx4kJYaktABOO0fzxnniDsWV87bdXLU-"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKScHJVWe_gQQbvpnTmeYTJS_v2kqzQ6b3.hw6.WQKLf11QuSfaxX5o176P.yWN"/>
      <xs:import namespace="http://emias.mos.ru/dnpdn/planService/v2/types/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKSOjIKWOynUBmgu17wf5fNBujpyvif6Kj6kVPoUhU09U._xLZj3BIkIoXlbE0uMg--"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="getPlanExtensionInput">
    <wsdl:part element="ns1:GetPlanExtensionRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userContext">
    <wsdl:documentation>Контекст пользователя</wsdl:documentation>
    <wsdl:part element="uctx:userContext" name="userContext"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getEventsByPatientsOutput">
    <wsdl:part element="ns1:GetEventsByPatientsResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPlanShortOutput">
    <wsdl:part element="ns1:GetPlanShortResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPlanExtensionOutput">
    <wsdl:part element="ns1:GetPlanExtensionResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPlansOutput">
    <wsdl:part element="ns1:GetPlansResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPlanShortInput">
    <wsdl:part element="ns1:GetPlanShortRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCardForm30ProcessingStatusOutput">
    <wsdl:part element="ns1:GetCardForm30ProcessingStatusResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getEventsByPatientsInput">
    <wsdl:part element="ns1:GetEventsByPatientsRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPlansInput">
    <wsdl:part element="ns1:GetPlansRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentEventStatusInput">
    <wsdl:part element="ns1:GetCurrentEventStatusRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCardForm30ProcessingStatusInput">
    <wsdl:part element="ns1:GetCardForm30ProcessingStatusRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentEventStatusOutput">
    <wsdl:part element="ns1:GetCurrentEventStatusResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="planServicePortType">
    <wsdl:operation name="GetPlanExtension">
      <wsdl:input message="tns:getPlanExtensionInput"></wsdl:input>
      <wsdl:output message="tns:getPlanExtensionOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetPlanShort">
      <wsdl:input message="tns:getPlanShortInput"></wsdl:input>
      <wsdl:output message="tns:getPlanShortOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetEventsByPatient">
      <wsdl:input message="tns:getEventsByPatientsInput"></wsdl:input>
      <wsdl:output message="tns:getEventsByPatientsOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetCurrentEventStatus">
      <wsdl:input message="tns:getCurrentEventStatusInput"></wsdl:input>
      <wsdl:output message="tns:getCurrentEventStatusOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetPlans">
      <wsdl:input message="tns:getPlansInput"></wsdl:input>
      <wsdl:output message="tns:getPlansOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetCardForm30ProcessingStatus">
      <wsdl:input message="tns:getCardForm30ProcessingStatusInput"></wsdl:input>
      <wsdl:output message="tns:getCardForm30ProcessingStatusOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="planServiceBinding" type="tns:planServicePortType">
    <soap12:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetPlanExtension">
      <soap12:operation soapAction="GetPlanExtension"/>
      <wsdl:input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"></soap12:header>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetPlanShort">
      <soap12:operation soapAction="GetPlanShort"/>
      <wsdl:input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"></soap12:header>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetEventsByPatient">
      <soap12:operation soapAction="GetEventsByPatient"/>
      <wsdl:input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"></soap12:header>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetCurrentEventStatus">
      <soap12:operation soapAction="GetCurrentEventStatus"/>
      <wsdl:input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"></soap12:header>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetPlans">
      <soap12:operation soapAction="GetPlans"/>
      <wsdl:input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"></soap12:header>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetCardForm30ProcessingStatus">
      <soap12:operation soapAction="GetCardForm30ProcessingStatus"/>
      <wsdl:input>
        <soap12:header message="tns:userContext" part="userContext" use="literal"></soap12:header>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap12:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="planService">
    <wsdl:port binding="tns:planServiceBinding" name="planServicePortSoap12">
      <soap12:address location="http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService"/>
    </wsdl:port>
    <wsp:PolicyReference URI="#authPolicy"/>
  </wsdl:service>
  <wsp:Policy wsu:Id="authPolicy">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKScHJVWe_gQQbvpnTmeYTJS_v2kr_C.aPJm06yTx4kJYaktABOO0fzxnniDsWV87bdXLU-</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Роли пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль пользователя"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>ИД Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKScHJVWe_gQQbvpnTmeYTJS_v2kqzQ6b3.hw6.WQKLf11QuSfaxX5o176P.yWN</con:url><con:content><![CDATA[<!--Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.-->
<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns="http://emias.mos.ru/system/v1/faults/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKScHJVWe_gQQbvpnTmeYTJS_v2kr_C.aPJm06yTx4kJYaktABOO0fzxnniDsWV87bdXLU-"/>
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10 записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKSOjIKWOynUBmgu17wf5fNBujpyvif6Kj6kVPoUhU09U._xLZj3BIkIoXlbE0uMg--</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:core="http://emias.mos.ru/dnpdn/core/v2/" xmlns:tns="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://emias.mos.ru/dnpdn/core/v2/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKSOjIKWOynQxqzsCPjP8_cFumfIioB_8gV7Rn3hJ.PNBwf"/>
  <!--Метод получения расширенной информации о ПДН-->
  <xs:element name="GetPlanExtensionRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="planOfEventsId" type="xs:long"/>
        <xs:element minOccurs="0" name="patientId" type="xs:long"/>
        <xs:element minOccurs="0" name="documentId" type="xs:string"/>
        <xs:element minOccurs="0" name="archivePlans" type="xs:boolean"/>
        <xs:element minOccurs="0" name="addArchivedPlanOfEvents" type="xs:boolean"/>
        <xs:element minOccurs="0" name="options" type="core:Options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetPlanExtensionResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="core:PlanOfEventsExtension"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--Метод получения краткой информации о ПДН-->
  <xs:element name="GetPlanShortRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="planOfEventsId" type="xs:long"/>
        <xs:element minOccurs="0" name="patientId" type="xs:long"/>
        <xs:element minOccurs="0" name="documentId" type="xs:string"/>
        <xs:element minOccurs="0" name="options" type="core:Options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetPlanShortResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="core:PlanOfEventsShort"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--Метод обеспечивает предоставление информации о мероприятиях пациента на период времени.-->
  <xs:element name="GetEventsByPatientsRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="patientId" type="xs:long"/>
        <xs:element name="startDate" type="xs:dateTime"/>
        <xs:element name="endDate" type="xs:dateTime"/>
        <xs:element minOccurs="0" name="archiveEvents" type="xs:boolean"/>
        <xs:element name="pagingOptions" type="core:PagingOptions"/>
        <xs:element minOccurs="0" name="options" type="core:Options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetEventsByPatientsResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="tns:EventsByPatientResultPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="EventsByPatientResultPage">
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element minOccurs="0" name="eventsByPatient" type="core:EventsByPatient"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Метод получения информации по созданным назначениям-->
  <xs:element name="GetCurrentEventStatusRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="patientId" type="xs:long"/>
        <xs:element minOccurs="0" name="documentId" type="xs:string"/>
        <xs:element minOccurs="0" name="options" type="core:Options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetCurrentEventStatusResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="core:CurrentEvents"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--Метод получения информации о программах ПДН-->
  <xs:element name="GetPlansRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="planOfEventsId" type="xs:long"/>
        <xs:element minOccurs="0" name="patientId" type="xs:long"/>
        <xs:element minOccurs="0" name="documentId" type="xs:string"/>
        <xs:element minOccurs="0" name="returnActualPlan" type="xs:boolean"/>
        <xs:element minOccurs="0" name="planStartDateFrom" type="xs:date"/>
        <xs:element minOccurs="0" name="planEndDateTo" type="xs:date"/>
        <xs:element minOccurs="0" name="options" type="core:Options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetPlansResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="core:PlansOfEvents"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--Метод получения статуса обработки документов карты формы 030-->
  <xs:element name="GetCardForm30ProcessingStatusRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" name="documentId" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetCardForm30ProcessingStatusResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" name="documentStatuses" type="core:DocumentStatus"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKSOjIKWOynQxqzsCPjP8_cFumfIioB_8gV7Rn3hJ.PNBwf</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/core/v2/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKScHJVWe_gQQbvtmLnaM_SVKO_z65wNNtT_9yWwDh1OeQI5AHB"/>
  <!--planManageService-->
  <xs:complexType name="Assigment">
    <xs:sequence>
      <xs:element name="id" type="xs:string"/>
      <xs:element name="passedInExternalMO" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="EventPDN">
    <xs:sequence>
      <xs:element name="id" type="ID"/>
      <xs:element name="status" type="StatusEnum"/>
      <xs:element name="assigmentPDN" type="Assigment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ListOfEvents">
    <xs:sequence>
      <xs:element name="events">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="event" type="EventPDN"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--planService-->
  <!--PlanOfEvents-->
  <xs:complexType name="PlanOfEvents">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="jobExecutionId" type="xs:long"/>
      <xs:element maxOccurs="unbounded" name="diagnosis" type="Diagnosis"/>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element minOccurs="0" name="parentDocumentId" type="xs:string"/>
      <xs:element name="moId" type="xs:long"/>
      <xs:element name="moName" type="xs:string"/>
      <xs:element name="status" type="xs:string"/>
      <xs:element name="archived" type="xs:boolean"/>
      <xs:element minOccurs="0" name="calendarYearStartDate" type="xs:dateTime"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="planOfEventsDiagnosis" type="Diagnosis"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="observationProgram" type="ObservationProgram"/>
    </xs:sequence>
  </xs:complexType>
  <!--PlanOfEventsShort-->
  <xs:complexType name="PlanOfEventsShort">
    <xs:complexContent>
      <xs:extension base="PlanOfEvents">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="eventsPeriod" type="EventsPeriod"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--PlanOfEventsExtension-->
  <xs:complexType name="PlanOfEventsExtension">
    <xs:complexContent>
      <xs:extension base="PlanOfEvents">
        <xs:sequence>
          <xs:element name="patientId" type="xs:long"/>
          <xs:element maxOccurs="unbounded" name="eventsPeriod" type="EventsPeriodInExtendedPlan"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="archivePlans" type="ArchivePlanOfEvents"/>
          <xs:element minOccurs="0" name="statusHistoryLists" type="StatusHistoryLists"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="PlanOfEventsForCurrentEventStatus">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="status" type="xs:string"/>
      <xs:element maxOccurs="unbounded" name="Events" type="EventsPeriodForCurrentEventStatus"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Diagnosis">
    <xs:sequence>
      <xs:element name="diagnosisCode" type="xs:string"/>
      <xs:element name="diagnosisTitle" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="EventsPeriodInExtendedPlan">
    <xs:sequence>
      <xs:element minOccurs="0" name="priority" type="xs:string"/>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:element maxOccurs="unbounded" name="event" type="EventInExtendedPlan"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="EventInExtendedPlan">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="eventStatus" type="StatusEnum"/>
      <xs:element minOccurs="0" name="comment" type="xs:string"/>
      <xs:element name="archived" type="xs:boolean"/>
      <xs:element minOccurs="0" name="assignment" type="AssignmentInExtendedPlan"/>
      <xs:element minOccurs="0" name="appointment" type="AppointmentInExtendedPlan"/>
      <xs:element minOccurs="0" name="drugsEvent" type="DrugsEventInExtendedPlan"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="diagnoses" type="Diagnosis"/>
      <xs:element minOccurs="0" name="referralCreated" type="xs:boolean"/>
      <xs:element minOccurs="0" name="destinationType" type="xs:string"/>
      <xs:element minOccurs="0" name="destinationMedicalOrganizationId" type="xs:long"/>
      <xs:element minOccurs="0" name="destinationMedicalOrganizationName" type="xs:string"/>
      <xs:element minOccurs="0" name="passedBeforePDNCreated" type="xs:boolean"/>
      <xs:element minOccurs="0" name="eventExecutionType" type="xs:string"/>
      <xs:element minOccurs="0" name="unplannedEvent" type="xs:boolean"/>
      <xs:element minOccurs="0" name="externalAssignmentExpirationDate" type="xs:date"/>
    </xs:sequence>
  </xs:complexType>
  <!--AssignmentInExtendedPlan-->
  <xs:complexType name="AssignmentInExtendedPlan">
    <xs:sequence>
      <xs:element minOccurs="0" name="assignmentConsultation" type="AssignmentConsultationExtended"/>
      <xs:element minOccurs="0" name="assignmentInstrumental" type="AssignmentInstrumentalExtended"/>
      <xs:element minOccurs="0" name="assignmentLaboratoryExtended" type="AssignmentLaboratoryExtended"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AssignmentConsultationExtended">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="assignment_id" type="xs:string"/>
      <xs:element minOccurs="0" name="suppReferralId" type="xs:long"/>
      <xs:element name="diagnosisCode" type="xs:string"/>
      <xs:element name="diagnosisTitle" type="xs:string"/>
      <xs:element name="specializationCode" type="xs:string"/>
      <xs:element name="specializationTitle" type="xs:string"/>
      <xs:element name="reason" type="xs:string"/>
      <xs:element minOccurs="0" name="documentId" type="xs:string"/>
      <xs:element name="status" type="StatusEnum"/>
      <xs:element minOccurs="0" name="documentCreateDate" type="xs:dateTime"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="documentsByAssignment" type="DocumentsByAssignment"/>
      <xs:element minOccurs="0" name="examinationPassedInExternalMO" type="xs:boolean"/>
      <xs:element minOccurs="0" name="careEventLinkedpassedInExternalMO" type="ID"/>
      <xs:element minOccurs="0" name="specialityCode" type="xs:string"/>
      <xs:element minOccurs="0" name="assigmentToControlCheckUp" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DocumentsByAssignment">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="documentTypeName" type="DocumentTypeNameEnum"/>
      <xs:element name="documentCreateDate" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="DocumentTypeNameEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ASSIGNMENT_INSTRUMENTAL"/>
      <xs:enumeration value="ASSIGNMENT_LABORATORY"/>
      <xs:enumeration value="ASSIGNMENT_CONSULTATION"/>
      <xs:enumeration value="PRESCRIPTION"/>
      <xs:enumeration value="PROCESSING_PROTOCOL_AI"/>
      <xs:enumeration value="DECODE_PROTOCOL_AI"/>
      <xs:enumeration value="RESULT_OF_LI"/>
      <xs:enumeration value="INSPECTION_PROTOCOL"/>
      <xs:enumeration value="CANCELED_ASSIGNMENT"/>
      <xs:enumeration value="RESULT_OF_CONSULTATION"/>
      <xs:enumeration value="REFERRAL_TO_HOSPITAL"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="AssignmentInstrumentalExtended">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="assignment_id" type="xs:long"/>
      <xs:element minOccurs="0" name="suppReferralId" type="xs:long"/>
      <xs:element name="diagnosisCode" type="xs:string"/>
      <xs:element name="diagnosisTitle" type="xs:string"/>
      <xs:element name="mainDiagnosticId" type="xs:long"/>
      <xs:element name="mainDiagnosticTitle" type="xs:string"/>
      <xs:element name="reason" type="xs:string"/>
      <xs:element minOccurs="0" name="documentId" type="xs:string"/>
      <xs:element name="status" type="StatusEnum"/>
      <xs:element minOccurs="0" name="documentCreateDate" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="examinationPassedInExternalMO" type="xs:boolean"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="additionalDiagnostics" type="AdditionalDiagnostics"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="documentsByAssignment" type="DocumentsByAssignment"/>
      <xs:element minOccurs="0" name="careEventLinkedpassedInExternalMO" type="ID"/>
      <xs:element minOccurs="0" name="justification" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AdditionalDiagnostics">
    <xs:sequence>
      <xs:element name="additionalDiagnosticId" type="xs:long"/>
      <xs:element name="additionalDiagnosticTitle" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AssignmentLaboratoryExtended">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="assignment_id" type="xs:long"/>
      <xs:element name="diagnosisCode" type="xs:string"/>
      <xs:element name="diagnosisTitle" type="xs:string"/>
      <xs:element name="laboratoryCode" type="xs:string"/>
      <xs:element name="laboratoryTitle" type="xs:string"/>
      <xs:element name="biomaterialCode" type="xs:string"/>
      <xs:element name="biomaterialTitle" type="xs:string"/>
      <xs:element name="locusCode" type="xs:string"/>
      <xs:element name="locusTitle" type="xs:string"/>
      <xs:element minOccurs="0" name="samplingTypeId" type="xs:long"/>
      <xs:element minOccurs="0" name="examinationPassedInExternalMO" type="xs:boolean"/>
      <xs:element minOccurs="0" name="careEventLinkedpassedInExternalMO" type="ID"/>
      <xs:element minOccurs="0" name="samplingTypeName" type="xs:string"/>
      <xs:element minOccurs="0" name="documentId" type="xs:string"/>
      <xs:element name="status" type="StatusEnum"/>
      <xs:element minOccurs="0" name="documentCreateDate" type="xs:dateTime"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="anthropometricData" type="AnthropometricData"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="documentsByAssignment" type="DocumentsByAssignment"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="result" type="TestResult"/>
      <xs:element minOccurs="0" name="moIdTakingBiomaterial" type="xs:long"/>
      <xs:element minOccurs="0" name="moNameTakingBiomaterial" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AnthropometricData">
    <xs:sequence>
      <xs:element name="anthropometricDataId" type="xs:string"/>
      <xs:element name="anthropometricDataName" type="xs:string"/>
      <xs:element name="anthropometricDataValue" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TestResult">
    <xs:sequence>
      <xs:element minOccurs="0" name="testName" type="xs:string"/>
      <xs:element minOccurs="0" name="testStandartValue" type="xs:string"/>
      <xs:element minOccurs="0" name="testValue" type="xs:string"/>
      <xs:element minOccurs="0" name="testUnit" type="xs:string"/>
      <xs:element minOccurs="0" name="testDeviation" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--AppointmentInExtendedPlan-->
  <xs:complexType name="AppointmentInExtendedPlan">
    <xs:complexContent>
      <xs:extension base="Appointment">
        <xs:sequence>
          <xs:element name="type" type="xs:string"/>
          <xs:element name="appointmentDate" type="xs:dateTime"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--DrugsEvent-->
  <xs:complexType name="DrugsEventInExtendedPlan">
    <xs:complexContent>
      <xs:extension base="DrugsEvent">
        <xs:sequence>
          <xs:element minOccurs="0" name="drugMnId" type="xs:string"/>
          <xs:element minOccurs="0" name="drugTnId" type="xs:string"/>
          <xs:element name="diagnosisCode" type="xs:string"/>
          <xs:element name="diagnosisTitle" type="xs:string"/>
          <xs:element name="title" type="xs:string"/>
          <xs:element minOccurs="0" name="number" type="xs:string"/>
          <xs:element minOccurs="0" name="prescriptionId" type="xs:long"/>
          <xs:element minOccurs="0" name="documentId" type="xs:string"/>
          <xs:element minOccurs="0" name="documentCreateDate" type="xs:dateTime"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EventsPeriod">
    <xs:sequence>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:element maxOccurs="unbounded" name="event" type="Event"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="EventsPeriodForCurrentEventStatus">
    <xs:sequence>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:element maxOccurs="unbounded" name="event" type="EventForCurrentEventStatus"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Event">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="eventStatus" type="StatusEnum"/>
      <xs:element name="archived" type="xs:boolean"/>
      <xs:element minOccurs="0" name="assignment" type="Assignment"/>
      <xs:element minOccurs="0" name="appointment" type="Appointment"/>
      <xs:element minOccurs="0" name="drugsEvent" type="DrugsEvent"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="diagnoses" type="Diagnosis"/>
      <xs:element minOccurs="0" name="referralCreated" type="xs:boolean"/>
      <xs:element minOccurs="0" name="destinationType" type="xs:string"/>
      <xs:element minOccurs="0" name="destinationMedicalOrganizationId" type="xs:long"/>
      <xs:element minOccurs="0" name="destinationMedicalOrganizationName" type="xs:string"/>
      <xs:element minOccurs="0" name="passedBeforePDNCreated" type="xs:boolean"/>
      <xs:element minOccurs="0" name="eventExecutionType" type="xs:string"/>
      <xs:element minOccurs="0" name="unplannedEvent" type="xs:boolean"/>
      <xs:element minOccurs="0" name="externalAssignmentExpirationDate" type="xs:date"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="EventForCurrentEventStatus">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="eventStatus" type="StatusEnum"/>
      <xs:element name="archived" type="xs:boolean"/>
      <xs:element minOccurs="0" name="assignment" type="AssignmentForCurrentEventStatus"/>
      <xs:element minOccurs="0" name="drugsEvent" type="DrugsEventForCurrentEventStatus"/>
    </xs:sequence>
  </xs:complexType>
  <!--Assignments-->
  <xs:complexType name="Assignment">
    <xs:sequence>
      <xs:element minOccurs="0" name="assignmentConsultation" type="AssignmentConsultation"/>
      <xs:element minOccurs="0" name="assignmentInstrumental" type="AssignmentInstrumental"/>
      <xs:element minOccurs="0" name="assignmentLaboratory" type="AssignmentLaboratory"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AssignmentForCurrentEventStatus">
    <xs:sequence>
      <xs:element minOccurs="0" name="assignmentConsultation" type="AssignmentConsultationForCurrentEventStatus"/>
      <xs:element minOccurs="0" name="assignmentInstrumental" type="AssignmentBaseForCurrentEventStatus"/>
      <xs:element minOccurs="0" name="assignmentLaboratory" type="AssignmentBaseForCurrentEventStatus"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AssignmentConsultation">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="specializationTitle" type="xs:string"/>
      <xs:element name="status" type="StatusEnum"/>
      <xs:element minOccurs="0" name="examinationPassedInExternalMO" type="xs:boolean"/>
      <xs:element minOccurs="0" name="careEventLinkedpassedInExternalMO" type="ID"/>
      <xs:element minOccurs="0" name="assigmentToControlCheckUp" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AssignmentInstrumental">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="mainDiagnsoticTitle" type="xs:string"/>
      <xs:element name="status" type="StatusEnum"/>
      <xs:element minOccurs="0" name="examinationPassedInExternalMO" type="xs:boolean"/>
      <xs:element minOccurs="0" name="careEventLinkedpassedInExternalMO" type="ID"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AssignmentLaboratory">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="laboratoryTitle" type="xs:string"/>
      <xs:element name="status" type="StatusEnum"/>
      <xs:element minOccurs="0" name="examinationPassedInExternalMO" type="xs:boolean"/>
      <xs:element minOccurs="0" name="careEventLinkedpassedInExternalMO" type="ID"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AssignmentBaseForCurrentEventStatus">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="assignmentId" type="xs:string"/>
      <xs:element minOccurs="0" name="documentId" type="xs:string"/>
      <xs:element minOccurs="0" name="documentCreateDate" type="xs:dateTime"/>
      <xs:element name="status" type="StatusEnum"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AssignmentConsultationForCurrentEventStatus">
    <xs:complexContent>
      <xs:extension base="AssignmentBaseForCurrentEventStatus">
        <xs:sequence>
          <xs:element minOccurs="0" name="suppReferralId" type="xs:long"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Appointment">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="assignmentId" type="xs:string"/>
      <xs:element name="eventType" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DrugsEvent">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="status" type="StatusEnum"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DrugsEventForCurrentEventStatus">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="prescriptionId" type="xs:long"/>
      <xs:element minOccurs="0" name="documentId" type="xs:string"/>
      <xs:element minOccurs="0" name="documentCreateDate" type="xs:dateTime"/>
      <xs:element name="status" type="StatusEnum"/>
    </xs:sequence>
  </xs:complexType>
  <!--EventsByPatient-->
  <xs:complexType name="EventsByPatient">
    <xs:sequence>
      <xs:element name="patientId" type="xs:long"/>
      <xs:element maxOccurs="unbounded" name="eventsPeriod" type="EventsByPatientPeriod"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="EventsByPatientPeriod">
    <xs:sequence>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="priority" type="xs:string"/>
      <xs:element maxOccurs="unbounded" name="event" type="EventByPatient"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="EventByPatient">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="planOfEventId" type="xs:long"/>
      <xs:element name="eventStatus" type="StatusEnum"/>
      <xs:element minOccurs="0" name="comment" type="xs:string"/>
      <xs:element minOccurs="0" name="assignment" type="AssignmentInExtendedPlan"/>
      <xs:element minOccurs="0" name="drugsEvent" type="DrugsEventInExtendedPlan"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="diagnoses" type="Diagnosis"/>
      <xs:element minOccurs="0" name="referralCreated" type="xs:boolean"/>
      <xs:element minOccurs="0" name="destinationType" type="xs:string"/>
      <xs:element minOccurs="0" name="destinationMedicalOrganizationId" type="xs:long"/>
      <xs:element minOccurs="0" name="destinationMedicalOrganizationName" type="xs:string"/>
      <xs:element minOccurs="0" name="passedBeforePDNCreated" type="xs:boolean"/>
      <xs:element minOccurs="0" name="eventExecutionType" type="xs:string"/>
      <xs:element minOccurs="0" name="unplannedEvent" type="xs:boolean"/>
      <xs:element minOccurs="0" name="externalAssignmentExpirationDate" type="xs:date"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="StatusEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="PLANNED"/>
      <xs:enumeration value="CREATED"/>
      <xs:enumeration value="COMPLETED"/>
      <xs:enumeration value="UNFINISHED"/>
      <xs:enumeration value="CANCELLED"/>
      <xs:enumeration value="EXPIRED"/>
      <xs:enumeration value="PRESCRIPTED"/>
    </xs:restriction>
  </xs:simpleType>
  <!--CurrentEventStatus-->
  <xs:complexType name="CurrentEvents">
    <xs:sequence>
      <xs:element name="patientId" type="xs:long"/>
      <xs:element name="eventsSum" type="xs:string"/>
      <xs:element name="eventsCreated" type="xs:string"/>
      <xs:element name="PlanOfEvents" type="PlanOfEventsForCurrentEventStatus"/>
    </xs:sequence>
  </xs:complexType>
  <!--PlanOfEventsMainInfo-->
  <xs:complexType name="PlanOfEventsMainInfo">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element minOccurs="0" name="parentDocumentId" type="xs:string"/>
      <xs:element name="moId" type="xs:long"/>
      <xs:element name="moName" type="xs:string"/>
      <xs:element name="status" type="xs:string"/>
      <xs:element name="archived" type="xs:boolean"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="planOfEventsDiagnosis" type="Diagnosis"/>
      <xs:element minOccurs="0" name="statusHistoryLists" type="StatusHistoryLists"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PlansOfEvents">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="planOfEvents" type="PlanOfEventsMainInfo"/>
    </xs:sequence>
  </xs:complexType>
  <!--DocumentStatus-->
  <xs:complexType name="DocumentStatus">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="isProcessed" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ArchivePlanOfEvents">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="jobExecutionId" type="xs:long"/>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element minOccurs="0" name="parentDocumentId" type="xs:string"/>
      <xs:element name="moId" type="xs:long"/>
      <xs:element name="moName" type="xs:string"/>
      <xs:element name="status" type="xs:string"/>
      <xs:element name="archived" type="xs:boolean"/>
      <xs:element maxOccurs="unbounded" name="planOfEventsDiagnosis" type="Diagnosis"/>
      <xs:element maxOccurs="unbounded" name="observationProgram" type="ObservationProgram"/>
      <xs:element name="createDate" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ObservationProgram">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <!--statusHistoryLists-->
  <xs:complexType name="StatusHistoryLists">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="statusHistory" type="StatusHistory"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="StatusHistory">
    <xs:sequence>
      <xs:element minOccurs="0" name="previousStatus" type="xs:string"/>
      <xs:element name="currentStatus" type="xs:string"/>
      <xs:element name="changeStatusReasonCode" type="xs:string"/>
      <xs:element name="changeStatusReasonDescription" type="xs:string"/>
      <xs:element minOccurs="0" name="removedDiagnosisCode" type="xs:string"/>
      <xs:element minOccurs="0" name="addedDiagnosisCode" type="xs:string"/>
      <xs:element name="created" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKScHJVWe_gQQbvtmLnaM_SVKO_z65wNNtT_9yWwDh1OeQI5AHB</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.2" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKScHJVWe_gQQbvpnTmeYTJS_v2krLC.AXR5yzrqYPxAfMGpbjub4k-"/>
  <!--references-->
  <xs:element name="mail" type="Mail">
    <xs:annotation>
      <xs:documentation>Адрес электронной почты</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="compositionId" type="GUID">
    <xs:annotation>
      <xs:documentation>Идентификатор
                Композиции Think!EHR
                ЕМИАС.СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="simiDocumentId" type="GUID">
    <xs:annotation>
      <xs:documentation>Идентификатор
                Документа СИМИ
                ЕМИАС.СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--abstract types-->
  <xs:complexType abstract="true" name="Base">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
                используемый для описания
                компонентов сущностей,
                владельцеми которых является
                текущий продукт ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор
                    сущности/записи
                    на уровне всего ЕМИАС</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
                используемый для описания сущностей,
                владельцем которых является
                текущий продукт ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base">
        <xs:attribute name="archived" type="xs:boolean" use="required">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
                используемый для описания
                компонентов сущностей,
                владельцами которых являются
                другие продукты ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
                используемый для описания сущностей,
                владельцами которых являются
                другие продукты ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
                используемый для описания типов,
                реализующих справочники ЕМИАС.НСИ.2</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование элемента справочника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiWithCodeBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
                используемый для описания типов,
                реализующих справочники ЕМИАС.НСИ.2, в которых имеется бизнес-код</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Бизнес-код</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="SIMIDocumentBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
                используемый для описания cведений о документе СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="simiDocumentId"/>
      <xs:element minOccurs="0" ref="compositionId"/>
    </xs:sequence>
  </xs:complexType>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="totalItemsCount" type="xs:long" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество элементов (на всех страницах)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки
                        (используются в соответствии с
                        переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--keys-->
  <xs:complexType name="EntityId">
    <xs:annotation>
      <xs:documentation>Идентфикатор сущности,
                непосредственно принадлежащей
                текущему продукту ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ForeignEntityId">
    <xs:annotation>
      <xs:documentation>Идентфикатор
                сущности ЕМИАС,
                внешней по отношнению
                к текущему продукту ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="NsiGlobalId">
    <xs:annotation>
      <xs:documentation>Глобальный идентфикатор
                ЕМИАС.НСИ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase"/>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELkr28OZcnVx.w5rcvVtRY2NRWxN4Gwkp2hxhV2LptNx9_8k32iAHNEdZ.b4Rjl.tr1vj38YWuD3pZJKScHJVWe_gQQbvpnTmeYTJS_v2krLC.AXR5yzrqYPxAfMGpbjub4k-</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="Mail">
    <xs:annotation>
      <xs:documentation>Адрес электронной почты</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:maxLength value="320"/>
      <xs:pattern value=".+@.+\..+"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService</con:endpoint></con:endpoints><con:operation id="659df891-068b-474e-b389-4c24b3e1bde5" isOneWay="false" action="GetCardForm30ProcessingStatus" name="GetCardForm30ProcessingStatus" bindingOperationName="GetCardForm30ProcessingStatus" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="32db92b3-034b-462b-9111-e8ca32dccee4" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:GetCardForm30ProcessingStatusRequest>\r
         <!--1 or more repetitions:-->\r
         <typ:documentId>?</typ:documentId>\r
      </typ:GetCardForm30ProcessingStatusRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/dnpdn/planService/v2/planServicePortType/GetCardForm30ProcessingStatusRequest"/></con:call></con:operation><con:operation id="691f34f2-a5b9-41fa-aa09-e753f0731fe7" isOneWay="false" action="GetCurrentEventStatus" name="GetCurrentEventStatus" bindingOperationName="GetCurrentEventStatus" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="65286b41-bf95-4d8f-9c6e-5b054766f4eb" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:GetCurrentEventStatusRequest>\r
         <!--Optional:-->\r
         <typ:patientId>?</typ:patientId>\r
         <!--Optional:-->\r
         <typ:documentId>?</typ:documentId>\r
         <!--Optional:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <v2:entry key="?">?</v2:entry>\r
         </typ:options>\r
      </typ:GetCurrentEventStatusRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/dnpdn/planService/v2/planServicePortType/GetCurrentEventStatusRequest"/></con:call></con:operation><con:operation id="0a98823e-f615-46a3-95ef-32e749a6627e" isOneWay="false" action="GetEventsByPatient" name="GetEventsByPatient" bindingOperationName="GetEventsByPatient" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d0266daf-ff9b-4e90-95bf-deb094e4dcf9" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:GetEventsByPatientsRequest>\r
         <typ:patientId>?</typ:patientId>\r
         <typ:startDate>?</typ:startDate>\r
         <typ:endDate>?</typ:endDate>\r
         <!--Optional:-->\r
         <typ:archiveEvents>?</typ:archiveEvents>\r
         <typ:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v2:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v2:sortOrder attributeName="?" desceding="false"/>\r
            </v2:sortingOptions>\r
         </typ:pagingOptions>\r
         <!--Optional:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <v2:entry key="?">?</v2:entry>\r
         </typ:options>\r
      </typ:GetEventsByPatientsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/dnpdn/planService/v2/planServicePortType/GetEventsByPatientRequest"/></con:call></con:operation><con:operation id="dbf9b1bc-8c71-40fe-8416-957382140c6c" isOneWay="false" action="GetPlanExtension" name="GetPlanExtension" bindingOperationName="GetPlanExtension" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="2cb2d334-c9cf-41e7-9b0d-4b55c7f6af4a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:GetPlanExtensionRequest>\r
         <!--Optional:-->\r
         <typ:planOfEventsId>?</typ:planOfEventsId>\r
         <!--Optional:-->\r
         <typ:patientId>?</typ:patientId>\r
         <!--Optional:-->\r
         <typ:documentId>?</typ:documentId>\r
         <!--Optional:-->\r
         <typ:archivePlans>?</typ:archivePlans>\r
         <!--Optional:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <v2:entry key="?">?</v2:entry>\r
         </typ:options>\r
      </typ:GetPlanExtensionRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/dnpdn/planService/v2/planServicePortType/GetPlanExtensionRequest"/></con:call></con:operation><con:operation id="1b33d371-4244-4b3d-890f-0bedde8c426b" isOneWay="false" action="GetPlans" name="GetPlans" bindingOperationName="GetPlans" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="a873fe75-536c-4da1-8e38-9dc4e0d1042d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:GetPlansRequest>\r
         <!--Optional:-->\r
         <typ:planOfEventsId>?</typ:planOfEventsId>\r
         <!--Optional:-->\r
         <typ:patientId>?</typ:patientId>\r
         <!--Optional:-->\r
         <typ:documentId>?</typ:documentId>\r
         <!--Optional:-->\r
         <typ:returnActualPlan>?</typ:returnActualPlan>\r
         <!--Optional:-->\r
         <typ:planStartDateFrom>?</typ:planStartDateFrom>\r
         <!--Optional:-->\r
         <typ:planEndDateTo>?</typ:planEndDateTo>\r
         <!--Optional:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <v2:entry key="?">?</v2:entry>\r
         </typ:options>\r
      </typ:GetPlansRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/dnpdn/planService/v2/planServicePortType/GetPlansRequest"/></con:call></con:operation><con:operation id="84748435-e4df-4a7f-9b21-cc633602d486" isOneWay="false" action="GetPlanShort" name="GetPlanShort" bindingOperationName="GetPlanShort" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e4daa77f-ec23-4ad5-bc86-3973fb062089" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:GetPlanShortRequest>\r
         <!--Optional:-->\r
         <typ:planOfEventsId>?</typ:planOfEventsId>\r
         <!--Optional:-->\r
         <typ:patientId>?</typ:patientId>\r
         <!--Optional:-->\r
         <typ:documentId>?</typ:documentId>\r
         <!--Optional:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <v2:entry key="?">?</v2:entry>\r
         </typ:options>\r
      </typ:GetPlanShortRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/dnpdn/planService/v2/planServicePortType/GetPlanShortRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="e255ee73-da6d-44b5-8524-6fd24801f7b1" name="Request 2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">\r
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:GetPlanShortRequest>\r
         <typ:patientId>17965152</typ:patientId>\r
      </typ:GetPlanShortRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/dnpdn/planService/v2/planServicePortType/GetPlanShortRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="75d679c9-c28c-4df1-a3d2-47e575495d14" name="Добавить обработку ошибки"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">\r
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:GetPlanShortRequest>\r
         <typ:patientId>18833793</typ:patientId>\r
      </typ:GetPlanShortRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/dnpdn/planService/v2/planServicePortType/GetPlanShortRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call id="9f3582f8-aaaa-49dc-80e2-e90951993a0a" name="getPlan"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">\r
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:GetPlanShortRequest>\r
         <typ:patientId>16542405</typ:patientId>\r
      </typ:GetPlanShortRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/dnpdn/planService/v2/planServicePortType/GetPlanShortRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite id="0f22821b-8bc9-44e0-8977-0f44d72b4051" name="GET selfControl/{documentId}"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ad7f950d-a4c9-4eb0-afdb-fafdd9b9aacd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение СУДИР токена" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Получение client_Id client_secret (шаг 1)" id="5b0237b9-9804-4bec-8a58-fb152c64a56f"><con:settings/><con:config service="https://login-tech.mos.ru" resourcePath="/sps/oauth/register" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение client_Id client_secret (шаг 1)" id="1acba04c-b558-4b14-94b3-193346516e38" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer jIeAUJjALkvjRcU_wAcASnNNc9ovLxhApSnJfqt2JLcRw_jCyugGxXfMdPVBayeiPj0pmufDqQxmE9ofd8Rnww" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request>{
"software_id": "CSI",
 "device_type": "android_phone",
 "software_statement": "eyJ0eXAiOiJKV1QiLCJibGl0ejpraW5kIjoiU09GVF9TVE0iLCJhbGciOiJSUzI1NiJ9.eyJncmFudF90eXBlcyI6WyJhdXRob3JpemF0aW9uX2NvZGUiLCJjbGllbnRfY3JlZGVudGlhbHMiLCJyZWZyZXNoX3Rva2VuIl0sInNjb3BlIjoib3BlbmlkIGNvbnRhY3RzIHByb2ZpbGUiLCJqdGkiOiJmYjg2NDcwMS1mZGNkLTRjZjctODg1Mi01ZTVmNDY3N2ZjZTYiLCJzb2Z0d2FyZV9pZCI6ImVtaWFzLmluZm8iLCJzb2Z0d2FyZV92ZXJzaW9uIjoiMSIsInJlc3BvbnNlX3R5cGVzIjpbImNvZGUiXSwiaWF0IjoxNjM1MTczODIyLCJpc3MiOiJodHRwczovL2xvZ2luLXRlY2gubW9zLnJ1IiwicmVkaXJlY3RfdXJpcyI6WyJodHRwczovL2VtaWFzLmluZm8vc3VkaXItbW9iaWxlIl0sImF1ZCI6WyJlbWlhcy5pbmZvIl19.glfjJb7PXa7l3O3CMIOrbw_N0Cd5y-kyn5lklyVGLXDAFv8MqC85MfgqEE86buaTAsOwEAqqoTwLpOXodN9ds_q7zcDyLQoDcILHhgg9G3-DoLu9XxpPbaRNFBjzpgZrjKZCGJCSqdjnQJzNv2-oySD_xTKHfXFjy62SITRnUjJCyxhmbrtckjJX6RckCqv3Y3WFgr8nmMcjh-OFgquklokVlo3cfRl4R1JwEe5kiya7ZfqsNhwhx_iaG4SHYICtzYboToAfiLYbJsJ-H89I7FspusOhidkrt23BteNUnjzT3Jx3_OuWauK4aLkaBXQzFVksaoDiuRHmHn6uOzFihQ"
}</con:request><con:originalUri>https://login-tech.mos.ru/sps/oauth/register</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c2013d0e-b347-454d-bc12-f33e5b820ccc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись client_id client_secret" id="8eca40fa-c3ec-437b-a8ad-73ccdea518be"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>client_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение client_Id client_secret (шаг 1)</con:sourceStep><con:sourcePath>$.client_id</con:sourcePath><con:targetType>client_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>client_secret</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение client_Id client_secret (шаг 1)</con:sourceStep><con:sourcePath>$.client_secret</con:sourcePath><con:targetType>client_secret</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Кодирование в base64 + составление запроса" id="9bd7c527-63a8-4931-98fa-3c270fb60597"><con:settings/><con:config><script>import java.util.Base64

def Encoder = Base64.getEncoder()

client_id = testRunner.testCase.getPropertyValue("client_id")
client_secret = testRunner.testCase.getPropertyValue("client_secret")

auth = Encoder.encodeToString((client_id + ":" + client_secret).getBytes())
testRunner.testCase.setPropertyValue("base64",auth)

////////////Составление запроса. Ссылка для авторизации///////////

link = "https://login-tech.mos.ru/sps/oauth/ae?client_id=$client_id&amp;response_type=code&amp;redirect_uri=https://emias.info/sudir-mobile&amp;access_type=offline&amp;scope=openid+profile"
testRunner.testCase.setPropertyValue("link",link)
</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Действия со ссылкой" id="1efbf294-df06-45e5-b90f-4b4a8223b9c5"><con:description>1. Скопировать ссылку из проперти кейса (link)
2. Открыть консоль разработчика в браузере (F12)
3. Вставить скопированную ссылку
4. Ввести логин/пароль и капчу (логин: yar.promo.zapov.a@gmail.com пароль:Hibmavy3Pitnico9 )
5. Нажать войти
</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="delay" name="Delay" id="2613de10-eeca-45fc-81c3-74d3badea3c4"><con:settings/><con:config><delay>50000</delay></con:config></con:testStep><con:testStep type="manualTestStep" name="Подтверждение и копирование кода" id="8b036b00-dc99-4666-8d10-3408fc871201"><con:description>1. Нажать кнопку "Подтвердить"
После получения данного кода есть минута, чтобы отправить следующий запрос
2.Скопировать код из консоли разработчика
3. Вставить код в проперти кейса (code)</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="restrequest" name="Получение токена СУДИР" id="c35248d8-6401-44cf-b58c-7a1b3a4d7c27"><con:settings/><con:config service="https://login-tech.mos.ru" resourcePath="/sps/oauth/te" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение токена СУДИР" id="26f90063-1811-4565-b889-d93e4d165864" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic ${#TestCase#base64}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request/><con:originalUri>https://login-tech.mos.ru/sps/oauth/te</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fd19a4af-366b-4fed-8e55-939a693dbce6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="code" value="${#TestCase#code}"/>
  <con:entry key="grant_type" value="authorization_code"/>
  <con:entry key="redirect_uri" value="https://emias.info/sudir-mobile"/>
</con:parameters><con:parameterOrder><con:entry>code</con:entry><con:entry>redirect_uri</con:entry><con:entry>grant_type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись токена СУДИР" id="40f5920c-9f44-45bd-8d75-7274bf6633ce"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>access_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение токена СУДИР</con:sourceStep><con:sourcePath>$.access_token</con:sourcePath><con:targetType>access_token_Sudir</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Получение данных о пользователе" id="7c4168bb-5812-499f-b091-c64c8c951693"><con:settings/><con:config service="https://login-tech.mos.ru" resourcePath="/sps/oauth/me" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение данных о пользователе" id="e34c85f0-463c-454a-bb0f-a0f8070e9b0a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#access_token_Sudir}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request/><con:originalUri>https://login-tech.mos.ru/sps/oauth/me</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a895841-cf20-40c7-a34a-86a7e5719b50" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись guid" id="9bc0806b-9e21-4614-95c5-5a73175b3368"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>guid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение данных о пользователе</con:sourceStep><con:sourcePath>$.guid</con:sourcePath><con:targetType>guid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Users с доступом к ЭМК" id="e9578836-7550-42c5-b2b4-507a9824a639"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru." resourcePath="/api/internal/3/emc-permissions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Users с доступом к ЭМК" id="7afb73ec-356a-499b-a3dd-566e7c239c30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru./api/internal/3/emc-permissions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ef35c434-94e6-4c3e-b7f2-acf1722fa3ad" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ssoId" value="${#TestCase#guid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ssoId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>client_id</con:name><con:value>dyn~emias.info~691166c4-4604-4a08-86a4-cb5d7d63c401</con:value></con:property><con:property><con:name>client_secret</con:name><con:value>1jvAFOeaeExnoX2</con:value></con:property><con:property><con:name>base64</con:name><con:value>ZHlufmVtaWFzLmluZm9+NjkxMTY2YzQtNDYwNC00YTA4LTg2YTQtY2I1ZDdkNjNjNDAxOjFqdkFGT2VhZUV4bm9YMg==</con:value></con:property><con:property><con:name>link</con:name><con:value>https://login-tech.mos.ru/sps/oauth/ae?client_id=dyn~emias.info~691166c4-4604-4a08-86a4-cb5d7d63c401&amp;response_type=code&amp;redirect_uri=https://emias.info/sudir-mobile&amp;access_type=offline&amp;scope=openid+profile</con:value></con:property><con:property><con:name>code</con:name><con:value>awdGWj0b5KRk_-PzWFRRqxegkXomSUnom3-DyPitdpkoJA51UREjEfWnq-dWsVdsBn2JqkQ_CEpAmRwJgHW8RcwlTF4ivk7SHXr0wI0A5jM</con:value></con:property><con:property><con:name>access_token</con:name><con:value>Q-F5iygkgbwX82WAwlrw9VZtIRJo23IeTI8M_38uh19jZWJhYThlZC0yNThhLTQ2ZWYtYTZiZC1lZjEzZDdiZWM1MjI</con:value></con:property><con:property><con:name>guid</con:name><con:value>83294bda-5f39-44c3-a5e6-bb0d348a794b</con:value></con:property></con:properties></con:testCase><con:testCase id="208b3fba-98d4-4a3f-84ec-702ef20792fc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение токена X-Access-JWT" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="LK login" id="561288b5-7ca8-4769-8f5f-2fcb7a3e78f8"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru." resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK login" id="cb9ad2ba-4d09-47c2-873b-6eef37766e6d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "${#TestCase#user_login}"
}</con:request><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api/user/auth/1/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7dea13c2-f571-4463-990b-3ecd9aa02719" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="X-Environment" value="stage" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>X-Environment</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение attemp-access" id="55f6ee39-53ac-4db3-aac2-c043bd7b3c1e"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def httpResponseHeaders = context.testCase.testSteps["LK login"].testRequest.response.responseHeaders
testRunner.testCase.setPropertyValue("x-otp", httpResponseHeaders.'x-otp'[0])

ResponseJson = context.expand('${LK login#Response}')
attempt_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("attempt_token", attempt_token.attempt_token)</script></con:config></con:testStep><con:testStep type="restrequest" name="LK confirm login" id="c6346323-a26b-4e3b-868f-11e30ef32cdb"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru." resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK confirm login" id="3827440b-59d7-4e3f-82f2-7e31523ea53c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "otp_code": "${#TestCase#x-otp}",
  "refresh_token_ttl_seconds": 0,
  "access_token_ttl_seconds": 0,
  "attempt_token": "${#TestCase#attempt_token}"
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение X-Access-JWT" id="2cc62eaa-b264-4a29-8bf7-fa090828ee71"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${LK confirm login#Response}')
access_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.testSuite.setPropertyValue("X-Acces-JWT", access_token.access_token)</script></con:config></con:testStep><con:properties><con:property><con:name>X-Acces-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NzUzMzkwODIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiI3NDEyZTE4YS1mNWEyLTQwNWUtOWYxZi1lYjQ3NGYwOGM5ZTIiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoib2ltR2VpUTR2UzBXRVN4WTNCU1BaSnhORkZNMytDTnlQM3MyUlZaZWN0WnM5Y0VDRHBiYUU5cHFzWFp6VytOQ2hPV05QRmQ1Z250RGZuSUEvUENwQmFRZWprWTBuYlhSRytkdTlCUlBPNHFVeHlCTndseTFIcFl0MnhBVjhjc0NtY3pkcERYWittc25sdUIvQVBuMnNjYVVVY0RwUldZWnc4T0hpdCtkV0I2Wm9NY0EzUlVmN2Q2aW5RdlRZUlNYV01NZWdDby9ES2MwZkVhcGZjanN3aENtR3lZeWFGbi9neHNHUlVGR2NIT0l4ZmVMZDg1MjFralQxcVdCQ0tONFhsbXFXVXJvei9TcmFMdXNETElXaUMzekRXclQ0YjZVTjdJdHBib2JxdlpzcWlDMUR0ZE1qek91VDdoU2ZqSVV0NmtycmgwMXBUTmlmdmFySWludzVBPT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIyIn0.tErsDZnHLK_fRt4HdkfkwINs36B8xWvA83eass0DajZ4SD7TwyhcvUkMivKjeJMFb4dovHm0YPrRjmFiU9EpLLgpRlzLcObREcALzc1SrFPa3lnsHKlG765QBch5up6SIeroX8mgH_CbW56Bt0Ux7acgWzV9hyu8N1Z8QNNSC-P593nrR5RPEIYl0VYl1BVT6ZciiVKn0mz7oSR-c_PZwtja_yik-ejOUf7VqPPgZs1gJGxnU34LZxYzMggbvvVxM7nqrFsWnaeXe2bCwEfTT5HLtAisUGheaoJQvXNRor46Zc1zQrL62OlVkXrkrqTqIxNP4SAOJbNconIg7dlqItAr8Qpv_YprjH2XizNXodcYr9C_TYwcv37Va_-JZLejQwVDlNpwjm-B5ZhDkIat3vcszZaQgerwJe4AFA-xlfHb2eh0usHoMXCsdMozSodvzxEqDggCHGJVXCAEuTi9lRAIqOmiogQcFvjztD-cXsFhCvpzkNk0IrKuq_LzZoGPxo3p86bKHjtFsSXcOujIimULEFh_e0rSe2_eLDzhYbq6NrL7HOku5Q2PV8WJ7_TxQB4CmJVJIBgV2g1fPXGVz0BKHrTzKq3WaAwI0Ri2Jo7taW5M_fpmbwxwBSAeBf5kblNkpn6Dg6TLWVDWFigO5Mgl4yeYN7N4JB6HdgrB8ZI</con:value></con:property><con:property><con:name>user_login</con:name><con:value>yar.promo.zapov.a@gmail.com</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6ImJjY2MwYmM5LWEyMTctNDA3YS1iNTYzLWNkNjljYTJiNjVlZSIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY3NTMyNTIwNSwic3ViIjoiYmI1ZWI4NTgtZWY3Ni00Mjk1LTk4NTktYzlkNmEyNTFiMzUwIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoieXVYYmdjOFpDSXNGWURiUG5qamQvaFZVRkZLcTlSeWNjdTZ2R2JyTWhvZFc3aVZNdXY5TmgrU2dSbEMyenNKZWVTaG5TbGZtVGpNSEY3VVZ5eHJ3eW95cVN6MWd0ZXVxNjh2eDU4YTV6YlVsMENIaHZqdDM0WU5EZ3ZhRXlkVUczNlpMSFUya0hWMDhUQ3BWVVBrZzhzRllUTWt4dEpCOXYzeEE5eVo4MDlFYk8wd3dBZDVUVGtMUElFTTh3VFFwNWdNcFhIWktSakxaQjZtWUVoajhQUzdXckJ5RVpjWkUzNVVjTkZteXFZUjFjMWxYYWJvOTE3bnlaa1k3RFBBMENNMnQydzBRNGx3RDlaNm5MaWdSZVJFNnl0ajEwSGdRL3o4ZUpZWHdvT0JhMkJWZXFFODl4bDlWeHdxN3ZWTWk4T3lXUnBGSVl3ZVowQXhRclZQR1lRPT0ifQ.hO5-p9JRYQC7-GRs3hdgI9c9TFLP5kCDbhgEG_QSIaeFg9knOThNCP5-_J2m28RaUU4LIzOi_JXIZXTzSZOIRqCzXqIqYiVsjBRtolgYOoOma_gr4mDBqwiQ9rKbuXPG2jyInUX_sV-Zn2XE2p-3xzXHj1dTxJTOJF-yU_4GFVj8__Vf6W2ovJX2bsjToZix_g18Lm5K0GkN39WcvZHofb3A-p_8X_6woHRHa9cKZP9-AWffLiEvxnDSoip5bUCK88-G3USOOnMVvQxgLq5PphMXFE7WQ8vUiwAebHZ4XDdVrFZmFjbNN7kwGVvpkOupC9RmtNqYZbV4BCViF2qVSh6MThDsz6O4NkfMkGhLRyytysAqVK5z4xSZ4vLeTXZWGNlAya1nRTU8OvmTwXsuIApxcp3qJ5yWRulq5YkbBo9n2cvYeFwy2MxOEeN0AsltvlVq4iKdSwUZXDk1PtAmTZi8Go84SNWMpYeZcYbAIk95VtkdA5fQWJfOTkaK42IoEkcUTn8PCOTHeELEVyJdRwcRtQg5wHcfmrVmdNs_mY9YisKgb7CseV3e4EdziPtR4SKGDFIV2tXaIBIivu5AC0NI6bTt1RMb0kTEK1_4B2BrWwgKV4cfOsF5apO7kTZfFreI3i_7_ohz8rxgV2yDA-blBIFuus3t2_fMO2cd9ZA</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>19674</con:value></con:property></con:properties></con:testCase><con:testCase id="2ccf1c33-1f2d-40a4-a35d-92efa3e693b8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение анкеты самоконтроля" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="POST selfControl" id="6077394c-dcb6-424e-b684-13a1f29449e3"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/selfControl" methodName="SelfControl 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST selfControl" id="6295fd71-859f-4a8b-95ee-843476147093" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Acces-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#TestSuite#access_token_Sudir}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "answers": [
    {
      "answerCode": [
        "Yes"
      ],
      "questionCode": "hadChangedChestPain"
    },
    {
      "answerCode": [
        "Yes"
      ],
      "questionCode": "hadWeightLoss"
    },
    {
      "answerCode": [
        "Yes"
      ],
      "questionCode": "hadBlackMushyDefecation"
    },
    {
      "answerCode": [
        "No"
      ],
      "questionCode": "hadWeightGainLastMonth"
    },
    {
      "answerCode": [
        "No"
      ],
      "questionCode": "hasIncreasedBloodPressure"
    },
    {
      "answerCode": [
        "No"
      ],
      "questionCode": "hasIntenseThirst"
    },
    {
      "answerCode": [
        "No"
      ],
      "questionCode": "hadBleeding"
    },
    {
      "answerCode": [
        "No"
      ],
      "questionCode": "hasChestPain"
    },
    {
      "answerCode": [
        "Yes"
      ],
      "questionCode": "newComplaintsOrAmplification"
    },
    {
      "answerCode": [
        "EDEMA"
      ],
      "questionCode": "complaints"
    }
  ]
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/selfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="253bd7c2-7cd2-470e-a68c-c76b33d6bc3b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="patientId" value="${#TestCase#ehrId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetFormsHistory" id="4f6570af-ee34-4589-93c7-4db5fbb234d7"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru." resourcePath="/api/2/forms/history" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetFormsHistory" id="ae77ea24-0472-4e8d-8583-c61df76cb109" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestSuite#X-Acces-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru./api/2/forms/history</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0fc00ab5-6d7d-406a-b481-e79d7d9b8b87" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="formType" value="self_control"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>formType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение documentId" id="7b78d013-7c65-40f7-80a1-909897b07aac"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def Response = context.expand('${GetFormsHistory#Response}') //парсинг ответа от ИНФО
def slurperJson = new JsonSlurper()
def LK = slurperJson.parseText(Response)

def size = LK.documentVersions.size()

def documentId = LK.documentVersions[size-1].documentId

testRunner.testCase.setPropertyValue("documentId",documentId)
</script></con:config></con:testStep><con:testStep type="restrequest" name="GETselfControl" id="746796f3-a9bd-4565-a4fd-11302a950f99"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/selfControl/{documentId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GETselfControl" id="204227fb-86da-416c-9e8e-caa3972601df" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Acces-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#TestSuite#access_token_Sudir}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/selfControl/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b71c2fc-72b7-451f-a752-23906f120f49" name="Status Codes = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="14b1f390-d650-40b3-9ca7-a0208775839f" name="Содержит answersOnQuestions"><con:configuration><token>answersOnQuestions</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="documentId" value="${#TestCase#documentId}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>documentId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг параметров ответа" id="a5e695e2-c801-42a5-8184-ea3b8f78475a"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def Response = context.expand('${GETselfControl#Response}') //парсинг ответа от ИНФО
def slurperJson = new JsonSlurper()
def selfControl = slurperJson.parseText(Response)

assert selfControl.payload.answersOnQuestions[0].question == "Боли или неприятные ощущения в грудной клетке (за грудиной, в левой стороне грудной клетки спереди или левой руке) при подъеме по лестнице, при ходьбе или в покое";
assert selfControl.payload.answersOnQuestions[1].question == "Повышение артериального давления выше 140/90 мм рт. ст. при условии регулярного приема терапии назначенной врачом";
assert selfControl.payload.answersOnQuestions[2].question == "Кровотечения (носовые, из десен, геморроидальные, гематурия, кровохарканье, гематомы и др.)";
assert selfControl.payload.answersOnQuestions[3].question == "Увеличение частоты и/или изменение характера боли в грудной клетке (за грудиной, в левой стороне грудной клетки спереди или левой руке) при подъеме по лестнице, при ходьбе или в покое в течение последнего месяца";
assert selfControl.payload.answersOnQuestions[4].question == "Увеличение веса за последний месяц при нормальном аппетите";
assert selfControl.payload.answersOnQuestions[5].question == "Сильная жажда";
assert selfControl.payload.answersOnQuestions[6].question == "Уменьшение веса при нормальном аппетите";
assert selfControl.payload.answersOnQuestions[7].question == "Кашицеобразный черный «дёгтеобразный» стул";
assert selfControl.payload.answersOnQuestions[8].question == "Новые жалобы или усиление существующих";

assert selfControl.payload.answersOnQuestions[0].answer == ["Да"];
assert selfControl.payload.answersOnQuestions[1].answer == ["Да"];
assert selfControl.payload.answersOnQuestions[2].answer == ["Да"];
assert selfControl.payload.answersOnQuestions[3].answer == ["Да"];
assert selfControl.payload.answersOnQuestions[4].answer == ["Да"];
assert selfControl.payload.answersOnQuestions[5].answer == ["Да"];
assert selfControl.payload.answersOnQuestions[6].answer == ["Да"];
assert selfControl.payload.answersOnQuestions[7].answer == ["Да"];
assert selfControl.payload.answersOnQuestions[8].answer == ["Отёки"];</script></con:config></con:testStep><con:properties><con:property><con:name>documentId</con:name><con:value>7ce48801-c1d3-46ed-b967-2d4a29dc8602</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>8d075820-b3cb-4fbe-9666-3106776652d2</con:value></con:property></con:properties></con:testCase><con:testCase id="8cb67578-b120-4272-ab72-3104c5303492" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1. Проверка пользователя не пройдена (ACCESS_DENIED)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GETselfControl" id="8da940d4-7b47-4458-bfdd-77854c78843d"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/selfControl/{documentId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GETselfControl" id="204227fb-86da-416c-9e8e-caa3972601df" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Acces-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#TestSuite#access_token_Sudir}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/selfControl/selfControl/7ce48801-c1d3-46ed-b967-2d4a29dc8602</con:originalUri><con:assertion type="JsonPath Match" id="43e40166-293b-4b0f-b4c1-6128489288cc" name="code = ACCESS_DENIED"><con:configuration><path>$error.code</path><content>ACCESS_DENIED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e63f3c4-2d10-4276-b6da-99400c19dca2" name="description = Доступ к запрошенной медкарте отсутствует"><con:configuration><path>$error.description</path><content>Доступ к запрошенной медкарте отсутствует</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e3c81cb-e858-4a51-a3f3-4cb5eee98709" name="type = BUSINESS"><con:configuration><path>$error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="documentId" value="7ce48801-c1d3-46ed-b967-2d4a29dc8602"/>
  <con:entry key="ehrId" value="8d075820-b3cb-4fbe-9666-3106776652d"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>documentId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b8bbe715-fcdc-4fc5-988e-414aac942014" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1. Не прошла авторизация в СУДИР (SUDIR_AUTHENTICATION_ERROR)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GETselfControl" id="84eaf7fa-f846-4182-afd1-8f0ef011c681"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/selfControl/{documentId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GETselfControl" id="204227fb-86da-416c-9e8e-caa3972601df" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Acces-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="1"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/selfControl/selfControl/7ce48801-c1d3-46ed-b967-2d4a29dc8602</con:originalUri><con:assertion type="JsonPath Match" id="e66c474e-17a4-4286-ba2d-6cfe202574c8" name="code = SUDIR_AUTHENTICATION_ERROR"><con:configuration><path>$error.code</path><content>SUDIR_AUTHENTICATION_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69059c30-d776-4a50-a2ab-ffe55d300489" name="description = При попытке авторизоваться в СУДИР по следующему токену 1 была получена ошибка"><con:configuration><path>$error.description</path><content>При попытке авторизоваться в СУДИР по следующему токену 1 была получена ошибка</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ebcb34fa-909d-4423-8101-b5331fcfff14" name="type = BUSINESS"><con:configuration><path>$error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="documentId" value="7ce48801-c1d3-46ed-b967-2d4a29dc8602"/>
  <con:entry key="ehrId" value="8d075820-b3cb-4fbe-9666-3106776652d2"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>documentId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="42d6eac4-92ab-465a-bd13-2b994709f870" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС3. Документ с указанным идентификатором не найден (DOCUMENT_NOT_FOUND)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GETselfControl" id="2f0f93f7-f4b2-4de1-81f1-c8746e496a2e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/selfControl/{documentId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GETselfControl" id="204227fb-86da-416c-9e8e-caa3972601df" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Acces-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#TestSuite#access_token_Sudir}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/selfControl/selfControl/7ce48801-c1d3-46ed-b967-2d4a29dc8602</con:originalUri><con:assertion type="JsonPath Match" id="43e40166-293b-4b0f-b4c1-6128489288cc" name="code = DOCUMENT_NOT_FOUND"><con:configuration><path>$error.code</path><content>DOCUMENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e63f3c4-2d10-4276-b6da-99400c19dca2" name="description = Документ с id 7ce48801-c1d3-46ed-b967-2d4a29dc860 не найден"><con:configuration><path>$error.description</path><content>Документ с id 7ce48801-c1d3-46ed-b967-2d4a29dc860 не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e3c81cb-e858-4a51-a3f3-4cb5eee98709" name="type = BUSINESS"><con:configuration><path>$error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="documentId" value="7ce48801-c1d3-46ed-b967-2d4a29dc860"/>
  <con:entry key="ehrId" value="8d075820-b3cb-4fbe-9666-3106776652d2"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>documentId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="96bf1645-fe6f-4794-85b6-a6027ef7153a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС6. Пациент с невалидным permissionType (LK_SERVER_ERROR)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GETselfControl" id="d35b9d42-ffd7-43f5-876b-85ddf3867da6"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/selfControl/{documentId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GETselfControl" id="204227fb-86da-416c-9e8e-caa3972601df" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Acces-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#TestSuite#access_token_Sudir}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/selfControl/selfControl/7ce48801-c1d3-46ed-b967-2d4a29dc8602</con:originalUri><con:assertion type="JsonPath Match" id="43e40166-293b-4b0f-b4c1-6128489288cc" name="code = LK_SERVER_ERROR"><con:configuration><path>$error.code</path><content>LK_SERVER_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e63f3c4-2d10-4276-b6da-99400c19dca2" name="description = Ошибка вызова сервиса ЛК"><con:configuration><path>$error.description</path><content>Ошибка вызова сервиса ЛК</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e3c81cb-e858-4a51-a3f3-4cb5eee98709" name="type = TECHNICAL"><con:configuration><path>$error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="documentId" value="7ce48801-c1d3-46ed-b967-2d4a29dc8602"/>
  <con:entry key="ehrId" value="bd7b0124-98bf-46bc-80a3-1c5ab8ac18f7"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>documentId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>X-Acces-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NzU0MDgwMDYsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiIwNDA4YzJmZi1jNzI5LTRhNWItYTczZC1hMDcwM2NmYTMxYzEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoieGk4bWNRNWRacGtjOXJhWHMvVVp6SzdNTzZ4M0k4bWFHaW0rb25zOXA1UUR0TFlYa1hNLzFybVVQdTBoQXhncjlGbll0MXkwbFVNU3lRK1BGRWd4MXd1SDRrN2hSN3JvcGdmYUNsdGZVVjVGSWczeGdnOWtNc25pUlBWZ05XSXA4eEQ4aU94NEFVQytCTndTOHVPTTBTWWlGYzk1UHh2cXZXdVk1eHFmSzhOdDg2RDVScFAyZEI2VmErd0NpVEF4UVVGcUlacThROFNraVY5d3ZXc0lRYTVnNFNLbEcxTjdVbjkxOVJETGRmZ2gva0RveXlndFB1dWdSRFB6Qm8weXQyWFBnNlNkOW5xZWpTNTFGL2VwOXRFME5pSUtyMGloMmlaK2NaQWh3T0RXOGNYTkgvYjlqYm9ieFRMKzVwUFA4djhIZVZwdldnaHRMNkRQTy9leU1nPT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIyIn0.H5W7i8wTpdPRikY9DyTSNRzoGOXotRx2r7dY3WefyoCS1aeDPdHwV1GzCXzbG59vzAU0X0tsSt08QSiiN6idrbFgGTlZP7E0UJXCUCQpSSAo_leuKoxLCNVlch1mtfK-LU92Nl68Sa9RQ2nuXFsrXFLjxnELTUxp-HFXNhtgIKczqAWP7XmGY40zsoPfxQH4q7yCRqXzGW8I_pwgQzNlY60paquIxt03Efj9yiGznsKhon89w-gSjm3LX-q4q0RfUqXraKVa3CIhHupq9LEyny5xID0QN6Cstt83mF6j2ASOKKIO3sXvthX4uRr0V6oIhtko5Fce5AIDLNtxNuCmnKmwHsZLHoYRBiucTlhf7f6iRlunShM8c910E5adolnMvO3lJ-b-NN8lG3DXq3eDvyeNxhtawnQNfrkYxmEYHH5pw3lOCa34Y0wrt-VRhiz_bQ-fhLSrBLRbMszZZPrh3Ik6y76ggZQN7rSpOdoTmF2SUiPhTcRCZWx7LNnRpE3YNnHD4ETt-4l1s_jw8OAm3ii9LjRs18tGrX5JsTIEyno4NetFGfdwEYRo4qW3CUcQyltjlfEhRlIxlsBLxPYCqrObLgDHDnUv2iIQXGGwQNKoxv33XSrX6dZEGLhvsuu7ZmeDUSq0pb1_fG-BDVu1JyKMVsIbvAkVhuXrr8hAGDA</con:value></con:property><con:property><con:name>access_token_Sudir</con:name><con:value>YS8ksb6WTt2kAZ6u05zvXvbEf8fFzf-Ljvyr-K2uGMg0ZWU1OWMzMi02NmYxLTRlYTUtODA3My1iNThkZmU5MDM4ZDY</con:value></con:property></con:properties></con:testSuite><con:testSuite id="65fb71a4-ab01-4fa1-a445-b9abca4c6089" name="GET checkSelfControl"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="779d246c-9b36-417b-8233-0a6a085ee1b6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Анкета самоконтроля со списком диагнозов" searchProperties="true"><con:settings/><con:testStep type="manualTestStep" name="Добавить проперти" id="7717a408-5755-4392-9aee-a7543d6145ae"><con:description>1. Получить СУДИР токен - записать в проперти тест сьюта EI-Token
2. Получить access-токен - записать в проперти тест сьюта X-Access-JWT
2. Получить patientId, у которого есть внкета самокотроля и диагнозы в ПДН  - записать в проперти тест кейса patientId (25517322, 24107262)</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="request" name="GetPlanShort" id="d72b0995-68ed-4b61-ae13-9961440f21aa"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="GetFormsHistory" id="1f5f781c-e276-43b9-83dd-f1f7f2d3b3cd"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru." resourcePath="/api/2/forms/history" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetFormsHistory" id="ae77ea24-0472-4e8d-8583-c61df76cb109" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#Project#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru./api/2/forms/history</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0b41d4d6-8e69-40f7-989f-ea9afc50301f" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="81031747-7832-47a4-95f8-d9b735258a5e" name="Содержит versionAuthor"><con:configuration><token>versionAuthor</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="742f3842-faff-484d-9286-42c82d39b4d1" name="Содержит eventStartDate"><con:configuration><token>eventStartDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="formType" value="self_control"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>formType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl" id="045df81a-8f74-43de-ac25-407d88b675ee"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c5f63ab5-21a6-4c4f-9e82-298a97dcd7b9" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="74e1d895-f728-495b-ab28-53110da0c4e2" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value=""/>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="Mock-lk" value=""/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг диагнозов с БД и ПДН + проверка анкеты самоконтроля" id="3b90ed67-9b2f-42c3-8d5f-55ab0cbd302d"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql

def Response = context.expand('${GET checkSelfControl#Response}') //парсинг ответа от ИНФО
def slurperJson = new JsonSlurper()
def selfControl = slurperJson.parseText(Response)

def GetPlanShortResponse = context.expand('${GetPlanShort#Response}')
GetPlanShort = new XmlSlurper().parseText(GetPlanShortResponse)

def emiasInfoFullDbConnection = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
def emiasInfoDBDriver = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDBDriver")
def sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
def sqlResult = sql.rows("select code_mkb10 from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false")
sqlResult = sqlResult.toString()
log.info(sqlResult)

def countGetPlanShort = GetPlanShort.Body.GetPlanShortResponse.result.diagnosis.size()
log.info(countGetPlanShort)

def countSelfControl = selfControl.payload.selfControlForm.diagnosisCode.size()
log.info (countSelfControl)

//записываем в массив все диагнозы из ответа ПДН, которые содержатся в БД ЕМИАС.ИНФО
def massiv = []
for (int i = 0; i&lt;countGetPlanShort; i++){
	def containsdiagnosisCodeInDB = sqlResult.contains("[code_mkb10:" +  GetPlanShort.Body.GetPlanShortResponse.result.diagnosis[i].diagnosisCode + "]")
	if (containsdiagnosisCodeInDB == true)
	{
		massiv[i] = GetPlanShort.Body.GetPlanShortResponse.result.diagnosis[i].diagnosisCode
	}
}

log.info(massiv)

//проверяем что все диагнозы в ответе ИНФО содержатся в массиве

for (int i = 0; i&lt;countSelfControl; i++){
	def containsdiagnosisCodeInDB = sqlResult.contains(selfControl.payload.selfControlForm.diagnosisCode[i])
	assert containsdiagnosisCodeInDB == true
	log.info("диагноз " + selfControl.payload.selfControlForm.diagnosisCode[i] + " проверен")
}

assert selfControl.payload.selfControlForm.available == true
log.info("проверен параметр available")
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка параметров показателей дневников здоровья на диагнозы" id="aa8102c5-707c-410a-ae31-45f3c115050d"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def Response = context.expand('${GET checkSelfControl#Response}') //парсинг ответа от ИНФО
def slurperJson = new JsonSlurper()
def selfControl = slurperJson.parseText(Response)

def bloodPressure = ["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9",
"I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9",
"I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9",
"E78", "E78.0", "E78.2",
"I50", "I50.0", "I50.1", "I50.9",
"E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9",
"I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64",
"I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8" ]

def stenocardiaAttack = ["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9",
"I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]

def heartRate = ["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9",
"I50", "I50.0", "I50.1", "I50.9",
"I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64",
"I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]

def heartRateRhythm = ["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9",
"I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64",
"I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]

def bloodSaturation = ["J44", "J44.0", "J44.1", "J44.8", "J44.9"]

def bloodGlucose = ["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]

def weight = ["E78", "E78.0", "E78.2",
"I50", "I50.0", "I50.1", "I50.9",
"E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]

def count = selfControl.payload.selfControlForm.diagnosisCode.size()
log.info (count)

//проверяем что диагноз есть в маппинге bloodPressure

def bloodPressureContainsInResponse = false

for (int i=0; i<count; i++){
  if(bloodPressure.contains(selfControl.payload.selfControlForm.diagnosisCode[i])){
    bloodPressureContainsInResponse = true
    }
}

log.info(bloodPressureContainsInResponse)

//проверяем что диагноз есть в маппинге stenocardiaAttack

def stenocardiaAttackContainsInResponse = false

for (int i=0; i<count; i++){
  if(stenocardiaAttack.contains(selfControl.payload.selfControlForm.diagnosisCode[i])){
    stenocardiaAttackContainsInResponse = true
    }
}

log.info(stenocardiaAttackContainsInResponse)

//проверяем что диагноз есть в маппинге heartRate

def heartRateContainsInResponse = false

for (int i=0; i<count; i++){
  if(heartRate.contains(selfControl.payload.selfControlForm.diagnosisCode[i])){
    heartRateContainsInResponse = true
    }
}

log.info(heartRateContainsInResponse)

//проверяем что диагноз есть в маппинге heartRateRhythm

def heartRateRhythmContainsInResponse = false

for (int i=0; i<count; i++){
  if(heartRateRhythm.contains(selfControl.payload.selfControlForm.diagnosisCode[i])){
    heartRateRhythmContainsInResponse = true
    }
}

log.info(heartRateRhythmContainsInResponse)

//проверяем что диагноз есть в маппинге bloodSaturation

def bloodSaturationContainsInResponse = false

for (int i=0; i<count; i++){
  if(bloodSaturation.contains(selfControl.payload.selfControlForm.diagnosisCode[i])){
    bloodSaturationContainsInResponse = true
    }
}

log.info(bloodSaturationContainsInResponse)

//проверяем что диагноз есть в маппинге bloodGlucose

def bloodGlucoseContainsInResponse = false

for (int i=0; i<count; i++){
  if(bloodGlucose.contains(selfControl.payload.selfControlForm.diagnosisCode[i])){
    bloodGlucoseContainsInResponse = true
    }
}

log.info(bloodGlucoseContainsInResponse)

//проверяем что диагноз есть в маппинге weight

def weightContainsInResponse = false

for (int i=0; i<count; i++){
  if(weight.contains(selfControl.payload.selfControlForm.diagnosisCode[i])){
    weightContainsInResponse = true
    }
}

log.info(weightContainsInResponse)

def countIndicatorMeasurements = selfControl.payload.indicatorMeasurements.size()
log.info (countIndicatorMeasurements)

def IndexForIndicatorMeasurements

//проверяем параметры индикатора bloodPressure с маппингом

if (bloodPressureContainsInResponse == true){
	for (int i=0; i<countIndicatorMeasurements; i++){
		if (selfControl.payload.indicatorMeasurements[i].code == "bloodPressure"){
			IndexForIndicatorMeasurements = i
		}
	}
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].code == "bloodPressure"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].title == "Артериальное давление"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].aiMeasurementInputEnabled == true
	log.info("bloodPressure проверено")
}

//проверяем параметры индикатора stenocardiaAttack с маппингом

if (stenocardiaAttackContainsInResponse == true){
	for (int i=0; i<countIndicatorMeasurements; i++){
		if (selfControl.payload.indicatorMeasurements[i].code == "stenocardiaAttack"){
			IndexForIndicatorMeasurements = i
		}
	}
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].code == "stenocardiaAttack"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].title == "Приступы стенокардии"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].aiMeasurementInputEnabled == false
	log.info("stenocardiaAttack проверено")
}

//проверяем параметры индикатора heartRate с маппингом

if (heartRateContainsInResponse == true){
	for (int i=0; i<countIndicatorMeasurements; i++){
		if (selfControl.payload.indicatorMeasurements[i].code == "heartRate"){
			IndexForIndicatorMeasurements = i
		}
	}
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].code == "heartRate"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].title == "Пульс"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].aiMeasurementInputEnabled == false
	log.info("heartRate проверено")
}

//проверяем параметры индикатора heartRateRhythm с маппингом

if (heartRateRhythmContainsInResponse == true){
	for (int i=0; i<countIndicatorMeasurements; i++){
		if (selfControl.payload.indicatorMeasurements[i].code == "heartRateRhythm"){
			IndexForIndicatorMeasurements = i
		}
	}
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].code == "heartRateRhythm"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].title == "Ритмичность пульса"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].aiMeasurementInputEnabled == false
	log.info("heartRateRhythm проверено")
}


//проверяем параметры индикатора bloodSaturation с маппингом

if (bloodSaturationContainsInResponse == true){
	for (int i=0; i<countIndicatorMeasurements; i++){
		if (selfControl.payload.indicatorMeasurements[i].code == "bloodSaturation"){
			IndexForIndicatorMeasurements = i
		}
	}
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].code == "bloodSaturation"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].title == "Кислород в крови"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].aiMeasurementInputEnabled == false
	log.info("bloodSaturation проверено")
}

//проверяем параметры индикатора bloodGlucose с маппингом

if (bloodGlucoseContainsInResponse == true){
	for (int i=0; i<countIndicatorMeasurements; i++){
		if (selfControl.payload.indicatorMeasurements[i].code == "bloodGlucose"){
			IndexForIndicatorMeasurements = i
		}
	}
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].code == "bloodGlucose"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].title == "Глюкоза в крови"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].aiMeasurementInputEnabled == false
	log.info("bloodGlucose проверено")
}

//проверяем параметры индикатора weight с маппингом

if (weightContainsInResponse == true){
	for (int i=0; i<countIndicatorMeasurements; i++){
		if (selfControl.payload.indicatorMeasurements[i].code == "weight"){
			IndexForIndicatorMeasurements = i
		}
	}
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].code == "weight"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].title == "Вес"
	assert selfControl.payload.indicatorMeasurements[IndexForIndicatorMeasurements].aiMeasurementInputEnabled == false
    log.info("weight проверено")
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>24107262</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property></con:properties></con:testCase><con:testCase id="0dc300b4-c997-4320-b703-d1c7bceb958a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Анкета самоконтроля со списком диагнозов, которых нет в маппинге" searchProperties="true"><con:settings/><con:testStep type="manualTestStep" name="Добавить проперти" id="a340afca-911b-4bf2-bf63-8859a22877e9"><con:description>1. Получить СУДИР токен - записать в проперти тест сьюта EI-Token
2. Получить access-токен - записать в проперти тест сьюта X-Access-JWT</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="manualTestStep" name="Создать мок" id="320ef265-8521-44cb-a266-f4073fe5c211"><con:description><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
   <soap:Body>
      <GetPlanShortResponse xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <result>
            <ns2:id>2240</ns2:id>
            <ns2:jobExecutionId>9647338191</ns2:jobExecutionId>
            <ns2:diagnosis>
               <ns2:diagnosisCode>I25.2 (Основной диагноз)</ns2:diagnosisCode>
               <ns2:diagnosisTitle>I25.2 - Перенесенный в прошлом инфаркт миокарда</ns2:diagnosisTitle>
            </ns2:diagnosis>
            <ns2:diagnosis>
               <ns2:diagnosisCode>K26.7 (Основной + пустой диагноз)</ns2:diagnosisCode>
               <ns2:diagnosisTitle>K26.7 - Язва двенадцатиперстной кишки хроническая без кровотечения или прободения</ns2:diagnosisTitle>
            </ns2:diagnosis>
            <ns2:startTime>2022-06-01T12:00:00.000+03:00</ns2:startTime>
            <ns2:endTime>2023-06-01T12:00:00.000+03:00</ns2:endTime>
            <ns2:documentId>309440d6-6468-44b4-ba85-34cb3ce0bb01</ns2:documentId>
            <ns2:parentDocumentId>null</ns2:parentDocumentId>
            <ns2:moId>10145778</ns2:moId>
            <ns2:moName>Государственное бюджетное учреждение здравоохранения города Москвы "Диагностический клинический центр № 1 Департамента здравоохранения города Москвы"</ns2:moName>
            <ns2:status>CANCELED</ns2:status>
            <ns2:archived>false</ns2:archived>
            <ns2:planOfEventsDiagnosis>
               <ns2:diagnosisCode>I25.2 (Основной диагноз)</ns2:diagnosisCode>
               <ns2:diagnosisTitle>I25.2 - Перенесенный в прошлом инфаркт миокарда</ns2:diagnosisTitle>
            </ns2:planOfEventsDiagnosis>
            <ns2:planOfEventsDiagnosis>
               <ns2:diagnosisCode>K26.7 (Основной + пустой диагноз)</ns2:diagnosisCode>
               <ns2:diagnosisTitle>K26.7 - Язва двенадцатиперстной кишки хроническая без кровотечения или прободения</ns2:diagnosisTitle>
            </ns2:planOfEventsDiagnosis>
            <ns2:eventsPeriod>
               <ns2:startTime>2022-06-01T12:00:00.000+03:00</ns2:startTime>
               <ns2:endTime>2022-07-01T12:00:00.000+03:00</ns2:endTime>
               <ns2:event>
                  <ns2:id>26838</ns2:id>
                  <ns2:eventStatus>EXPIRED</ns2:eventStatus>
                  <ns2:archived>false</ns2:archived>
                  <ns2:assignment>
                     <ns2:assignmentLaboratory>
                        <ns2:id>10985</ns2:id>
                        <ns2:laboratoryTitle>Общий клинический анализ крови (общий анализ + СОЭ); микроскопическое исследование мазка крови при выявлении патологии</ns2:laboratoryTitle>
                        <ns2:status>UNFINISHED</ns2:status>
                        <ns2:examinationPassedInExternalMO>false</ns2:examinationPassedInExternalMO>
                     </ns2:assignmentLaboratory>
                  </ns2:assignment>
                  <ns2:diagnoses>
                     <ns2:diagnosisCode>K26.7</ns2:diagnosisCode>
                     <ns2:diagnosisTitle>K26.7 - Язва двенадцатиперстной кишки хроническая без кровотечения или прободения</ns2:diagnosisTitle>
                  </ns2:diagnoses>
                  <ns2:diagnoses>
                     <ns2:diagnosisCode>I25.2 (Основной диагноз)</ns2:diagnosisCode>
                     <ns2:diagnosisTitle>I25.2 - Перенесенный в прошлом инфаркт миокарда</ns2:diagnosisTitle>
                  </ns2:diagnoses>
                  <ns2:referralCreated>false</ns2:referralCreated>
                  <ns2:destinationType>Назначение в текущую МО</ns2:destinationType>
                  <ns2:passedBeforePDNCreated>false</ns2:passedBeforePDNCreated>
                  <ns2:eventExecutionType>Добавленное</ns2:eventExecutionType>
               </ns2:event>
               <ns2:event>
                  <ns2:id>26839</ns2:id>
                  <ns2:eventStatus>EXPIRED</ns2:eventStatus>
                  <ns2:archived>false</ns2:archived>
                  <ns2:assignment>
                     <ns2:assignmentConsultation>
                        <ns2:id>6866</ns2:id>
                        <ns2:specializationTitle>Гастроэнтерология</ns2:specializationTitle>
                        <ns2:status>UNFINISHED</ns2:status>
                        <ns2:examinationPassedInExternalMO>false</ns2:examinationPassedInExternalMO>
                        <ns2:assigmentToControlCheckUp>false</ns2:assigmentToControlCheckUp>
                     </ns2:assignmentConsultation>
                  </ns2:assignment>
                  <ns2:diagnoses>
                     <ns2:diagnosisCode>K26.7</ns2:diagnosisCode>
                     <ns2:diagnosisTitle>K26.7 - Язва двенадцатиперстной кишки хроническая без кровотечения или прободения</ns2:diagnosisTitle>
                  </ns2:diagnoses>
                  <ns2:diagnoses>
                     <ns2:diagnosisCode>I25.2 (Основной диагноз)</ns2:diagnosisCode>
                     <ns2:diagnosisTitle>I25.2 - Перенесенный в прошлом инфаркт миокарда</ns2:diagnosisTitle>
                  </ns2:diagnoses>
                  <ns2:referralCreated>false</ns2:referralCreated>
                  <ns2:destinationType>Назначение в текущую МО</ns2:destinationType>
                  <ns2:passedBeforePDNCreated>false</ns2:passedBeforePDNCreated>
                  <ns2:eventExecutionType>Добавленное</ns2:eventExecutionType>
               </ns2:event>
               <ns2:event>
                  <ns2:id>26840</ns2:id>
                  <ns2:eventStatus>EXPIRED</ns2:eventStatus>
                  <ns2:archived>false</ns2:archived>
                  <ns2:assignment>
                     <ns2:assignmentInstrumental>
                        <ns2:id>7303</ns2:id>
                        <ns2:mainDiagnsoticTitle>Эзофагогастродуоденоскопия</ns2:mainDiagnsoticTitle>
                        <ns2:status>UNFINISHED</ns2:status>
                        <ns2:examinationPassedInExternalMO>false</ns2:examinationPassedInExternalMO>
                     </ns2:assignmentInstrumental>
                  </ns2:assignment>
                  <ns2:diagnoses>
                     <ns2:diagnosisCode>K26.7</ns2:diagnosisCode>
                     <ns2:diagnosisTitle>K26.7 - Язва двенадцатиперстной кишки хроническая без кровотечения или прободения</ns2:diagnosisTitle>
                  </ns2:diagnoses>
                  <ns2:diagnoses>
                     <ns2:diagnosisCode>I25.2 (Основной диагноз)</ns2:diagnosisCode>
                     <ns2:diagnosisTitle>I25.2 - Перенесенный в прошлом инфаркт миокарда</ns2:diagnosisTitle>
                  </ns2:diagnoses>
                  <ns2:referralCreated>false</ns2:referralCreated>
                  <ns2:destinationType>Назначение в текущую МО</ns2:destinationType>
                  <ns2:passedBeforePDNCreated>false</ns2:passedBeforePDNCreated>
                  <ns2:eventExecutionType>Добавленное</ns2:eventExecutionType>
               </ns2:event>
               <ns2:event>
                  <ns2:id>26841</ns2:id>
                  <ns2:eventStatus>EXPIRED</ns2:eventStatus>
                  <ns2:archived>false</ns2:archived>
                  <ns2:drugsEvent>
                     <ns2:id>1688</ns2:id>
                     <ns2:status>PLANNED</ns2:status>
                  </ns2:drugsEvent>
                  <ns2:diagnoses>
                     <ns2:diagnosisCode>K26.7</ns2:diagnosisCode>
                     <ns2:diagnosisTitle>K26.7 - Язва двенадцатиперстной кишки хроническая без кровотечения или прободения</ns2:diagnosisTitle>
                  </ns2:diagnoses>
                  <ns2:diagnoses>
                     <ns2:diagnosisCode>I25.2 (Основной диагноз)</ns2:diagnosisCode>
                     <ns2:diagnosisTitle>I25.2 - Перенесенный в прошлом инфаркт миокарда</ns2:diagnosisTitle>
                  </ns2:diagnoses>
                  <ns2:referralCreated>false</ns2:referralCreated>
                  <ns2:destinationType>Назначение в текущую МО</ns2:destinationType>
                  <ns2:passedBeforePDNCreated>false</ns2:passedBeforePDNCreated>
                  <ns2:eventExecutionType>Добавленное</ns2:eventExecutionType>
               </ns2:event>
            </ns2:eventsPeriod>
         </result>
      </GetPlanShortResponse>
   </soap:Body>
</soap:Envelope>]]></con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="request" name="GetPlanShort" id="24c5d27e-9bfd-4c2a-adc6-78d2d54784cf"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl" id="5a24e57f-7064-4fd8-a49a-d75809611c17"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="Mock-pdn" value="${#TestCase#Mock-pdn}"/>&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#TestSuite#EI-Token}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c5f63ab5-21a6-4c4f-9e82-298a97dcd7b9" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value=""/>
  <con:entry key="patientId" value="${#TestCase#patientId2}"/>
  <con:entry key="Mock-lk" value=""/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг диагнозов с БД и ПДН + проверка анкеты самоконтроля" id="3f5135e7-3a24-4304-b3bd-eaa5d3f402d5"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql

def Response = context.expand('${GET checkSelfControl#Response}') //парсинг ответа от ИНФО
def slurperJson = new JsonSlurper()
def selfControl = slurperJson.parseText(Response)

def GetPlanShortResponse = context.expand('${GetPlanShort#Response}')
GetPlanShort = new XmlSlurper().parseText(GetPlanShortResponse)

def emiasInfoFullDbConnection = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
def emiasInfoDBDriver = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDBDriver")
def sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
def sqlResult = sql.rows("select code_mkb10 from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false")
sqlResult = sqlResult.toString()
log.info(sqlResult)

def countGetPlanShort = GetPlanShort.Body.GetPlanShortResponse.result.diagnosis.size()
log.info(countGetPlanShort)

//записываем в массив все диагнозы из ответа ПДН, которые содержатся в БД ЕМИАС.ИНФО
def massiv = []
for (int i = 0; i&lt;countGetPlanShort; i++){
	def containsdiagnosisCodeInDB = sqlResult.contains("[code_mkb10:" +  GetPlanShort.Body.GetPlanShortResponse.result.diagnosis[i].diagnosisCode + "]")
	if (containsdiagnosisCodeInDB == true)
	{
		massiv[i] = GetPlanShort.Body.GetPlanShortResponse.result.diagnosis[i].diagnosisCode
	}
}

log.info(massiv)

//проверяем что все диагнозы не совпадают с БД

assert massiv == []


assert selfControl.payload.selfControlForm.available == true
log.info("проверен параметр available")
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>15511762342</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>4976b8fe-c876-4e48-a63d-aea8ff3e7130</con:value></con:property><con:property><con:name>Mock-pdn</con:name><con:value>https://7ae4b9d2-c131-46ba-bb50-238afa4264b5.mock.pstmn.io</con:value></con:property><con:property><con:name>patientId2</con:name><con:value>31110819</con:value></con:property></con:properties></con:testCase><con:testCase id="048948f4-f528-4445-8eb9-91e250234b84" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Анкета самокотроля без ПДН" searchProperties="true"><con:settings/><con:testStep type="manualTestStep" name="Добавить проперти" id="09da6c49-3d25-487a-bd32-f3f9a66e3c92"><con:description>1. Получить СУДИР токен - записать в проперти тест сьюта EI-Token
2. Получить access-токен - записать в проперти тест сьюта X-Access-JWT
2. Получить patientId, у которого есть анкета самокотроля, но нет ПДН  - записать в проперти тест кейса patientId (19184405)</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="request" name="GetPlanShort" id="7790e8b5-2d99-4bf7-a2ec-82343a7c8249"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>500</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится E002"><con:configuration><token>E002</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="GetFormsHistory" id="1c54b9e5-6576-4464-80e3-f107446691c5"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru." resourcePath="/api/2/forms/history" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetFormsHistory" id="ae77ea24-0472-4e8d-8583-c61df76cb109" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru./api/2/forms/history</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0b41d4d6-8e69-40f7-989f-ea9afc50301f" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="81031747-7832-47a4-95f8-d9b735258a5e" name="Содержит versionAuthor"><con:configuration><token>versionAuthor</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="742f3842-faff-484d-9286-42c82d39b4d1" name="Содержит eventStartDate"><con:configuration><token>eventStartDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="formType" value="self_control"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>formType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl" id="f0bff92c-c149-470b-808b-b0865051b8d3"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#TestSuite#EI-Token}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c5f63ab5-21a6-4c4f-9e82-298a97dcd7b9" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ecd6ed51-9cac-4ed1-8ded-1f6e01d55fdf" name="available = true"><con:configuration><path>$payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value=""/>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="Mock-lk" value=""/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>19184405</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>119defa4-7921-4e24-a88a-c5098e70d995</con:value></con:property></con:properties></con:testCase><con:testCase id="7fecf8bd-b18a-452d-9061-48304a080d3f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Незаполненная анкета самокотроля" searchProperties="true"><con:settings/><con:testStep type="manualTestStep" name="Добавить проперти" id="638d1575-5af2-4a09-9965-858bb538af29"><con:description>1. Получить СУДИР токен - записать в проперти тест сьюта EI-Token
2. Получить access-токен - записать в проперти тест сьюта X-Access-JWT
2. Получить patientId, у которого нет анкеты самоконтроля  - записать в проперти тест кейса patientId (17192837)</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="request" name="GetPlanShort" id="88e8cb94-fb3e-472e-9e09-91c150926fbf"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>500</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится E002"><con:configuration><token>E002</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="GetFormsHistory" id="111ed898-5b70-4ce4-8ebb-0bb53fde238e"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru." resourcePath="/api/2/forms/history" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetFormsHistory" id="ae77ea24-0472-4e8d-8583-c61df76cb109" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru./api/2/forms/history</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0b41d4d6-8e69-40f7-989f-ea9afc50301f" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c8a90c1-a534-4cc1-8a40-8bf741f91545" name="documentVersions пустой"><con:configuration><path>$documentVersions</path><content>[]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="formType" value="self_control"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>formType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl" id="5efe862f-702d-4d5a-bd0a-e0f50cd81ee5"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#TestSuite#EI-Token}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c5f63ab5-21a6-4c4f-9e82-298a97dcd7b9" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ecd6ed51-9cac-4ed1-8ded-1f6e01d55fdf" name="available = true"><con:configuration><path>$payload.selfControlForm.available</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value=""/>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="Mock-lk" value=""/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>17192837</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>71c59b3d-e8f4-45f7-8455-81c59455ab75</con:value></con:property></con:properties></con:testCase><con:testCase id="4032a64c-8000-40f0-8c5f-49ec355f992d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1. Ошибка проверки доступов в ЭМКе" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl ( SUDIR_TOKEN_EXPIRED)" id="94cf512a-2ae5-4caa-abb0-a38618f574db"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl ( SUDIR_TOKEN_EXPIRED)" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="A-Xc37iRpGrbhqU5bJ8fJwIIDz4ZKtRhc8zZWZxjm3YwZTJlMzg1YS00MmQ1LTQ5YTItYTc1Ni1hYTljZGY2ZTQ0YmM"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c5f63ab5-21a6-4c4f-9e82-298a97dcd7b9" name="Код ответа = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="89633cb2-257d-4635-b081-c80b81190092" name="code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a0cde5e-dcd0-4980-828d-4ffa93faad86" name="description = Время действия токена в СУДИР истекло"><con:configuration><path>$error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a0cde5e-dcd0-4980-828d-4ffa93faad86" name="type = BUSINESS"><con:configuration><path>$error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value=""/>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="Mock-lk" value=""/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl (ACCESS_DENIED)" id="499f06b9-00e2-4de8-ba79-cca94c0913cb"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl (ACCESS_DENIED)" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#TestSuite#EI-Token}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c5f63ab5-21a6-4c4f-9e82-298a97dcd7b9" name="Код ответа = 403"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed4c9e91-5ef8-4f77-b98e-d30a0afb493a" name="code = ACCESS_DENIED"><con:configuration><path>$error.code</path><content>ACCESS_DENIED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed4c9e91-5ef8-4f77-b98e-d30a0afb493a" name="description = Доступ к запрошенной медкарте отсутствует"><con:configuration><path>$error.description</path><content>Доступ к запрошенной медкарте отсутствует</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed4c9e91-5ef8-4f77-b98e-d30a0afb493a" name="type = BUSINESS"><con:configuration><path>$error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value=""/>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="Mock-lk" value=""/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2410434</con:value></con:property></con:properties></con:testCase><con:testCase id="d28c4954-bae8-41dc-a518-3c31433b6597" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС2. Информация о диагнозах ПДН пациента не получена" searchProperties="true"><con:settings/><con:testStep type="manualTestStep" name="Текст мока" id="c245c0cd-1924-4dc1-b305-632b0a57f6dc"><con:description><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
   <soap:Body>
      <soap:Fault>
         <soap:Code>
            <soap:Value>soap:Receiver</soap:Value>
         </soap:Code>
         <soap:Reason>
            <soap:Text xml:lang="en">[ERROR] E000:  Извините, во время работы системы произошла ошибка. Попробуйте позже: patientId: 222, planOfEventsId: null, documentId: null 
Parameters:
 patientId:  222 planOfEventsId:  null documentId:  null</soap:Text>
         </soap:Reason>
         <soap:Detail>
            <fault type="BUSINESS" xsi:type="BusinessFault" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns2="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/faults/">
               <messages>
                  <message type="ERROR">
                     <code>E000</code>
                     <message>Извините, во время работы системы произошла ошибка. Попробуйте позже: patientId: 222, planOfEventsId: null, documentId: null</message>
                     <parameters>
                        <parameter key="patientId">222</parameter>
                        <parameter key="planOfEventsId"/>
                        <parameter key="documentId"/>
                     </parameters>
                  </message>
               </messages>
               <hasErrors>true</hasErrors>
            </fault>
         </soap:Detail>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>]]></con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl" id="be60a10c-b48b-4203-92b9-ee474d9d7562"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="Mock-pdn" value="${#TestCase#Mock-pdn}"/>&#13;
  &lt;con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#TestSuite#EI-Token}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c5f63ab5-21a6-4c4f-9e82-298a97dcd7b9" name="Код ответа = 503"><con:configuration><codes>503</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed4c9e91-5ef8-4f77-b98e-d30a0afb493a" name="code = PDN_ERROR"><con:configuration><path>$error.code</path><content>PDN_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed4c9e91-5ef8-4f77-b98e-d30a0afb493a" name="description = Ошибка получения программы диспансерного наблюдения"><con:configuration><path>$error.description</path><content>Ошибка получения программы диспансерного наблюдения</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed4c9e91-5ef8-4f77-b98e-d30a0afb493a" name="TECHNICAL"><con:configuration><path>$error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value=""/>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="Mock-lk" value=""/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>24107262</con:value></con:property><con:property><con:name>Mock-pdn</con:name><con:value>https://7ae4b9d2-c131-46ba-bb50-238afa4264b5.mock.pstmn.io</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE3MDIxMTQ4OTAsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJjMzdlYWU5ZC1hOTJhLTRmOTMtODlhYy05MjI4NjU3MjM2YWEiLCJzaWQiOiI3YmYzOTVkOC0yMWU2LTQ3MzgtYjMyNC1lZjQxMGFjZTFiNTUiLCJwaG9uZSI6Ijc5MjY1MjA5MjA3Iiwic3NvX2lkIjoiSWtuYjI4T2xjTjdPUWxWMjVUc3Jkc3NBZVNWZ2dhV3U2Ujc5eWhCQ2wvRGtHZ05xS3YxU0thcDRJMEdaUDNPRm5pdEVJc1hiRWhaaHlQY21JZ0xsTjFVcWozaXN0VFFkNkkyU2RmcFRMVjRmekdIUzA0bFQ5MC9yOVpIbEw3M0lFYWJnS0hDOGpxQlBsVy9LVXh4amVQc1ZIRXFVQi8wLzlBRWQra3FFTGdEdDU3L1orM2JQTGd6SExHcnBlTEVrR21YUTRTQXR1ZmpBTmVJUWF5bDRPYVNLWVBUNzFvYmZhRTZKWEhhMUJaZk1DT0tSRjYrTUtuQ2REcHBVTFpCV2NocmgzR3Vjb3htdEFHUlhOak9ZMDFYZEs3UVdwT3RqdDZGdUdteVlUR1VaUXFDZkRNUVNzOEwzUEpJeW4xVUwxMWlRTGpaVkdrdGNKRlpnT3FNa1p3PT0iLCJlbWFpbCI6IiIsImZpcnN0X25hbWUiOiJcdTA0MmZcdTA0M2RcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzOFx1MDQ0NVx1MDQzMFx1MDQzOVx1MDQzYlx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIxOTgyLTA0LTA5IiwiYW1yIjpbXX0.kLv_BUftW7N9rn4NMw0P7mJOJkLZNHkEzNWa7_kd42yEs9eVqDtktrsJUtrKPp66YycxkEu35NTBFKwR5bnAC31-TivK-t8MUN7KK_MlGmsiJ0RwydPndDXnnGk_ICzabSJWKcGP_UhjQ414CagpfBfsN00gdoE-p11XDcHuFLyyKh6FuAImUV8kONh0yPWbVjaDlkdZ0wR7m2vmtq_7aBW1jPsfsgjiZkDj4Hdg4OTAtJRyjvNWluCp4zQ3onbamneNUgHQeC_lkxlxWI1XwHblD4NnziL1JD9gj_USf3wptD5LmXvm5FmhpSHSNaoe96MxpTSXMp70o2XYUROzRt1aqGxmIIwDDsqb3F_j2LWTycHqU_8JkMI-kyvhSywxNX0f2MlJEaSJU8BL6TssRywpK9mRuoh3nC-T2Y-afOKWmYcoUtsYRAchoWuAkzQgu5pEKcuVYOm7BvTZOGZrPAuvZUz4zAW7fnK7fAhS4zTExlrvrR8y5BB4p-K-a7xzza5PuGoQ_RrDMh-TTa6Zdudcyl5HsEFnK0x5mBJTYkhRb8xFEqSpthHd77gjfLc0hubWkWPvrfpb7NjcwliT9F3zLSmlhrawsbZ1X4gl4x859M7LaRdtEvWF92jxpK_1msJbEY7OfOsY1CH07PEmSu62jFB1nsRz0LQsJYWzjwA</con:value></con:property><con:property><con:name>EI-Token</con:name><con:value>jfUITzO7XT3Jfqug67QMbtwUQslJ8egVWNAsZDxrRhQ1M2YyNTQ4My1jNmJiLTQ2M2UtYmM4Mi03Y2M1MmU4Zjg3MjI</con:value></con:property></con:properties></con:testSuite><con:testSuite id="3a3a30d3-9799-4fff-8e1c-b048c4b823b3" name="Сохранить токены из глобалных свойств в свойства проекта"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="81a9fd4a-0cf3-4479-8363-170f2cabb4aa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Сохранить токены в свойства проекта" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Сохранить" id="998678d5-97be-4719-b912-1e74cabb3740"><con:settings/><con:config><script>def sudirToken =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "sudirToken" )
def accessToken =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "X-Access-JWT" )
def refreshToken =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "refreshToken" )
def refreshAccess =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "refresh-X-Access-JWT" )
def base64 =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "base64" )
def guid =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "guid" )

testRunner.testCase.testSuite.project.setPropertyValue("sudirToken", sudirToken)
testRunner.testCase.testSuite.project.setPropertyValue("X-Access-JWT", accessToken)
testRunner.testCase.testSuite.project.setPropertyValue("refreshToken", refreshToken)
testRunner.testCase.testSuite.project.setPropertyValue("refresh-X-Access-JWT", refreshAccess)
testRunner.testCase.testSuite.project.setPropertyValue("base64", base64)
testRunner.testCase.testSuite.project.setPropertyValue("guid", guid)</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="c75520f0-a321-4bf1-ae81-47cd206e5e95" name="GET checkSelfControl v3"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ba1a867a-263f-428a-8cbe-ae1117db53d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Посчитать дату 18 лет назад и больше" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Посчитать и записать в свойства сьюта" id="94e7e79b-a371-4a44-8aae-a132b96c2751"><con:settings/><con:config><script>import java.time.*

def today =LocalDate.now()

eighteenYearsAgo=today.minusYears(18)
eighteenYearsWithoutOneDayAgo=eighteenYearsAgo.plusDays(1)

testRunner.testCase.testSuite.setPropertyValue("eighteenYearsAgo", eighteenYearsAgo.toString())
testRunner.testCase.testSuite.setPropertyValue("eighteenYearsWithoutOneDayAgo", eighteenYearsWithoutOneDayAgo.toString())</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3624a2a3-29e0-4b0a-bfc7-50674298ccb5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверить маппинг диагнозов" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить маппинг диагнозов" id="3994bb72-3015-4755-82e4-59be1e704fb7"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
// функция отбора подходящих диагнозов (шаг 1.2)
def selectdiagnosesFromDB(List pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false").code
//	log.info "sqlResult "+sqlResult[0].getClass() 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it.toString()
	}
	return diagnoses
}

// функция отбора диагнозов из маппинга 
def mapDiagnoses(List diagnoses, def mapping){
	version =testRunner.testCase.testSuite.getPropertyValue("version").toInteger()
//	selectedDiagnoses=[]
	selectedIndicatorMeasurements=[]
	mapping.each{
		diagnoses.each{d ->
			if(it.diagnoses.contains(d)){
//				log.info d
//				if(!selectedDiagnoses.contains(d))selectedDiagnoses << d
				newElem	=[]
				switch (version) {
					    case 2:
					         newElem= [title: it.name]
					        break;
					    case 3:
					       newElem= [title: it.name , code: it.code , aiMeasurementInputEnabled : it.voice]
					        break;
					     default:
					       testRunner.fail("в свойстах сьюта некорректная версия метода")
					}
				if(!selectedIndicatorMeasurements.contains(newElem))selectedIndicatorMeasurements << newElem
			}
		}
	}
//	selectedElems=[diagnoses:selectedDiagnoses, indicatorMeasurements:selectedIndicatorMeasurements]
//	return selectedElems
	return selectedIndicatorMeasurements
}


// функция проверки равенства списков
def compareLists(List list1, List list2, String name){
	list1.sort()
	list2.sort()
	List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки "+name+" имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором ="+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки "+name+" имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В "+name+" в списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В "+name+" в списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков "+name+" одинаковые"
        if(errors)  testRunner.fail("При сравнении списков "+name+" были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
}

//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
pdnResponse =testRunner.testCase.testSuite.getPropertyValue("pdnResponse")
pdnParsedResponse = new XmlSlurper().parseText(pdnResponse)
pdnCodes=pdnParsedResponse.Body.GetPlanShortResponse.result.diagnosis.diagnosisCode
infoResponse =testRunner.testCase.testSuite.getPropertyValue("infoResponse")
def infoParsedResponse = new JsonSlurper().parseText(infoResponse)
infoPayload=infoParsedResponse.payload

diagnoses=selectdiagnosesFromDB(pdnCodes.toList())
log.info diagnoses
indicatorMeasurements=mapDiagnoses( diagnoses,  mapping)
if(indicatorMeasurements){
	compareLists(indicatorMeasurements, infoPayload.indicatorMeasurements, "indicatorMeasurements")
}
else{
	if(infoPayload.indicatorMeasurements) testRunner.fail("В ответе обнаружен Список показателей дневника здоровья, хотя его быть не должно. Данные в ответе: "+infoPayload.indicatorMeasurements)
}
if(diagnoses){
	infoDiagnoses=infoPayload.selfControlForm.diagnosisCode
	log.info "infoDiagnoses "+infoDiagnoses
	log.info "diagnoses "+diagnoses
	compareLists(diagnoses, infoDiagnoses, "diagnoses")
}
else{
	if(infoPayload.selfControlForm.diagnosisCode)    testRunner.fail("В ответе обнаружены коды диагнозов, хотя их быть не должно. Дагнозы в ответе: "+infoPayload.selfControlForm.diagnosisCode)
}
]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ed4cdc6a-c904-4ea4-a4e4-a1db8a05b01c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Вернуть нормальные значения справочника в бд" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Вернуть нормальные значения справочника" id="1a110b12-8935-407f-a08f-97fb38ad6402"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
sql = Sql.newInstance(connection)

query=""" INSERT INTO d_diagnosis_mkb10_pdn (id, title_mkb10, code_mkb10, archived_dispensary_observation_diagnosis, actual_mkb10, title_dispensary_observation_program, id_dispensary_observation_program, archived_dispensary_observation_program, is_deleted) VALUES
(158427045,'Острый инфаркт миокарда','I21',true,true,'Инфаркт миокарда','158396648',false,false),
(158427046,'Гипертензивная болезнь сердца [гипертоническая болезнь с преимущественным поражением сердца]','I11',true,true,'Артериальная гипертония','158396651',false,false),
(158427047,'Язва желудка','K25',true,true,'Язвенная болезнь','158396642',false,false),
(158427048,'Хроническая ишемическая болезнь сердца','I25',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(158427049,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек','I13',true,true,'Артериальная гипертония','158396651',false,false),
(158427050,'Фибрилляция и трепетание предсердий','I48',true,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(158427051,'Язва двенадцатиперстной кишки','K26',true,true,'Язвенная болезнь','158396642',false,false),
(158427052,'Повторный инфаркт миокарда','I22',true,true,'Инфаркт миокарда','158396648',false,false),
(158427053,'Сердечная недостаточность','I50',true,true,'Хроническая сердечная недостаточность','158396643',false,false),
(158427054,'Инфаркт мозга','I63',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(158427055,'Другая хроническая обструктивная легочная болезнь','J44',true,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(158427056,'Вторичная гипертензия','I15',true,true,'Артериальная гипертония','158396651',false,false),
(158427057,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением почек','I12',true,true,'Артериальная гипертония','158396651',false,false),
(158427058,'Эссенциальная [первичная] гипертензия','I10',true,true,'Артериальная гипертония','158396651',false,false),
(158427059,'Сахарный диабет 2 типа','E11',true,true,'Сахарный диабет','158396646',false,false),
(158427060,'Стенокардия [грудная жаба]','I20',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(158427061,'Нарушения обмена липопротеидов и другие липидемии','E78',true,true,'Гиперхолестеринемия','158396650',false,false),
(162377828,'Сахарный диабет 2 типа','E11',false,true,'Сахарный диабет','158396646',false,false),
(162377829,'Инсулиннезависимый сахарный диабет с поражениями глаз','E11.3',false,true,'Сахарный диабет','158396646',false,false),
(162377830,'Субарахноидальное кровоизлияние из каротидного синуса и бифуркации','I60.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377831,'Внутричерепное кровоизлияние (нетравматическое) неуточненное','I62.9',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377832,'Синдром инсульта в стволе головром мозга (I60-I67+)','G46.3',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377833,'Острый инфаркт миокарда неуточненный','I21.9',false,true,'Инфаркт миокарда','158396648',false,false),
(162377834,'Повторный инфаркт нижней стенки миокарда','I22.1',false,true,'Инфаркт миокарда','158396648',false,false),
(162377835,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца без (застойной) сердечной недостаточности','I11.9',false,true,'Артериальная гипертония','158396651',false,false),
(162377836,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением почек','I12',false,true,'Артериальная гипертония','158396651',false,false),
(162377837,'Повторный инфаркт миокарда неуточненной локализации','I22.9',false,true,'Инфаркт миокарда','158396648',false,false),
(162377838,'Другие сосудистые синдромы головного мозга при цереброваскулярных болезнях (I60-I67+)','G46.8',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377839,'Атеросклеротическая болезнь сердца','I25.1',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377840,'Реноваскулярная гипертензия','I15.0',false,true,'Артериальная гипертония','158396651',false,false),
(162377841,'Внутримозговое кровоизлияние в полушарие кортикальное','I61.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377842,'Сердечная недостаточность','I50',false,true,'Хроническая сердечная недостаточность','158396643',false,false),
(162377843,'Хроническая обструктивная легочная болезнь с обострением неуточненная','J44.1',false,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(162377844,'Внутримозговое кровоизлияние в полушарие неуточненное','I61.2',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377845,'Аневризма и расслоение коронарной артерии','I25.4',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377846,'Хроническая обструктивная легочная болезнь неуточненная','J44.9',false,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(162377847,'Внутримозговое кровоизлияние неуточненное','I61.9',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377848,'Перенесенный в прошлом инфаркт миокарда','I25.2',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377849,'Язва желудка, неуточненная как острая или хроническая, без кровотечения или прободения','K25.9',true,true,'Язвенная болезнь','158396642',false,false),
(162377850,'Язва двенадцатиперстной кишки','K26',true,true,'Язвенная болезнь','158396642',false,false),
(162377851,'Гипертензия вторичная по отношению к другим поражениям почек','I15.1',false,true,'Артериальная гипертония','158396651',false,false),
(162377852,'Бессимптомная ишемия миокарда','I25.6',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377853,'Вторичная гипертензия','I15',false,true,'Артериальная гипертония','158396651',false,false),
(162377854,'Синдром средней мозговой артерии (I66.0+)','G46.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377855,'Субарахноидальное кровоизлияние из задней соединительной артерии','I60.3',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377856,'Чисто чувствительный лакунарный синдром (I60-I67+)','G46.6',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377857,'Внутримозговое кровоизлияние в полушарие субкортикальное','I61.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377858,'Повторный инфаркт миокарда','I22',false,true,'Инфаркт миокарда','158396648',false,false),
(162377859,'Хроническая ишемическая болезнь сердца','I25',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377860,'Последствия инсульта, не уточненные как кровоизлияние или инфаркт мозга','I69.4',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377861,'Чистая гиперхолестеринемия','E78.0',false,true,'Гиперхолестеринемия','158396650',false,false),
(162377862,'Другая хроническая обструктивная легочная болезнь','J44',false,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(162377863,'Острый трансмуральный инфаркт передней стенки миокарда','I21.0',false,true,'Инфаркт миокарда','158396648',false,false),
(162377864,'Острый трансмуральный инфаркт миокарда неуточненной локализации','I21.3',false,true,'Инфаркт миокарда','158396648',false,false),
(162377865,'Атеросклеротическая сердечно-сосудистая болезнь, так описанная','I25.0',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377866,'Инфаркт мозга, вызванный эмболией мозговых артерий','I63.4',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377867,'Инфаркт мозга, вызванный неуточненной закупоркой или стенозом мозговых артерий','I63.5',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377868,'Другие формы острой ишемической болезни сердца','I24',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377869,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек неуточненная','I13.9',false,true,'Артериальная гипертония','158396651',false,false),
(162377870,'Нарушения обмена липопротеидов и другие липидемии','E78',false,true,'Гиперхолестеринемия','158396650',false,false),
(162377871,'Последствия других и неуточненных цереброваскулярных болезней','I69.8',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377872,'Инсульт, не уточненный как кровоизлияние или инфаркт','I64',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377873,'Постоянная форма фибрилляции предсердий','I48.1',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377874,'Инфаркт мозга','I63',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377875,'Синдром мозжечкового инсульта (I60-I67+)','G46.4',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377876,'Инфаркт мозга, вызванный эмболией прецеребральных артерий','I63.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377877,'Стенокардия неуточненная','I20.9',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377878,'Другие лакунарные синдромы (I60-I67+)','G46.7',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377879,'Нетравматическое экстрадуральное кровоизлияние','I62.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377880,'Инсулиннезависимый сахарный диабет с другими уточненными осложнениями','E11.6',false,true,'Сахарный диабет','158396646',false,false),
(162377881,'Субарахноидальное кровоизлияние из базилярной артерии','I60.4',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377882,'Хроническая форма фибрилляции предсердий','I48.2',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377883,'Последствия инфаркта мозга','I69.3',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377884,'Внутримозговое кровоизлияние','I61',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377885,'Язва двенадцатиперстной кишки неуточненная как острая или хроническая, без кровотечения или прободения','K26.9',true,true,'Язвенная болезнь','158396642',false,false),
(162377886,'Другие формы стенокардии','I20.8',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377887,'Множественные и двусторонние синдромы церебральных артерий','G45.2',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377888,'Субарахноидальное кровоизлияние из средней мозговой артерии','I60.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377889,'Чисто двигательный лакунарный синдром (I60-I67+)','G46.5',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377890,'Инфаркт мозга, вызванный неуточненной закупоркой или стенозом прецеребральных артерий','I63.2',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377891,'Повторный инфаркт передней стенки миокарда','I22.0',false,true,'Инфаркт миокарда','158396648',false,false),
(162377892,'Синдром задней мозговой артерии (I66.2+)','G46.2',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377893,'Пароксизмальная форма фибрилляции предсердий','I48.0',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377894,'Острый трансмуральный инфаркт миокарда других уточненных локализаций','I21.2',false,true,'Инфаркт миокарда','158396648',false,false),
(162377895,'Преходящая слепота','G45.3',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377896,'Последствия субарахноидального кровоизлияния','I69.0',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377897,'Субарахноидальное кровоизлияние из позвоночной артерии','I60.5',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377898,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением почек без почечной недостаточности','I12.9',false,true,'Артериальная гипертония','158396651',false,false),
(162377899,'Синдром передней мозговой артерии (I66.1+)','G46.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377900,'Стенокардия с документально подтвержденным спазмом','I20.1',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377901,'Острый трансмуральный инфаркт нижней стенки миокарда','I21.1',false,true,'Инфаркт миокарда','158396648',false,false),
(162377902,'Субарахноидальное кровоизлияние неуточненное','I60.9',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377903,'Повторный инфаркт миокарда другой уточненной локализации','I22.8',false,true,'Инфаркт миокарда','158396648',false,false),
(162377904,'Смешанная гиперлипидемия','E78.2',false,true,'Гиперхолестеринемия','158396650',false,false),
(162377905,'Гипертензия вторичная по отношению к эндокринным нарушениям','I15.2',false,true,'Артериальная гипертония','158396651',false,false),
(162377906,'Нестабильная стенокардия','I20.0',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377907,'Гипертензивная болезнь сердца [гипертоническая болезнь с преимущественным поражением сердца]','I11',false,true,'Артериальная гипертония','158396651',false,false),
(162377908,'Транзиторная глобальная амнезия','G45.4',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377909,'Острая ишемическая болезнь сердца неуточненная','I24.9',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377910,'Инфаркт мозга неуточненный','I63.9',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377911,'Язва двенадцатиперстной кишки хроническая без кровотечения или прободения','K26.7',true,true,'Язвенная болезнь','158396642',false,false),
(162377912,'Сердечная недостаточность неуточненная','I50.9',false,true,'Хроническая сердечная недостаточность','158396643',false,false),
(162377913,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек','I13',false,true,'Артериальная гипертония','158396651',false,false),
(162377914,'Субарахноидальное кровоизлияние из передней соединительной артерии','I60.2',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377915,'Другие транзиторные церебральные ишемические атаки и связанные с ними синдромы','G45.8',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377916,'Вторичная гипертензия неуточненная','I15.9',false,true,'Артериальная гипертония','158396651',false,false),
(162377917,'Острый инфаркт миокарда','I21',false,true,'Инфаркт миокарда','158396648',false,false),
(162377918,'Последствия другого нетравматического внутричерепного кровоизлияния','I69.2',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377919,'Инфаркт мозга, вызванный тромбозом вен мозга, непиогенный','I63.6',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377920,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек с (застойной) сердечной недостаточностью','I13.0',false,true,'Артериальная гипертония','158396651',false,false),
(162377921,'Нетравматическое субдуральное кровоизлияние','I62.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377922,'Субарахноидальное кровоизлияние из других внутричерепных артерий','I60.6',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377923,'Фибрилляция и трепетание предсердий неуточненное','I48.9',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377924,'Острый субэндокардиальный инфаркт миокарда','I21.4',false,true,'Инфаркт миокарда','158396648',false,false),
(162377925,'Левожелудочковая недостаточность','I50.1',false,true,'Хроническая сердечная недостаточность','158396643',false,false),
(162377926,'Другое субарахноидальное кровоизлияние','I60.8',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377927,'Инсулиннезависимый сахарный диабет с неуточненными осложнениями','E11.8',false,true,'Сахарный диабет','158396646',false,false),
(162377928,'Хроническая ишемическая болезнь сердца неуточненная','I25.9',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377929,'Атипичная форма трепетания предсердий','I48.4',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377930,'Инсулиннезависимый сахарный диабет с множественными осложнениями','E11.7',false,true,'Сахарный диабет','158396646',false,false),
(162377931,'Инфаркт мозга, вызванный тромбозом прецеребральных артерий','I63.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377932,'Синдром вертебробазилярной артериальной системы','G45.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377933,'Инфаркт мозга, вызванный тромбозом мозговых артерий','I63.3',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377934,'Застойная сердечная недостаточность','I50.0',false,true,'Хроническая сердечная недостаточность','158396643',false,false),
(162377935,'Другие формы острой ишемической болезни сердца','I24.8',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377936,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением почек с почечной недостаточностью','I12.0',false,true,'Артериальная гипертония','158396651',false,false),
(162377937,'Синдром сонной артерии (полушарный)','G45.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377938,'Инсулиннезависимый сахарный диабет с поражением почек','E11.2',false,true,'Сахарный диабет','158396646',false,false),
(162377939,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек с (застойной) сердечной недостаточностью и почечной недостаточностью','I13.2',false,true,'Артериальная гипертония','158396651',false,false),
(162377940,'Преходящие транзиторные церебральные ишемические приступы [атаки] и родственные синдромы','G45',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377941,'Хроническая обструктивная легочная болезнь с острой респираторной инфекцией нижних дыхательных путей','J44.0',false,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(162377942,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца с (застойной) сердечной недостаточностью','I11.0',false,true,'Артериальная гипертония','158396651',false,false),
(162377943,'Внутримозговое кровоизлияние внутрижелудочковое','I61.5',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377944,'Последствия внутричерепного кровоизлияния','I69.1',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377945,'Язва желудка','K25',true,true,'Язвенная болезнь','158396642',false,false),
(162377946,'Другое нетравматическое внутричерепное кровоизлияние','I62',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377947,'Аневризма сердца','I25.3',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377948,'Другая уточненная хроническая обструктивная легочная болезнь','J44.8',false,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(162377949,'Другой инфаркт мозга','I63.8',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377950,'Фибрилляция и трепетание предсердий','I48',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377951,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек с почечной недостаточностью','I13.1',false,true,'Артериальная гипертония','158396651',false,false),
(162377952,'Другое внутримозговое кровоизлияние','I61.8',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377953,'Инсулиннезависимый сахарный диабет с неврологическими осложнениями','E11.4',false,true,'Сахарный диабет','158396646',false,false),
(162377954,'Транзиторная церебральная ишемическая атака неуточненная','G45.9',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377955,'Другая вторичная гипертензия','I15.8',false,true,'Артериальная гипертония','158396651',false,false),
(162377956,'Субарахноидальное кровоизлияние из внутричерепной артерии неуточненной','I60.7',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377957,'Стенокардия [грудная жаба]','I20',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377958,'Сосудистые мозговые синдромы при цереброваскулярных болезнях (I60-I67+)','G46',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377959,'Внутримозговое кровоизлияние в мозжечок','I61.4',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377960,'Типичная форма трепетания предсердий','I48.3',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377961,'Инсулиннезависимый сахарный диабет с нарушениями периферического кровообращения','E11.5',false,true,'Сахарный диабет','158396646',false,false),
(162377962,'Язва желудка хроническая без кровотечения или прободения','K25.7',true,true,'Язвенная болезнь','158396642',false,false),
(162377963,'Ишемическая кардиомиопатия','I25.5',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377964,'Субарахноидальное кровоизлияние','I60',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377965,'Внутримозговое кровоизлияние в ствол мозга','I61.3',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377966,'Внутримозговое кровоизлияние множественной локализации','I61.6',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377967,'Другие формы хронической ишемической болезни сердца','I25.8',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377968,'Последствия цереброваскулярных болезней','I69',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377969,'Инсулиннезависимый сахарный диабет без осложнений','E11.9',false,true,'Сахарный диабет','158396646',false,false),
(162377970,'Коронарный тромбоз, не приводящий к инфаркту миокарда','I24.0',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377971,'Эссенциальная [первичная] гипертензия','I10',false,true,'Артериальная гипертония','158396651',false,false),
(1204906763,'Последствия цереброваскулярных болезней','I69',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906764,'Последствия внутричерепного кровоизлияния','I69.1',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906765,'Последствия субарахноидального кровоизлияния','I69.0',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906766,'Последствия других и неуточненных цереброваскулярных болезней','I69.8',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906767,'Последствия другого нетравматического внутричерепного кровоизлияния','I69.2',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906768,'Последствия инсульта, не уточненные как кровоизлияние или инфаркт мозга','I69.4',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906769,'Другие формы хронической ишемической болезни сердца','I25.8',false,true,'Инфаркт миокарда','158396648',false,false),
(1204906770,'Последствия инфаркта мозга','I69.3',false,true,'Последствия ОНМК','1204902866',false,false)
"""
sql.execute("TRUNCATE d_diagnosis_mkb10_pdn")
sql.execute(query)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9a36d2f4-04b0-4cca-86b8-6b96eccb7293" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = CHILD и возрастом &lt;18 лет. В ПДН есть диагнозы_ID395419" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="55110b2a-2cac-48a6-b468-1d157d46d889"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v3" id="ae5d99e6-4bfa-4d15-ab97-7f14ea5c6f84"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1651db27-dda9-46a2-97da-a94ec22bf6f5" name="В ответе только selfControlForm.available=true"><con:configuration><path>$</path><content>{"payload":{"selfControlForm":{"available":false}}}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395419</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsWithoutOneDayAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="58e496bf-3150-4056-9296-342d4b68f1bc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = CHILD и возрастом =18 лет. В ПДН есть диагнозы_ID395521" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="997cb75b-b671-4b6c-94de-1fc6198dd7e2"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v3" id="1c5506d7-25f7-4f93-b2a5-a447b5f113b7"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1651db27-dda9-46a2-97da-a94ec22bf6f5" name="В ответе только selfControlForm.available=true"><con:configuration><path>$</path><content>{"payload":{"selfControlForm":{"available":false}}}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395521</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="4a9dd66f-596f-4097-9c0e-58c2fabd23f4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = RELATIVE и возрастом &lt;18 лет. В ПДН есть диагнозы_ID395523" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="bc294560-2f66-4766-b819-1c946fb9b13e"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v3" id="2976cbf6-1174-46f7-9c3a-0a5d9c26a707"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1651db27-dda9-46a2-97da-a94ec22bf6f5" name="В ответе только selfControlForm.available=true"><con:configuration><path>$</path><content>{"payload":{"selfControlForm":{"available":false}}}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395523</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>RELATIVE</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsWithoutOneDayAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="0aae9151-576d-4137-a331-329862200db7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = RELATIVE и возрастом =18 лет. В ПДН есть диагнозы_ID395524" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="32c24e76-1f06-4707-aba5-5f4c3bd38e61"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v3" id="2a5a90fb-ce25-470a-af2b-8538acece2ff"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b333f272-7a65-4104-ad42-4a02584f04a0" name="payload.selfControlForm.available=true"><con:configuration><path>$.payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Записать ответ инфо и пдн для проверки" id="834e40af-082a-430b-99f4-ebc934508dd6"><con:settings/><con:config><script>import groovy.sql.Sql
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')
def infoResponse = context.expand('${GET checkSelfControl v3#Response}') 
//log.info pdnResponse
//log.info infoResponse
testRunner.testCase.testSuite.setPropertyValue("pdnResponse", pdnResponse)
testRunner.testCase.testSuite.setPropertyValue("infoResponse", infoResponse)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить маппинг" id="afa65459-9090-4410-b7af-2052edfff5ca"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3624a2a3-29e0-4b0a-bfc7-50674298ccb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395523</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>RELATIVE</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="ac56ecc0-5163-4f07-9fcd-1380968234de" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = PERSONAL и возрастом &lt;18 лет. В ПДН есть диагнозы_ID395525" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="ec761b43-09eb-484c-a1ba-d136ee7c2042"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v3" id="bce45edb-8768-4975-8b93-d2e53a4cb785"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1651db27-dda9-46a2-97da-a94ec22bf6f5" name="В ответе только selfControlForm.available=true"><con:configuration><path>$</path><content>{"payload":{"selfControlForm":{"available":false}}}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395525</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>PERSONAL</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsWithoutOneDayAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="56a4ae4d-2e2a-4534-984f-ec9321a4320d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = PERSONAL и возрастом =18 лет. В ПДН есть диагнозы_ID395526" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="35b9f416-bacb-4807-86a8-bd7560e1e3b2"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v3" id="7d841b1b-5700-49fc-8fa9-39ebab352b5c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b333f272-7a65-4104-ad42-4a02584f04a0" name="payload.selfControlForm.available=true"><con:configuration><path>$.payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="GetPlanShort" id="9a3c035f-cf22-470e-989a-5b680445d3a1" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>24107262</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг диагнозов" id="9f91315a-e532-4568-bc97-21425a8a97cc" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
// функция отбора подходящих диагнозов (шаг 1.2)
def selectdiagnosesFromDB(List pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false").code
//	log.info sqlResult 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it
	}
	return diagnoses
}

// функция отбора диагнозов из маппинга 
def mapDiagnoses(List diagnoses, def mapping){
	version =testRunner.testCase.testSuite.getPropertyValue("version").toInteger()
	selectedDiagnoses=[]
	selectedIndicatorMeasurements=[]
	mapping.each{
		diagnoses.each{d ->
			if(it.diagnoses.contains(d)){
//				log.info d
				if(!selectedDiagnoses.contains(d))selectedDiagnoses << d
				newElem	=[]
				switch (version) {
					    case 2:
					         newElem= [title: it.name]
					        break;
					    case 3:
					       newElem= [title: it.name , code: it.code , aiMeasurementInputEnabled : it.voice]
					        break;
					     default:
					       testRunner.fail("в свойстах сьюта некорректная версия метода")
					}
				if(!selectedIndicatorMeasurements.contains(newElem))selectedIndicatorMeasurements << newElem
			}
		}
	}
	selectedElems=[diagnoses:selectedDiagnoses, indicatorMeasurements:selectedIndicatorMeasurements]
	return selectedElems
}


// функция проверки равенства списков
def compareLists(List list1, List list2, String name){
	List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки "+name+" имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором ="+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки "+name+" имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В "+name+" в списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В "+name+" в списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков "+name+" одинаковые"
        if(errors)  testRunner.fail("При сравнении списков "+name+" были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
}

//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')

pdnParsedResponse = new XmlSlurper().parseText(pdnResponse)
pdnCodes=pdnParsedResponse.Body.GetPlanShortResponse.result.diagnosis.diagnosisCode
def infoResponse = context.expand('${GET checkSelfControl v3#Response}') 
def infoParsedResponse = new JsonSlurper().parseText(infoResponse)
infoPayload=infoParsedResponse.payload
//log.info infoDiagnoses

diagnoses=selectdiagnosesFromDB(pdnCodes.toList())
//log.info diagnoses
selectedElems=mapDiagnoses( diagnoses,  mapping)

if(selectedElems){
	infoDiagnoses=infoPayload.selfControlForm.diagnosisCode
	compareLists(selectedElems.diagnoses, infoDiagnoses, "diagnoses")
	compareLists(selectedElems.indicatorMeasurements, infoPayload.indicatorMeasurements, "indicatorMeasurements")
}
else{
	if(infoPayload.selfControlForm.diagnosisCode)    testRunner.fail("В ответе обнаружены коды диагнозов, хотя их быть не должно. Дагнозы в ответе: "+infoPayload.selfControlForm.diagnosisCode)
	if(infoPayload.indicatorMeasurements) testRunner.fail("В ответе обнаружен Список показателей дневника здоровья, хотя его быть не должно. Данные в ответе: "+infoPayload.indicatorMeasurements)
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Записать ответ инфо и пдн для проверки" id="6c0de991-2020-4e04-b691-1fb70bc7af48"><con:settings/><con:config><script>import groovy.sql.Sql
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')
def infoResponse = context.expand('${GET checkSelfControl v3#Response}') 
//log.info pdnResponse
//log.info infoResponse
testRunner.testCase.testSuite.setPropertyValue("pdnResponse", pdnResponse)
testRunner.testCase.testSuite.setPropertyValue("infoResponse", infoResponse)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить маппинг" id="e6836675-67df-4af9-b70c-275e1e983956"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3624a2a3-29e0-4b0a-bfc7-50674298ccb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395526</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>PERSONAL</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="06b7d8e1-d84c-4235-bf30-5cb79f17fa25" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Полная проверка маппинга_ID379878" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="a09a3cee-fe88-4bc7-acbb-1715174326d6"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)
permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="groovy" name="Обновить мок с диагнозами пдн" id="9bec4002-ad7a-473b-b189-4a6ef5caa373"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
//подключиться к бд 
connectionMock =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
connectionInfo =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
sql = Sql.newInstance(connectionMock)
sql2 = Sql.newInstance(connectionInfo)

pdnMockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=pdnMockPath.replace("tcId",tcId)
//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
Set diagnoses=[]
mapping.diagnoses.each{ diagnoses.addAll(it) }
n=150
for(int i in 1..n){
	code=('A'..'Z').shuffled().take(1).join()+(10..99).shuffled().take(1).join()
	diagnoses <<  code
}
log.info diagnoses.sort()
n=diagnoses.size()-1
//n=2
values=""
pdnDiagnosis=""
for(int i in 0..n){
	k=i+1
	end = i==n ? "" : ","
	values += "("+k+", '"+diagnoses[i]+"', true, 'тест', false,  '"+k+"', 'тест', false, false)"+end
	pdnDiagnosis += "<ns2:diagnosis>"+
					"<ns2:diagnosisCode>"+diagnoses[i]+"</ns2:diagnosisCode>"+
					"<ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle>"+
				"</ns2:diagnosis>"
	
}

response="""<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Body>
		<GetPlanShortResponse xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
			<result>
				<ns2:id>25418</ns2:id>
				<ns2:jobExecutionId>10005163</ns2:jobExecutionId>
				"""+pdnDiagnosis+"""
			</result>
		</GetPlanShortResponse>
	</soap:Body>
</soap:Envelope>
"""
//return response
//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)

queryPdnDiagnosis="INSERT INTO d_diagnosis_mkb10_pdn "+
"(id, code_mkb10, actual_mkb10, title_mkb10, archived_dispensary_observation_diagnosis, id_dispensary_observation_program, title_dispensary_observation_program, archived_dispensary_observation_program, is_deleted) "+
"VALUES "+values
//log.info queryPdnDiagnosis
sql2.execute("TRUNCATE d_diagnosis_mkb10_pdn")
sql2.execute(queryPdnDiagnosis)]]></script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v3" id="a730f7fd-e265-4ac1-a9a8-b220072ab408"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b333f272-7a65-4104-ad42-4a02584f04a0" name="payload.selfControlForm.available=true"><con:configuration><path>$.payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="GetPlanShort" id="22aed619-cbd5-46c5-ade0-cee6f6ff7868" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>24107262</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг диагнозов" id="4dbb8683-cb80-4cff-8c90-837468a86f35" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
// функция отбора подходящих диагнозов (шаг 1.2)
def selectdiagnosesFromDB(List pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false").code
//	log.info sqlResult 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it
	}
	return diagnoses
}

// функция отбора диагнозов из маппинга 
def mapDiagnoses(List diagnoses, def mapping){
	version =testRunner.testCase.testSuite.getPropertyValue("version").toInteger()
	selectedDiagnoses=[]
	selectedIndicatorMeasurements=[]
	mapping.each{
		diagnoses.each{d ->
			if(it.diagnoses.contains(d)){
//				log.info d
				if(!selectedDiagnoses.contains(d))selectedDiagnoses << d
				newElem	=[]
				switch (version) {
					    case 2:
					         newElem= [title: it.name]
					        break;
					    case 3:
					       newElem= [title: it.name , code: it.code , aiMeasurementInputEnabled : it.voice]
					        break;
					     default:
					       testRunner.fail("в свойстах сьюта некорректная версия метода")
					}
				if(!selectedIndicatorMeasurements.contains(newElem))selectedIndicatorMeasurements << newElem
			}
		}
	}
	selectedElems=[diagnoses:selectedDiagnoses, indicatorMeasurements:selectedIndicatorMeasurements]
	return selectedElems
}


// функция проверки равенства списков
def compareLists(List list1, List list2, String name){
	List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки "+name+" имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором ="+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки "+name+" имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В "+name+" в списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В "+name+" в списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков "+name+" одинаковые"
        if(errors)  testRunner.fail("При сравнении списков "+name+" были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
}

//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')

pdnParsedResponse = new XmlSlurper().parseText(pdnResponse)
pdnCodes=pdnParsedResponse.Body.GetPlanShortResponse.result.diagnosis.diagnosisCode
def infoResponse = context.expand('${GET checkSelfControl v3#Response}') 
def infoParsedResponse = new JsonSlurper().parseText(infoResponse)
infoPayload=infoParsedResponse.payload
//log.info infoDiagnoses

diagnoses=selectdiagnosesFromDB(pdnCodes.toList())
//log.info diagnoses
selectedElems=mapDiagnoses( diagnoses,  mapping)

if(selectedElems){
	infoDiagnoses=infoPayload.selfControlForm.diagnosisCode
	compareLists(selectedElems.diagnoses, infoDiagnoses, "diagnoses")
	compareLists(selectedElems.indicatorMeasurements, infoPayload.indicatorMeasurements, "indicatorMeasurements")
}
else{
	if(infoPayload.selfControlForm.diagnosisCode)    testRunner.fail("В ответе обнаружены коды диагнозов, хотя их быть не должно. Дагнозы в ответе: "+infoPayload.selfControlForm.diagnosisCode)
	if(infoPayload.indicatorMeasurements) testRunner.fail("В ответе обнаружен Список показателей дневника здоровья, хотя его быть не должно. Данные в ответе: "+infoPayload.indicatorMeasurements)
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Записать ответ инфо и пдн для проверки" id="a34e26b0-8722-497c-9ce6-2dbe440533d1"><con:settings/><con:config><script>import groovy.sql.Sql
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')
def infoResponse = context.expand('${GET checkSelfControl v3#Response}') 
log.info pdnResponse
log.info infoResponse
testRunner.testCase.testSuite.setPropertyValue("pdnResponse", pdnResponse)
testRunner.testCase.testSuite.setPropertyValue("infoResponse", infoResponse)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить маппинг" id="dd278e74-3b1f-4ae1-a215-e3f5a1e8d00d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3624a2a3-29e0-4b0a-bfc7-50674298ccb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Вернуть нормальные значения справочника в бд" id="c8af03bf-2236-4dc3-8290-118894ac9254"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ed4cdc6a-c904-4ea4-a4e4-a1db8a05b01c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>379878</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>PERSONAL</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="8e99d134-92d7-4fd8-9963-6a4f0d1acb6c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка списка диагнозов в зависимости от наличия записей в каталоге d_diagnosis_mkb10_pdn_ID397157" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="e933f083-139c-491a-a6ed-ed5071c46762"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)
permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="groovy" name="Обновить мок с диагнозами пдн" id="6abcc2d2-9ba2-4810-9d3d-2c53021419b2"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
//подключиться к бд 
connectionMock =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
connectionInfo =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
sql = Sql.newInstance(connectionMock)
sql2 = Sql.newInstance(connectionInfo)

pdnMockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=pdnMockPath.replace("tcId",tcId)
//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
Set diagnoses=[]
mapping.diagnoses.each{ diagnoses.addAll(it) }
actual=[ true, false]
archivedDOD=[ true, false]
archivedDOP=[ true, false]
allValues=[]
actual.each{ a ->
	archivedDOD.each{ d ->
		archivedDOP.each{ p ->
			allValues << [actual: a, archivedDOD:d, archivedDOP:p]
		}
	}
}
allValues << []
log.info allValues.size()

n=allValues.size()-1
last=n-1
queryValues=""
pdnDiagnosis=""
for(int i in 0..n){
	k=i+1
	end = i==last ? "" : ","
	if(i<n) queryValues += "("+k+", '"+diagnoses[i]+"', "+allValues[i].actual+", 'тест', "+allValues[i].archivedDOD+",'"+k+"', 'тест', "+allValues[i].archivedDOP+", false)"+end
	pdnDiagnosis += "<ns2:diagnosis>"+
					"<ns2:diagnosisCode>"+diagnoses[i]+"</ns2:diagnosisCode>"+
					"<ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle>"+
				"</ns2:diagnosis>"
	
}
//log.info queryValues
//log.info pdnDiagnosis

response="""<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Body>
		<GetPlanShortResponse xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
			<result>
				<ns2:id>25418</ns2:id>
				<ns2:jobExecutionId>10005163</ns2:jobExecutionId>
				"""+pdnDiagnosis+"""
			</result>
		</GetPlanShortResponse>
	</soap:Body>
</soap:Envelope>
"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)

queryPdnDiagnosis="INSERT INTO d_diagnosis_mkb10_pdn "+
"(id, code_mkb10, actual_mkb10, title_mkb10, archived_dispensary_observation_diagnosis, id_dispensary_observation_program, title_dispensary_observation_program, archived_dispensary_observation_program, is_deleted) "+
"VALUES "+queryValues
//log.info queryPdnDiagnosis
sql2.execute("TRUNCATE d_diagnosis_mkb10_pdn")
sql2.execute(queryPdnDiagnosis)]]></script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v3" id="437bbae1-b6a1-4b0d-b973-b28e3de6b590"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b333f272-7a65-4104-ad42-4a02584f04a0" name="payload.selfControlForm.available=true"><con:configuration><path>$.payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="GetPlanShort" id="b74f3d55-b97b-444b-9380-91d52b51507c" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>24107262</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг диагнозов" id="e1cf07c3-509f-4111-826a-7890c8af14b6" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
// функция отбора подходящих диагнозов (шаг 1.2)
def selectdiagnosesFromDB(List pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false").code
//	log.info sqlResult 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it
	}
	return diagnoses
}

// функция отбора диагнозов из маппинга 
def mapDiagnoses(List diagnoses, def mapping){
	version =testRunner.testCase.testSuite.getPropertyValue("version").toInteger()
	selectedDiagnoses=[]
	selectedIndicatorMeasurements=[]
	mapping.each{
		diagnoses.each{d ->
			if(it.diagnoses.contains(d)){
//				log.info d
				if(!selectedDiagnoses.contains(d))selectedDiagnoses << d
				newElem	=[]
				switch (version) {
					    case 2:
					         newElem= [title: it.name]
					        break;
					    case 3:
					       newElem= [title: it.name , code: it.code , aiMeasurementInputEnabled : it.voice]
					        break;
					     default:
					       testRunner.fail("в свойстах сьюта некорректная версия метода")
					}
				if(!selectedIndicatorMeasurements.contains(newElem))selectedIndicatorMeasurements << newElem
			}
		}
	}
	selectedElems=[diagnoses:selectedDiagnoses, indicatorMeasurements:selectedIndicatorMeasurements]
	return selectedElems
}


// функция проверки равенства списков
def compareLists(List list1, List list2, String name){
	List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки "+name+" имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором ="+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки "+name+" имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В "+name+" в списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В "+name+" в списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков "+name+" одинаковые"
        if(errors)  testRunner.fail("При сравнении списков "+name+" были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
}

//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')

pdnParsedResponse = new XmlSlurper().parseText(pdnResponse)
pdnCodes=pdnParsedResponse.Body.GetPlanShortResponse.result.diagnosis.diagnosisCode
def infoResponse = context.expand('${GET checkSelfControl v3#Response}') 
def infoParsedResponse = new JsonSlurper().parseText(infoResponse)
infoPayload=infoParsedResponse.payload
//log.info infoDiagnoses

diagnoses=selectdiagnosesFromDB(pdnCodes.toList())
//log.info diagnoses
selectedElems=mapDiagnoses( diagnoses,  mapping)

if(selectedElems){
	infoDiagnoses=infoPayload.selfControlForm.diagnosisCode
	compareLists(selectedElems.diagnoses, infoDiagnoses, "diagnoses")
	compareLists(selectedElems.indicatorMeasurements, infoPayload.indicatorMeasurements, "indicatorMeasurements")
}
else{
	if(infoPayload.selfControlForm.diagnosisCode)    testRunner.fail("В ответе обнаружены коды диагнозов, хотя их быть не должно. Дагнозы в ответе: "+infoPayload.selfControlForm.diagnosisCode)
	if(infoPayload.indicatorMeasurements) testRunner.fail("В ответе обнаружен Список показателей дневника здоровья, хотя его быть не должно. Данные в ответе: "+infoPayload.indicatorMeasurements)
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Записать ответ инфо и пдн для проверки" id="b54ae4b1-50c9-415f-b8d8-9f4924be5152"><con:settings/><con:config><script>import groovy.sql.Sql
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')
def infoResponse = context.expand('${GET checkSelfControl v3#Response}') 
log.info pdnResponse
log.info infoResponse
testRunner.testCase.testSuite.setPropertyValue("pdnResponse", pdnResponse)
testRunner.testCase.testSuite.setPropertyValue("infoResponse", infoResponse)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить маппинг" id="36cf1adc-2588-4a6a-bdd5-76263b9087cb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3624a2a3-29e0-4b0a-bfc7-50674298ccb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Вернуть нормальные значения справочника в бд" id="e2dd7d0e-3488-4682-9c9b-03124ace1e45"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ed4cdc6a-c904-4ea4-a4e4-a1db8a05b01c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>397157</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>PERSONAL</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="6ea6e61f-37e2-40be-b1d4-c19a26bcebf5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Доступность анкеты самоконтроля без ПДН. Есть заполненная ранее анкета_ID234231" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="7ec8546c-5fb8-4503-8e2a-45b2d3b51d84"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)
permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="groovy" name="Обновить мок с диагнозами пдн" id="3e7840ea-9f01-4473-bf75-b6c6ef28c5e7" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
//подключиться к бд 
connectionMock =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
connectionInfo =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
sql = Sql.newInstance(connectionMock)
sql2 = Sql.newInstance(connectionInfo)

pdnMockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=pdnMockPath.replace("tcId",tcId)
//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
Set diagnoses=[]
mapping.diagnoses.each{ diagnoses.addAll(it) }

def selectdiagnosesFromDB(def pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where  archived_dispensary_observation_diagnosis = true or archived_dispensary_observation_program = true").code
//	log.info sqlResult 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it
	}
	return diagnoses
}

diagnoses2=selectdiagnosesFromDB(diagnoses)
/*
actual=[ true, false]
archivedDOD=[ true, false]
archivedDOP=[ true, false]
allValues=[]
actual.each{ a ->
	archivedDOD.each{ d ->
		archivedDOP.each{ p ->
			allValues << [actual: a, archivedDOD:d, archivedDOP:p]
		}
	}
}
allValues << []
log.info allValues.size()

n=allValues.size()-1
last=n-1
queryValues=""
pdnDiagnosis=""
for(int i in 0..n){
	k=i+1
	end = i==last ? "" : ","
	if(i<n && diagnoses[i] != [actual: true, archivedDOD:false, archivedDOP:false] ) queryValues += "("+k+", '"+diagnoses[i]+"', "+allValues[i].actual+", 'тест', "+allValues[i].archivedDOD+",'"+k+"', 'тест', "+allValues[i].archivedDOP+", false)"+end
	pdnDiagnosis += "<ns2:diagnosis>"+
					"<ns2:diagnosisCode>"+diagnoses[i]+"</ns2:diagnosisCode>"+
					"<ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle>"+
				"</ns2:diagnosis>"
	
}
//log.info queryValues
//log.info pdnDiagnosis

response="""<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Body>
		<GetPlanShortResponse xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
			<result>
				<ns2:id>25418</ns2:id>
				<ns2:jobExecutionId>10005163</ns2:jobExecutionId>
				"""+pdnDiagnosis+"""
			</result>
		</GetPlanShortResponse>
	</soap:Body>
</soap:Envelope>
"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)

queryPdnDiagnosis="INSERT INTO d_diagnosis_mkb10_pdn "+
"(id, code_mkb10, actual_mkb10, title_mkb10, archived_dispensary_observation_diagnosis, id_dispensary_observation_program, title_dispensary_observation_program, archived_dispensary_observation_program, is_deleted) "+
"VALUES "+queryValues
//log.info queryPdnDiagnosis
sql2.execute("TRUNCATE d_diagnosis_mkb10_pdn")
sql2.execute(queryPdnDiagnosis)
*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v3" id="9ebe71f8-d999-4421-8532-e5fe0fa2a300"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b333f272-7a65-4104-ad42-4a02584f04a0" name="payload.selfControlForm.available=true"><con:configuration><path>$.payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="GetPlanShort" id="07d709d2-4b0c-40e2-a0ff-8ece3df96137" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>24107262</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг диагнозов" id="924aaab8-e8d1-4a93-ba80-b2c9e7f6d431" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
// функция отбора подходящих диагнозов (шаг 1.2)
def selectdiagnosesFromDB(List pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false").code
//	log.info sqlResult 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it
	}
	return diagnoses
}

// функция отбора диагнозов из маппинга 
def mapDiagnoses(List diagnoses, def mapping){
	version =testRunner.testCase.testSuite.getPropertyValue("version").toInteger()
	selectedDiagnoses=[]
	selectedIndicatorMeasurements=[]
	mapping.each{
		diagnoses.each{d ->
			if(it.diagnoses.contains(d)){
//				log.info d
				if(!selectedDiagnoses.contains(d))selectedDiagnoses << d
				newElem	=[]
				switch (version) {
					    case 2:
					         newElem= [title: it.name]
					        break;
					    case 3:
					       newElem= [title: it.name , code: it.code , aiMeasurementInputEnabled : it.voice]
					        break;
					     default:
					       testRunner.fail("в свойстах сьюта некорректная версия метода")
					}
				if(!selectedIndicatorMeasurements.contains(newElem))selectedIndicatorMeasurements << newElem
			}
		}
	}
	selectedElems=[diagnoses:selectedDiagnoses, indicatorMeasurements:selectedIndicatorMeasurements]
	return selectedElems
}


// функция проверки равенства списков
def compareLists(List list1, List list2, String name){
	List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки "+name+" имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором ="+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки "+name+" имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В "+name+" в списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В "+name+" в списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков "+name+" одинаковые"
        if(errors)  testRunner.fail("При сравнении списков "+name+" были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
}

//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')

pdnParsedResponse = new XmlSlurper().parseText(pdnResponse)
pdnCodes=pdnParsedResponse.Body.GetPlanShortResponse.result.diagnosis.diagnosisCode
def infoResponse = context.expand('${GET checkSelfControl v3#Response}') 
def infoParsedResponse = new JsonSlurper().parseText(infoResponse)
infoPayload=infoParsedResponse.payload
//log.info infoDiagnoses

diagnoses=selectdiagnosesFromDB(pdnCodes.toList())
//log.info diagnoses
selectedElems=mapDiagnoses( diagnoses,  mapping)

if(selectedElems){
	infoDiagnoses=infoPayload.selfControlForm.diagnosisCode
	compareLists(selectedElems.diagnoses, infoDiagnoses, "diagnoses")
	compareLists(selectedElems.indicatorMeasurements, infoPayload.indicatorMeasurements, "indicatorMeasurements")
}
else{
	if(infoPayload.selfControlForm.diagnosisCode)    testRunner.fail("В ответе обнаружены коды диагнозов, хотя их быть не должно. Дагнозы в ответе: "+infoPayload.selfControlForm.diagnosisCode)
	if(infoPayload.indicatorMeasurements) testRunner.fail("В ответе обнаружен Список показателей дневника здоровья, хотя его быть не должно. Данные в ответе: "+infoPayload.indicatorMeasurements)
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Записать ответ инфо и пдн для проверки" id="7ccbb827-2f7b-4f0f-89e4-971053dfeae5"><con:settings/><con:config><script>import groovy.sql.Sql
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')
def infoResponse = context.expand('${GET checkSelfControl v3#Response}') 
log.info pdnResponse
log.info infoResponse
testRunner.testCase.testSuite.setPropertyValue("pdnResponse", pdnResponse)
testRunner.testCase.testSuite.setPropertyValue("infoResponse", infoResponse)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить маппинг" id="4e7f963a-1307-4cdb-baee-04cf440d63e5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3624a2a3-29e0-4b0a-bfc7-50674298ccb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Вернуть нормальные значения справочника в бд" id="ea875206-bef7-4bfb-836f-0bbc478ecc2f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ed4cdc6a-c904-4ea4-a4e4-a1db8a05b01c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>234231</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>PERSONAL</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="1d3aed80-d236-43d9-91da-e594e98a9909" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получить токены" searchProperties="true"><con:settings/><con:testStep type="manualTestStep" name="Получить токены для Яны" id="52e2a2a3-f7b4-466e-afd3-48a7eb8facfa"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties/></con:testCase><con:testCase id="074c9426-31d0-4b56-af0a-f9ad36b69659" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="272488_АС1. SUDIR_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl v3" id="c522e4f8-a104-481f-900f-0ba157dae454"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="123"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395419</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsWithoutOneDayAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="cdba4d18-c9fc-4362-8265-5a8f2ba75873" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="234632_АС1. ACCESS_DENIED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl v3" id="ab881b5f-47ac-4e4b-9004-1bc58718ea5f"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="123456"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395419</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsWithoutOneDayAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="cabd6071-b762-4b1b-959d-aedd9fe13d30" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="234631_АС2. PDN_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl v3" id="bdde6ca3-dcf3-43a1-8288-ff083b92d7a9"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>234631</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="8606dc39-ad6d-496f-ab5b-df167059d7e3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="382976_АС3. LK_SERVER_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl v3" id="3f1af525-3049-40e6-95a4-697bc63e214a"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 500"><con:configuration><codes>500</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.code = LK_SERVER_ERROR"><con:configuration><path>$.error.code</path><content>LK_SERVER_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.description = Ошибка вызова сервиса ЛК"><con:configuration><path>$.error.description</path><content>Ошибка вызова сервиса ЛК</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.type = TECHNICAL"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>382976</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property></con:properties></con:testCase><con:testCase id="b79f73de-9104-4f92-9bd4-e36b07d21dcc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="382978_АС4. LK_AUTH_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl v3" id="659ad525-9df6-409c-b66b-2a5fcdd689e6"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.code = LK_AUTH_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>LK_AUTH_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.description = Токен авторизации не действителен"><con:configuration><path>$.error.description</path><content>Токен авторизации не действителен</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>382978</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property></con:properties></con:testCase><con:testCase id="254a941e-e930-468a-b9af-a4daba3c228c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Интеграционный" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl v3" id="770bc6e8-10a6-4a48-b528-1802f927f405"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v3" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b333f272-7a65-4104-ad42-4a02584f04a0" name="payload.selfControlForm.available=true"><con:configuration><path>$.payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="GetPlanShort" id="3eefa0c7-0548-4a88-be60-14ee51a67008" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>24107262</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг диагнозов" id="97361f68-f8fa-49d0-a351-27d6c744980a" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
// функция отбора подходящих диагнозов (шаг 1.2)
def selectdiagnosesFromDB(List pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false").code
//	log.info sqlResult 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it
	}
	return diagnoses
}

// функция отбора диагнозов из маппинга 
def mapDiagnoses(List diagnoses, def mapping){
	version =testRunner.testCase.testSuite.getPropertyValue("version").toInteger()
	selectedDiagnoses=[]
	selectedIndicatorMeasurements=[]
	mapping.each{
		diagnoses.each{d ->
			if(it.diagnoses.contains(d)){
//				log.info d
				if(!selectedDiagnoses.contains(d))selectedDiagnoses << d
				newElem	=[]
				switch (version) {
					    case 2:
					         newElem= [title: it.name]
					        break;
					    case 3:
					       newElem= [title: it.name , code: it.code , aiMeasurementInputEnabled : it.voice]
					        break;
					     default:
					       testRunner.fail("в свойстах сьюта некорректная версия метода")
					}
				if(!selectedIndicatorMeasurements.contains(newElem))selectedIndicatorMeasurements << newElem
			}
		}
	}
	selectedElems=[diagnoses:selectedDiagnoses, indicatorMeasurements:selectedIndicatorMeasurements]
	return selectedElems
}


// функция проверки равенства списков
def compareLists(List list1, List list2, String name){
	List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки "+name+" имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором ="+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки "+name+" имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В "+name+" в списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В "+name+" в списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков "+name+" одинаковые"
        if(errors)  testRunner.fail("При сравнении списков "+name+" были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
}

//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')

pdnParsedResponse = new XmlSlurper().parseText(pdnResponse)
pdnCodes=pdnParsedResponse.Body.GetPlanShortResponse.result.diagnosis.diagnosisCode
def infoResponse = context.expand('${GET checkSelfControl v3#Response}') 
def infoParsedResponse = new JsonSlurper().parseText(infoResponse)
infoPayload=infoParsedResponse.payload
//log.info infoDiagnoses

diagnoses=selectdiagnosesFromDB(pdnCodes.toList())
//log.info diagnoses
selectedElems=mapDiagnoses( diagnoses,  mapping)

if(selectedElems){
	infoDiagnoses=infoPayload.selfControlForm.diagnosisCode
	compareLists(selectedElems.diagnoses, infoDiagnoses, "diagnoses")
	compareLists(selectedElems.indicatorMeasurements, infoPayload.indicatorMeasurements, "indicatorMeasurements")
}
else{
	if(infoPayload.selfControlForm.diagnosisCode)    testRunner.fail("В ответе обнаружены коды диагнозов, хотя их быть не должно. Дагнозы в ответе: "+infoPayload.selfControlForm.diagnosisCode)
	if(infoPayload.indicatorMeasurements) testRunner.fail("В ответе обнаружен Список показателей дневника здоровья, хотя его быть не должно. Данные в ответе: "+infoPayload.indicatorMeasurements)
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Записать ответ инфо и пдн для проверки" id="c4bf124d-d1f5-4393-ae63-20e0f94f5b95"><con:settings/><con:config><script>import groovy.sql.Sql
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')
def infoResponse = context.expand('${GET checkSelfControl v3#Response}') 
log.info pdnResponse
log.info infoResponse
testRunner.testCase.testSuite.setPropertyValue("pdnResponse", pdnResponse)
testRunner.testCase.testSuite.setPropertyValue("infoResponse", infoResponse)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить маппинг" id="1ad9a38f-454f-4f8a-a201-d7b128d45199"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>3624a2a3-29e0-4b0a-bfc7-50674298ccb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Вернуть нормальные значения справочника в бд" id="4fcee1d7-0c2d-4d45-9a1b-85de950b0e85"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ed4cdc6a-c904-4ea4-a4e4-a1db8a05b01c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>379878</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>PERSONAL</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>eighteenYearsAgo</con:name><con:value>2006-03-15</con:value></con:property><con:property><con:name>eighteenYearsWithoutOneDayAgo</con:name><con:value>2006-03-16</con:value></con:property><con:property><con:name>emcMockPath</con:name><con:value>/mock/tcId/internal/3/emc-permissions?ssoId=af3e4ac5-96dd-4167-afb3-244eb7187aba</con:value></con:property><con:property><con:name>patientId</con:name><con:value>17965152</con:value></con:property><con:property><con:name>pdnMockPath</con:name><con:value>/mock/tcId/getPlanShort</con:value></con:property><con:property><con:name>version</con:name><con:value>3</con:value></con:property><con:property><con:name>pdnResponse</con:name><con:value><![CDATA[ <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Body>
		<GetPlanShortResponse xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
			<result>
				<ns2:id>25418</ns2:id>
				<ns2:jobExecutionId>10005163</ns2:jobExecutionId>
				<ns2:diagnosis><ns2:diagnosisCode>I10</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I11</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I11.0</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I11.9</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I12</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I12.0</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I12.9</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I13</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I13.0</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis>
			</result>
		</GetPlanShortResponse>
	</soap:Body>
</soap:Envelope>
]]></con:value></con:property><con:property><con:name>infoResponse</con:name><con:value>{"payload":{"selfControlForm":{"available":true,"diagnosisCode":["I11.9"]},"indicatorMeasurements":[{"title":"Артериальное давление","code":"bloodPressure","aiMeasurementInputEnabled":true}]}}</con:value></con:property></con:properties></con:testSuite><con:testSuite id="46a4b7d3-d0a1-47c6-bf47-5055efdbd833" name="GET checkSelfControl v2"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2732e602-a21a-4a20-a53a-b21acde1d737" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Посчитать дату 18 лет назад и больше" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Посчитать и записать в свойства сьюта" id="c4561723-264e-4f65-9b3f-e48106346403"><con:settings/><con:config><script>import java.time.*

def today =LocalDate.now()

eighteenYearsAgo=today.minusYears(18)
eighteenYearsWithoutOneDayAgo=eighteenYearsAgo.plusDays(1)

testRunner.testCase.testSuite.setPropertyValue("eighteenYearsAgo", eighteenYearsAgo.toString())
testRunner.testCase.testSuite.setPropertyValue("eighteenYearsWithoutOneDayAgo", eighteenYearsWithoutOneDayAgo.toString())</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e34a715e-ace7-4eb8-a664-29db6c353459" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверить маппинг диагнозов" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить маппинг диагнозов" id="49d03f4c-647d-42a1-b8e8-44ebe6a12703"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
// функция отбора подходящих диагнозов (шаг 1.2)
def selectdiagnosesFromDB(List pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false").code
//	log.info "sqlResult "+sqlResult[0].getClass() 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it.toString()
	}
	return diagnoses
}

// функция отбора диагнозов из маппинга 
def mapDiagnoses(List diagnoses, def mapping){
	version =testRunner.testCase.testSuite.getPropertyValue("version").toInteger()
//	selectedDiagnoses=[]
	selectedIndicatorMeasurements=[]
	mapping.each{
		diagnoses.each{d ->
			if(it.diagnoses.contains(d)){
//				log.info d
//				if(!selectedDiagnoses.contains(d))selectedDiagnoses << d
				newElem	=[]
				switch (version) {
					    case 2:
					         newElem= [title: it.name]
					        break;
					    case 3:
					       newElem= [title: it.name , code: it.code , aiMeasurementInputEnabled : it.voice]
					        break;
					     default:
					       testRunner.fail("в свойстах сьюта некорректная версия метода")
					}
				if(!selectedIndicatorMeasurements.contains(newElem))selectedIndicatorMeasurements << newElem
			}
		}
	}
//	selectedElems=[diagnoses:selectedDiagnoses, indicatorMeasurements:selectedIndicatorMeasurements]
//	return selectedElems
	return selectedIndicatorMeasurements
}


// функция проверки равенства списков
def compareLists(List list1, List list2, String name){
	list1.sort()
	list2.sort()
	List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки "+name+" имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором ="+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки "+name+" имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В "+name+" в списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В "+name+" в списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков "+name+" одинаковые"
        if(errors)  testRunner.fail("При сравнении списков "+name+" были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
}

//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
pdnResponse =testRunner.testCase.testSuite.getPropertyValue("pdnResponse")
pdnParsedResponse = new XmlSlurper().parseText(pdnResponse)
pdnCodes=pdnParsedResponse.Body.GetPlanShortResponse.result.diagnosis.diagnosisCode
infoResponse =testRunner.testCase.testSuite.getPropertyValue("infoResponse")
def infoParsedResponse = new JsonSlurper().parseText(infoResponse)
infoPayload=infoParsedResponse.payload

diagnoses=selectdiagnosesFromDB(pdnCodes.toList())
log.info diagnoses
indicatorMeasurements=mapDiagnoses( diagnoses,  mapping)
if(indicatorMeasurements){
	compareLists(indicatorMeasurements, infoPayload.indicatorMeasurements, "indicatorMeasurements")
}
else{
	if(infoPayload.indicatorMeasurements) testRunner.fail("В ответе обнаружен Список показателей дневника здоровья, хотя его быть не должно. Данные в ответе: "+infoPayload.indicatorMeasurements)
}
if(diagnoses){
	infoDiagnoses=infoPayload.selfControlForm.diagnosisCode
	log.info "infoDiagnoses "+infoDiagnoses
	log.info "diagnoses "+diagnoses
	compareLists(diagnoses, infoDiagnoses, "diagnoses")
}
else{
	if(infoPayload.selfControlForm.diagnosisCode)    testRunner.fail("В ответе обнаружены коды диагнозов, хотя их быть не должно. Дагнозы в ответе: "+infoPayload.selfControlForm.diagnosisCode)
}
]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fb809e71-62d6-417e-9b2f-488e0e0e3b0c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Вернуть нормальные значения справочника в бд" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Вернуть нормальные значения справочника" id="1e7b3030-2e04-4d32-8e14-811114a75e9d"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
sql = Sql.newInstance(connection)

query=""" INSERT INTO d_diagnosis_mkb10_pdn (id, title_mkb10, code_mkb10, archived_dispensary_observation_diagnosis, actual_mkb10, title_dispensary_observation_program, id_dispensary_observation_program, archived_dispensary_observation_program, is_deleted) VALUES
(158427045,'Острый инфаркт миокарда','I21',true,true,'Инфаркт миокарда','158396648',false,false),
(158427046,'Гипертензивная болезнь сердца [гипертоническая болезнь с преимущественным поражением сердца]','I11',true,true,'Артериальная гипертония','158396651',false,false),
(158427047,'Язва желудка','K25',true,true,'Язвенная болезнь','158396642',false,false),
(158427048,'Хроническая ишемическая болезнь сердца','I25',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(158427049,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек','I13',true,true,'Артериальная гипертония','158396651',false,false),
(158427050,'Фибрилляция и трепетание предсердий','I48',true,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(158427051,'Язва двенадцатиперстной кишки','K26',true,true,'Язвенная болезнь','158396642',false,false),
(158427052,'Повторный инфаркт миокарда','I22',true,true,'Инфаркт миокарда','158396648',false,false),
(158427053,'Сердечная недостаточность','I50',true,true,'Хроническая сердечная недостаточность','158396643',false,false),
(158427054,'Инфаркт мозга','I63',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(158427055,'Другая хроническая обструктивная легочная болезнь','J44',true,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(158427056,'Вторичная гипертензия','I15',true,true,'Артериальная гипертония','158396651',false,false),
(158427057,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением почек','I12',true,true,'Артериальная гипертония','158396651',false,false),
(158427058,'Эссенциальная [первичная] гипертензия','I10',true,true,'Артериальная гипертония','158396651',false,false),
(158427059,'Сахарный диабет 2 типа','E11',true,true,'Сахарный диабет','158396646',false,false),
(158427060,'Стенокардия [грудная жаба]','I20',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(158427061,'Нарушения обмена липопротеидов и другие липидемии','E78',true,true,'Гиперхолестеринемия','158396650',false,false),
(162377828,'Сахарный диабет 2 типа','E11',false,true,'Сахарный диабет','158396646',false,false),
(162377829,'Инсулиннезависимый сахарный диабет с поражениями глаз','E11.3',false,true,'Сахарный диабет','158396646',false,false),
(162377830,'Субарахноидальное кровоизлияние из каротидного синуса и бифуркации','I60.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377831,'Внутричерепное кровоизлияние (нетравматическое) неуточненное','I62.9',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377832,'Синдром инсульта в стволе головром мозга (I60-I67+)','G46.3',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377833,'Острый инфаркт миокарда неуточненный','I21.9',false,true,'Инфаркт миокарда','158396648',false,false),
(162377834,'Повторный инфаркт нижней стенки миокарда','I22.1',false,true,'Инфаркт миокарда','158396648',false,false),
(162377835,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца без (застойной) сердечной недостаточности','I11.9',false,true,'Артериальная гипертония','158396651',false,false),
(162377836,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением почек','I12',false,true,'Артериальная гипертония','158396651',false,false),
(162377837,'Повторный инфаркт миокарда неуточненной локализации','I22.9',false,true,'Инфаркт миокарда','158396648',false,false),
(162377838,'Другие сосудистые синдромы головного мозга при цереброваскулярных болезнях (I60-I67+)','G46.8',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377839,'Атеросклеротическая болезнь сердца','I25.1',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377840,'Реноваскулярная гипертензия','I15.0',false,true,'Артериальная гипертония','158396651',false,false),
(162377841,'Внутримозговое кровоизлияние в полушарие кортикальное','I61.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377842,'Сердечная недостаточность','I50',false,true,'Хроническая сердечная недостаточность','158396643',false,false),
(162377843,'Хроническая обструктивная легочная болезнь с обострением неуточненная','J44.1',false,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(162377844,'Внутримозговое кровоизлияние в полушарие неуточненное','I61.2',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377845,'Аневризма и расслоение коронарной артерии','I25.4',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377846,'Хроническая обструктивная легочная болезнь неуточненная','J44.9',false,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(162377847,'Внутримозговое кровоизлияние неуточненное','I61.9',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377848,'Перенесенный в прошлом инфаркт миокарда','I25.2',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377849,'Язва желудка, неуточненная как острая или хроническая, без кровотечения или прободения','K25.9',true,true,'Язвенная болезнь','158396642',false,false),
(162377850,'Язва двенадцатиперстной кишки','K26',true,true,'Язвенная болезнь','158396642',false,false),
(162377851,'Гипертензия вторичная по отношению к другим поражениям почек','I15.1',false,true,'Артериальная гипертония','158396651',false,false),
(162377852,'Бессимптомная ишемия миокарда','I25.6',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377853,'Вторичная гипертензия','I15',false,true,'Артериальная гипертония','158396651',false,false),
(162377854,'Синдром средней мозговой артерии (I66.0+)','G46.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377855,'Субарахноидальное кровоизлияние из задней соединительной артерии','I60.3',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377856,'Чисто чувствительный лакунарный синдром (I60-I67+)','G46.6',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377857,'Внутримозговое кровоизлияние в полушарие субкортикальное','I61.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377858,'Повторный инфаркт миокарда','I22',false,true,'Инфаркт миокарда','158396648',false,false),
(162377859,'Хроническая ишемическая болезнь сердца','I25',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377860,'Последствия инсульта, не уточненные как кровоизлияние или инфаркт мозга','I69.4',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377861,'Чистая гиперхолестеринемия','E78.0',false,true,'Гиперхолестеринемия','158396650',false,false),
(162377862,'Другая хроническая обструктивная легочная болезнь','J44',false,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(162377863,'Острый трансмуральный инфаркт передней стенки миокарда','I21.0',false,true,'Инфаркт миокарда','158396648',false,false),
(162377864,'Острый трансмуральный инфаркт миокарда неуточненной локализации','I21.3',false,true,'Инфаркт миокарда','158396648',false,false),
(162377865,'Атеросклеротическая сердечно-сосудистая болезнь, так описанная','I25.0',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377866,'Инфаркт мозга, вызванный эмболией мозговых артерий','I63.4',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377867,'Инфаркт мозга, вызванный неуточненной закупоркой или стенозом мозговых артерий','I63.5',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377868,'Другие формы острой ишемической болезни сердца','I24',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377869,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек неуточненная','I13.9',false,true,'Артериальная гипертония','158396651',false,false),
(162377870,'Нарушения обмена липопротеидов и другие липидемии','E78',false,true,'Гиперхолестеринемия','158396650',false,false),
(162377871,'Последствия других и неуточненных цереброваскулярных болезней','I69.8',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377872,'Инсульт, не уточненный как кровоизлияние или инфаркт','I64',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377873,'Постоянная форма фибрилляции предсердий','I48.1',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377874,'Инфаркт мозга','I63',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377875,'Синдром мозжечкового инсульта (I60-I67+)','G46.4',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377876,'Инфаркт мозга, вызванный эмболией прецеребральных артерий','I63.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377877,'Стенокардия неуточненная','I20.9',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377878,'Другие лакунарные синдромы (I60-I67+)','G46.7',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377879,'Нетравматическое экстрадуральное кровоизлияние','I62.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377880,'Инсулиннезависимый сахарный диабет с другими уточненными осложнениями','E11.6',false,true,'Сахарный диабет','158396646',false,false),
(162377881,'Субарахноидальное кровоизлияние из базилярной артерии','I60.4',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377882,'Хроническая форма фибрилляции предсердий','I48.2',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377883,'Последствия инфаркта мозга','I69.3',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377884,'Внутримозговое кровоизлияние','I61',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377885,'Язва двенадцатиперстной кишки неуточненная как острая или хроническая, без кровотечения или прободения','K26.9',true,true,'Язвенная болезнь','158396642',false,false),
(162377886,'Другие формы стенокардии','I20.8',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377887,'Множественные и двусторонние синдромы церебральных артерий','G45.2',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377888,'Субарахноидальное кровоизлияние из средней мозговой артерии','I60.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377889,'Чисто двигательный лакунарный синдром (I60-I67+)','G46.5',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377890,'Инфаркт мозга, вызванный неуточненной закупоркой или стенозом прецеребральных артерий','I63.2',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377891,'Повторный инфаркт передней стенки миокарда','I22.0',false,true,'Инфаркт миокарда','158396648',false,false),
(162377892,'Синдром задней мозговой артерии (I66.2+)','G46.2',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377893,'Пароксизмальная форма фибрилляции предсердий','I48.0',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377894,'Острый трансмуральный инфаркт миокарда других уточненных локализаций','I21.2',false,true,'Инфаркт миокарда','158396648',false,false),
(162377895,'Преходящая слепота','G45.3',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377896,'Последствия субарахноидального кровоизлияния','I69.0',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377897,'Субарахноидальное кровоизлияние из позвоночной артерии','I60.5',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377898,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением почек без почечной недостаточности','I12.9',false,true,'Артериальная гипертония','158396651',false,false),
(162377899,'Синдром передней мозговой артерии (I66.1+)','G46.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377900,'Стенокардия с документально подтвержденным спазмом','I20.1',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377901,'Острый трансмуральный инфаркт нижней стенки миокарда','I21.1',false,true,'Инфаркт миокарда','158396648',false,false),
(162377902,'Субарахноидальное кровоизлияние неуточненное','I60.9',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377903,'Повторный инфаркт миокарда другой уточненной локализации','I22.8',false,true,'Инфаркт миокарда','158396648',false,false),
(162377904,'Смешанная гиперлипидемия','E78.2',false,true,'Гиперхолестеринемия','158396650',false,false),
(162377905,'Гипертензия вторичная по отношению к эндокринным нарушениям','I15.2',false,true,'Артериальная гипертония','158396651',false,false),
(162377906,'Нестабильная стенокардия','I20.0',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377907,'Гипертензивная болезнь сердца [гипертоническая болезнь с преимущественным поражением сердца]','I11',false,true,'Артериальная гипертония','158396651',false,false),
(162377908,'Транзиторная глобальная амнезия','G45.4',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377909,'Острая ишемическая болезнь сердца неуточненная','I24.9',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377910,'Инфаркт мозга неуточненный','I63.9',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377911,'Язва двенадцатиперстной кишки хроническая без кровотечения или прободения','K26.7',true,true,'Язвенная болезнь','158396642',false,false),
(162377912,'Сердечная недостаточность неуточненная','I50.9',false,true,'Хроническая сердечная недостаточность','158396643',false,false),
(162377913,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек','I13',false,true,'Артериальная гипертония','158396651',false,false),
(162377914,'Субарахноидальное кровоизлияние из передней соединительной артерии','I60.2',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377915,'Другие транзиторные церебральные ишемические атаки и связанные с ними синдромы','G45.8',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377916,'Вторичная гипертензия неуточненная','I15.9',false,true,'Артериальная гипертония','158396651',false,false),
(162377917,'Острый инфаркт миокарда','I21',false,true,'Инфаркт миокарда','158396648',false,false),
(162377918,'Последствия другого нетравматического внутричерепного кровоизлияния','I69.2',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377919,'Инфаркт мозга, вызванный тромбозом вен мозга, непиогенный','I63.6',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377920,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек с (застойной) сердечной недостаточностью','I13.0',false,true,'Артериальная гипертония','158396651',false,false),
(162377921,'Нетравматическое субдуральное кровоизлияние','I62.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377922,'Субарахноидальное кровоизлияние из других внутричерепных артерий','I60.6',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377923,'Фибрилляция и трепетание предсердий неуточненное','I48.9',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377924,'Острый субэндокардиальный инфаркт миокарда','I21.4',false,true,'Инфаркт миокарда','158396648',false,false),
(162377925,'Левожелудочковая недостаточность','I50.1',false,true,'Хроническая сердечная недостаточность','158396643',false,false),
(162377926,'Другое субарахноидальное кровоизлияние','I60.8',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377927,'Инсулиннезависимый сахарный диабет с неуточненными осложнениями','E11.8',false,true,'Сахарный диабет','158396646',false,false),
(162377928,'Хроническая ишемическая болезнь сердца неуточненная','I25.9',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377929,'Атипичная форма трепетания предсердий','I48.4',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377930,'Инсулиннезависимый сахарный диабет с множественными осложнениями','E11.7',false,true,'Сахарный диабет','158396646',false,false),
(162377931,'Инфаркт мозга, вызванный тромбозом прецеребральных артерий','I63.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377932,'Синдром вертебробазилярной артериальной системы','G45.0',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377933,'Инфаркт мозга, вызванный тромбозом мозговых артерий','I63.3',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377934,'Застойная сердечная недостаточность','I50.0',false,true,'Хроническая сердечная недостаточность','158396643',false,false),
(162377935,'Другие формы острой ишемической болезни сердца','I24.8',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377936,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением почек с почечной недостаточностью','I12.0',false,true,'Артериальная гипертония','158396651',false,false),
(162377937,'Синдром сонной артерии (полушарный)','G45.1',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377938,'Инсулиннезависимый сахарный диабет с поражением почек','E11.2',false,true,'Сахарный диабет','158396646',false,false),
(162377939,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек с (застойной) сердечной недостаточностью и почечной недостаточностью','I13.2',false,true,'Артериальная гипертония','158396651',false,false),
(162377940,'Преходящие транзиторные церебральные ишемические приступы [атаки] и родственные синдромы','G45',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377941,'Хроническая обструктивная легочная болезнь с острой респираторной инфекцией нижних дыхательных путей','J44.0',false,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(162377942,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца с (застойной) сердечной недостаточностью','I11.0',false,true,'Артериальная гипертония','158396651',false,false),
(162377943,'Внутримозговое кровоизлияние внутрижелудочковое','I61.5',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377944,'Последствия внутричерепного кровоизлияния','I69.1',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377945,'Язва желудка','K25',true,true,'Язвенная болезнь','158396642',false,false),
(162377946,'Другое нетравматическое внутричерепное кровоизлияние','I62',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377947,'Аневризма сердца','I25.3',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377948,'Другая уточненная хроническая обструктивная легочная болезнь','J44.8',false,true,'Хроническая обструктивная болезнь легких','158396644',false,false),
(162377949,'Другой инфаркт мозга','I63.8',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377950,'Фибрилляция и трепетание предсердий','I48',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377951,'Гипертензивная [гипертоническая] болезнь с преимущественным поражением сердца и почек с почечной недостаточностью','I13.1',false,true,'Артериальная гипертония','158396651',false,false),
(162377952,'Другое внутримозговое кровоизлияние','I61.8',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377953,'Инсулиннезависимый сахарный диабет с неврологическими осложнениями','E11.4',false,true,'Сахарный диабет','158396646',false,false),
(162377954,'Транзиторная церебральная ишемическая атака неуточненная','G45.9',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377955,'Другая вторичная гипертензия','I15.8',false,true,'Артериальная гипертония','158396651',false,false),
(162377956,'Субарахноидальное кровоизлияние из внутричерепной артерии неуточненной','I60.7',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377957,'Стенокардия [грудная жаба]','I20',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377958,'Сосудистые мозговые синдромы при цереброваскулярных болезнях (I60-I67+)','G46',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377959,'Внутримозговое кровоизлияние в мозжечок','I61.4',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377960,'Типичная форма трепетания предсердий','I48.3',false,true,'Фибрилляция и (или) трепетание предсердий','158396645',false,false),
(162377961,'Инсулиннезависимый сахарный диабет с нарушениями периферического кровообращения','E11.5',false,true,'Сахарный диабет','158396646',false,false),
(162377962,'Язва желудка хроническая без кровотечения или прободения','K25.7',true,true,'Язвенная болезнь','158396642',false,false),
(162377963,'Ишемическая кардиомиопатия','I25.5',false,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377964,'Субарахноидальное кровоизлияние','I60',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377965,'Внутримозговое кровоизлияние в ствол мозга','I61.3',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377966,'Внутримозговое кровоизлияние множественной локализации','I61.6',false,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377967,'Другие формы хронической ишемической болезни сердца','I25.8',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377968,'Последствия цереброваскулярных болезней','I69',true,true,'Острое нарушение мозгового кровообращения','158396647',false,false),
(162377969,'Инсулиннезависимый сахарный диабет без осложнений','E11.9',false,true,'Сахарный диабет','158396646',false,false),
(162377970,'Коронарный тромбоз, не приводящий к инфаркту миокарда','I24.0',true,true,'Ишемическая болезнь сердца','158396649',false,false),
(162377971,'Эссенциальная [первичная] гипертензия','I10',false,true,'Артериальная гипертония','158396651',false,false),
(1204906763,'Последствия цереброваскулярных болезней','I69',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906764,'Последствия внутричерепного кровоизлияния','I69.1',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906765,'Последствия субарахноидального кровоизлияния','I69.0',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906766,'Последствия других и неуточненных цереброваскулярных болезней','I69.8',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906767,'Последствия другого нетравматического внутричерепного кровоизлияния','I69.2',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906768,'Последствия инсульта, не уточненные как кровоизлияние или инфаркт мозга','I69.4',false,true,'Последствия ОНМК','1204902866',false,false),
(1204906769,'Другие формы хронической ишемической болезни сердца','I25.8',false,true,'Инфаркт миокарда','158396648',false,false),
(1204906770,'Последствия инфаркта мозга','I69.3',false,true,'Последствия ОНМК','1204902866',false,false)
"""
sql.execute("TRUNCATE d_diagnosis_mkb10_pdn")
sql.execute(query)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c2f1c997-924b-45d2-a6ad-8fac8bbefca0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = CHILD и возрастом &lt;18 лет. В ПДН есть диагнозы_ID395419" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="aca583d8-aa55-408a-8202-dbd2d7c4bdf3"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v2" id="ae2e7a90-1808-4b62-9b90-90f2c989dac1"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1651db27-dda9-46a2-97da-a94ec22bf6f5" name="В ответе только selfControlForm.available=true"><con:configuration><path>$</path><content>{"payload":{"selfControlForm":{"available":false}}}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395419</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsWithoutOneDayAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="5d5c8058-1638-4d5b-84d4-5411a972001d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = CHILD и возрастом =18 лет. В ПДН есть диагнозы_ID395521" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="2585282a-c59c-48fe-b6a2-a76c4aba807e"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v2" id="50d50103-83cd-47d8-b77e-468149b99888"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1651db27-dda9-46a2-97da-a94ec22bf6f5" name="В ответе только selfControlForm.available=true"><con:configuration><path>$</path><content>{"payload":{"selfControlForm":{"available":false}}}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395521</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="dc4886eb-fc48-4828-a3be-110956d1a9ba" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = RELATIVE и возрастом &lt;18 лет. В ПДН есть диагнозы_ID395523" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="c584e9d3-fb98-454f-a960-4ef6fcae5a8f"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v2" id="215e552e-7e90-4262-a061-4a5b98df278f"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1651db27-dda9-46a2-97da-a94ec22bf6f5" name="В ответе только selfControlForm.available=true"><con:configuration><path>$</path><content>{"payload":{"selfControlForm":{"available":false}}}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395523</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>RELATIVE</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsWithoutOneDayAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="9bb57a35-cda4-454c-bbcf-2dd06b1e3ccb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = RELATIVE и возрастом =18 лет. В ПДН есть диагнозы_ID395524" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="e4385f3c-d73c-4a64-9891-c3466a9d006f"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v2" id="a7e826e6-16eb-4261-a436-21078c01e1b7"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b333f272-7a65-4104-ad42-4a02584f04a0" name="payload.selfControlForm.available=true"><con:configuration><path>$.payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Записать ответ инфо и пдн для проверки" id="df70388a-59c1-4c1f-8b33-8e7730831daf"><con:settings/><con:config><script>import groovy.sql.Sql
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')
def infoResponse = context.expand('${GET checkSelfControl v2#Response}') 
//log.info pdnResponse
//log.info infoResponse
testRunner.testCase.testSuite.setPropertyValue("pdnResponse", pdnResponse)
testRunner.testCase.testSuite.setPropertyValue("infoResponse", infoResponse)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить маппинг" id="2b691357-e1a4-42c7-aff0-c8629ab5c13c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e34a715e-ace7-4eb8-a664-29db6c353459</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395523</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>RELATIVE</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="0d743e67-df0d-4092-a44e-9987b1c653a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = PERSONAL и возрастом &lt;18 лет. В ПДН есть диагнозы_ID395525" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="8edef2c3-d3da-4e04-b96e-50c1d09a06cd"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v2" id="9b613222-e93d-45f9-81a0-d1fb1f45fe31"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1651db27-dda9-46a2-97da-a94ec22bf6f5" name="В ответе только selfControlForm.available=true"><con:configuration><path>$</path><content>{"payload":{"selfControlForm":{"available":false}}}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395525</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>PERSONAL</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsWithoutOneDayAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="6b3c86f8-e0b4-4c27-b413-16ece4346c6b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение информации по пациенту с permissionType = PERSONAL и возрастом =18 лет. В ПДН есть диагнозы_ID395526" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="d334f8b5-d46a-434f-a042-5d4505fd743f"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)

permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v2" id="d59e684c-7bc3-4a85-bcfa-1cc3831eba1d"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b333f272-7a65-4104-ad42-4a02584f04a0" name="payload.selfControlForm.available=true"><con:configuration><path>$.payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="GetPlanShort" id="6502d51f-e7cb-4389-a2e7-bd102e953003" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>24107262</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг диагнозов" id="d7506b2a-3a65-42c5-97c0-167dd4de0234" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
// функция отбора подходящих диагнозов (шаг 1.2)
def selectdiagnosesFromDB(List pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false").code
//	log.info sqlResult 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it
	}
	return diagnoses
}

// функция отбора диагнозов из маппинга 
def mapDiagnoses(List diagnoses, def mapping){
	version =testRunner.testCase.testSuite.getPropertyValue("version").toInteger()
	selectedDiagnoses=[]
	selectedIndicatorMeasurements=[]
	mapping.each{
		diagnoses.each{d ->
			if(it.diagnoses.contains(d)){
//				log.info d
				if(!selectedDiagnoses.contains(d))selectedDiagnoses << d
				newElem	=[]
				switch (version) {
					    case 2:
					         newElem= [title: it.name]
					        break;
					    case 3:
					       newElem= [title: it.name , code: it.code , aiMeasurementInputEnabled : it.voice]
					        break;
					     default:
					       testRunner.fail("в свойстах сьюта некорректная версия метода")
					}
				if(!selectedIndicatorMeasurements.contains(newElem))selectedIndicatorMeasurements << newElem
			}
		}
	}
	selectedElems=[diagnoses:selectedDiagnoses, indicatorMeasurements:selectedIndicatorMeasurements]
	return selectedElems
}


// функция проверки равенства списков
def compareLists(List list1, List list2, String name){
	List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки "+name+" имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором ="+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки "+name+" имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В "+name+" в списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В "+name+" в списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков "+name+" одинаковые"
        if(errors)  testRunner.fail("При сравнении списков "+name+" были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
}

//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')

pdnParsedResponse = new XmlSlurper().parseText(pdnResponse)
pdnCodes=pdnParsedResponse.Body.GetPlanShortResponse.result.diagnosis.diagnosisCode
def infoResponse = context.expand('${GET checkSelfControl v2#Response}') 
def infoParsedResponse = new JsonSlurper().parseText(infoResponse)
infoPayload=infoParsedResponse.payload
//log.info infoDiagnoses

diagnoses=selectdiagnosesFromDB(pdnCodes.toList())
//log.info diagnoses
selectedElems=mapDiagnoses( diagnoses,  mapping)

if(selectedElems){
	infoDiagnoses=infoPayload.selfControlForm.diagnosisCode
	compareLists(selectedElems.diagnoses, infoDiagnoses, "diagnoses")
	compareLists(selectedElems.indicatorMeasurements, infoPayload.indicatorMeasurements, "indicatorMeasurements")
}
else{
	if(infoPayload.selfControlForm.diagnosisCode)    testRunner.fail("В ответе обнаружены коды диагнозов, хотя их быть не должно. Дагнозы в ответе: "+infoPayload.selfControlForm.diagnosisCode)
	if(infoPayload.indicatorMeasurements) testRunner.fail("В ответе обнаружен Список показателей дневника здоровья, хотя его быть не должно. Данные в ответе: "+infoPayload.indicatorMeasurements)
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Записать ответ инфо и пдн для проверки" id="52396927-a31f-4075-aed8-f22479f3057a"><con:settings/><con:config><script>import groovy.sql.Sql
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')
def infoResponse = context.expand('${GET checkSelfControl v2#Response}') 
//log.info pdnResponse
//log.info infoResponse
testRunner.testCase.testSuite.setPropertyValue("pdnResponse", pdnResponse)
testRunner.testCase.testSuite.setPropertyValue("infoResponse", infoResponse)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить маппинг" id="1720ece6-93d2-4e0f-b67d-afb7eff4118d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e34a715e-ace7-4eb8-a664-29db6c353459</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395526</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>PERSONAL</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="29a9d841-d657-4a5c-94ca-9e35eba9692a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Полная проверка маппинга_ID379878" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="458262e1-1ca2-4573-a8ff-d864892a84fa"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)
permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="groovy" name="Обновить мок с диагнозами пдн" id="5014410d-8abb-48bb-b82c-17805eee176b"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
//подключиться к бд 
connectionMock =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
connectionInfo =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
sql = Sql.newInstance(connectionMock)
sql2 = Sql.newInstance(connectionInfo)

pdnMockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=pdnMockPath.replace("tcId",tcId)
//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
Set diagnoses=[]
mapping.diagnoses.each{ diagnoses.addAll(it) }
n=150
for(int i in 1..n){
	code=('A'..'Z').shuffled().take(1).join()+(10..99).shuffled().take(1).join()
	diagnoses <<  code
}
log.info diagnoses.sort()
n=diagnoses.size()-1
//n=2
values=""
pdnDiagnosis=""
for(int i in 0..n){
	k=i+1
	end = i==n ? "" : ","
	values += "("+k+", '"+diagnoses[i]+"', true, 'тест', false,  '"+k+"', 'тест', false, false)"+end
	pdnDiagnosis += "<ns2:diagnosis>"+
					"<ns2:diagnosisCode>"+diagnoses[i]+"</ns2:diagnosisCode>"+
					"<ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle>"+
				"</ns2:diagnosis>"
	
}

response="""<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Body>
		<GetPlanShortResponse xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
			<result>
				<ns2:id>25418</ns2:id>
				<ns2:jobExecutionId>10005163</ns2:jobExecutionId>
				"""+pdnDiagnosis+"""
			</result>
		</GetPlanShortResponse>
	</soap:Body>
</soap:Envelope>
"""
//return response
//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)

queryPdnDiagnosis="INSERT INTO d_diagnosis_mkb10_pdn "+
"(id, code_mkb10, actual_mkb10, title_mkb10, archived_dispensary_observation_diagnosis, id_dispensary_observation_program, title_dispensary_observation_program, archived_dispensary_observation_program, is_deleted) "+
"VALUES "+values
//log.info queryPdnDiagnosis
sql2.execute("TRUNCATE d_diagnosis_mkb10_pdn")
sql2.execute(queryPdnDiagnosis)]]></script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v2" id="d05b63aa-bb2c-4fe6-8556-1e953d891aee"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b333f272-7a65-4104-ad42-4a02584f04a0" name="payload.selfControlForm.available=true"><con:configuration><path>$.payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="GetPlanShort" id="54152a02-fe4b-4e6b-86eb-99da11475e53" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>24107262</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг диагнозов" id="33a0137c-5220-48a5-9d48-47ebf68c5ecd" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
// функция отбора подходящих диагнозов (шаг 1.2)
def selectdiagnosesFromDB(List pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false").code
//	log.info sqlResult 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it
	}
	return diagnoses
}

// функция отбора диагнозов из маппинга 
def mapDiagnoses(List diagnoses, def mapping){
	version =testRunner.testCase.testSuite.getPropertyValue("version").toInteger()
	selectedDiagnoses=[]
	selectedIndicatorMeasurements=[]
	mapping.each{
		diagnoses.each{d ->
			if(it.diagnoses.contains(d)){
//				log.info d
				if(!selectedDiagnoses.contains(d))selectedDiagnoses << d
				newElem	=[]
				switch (version) {
					    case 2:
					         newElem= [title: it.name]
					        break;
					    case 3:
					       newElem= [title: it.name , code: it.code , aiMeasurementInputEnabled : it.voice]
					        break;
					     default:
					       testRunner.fail("в свойстах сьюта некорректная версия метода")
					}
				if(!selectedIndicatorMeasurements.contains(newElem))selectedIndicatorMeasurements << newElem
			}
		}
	}
	selectedElems=[diagnoses:selectedDiagnoses, indicatorMeasurements:selectedIndicatorMeasurements]
	return selectedElems
}


// функция проверки равенства списков
def compareLists(List list1, List list2, String name){
	List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки "+name+" имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором ="+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки "+name+" имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В "+name+" в списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В "+name+" в списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков "+name+" одинаковые"
        if(errors)  testRunner.fail("При сравнении списков "+name+" были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
}

//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')

pdnParsedResponse = new XmlSlurper().parseText(pdnResponse)
pdnCodes=pdnParsedResponse.Body.GetPlanShortResponse.result.diagnosis.diagnosisCode
def infoResponse = context.expand('${GET checkSelfControl v2#Response}') 
def infoParsedResponse = new JsonSlurper().parseText(infoResponse)
infoPayload=infoParsedResponse.payload
//log.info infoDiagnoses

diagnoses=selectdiagnosesFromDB(pdnCodes.toList())
//log.info diagnoses
selectedElems=mapDiagnoses( diagnoses,  mapping)

if(selectedElems){
	infoDiagnoses=infoPayload.selfControlForm.diagnosisCode
	compareLists(selectedElems.diagnoses, infoDiagnoses, "diagnoses")
	compareLists(selectedElems.indicatorMeasurements, infoPayload.indicatorMeasurements, "indicatorMeasurements")
}
else{
	if(infoPayload.selfControlForm.diagnosisCode)    testRunner.fail("В ответе обнаружены коды диагнозов, хотя их быть не должно. Дагнозы в ответе: "+infoPayload.selfControlForm.diagnosisCode)
	if(infoPayload.indicatorMeasurements) testRunner.fail("В ответе обнаружен Список показателей дневника здоровья, хотя его быть не должно. Данные в ответе: "+infoPayload.indicatorMeasurements)
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Записать ответ инфо и пдн для проверки" id="99f42751-a82a-4ec6-85d8-af059ef6ac7c"><con:settings/><con:config><script>import groovy.sql.Sql
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')
def infoResponse = context.expand('${GET checkSelfControl v2#Response}') 
log.info pdnResponse
log.info infoResponse
testRunner.testCase.testSuite.setPropertyValue("pdnResponse", pdnResponse)
testRunner.testCase.testSuite.setPropertyValue("infoResponse", infoResponse)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить маппинг" id="e082cc95-ca3d-4d7f-b229-145791185bf6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e34a715e-ace7-4eb8-a664-29db6c353459</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Вернуть нормальные значения справочника в бд" id="26a054df-313b-4a5e-8b9b-81502e059ee7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb809e71-62d6-417e-9b2f-488e0e0e3b0c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>379878</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>PERSONAL</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="9c98970e-a163-4a1b-88ae-2b5720e6529e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка списка диагнозов в зависимости от наличия записей в каталоге d_diagnosis_mkb10_pdn_ID397157" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="f8aae518-0b91-4b3a-b187-b9e00e2a7144"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)
permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="groovy" name="Обновить мок с диагнозами пдн" id="72631e06-1962-40af-886d-efffda09416b"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
//подключиться к бд 
connectionMock =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
connectionInfo =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
sql = Sql.newInstance(connectionMock)
sql2 = Sql.newInstance(connectionInfo)

pdnMockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=pdnMockPath.replace("tcId",tcId)
//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
Set diagnoses=[]
mapping.diagnoses.each{ diagnoses.addAll(it) }
actual=[ true, false]
archivedDOD=[ true, false]
archivedDOP=[ true, false]
allValues=[]
actual.each{ a ->
	archivedDOD.each{ d ->
		archivedDOP.each{ p ->
			allValues << [actual: a, archivedDOD:d, archivedDOP:p]
		}
	}
}
allValues << []
log.info allValues.size()

n=allValues.size()-1
last=n-1
queryValues=""
pdnDiagnosis=""
for(int i in 0..n){
	k=i+1
	end = i==last ? "" : ","
	if(i<n) queryValues += "("+k+", '"+diagnoses[i]+"', "+allValues[i].actual+", 'тест', "+allValues[i].archivedDOD+",'"+k+"', 'тест', "+allValues[i].archivedDOP+", false)"+end
	pdnDiagnosis += "<ns2:diagnosis>"+
					"<ns2:diagnosisCode>"+diagnoses[i]+"</ns2:diagnosisCode>"+
					"<ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle>"+
				"</ns2:diagnosis>"
	
}
//log.info queryValues
//log.info pdnDiagnosis

response="""<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Body>
		<GetPlanShortResponse xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
			<result>
				<ns2:id>25418</ns2:id>
				<ns2:jobExecutionId>10005163</ns2:jobExecutionId>
				"""+pdnDiagnosis+"""
			</result>
		</GetPlanShortResponse>
	</soap:Body>
</soap:Envelope>
"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)

queryPdnDiagnosis="INSERT INTO d_diagnosis_mkb10_pdn "+
"(id, code_mkb10, actual_mkb10, title_mkb10, archived_dispensary_observation_diagnosis, id_dispensary_observation_program, title_dispensary_observation_program, archived_dispensary_observation_program, is_deleted) "+
"VALUES "+queryValues
//log.info queryPdnDiagnosis
sql2.execute("TRUNCATE d_diagnosis_mkb10_pdn")
sql2.execute(queryPdnDiagnosis)]]></script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v2" id="489a8716-60a8-46fe-b31b-cb4db982a823"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b333f272-7a65-4104-ad42-4a02584f04a0" name="payload.selfControlForm.available=true"><con:configuration><path>$.payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="GetPlanShort" id="8fbeab82-0539-47d7-b5de-ac38e1138a06" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>24107262</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг диагнозов" id="79bff19e-62da-49a7-91ab-c3862c8f0a37" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
// функция отбора подходящих диагнозов (шаг 1.2)
def selectdiagnosesFromDB(List pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false").code
//	log.info sqlResult 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it
	}
	return diagnoses
}

// функция отбора диагнозов из маппинга 
def mapDiagnoses(List diagnoses, def mapping){
	version =testRunner.testCase.testSuite.getPropertyValue("version").toInteger()
	selectedDiagnoses=[]
	selectedIndicatorMeasurements=[]
	mapping.each{
		diagnoses.each{d ->
			if(it.diagnoses.contains(d)){
//				log.info d
				if(!selectedDiagnoses.contains(d))selectedDiagnoses << d
				newElem	=[]
				switch (version) {
					    case 2:
					         newElem= [title: it.name]
					        break;
					    case 3:
					       newElem= [title: it.name , code: it.code , aiMeasurementInputEnabled : it.voice]
					        break;
					     default:
					       testRunner.fail("в свойстах сьюта некорректная версия метода")
					}
				if(!selectedIndicatorMeasurements.contains(newElem))selectedIndicatorMeasurements << newElem
			}
		}
	}
	selectedElems=[diagnoses:selectedDiagnoses, indicatorMeasurements:selectedIndicatorMeasurements]
	return selectedElems
}


// функция проверки равенства списков
def compareLists(List list1, List list2, String name){
	List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки "+name+" имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором ="+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки "+name+" имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В "+name+" в списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В "+name+" в списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков "+name+" одинаковые"
        if(errors)  testRunner.fail("При сравнении списков "+name+" были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
}

//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')

pdnParsedResponse = new XmlSlurper().parseText(pdnResponse)
pdnCodes=pdnParsedResponse.Body.GetPlanShortResponse.result.diagnosis.diagnosisCode
def infoResponse = context.expand('${GET checkSelfControl v2#Response}') 
def infoParsedResponse = new JsonSlurper().parseText(infoResponse)
infoPayload=infoParsedResponse.payload
//log.info infoDiagnoses

diagnoses=selectdiagnosesFromDB(pdnCodes.toList())
//log.info diagnoses
selectedElems=mapDiagnoses( diagnoses,  mapping)

if(selectedElems){
	infoDiagnoses=infoPayload.selfControlForm.diagnosisCode
	compareLists(selectedElems.diagnoses, infoDiagnoses, "diagnoses")
	compareLists(selectedElems.indicatorMeasurements, infoPayload.indicatorMeasurements, "indicatorMeasurements")
}
else{
	if(infoPayload.selfControlForm.diagnosisCode)    testRunner.fail("В ответе обнаружены коды диагнозов, хотя их быть не должно. Дагнозы в ответе: "+infoPayload.selfControlForm.diagnosisCode)
	if(infoPayload.indicatorMeasurements) testRunner.fail("В ответе обнаружен Список показателей дневника здоровья, хотя его быть не должно. Данные в ответе: "+infoPayload.indicatorMeasurements)
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Записать ответ инфо и пдн для проверки" id="09a45767-70a4-442e-9765-cfc7ab89f93e"><con:settings/><con:config><script>import groovy.sql.Sql
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')
def infoResponse = context.expand('${GET checkSelfControl v2#Response}') 
log.info pdnResponse
log.info infoResponse
testRunner.testCase.testSuite.setPropertyValue("pdnResponse", pdnResponse)
testRunner.testCase.testSuite.setPropertyValue("infoResponse", infoResponse)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить маппинг" id="5b41559a-fe12-4f0e-b01f-a16edc9c6af7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e34a715e-ace7-4eb8-a664-29db6c353459</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Вернуть нормальные значения справочника в бд" id="2609c85b-1b98-4c7b-bd35-b07008fd03fb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb809e71-62d6-417e-9b2f-488e0e0e3b0c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>397157</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>PERSONAL</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="7f0a3163-6f13-4221-bd42-fa789f80dd5f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Доступность анкеты самоконтроля без ПДН. Есть заполненная ранее анкета_ID234231" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Обновить мок с возрастом пациента" id="5f36e223-e78e-477f-bb5e-66d3645135e5"><con:settings/><con:config><script>import groovy.sql.Sql
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
emcMockPath = testRunner.testCase.testSuite.getPropertyValue("emcMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=emcMockPath.replace("tcId",tcId)
permissionType = testRunner.testCase.getPropertyValue("permissionType")
bdParamName = testRunner.testCase.getPropertyValue("bdParamName")
bd=testRunner.testCase.testSuite.getPropertyValue(bdParamName)

response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": 17965152,
         "policyNum": "7753530884001892",
         "birthday": """"+bd+"""",
         "permissionType": """"+permissionType+"""",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ],
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)</script></con:config></con:testStep><con:testStep type="groovy" name="Обновить мок с диагнозами пдн" id="a643397a-14e3-45a2-9d0b-540b5526d20b" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
//подключиться к бд 
connectionMock =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
connectionInfo =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
sql = Sql.newInstance(connectionMock)
sql2 = Sql.newInstance(connectionInfo)

pdnMockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
tcId = testRunner.testCase.getPropertyValue("tcId")
path=pdnMockPath.replace("tcId",tcId)
//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
Set diagnoses=[]
mapping.diagnoses.each{ diagnoses.addAll(it) }

def selectdiagnosesFromDB(def pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where  archived_dispensary_observation_diagnosis = true or archived_dispensary_observation_program = true").code
//	log.info sqlResult 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it
	}
	return diagnoses
}

diagnoses2=selectdiagnosesFromDB(diagnoses)
/*
actual=[ true, false]
archivedDOD=[ true, false]
archivedDOP=[ true, false]
allValues=[]
actual.each{ a ->
	archivedDOD.each{ d ->
		archivedDOP.each{ p ->
			allValues << [actual: a, archivedDOD:d, archivedDOP:p]
		}
	}
}
allValues << []
log.info allValues.size()

n=allValues.size()-1
last=n-1
queryValues=""
pdnDiagnosis=""
for(int i in 0..n){
	k=i+1
	end = i==last ? "" : ","
	if(i<n && diagnoses[i] != [actual: true, archivedDOD:false, archivedDOP:false] ) queryValues += "("+k+", '"+diagnoses[i]+"', "+allValues[i].actual+", 'тест', "+allValues[i].archivedDOD+",'"+k+"', 'тест', "+allValues[i].archivedDOP+", false)"+end
	pdnDiagnosis += "<ns2:diagnosis>"+
					"<ns2:diagnosisCode>"+diagnoses[i]+"</ns2:diagnosisCode>"+
					"<ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle>"+
				"</ns2:diagnosis>"
	
}
//log.info queryValues
//log.info pdnDiagnosis

response="""<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Body>
		<GetPlanShortResponse xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
			<result>
				<ns2:id>25418</ns2:id>
				<ns2:jobExecutionId>10005163</ns2:jobExecutionId>
				"""+pdnDiagnosis+"""
			</result>
		</GetPlanShortResponse>
	</soap:Body>
</soap:Envelope>
"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)

queryPdnDiagnosis="INSERT INTO d_diagnosis_mkb10_pdn "+
"(id, code_mkb10, actual_mkb10, title_mkb10, archived_dispensary_observation_diagnosis, id_dispensary_observation_program, title_dispensary_observation_program, archived_dispensary_observation_program, is_deleted) "+
"VALUES "+queryValues
//log.info queryPdnDiagnosis
sql2.execute("TRUNCATE d_diagnosis_mkb10_pdn")
sql2.execute(queryPdnDiagnosis)
*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="GET checkSelfControl v2" id="730e66b6-25f2-4cbe-ba38-7d492eb84bf0"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b333f272-7a65-4104-ad42-4a02584f04a0" name="payload.selfControlForm.available=true"><con:configuration><path>$.payload.selfControlForm.available</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="GetPlanShort" id="787a409b-1150-439b-814a-77d7bd873ed9" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>planServiceBinding</con:interface><con:operation>GetPlanShort</con:operation><con:request name="GetPlanShort" id="ddc83a31-0209-4c02-a595-7df5ffb238b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pdnEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/dnpdn/planService/v2/types/" xmlns:v2="http://emias.mos.ru/dnpdn/core/v2/">
   <soap:Header>
      <wsse:Security soap:mustUnderstand="true" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-9d130c8c-53c1-4cf0-94af-d0da7dd509fa" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <ns3:userContext xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
         <ns3:systemName>EIM</ns3:systemName>
<ns3:userName>HYkle6XW7ifrlT7wCuuK0iZ9RoePXm2NG92bTaLowfMA8P/yw85Mi/WrVHo89WDhWFgRt66EU3MBtQ3SEhhkrwOOLjNFijcReVF2xegR4E+wxgBS2JRt3CSP4mQfw4YEEJCPprUUC2KPBW+ckkHyt9wOaRq4TQjZ2/wTtdHDEyRs2sYIM1WUZPgc39vRRpfKGMv4keac/eirq9PlTfPQauQdxnGJ9ZDzQbAsUMULVbFW0m78KKR5JzAFpl7YFEx1o9eUT70XdBZDhfdVlljA+T+yRIOpW2SOZOEpVhYAZ8qTVOtKcJk060bDndYdUd1gQ0x6ckT1+CgOxQEbefi/Yw==</ns3:userName>
         <ns3:userRoleId>7187</ns3:userRoleId>
         <ns3:isUserRoleSystemWide>true</ns3:isUserRoleSystemWide>
         <ns3:userRights>
            <ns3:userRightId>5150001</ns3:userRightId>
            <ns3:userRightId>333001</ns3:userRightId>
            <ns3:userRightId>5150002</ns3:userRightId>
         </ns3:userRights>
         <ns3:jobExecutionId>1</ns3:jobExecutionId>
      </ns3:userContext>
   </soap:Header>
   <soap:Body>
      <typ:GetPlanShortRequest>
         <typ:patientId>24107262</typ:patientId>
      </typ:GetPlanShortRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e5cd214a-f356-4ca5-aaee-45716c567339"/><con:assertion type="Valid HTTP Status Codes" id="deb1153a-a492-4689-8ebd-aad602692df3" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cba6716d-183c-4ede-b91c-f42b1a6dbba3" name="Содержится diagnosisCode"><con:configuration><token>diagnosisCode</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг диагнозов" id="36963774-6b53-49a3-b5e7-6aef2d300249" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
// функция отбора подходящих диагнозов (шаг 1.2)
def selectdiagnosesFromDB(List pdnCodes){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
	sql = Sql.newInstance(connection)
	sqlResult = sql.rows("select code_mkb10 as code from  d_diagnosis_mkb10_pdn where actual_mkb10 = true and archived_dispensary_observation_diagnosis = false and archived_dispensary_observation_program = false").code
//	log.info sqlResult 
	List diagnoses=[]
	pdnCodes.each{
		if(sqlResult.contains(it)) diagnoses <<  it
	}
	return diagnoses
}

// функция отбора диагнозов из маппинга 
def mapDiagnoses(List diagnoses, def mapping){
	version =testRunner.testCase.testSuite.getPropertyValue("version").toInteger()
	selectedDiagnoses=[]
	selectedIndicatorMeasurements=[]
	mapping.each{
		diagnoses.each{d ->
			if(it.diagnoses.contains(d)){
//				log.info d
				if(!selectedDiagnoses.contains(d))selectedDiagnoses << d
				newElem	=[]
				switch (version) {
					    case 2:
					         newElem= [title: it.name]
					        break;
					    case 3:
					       newElem= [title: it.name , code: it.code , aiMeasurementInputEnabled : it.voice]
					        break;
					     default:
					       testRunner.fail("в свойстах сьюта некорректная версия метода")
					}
				if(!selectedIndicatorMeasurements.contains(newElem))selectedIndicatorMeasurements << newElem
			}
		}
	}
	selectedElems=[diagnoses:selectedDiagnoses, indicatorMeasurements:selectedIndicatorMeasurements]
	return selectedElems
}


// функция проверки равенства списков
def compareLists(List list1, List list2, String name){
	List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки "+name+" имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором ="+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки "+name+" имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В "+name+" в списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В "+name+" в списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков "+name+" одинаковые"
        if(errors)  testRunner.fail("При сравнении списков "+name+" были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
}

//маппинг показателей дневников здоровья на диагнозы ПДН https://wiki.mos.social/pages/viewpage.action?pageId=474174280
mapping=[
				[name: "Артериальное давление" , voice: true , code: "bloodPressure", diagnoses:["I10", "I11", "I11.0", "I11.9", "I12", "I12.0", "I12.9", "I13", "I13.0", "I13.1", "I13.2", "I13.9", "I15", "I15.0", "I15.1", "I15.2", "I15.8", "I15.9", "I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9", "E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Приступы стенокардии" , voice: false , code: "stenocardiaAttack", diagnoses:["I20.1", "I20.8", "I20.9", "I25", "I25.0", "I25.1", "I25.2", "I25.3", "I25.4", "I25.5", "I25.6", "I25.8", "I25.9", "I20.0", "I21", "I21.0", "I21.1", "I21.2", "I21.3", "I21.4", "I21.9", "I22", "I22.0", "I22.1", "I22.8", "I22.9", "I24", "I24.0", "I24.8", "I24.9"]],
				[name: "Пульс" , voice: false , code: "heartRate", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I50", "I50.0", "I50.1", "I50.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Ритмичность пульса" , voice: false , code: "heartRateRhythm", diagnoses:["I48", "I48.0", "I48.1", "I48.2", "I48.3", "I48.4", "I48.9", "I60", "I60.0", "I60.1", "I60.2", "I60.3", "I60.4", "I60.5", "I60.6", "I60.7", "I60.8", "I60.9", "I61", "I61.0", "I61.1", "I61.2", "I61.3", "I61.4", "I61.5", "I61.6", "I61.8", "I61.9", "I62", "I62.0", "I62.1", "I62.9", "I63", "I63.0", "I63.1", "I63.2", "I63.3", "I63.4", "I63.5", "I63.6", "I63.8", "I63.9", "I64", "I69", "I69.0", "I69.1", "I69.2", "I69.3", "I69.4", "I69.8", "G45", "G45.0", "G45.1", "G45.2", "G45.3", "G45.4", "G45.8", "G45.9", "G46", "G46.0", "G46.1", "G46.2", "G46.3", "G46.4", "G46.5", "G46.6", "G46.7", "G46.8"]],
				[name: "Кислород в крови" , voice: false , code: "bloodSaturation", diagnoses:["J44", "J44.0", "J44.1", "J44.8", "J44.9"]],
				[name: "Глюкоза в крови" , voice: false , code: "bloodGlucose", diagnoses:["E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]],
				[name: "Вес" , voice: false , code: "weight", diagnoses:["E78", "E78.0", "E78.2", "I50", "I50.0", "I50.1", "I50.9", "E11", "E11.2", "E11.3", "E11.4", "E11.5", "E11.6", "E11.7", "E11.8", "E11.9"]]
				]
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')

pdnParsedResponse = new XmlSlurper().parseText(pdnResponse)
pdnCodes=pdnParsedResponse.Body.GetPlanShortResponse.result.diagnosis.diagnosisCode
def infoResponse = context.expand('${GET checkSelfControl v2#Response}') 
def infoParsedResponse = new JsonSlurper().parseText(infoResponse)
infoPayload=infoParsedResponse.payload
//log.info infoDiagnoses

diagnoses=selectdiagnosesFromDB(pdnCodes.toList())
//log.info diagnoses
selectedElems=mapDiagnoses( diagnoses,  mapping)

if(selectedElems){
	infoDiagnoses=infoPayload.selfControlForm.diagnosisCode
	compareLists(selectedElems.diagnoses, infoDiagnoses, "diagnoses")
	compareLists(selectedElems.indicatorMeasurements, infoPayload.indicatorMeasurements, "indicatorMeasurements")
}
else{
	if(infoPayload.selfControlForm.diagnosisCode)    testRunner.fail("В ответе обнаружены коды диагнозов, хотя их быть не должно. Дагнозы в ответе: "+infoPayload.selfControlForm.diagnosisCode)
	if(infoPayload.indicatorMeasurements) testRunner.fail("В ответе обнаружен Список показателей дневника здоровья, хотя его быть не должно. Данные в ответе: "+infoPayload.indicatorMeasurements)
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Записать ответ инфо и пдн для проверки" id="f6744dc9-1fb2-4e2f-991c-195c975493f9"><con:settings/><con:config><script>import groovy.sql.Sql
String pdnResponse
mock = testRunner.testCase.getPropertyValue("mock").toBoolean()
//в зависимости от того, используется ли мок, получить либо тело мока, либо ответ метода пдн 
if(mock){
	connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
	sqlMock = Sql.newInstance(connection)
	mockPath = testRunner.testCase.testSuite.getPropertyValue("pdnMockPath")
	tcId = testRunner.testCase.getPropertyValue("tcId")
	path=mockPath.replace("tcId",tcId)
	query="select response from template_response where \"path\"= '"+path+"'"
	//log.info query
	pdnResponse=sqlMock.firstRow(query).response
}
else pdnResponse=context.expand('${GetPlanShort#Response}')
def infoResponse = context.expand('${GET checkSelfControl v2#Response}') 
log.info pdnResponse
log.info infoResponse
testRunner.testCase.testSuite.setPropertyValue("pdnResponse", pdnResponse)
testRunner.testCase.testSuite.setPropertyValue("infoResponse", infoResponse)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить маппинг" id="689e7546-d167-4ed1-adaf-7aee36f77634"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e34a715e-ace7-4eb8-a664-29db6c353459</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Вернуть нормальные значения справочника в бд" id="457c165d-9eea-4d22-ae2e-3c837e49474c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb809e71-62d6-417e-9b2f-488e0e0e3b0c</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>234231</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>PERSONAL</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="da1956b0-6340-45bc-bb1e-4c8dde83e8b2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получить токены" searchProperties="true"><con:settings/><con:testStep type="manualTestStep" name="Получить токены для Яны" id="c2294702-348c-4205-95ed-6c107809a1a4"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties/></con:testCase><con:testCase id="a7ae331b-b3e2-4e8f-8ff9-cfad60dc1b53" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="272488_АС1. SUDIR_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl v2" id="2b1af3be-d059-471d-a13f-0debafc0d6a7"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="123"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395419</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsWithoutOneDayAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="43551fed-de5a-415e-8b87-1570856e2469" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="234632_АС1. ACCESS_DENIED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl v2" id="57534497-45bf-4e9c-ae4e-d278bff310fb"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="123456"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>395419</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>bdParamName</con:name><con:value>eighteenYearsWithoutOneDayAgo</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="b8eb8fe8-24cb-4ac1-83e8-58b020a006a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="234631_АС2. PDN_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl v2" id="be403a3d-672f-47fc-8f68-93e719958b1f"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Mock-pdn" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
  <con:entry key="patientId" value="${#TestSuite#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>234631</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="251d7e3a-6190-4585-8a87-7e386a142c16" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="382976_АС3. LK_SERVER_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl v2" id="c0414f38-9e0c-4277-83b0-9d7bc7039b89"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 500"><con:configuration><codes>500</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.code = LK_SERVER_ERROR"><con:configuration><path>$.error.code</path><content>LK_SERVER_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.description = Ошибка вызова сервиса ЛК"><con:configuration><path>$.error.description</path><content>Ошибка вызова сервиса ЛК</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.type = TECHNICAL"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>382976</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property></con:properties></con:testCase><con:testCase id="34fc299f-c3f5-47a2-8271-9deb1117af01" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="382978_АС4. LK_AUTH_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET checkSelfControl v2" id="5b3e65e6-f04a-4349-be21-762dc74d4731"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/selfControl/checkSelfControl" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET checkSelfControl v2" id="7d3c40d3-4d73-4f20-837a-b2ede3cb4ca5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://application-emiasinfo3.emias.solit-clouds.ru/api/v3/selfControl/checkSelfControl</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df221d5a-256a-4a42-ac4a-31142470cb95" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.code = LK_AUTH_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>LK_AUTH_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.description = Токен авторизации не действителен"><con:configuration><path>$.error.description</path><content>Токен авторизации не действителен</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82f7de-0921-4cc9-a972-e6e4e90bcdc8" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="Mock-lk" value="${#Project#mockUrl}/${#TestCase#tcId}"/>
</con:parameters><con:parameterOrder><con:entry>patientId</con:entry><con:entry>Mock-pdn</con:entry><con:entry>Mock-lk</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>382978</con:value></con:property><con:property><con:name>permissionType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>mock</con:name><con:value>true</con:value></con:property><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>eighteenYearsAgo</con:name><con:value>2006-03-15</con:value></con:property><con:property><con:name>eighteenYearsWithoutOneDayAgo</con:name><con:value>2006-03-16</con:value></con:property><con:property><con:name>emcMockPath</con:name><con:value>/mock/tcId/internal/3/emc-permissions?ssoId=af3e4ac5-96dd-4167-afb3-244eb7187aba</con:value></con:property><con:property><con:name>patientId</con:name><con:value>17965152</con:value></con:property><con:property><con:name>pdnMockPath</con:name><con:value>/mock/tcId/getPlanShort</con:value></con:property><con:property><con:name>version</con:name><con:value>2</con:value></con:property><con:property><con:name>pdnResponse</con:name><con:value><![CDATA[ <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
	<soap:Body>
		<GetPlanShortResponse xmlns:ns4="http://emias.mos.ru/system/v1/faults/" xmlns:ns3="http://emias.mos.ru/system/v1/userContext/" xmlns:ns2="http://emias.mos.ru/dnpdn/core/v2/" xmlns="http://emias.mos.ru/dnpdn/planService/v2/types/">
			<result>
				<ns2:id>25418</ns2:id>
				<ns2:jobExecutionId>10005163</ns2:jobExecutionId>
				<ns2:diagnosis><ns2:diagnosisCode>I10</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I11</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I11.0</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I11.9</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I12</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I12.0</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I12.9</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I13</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis><ns2:diagnosis><ns2:diagnosisCode>I13.0</ns2:diagnosisCode><ns2:diagnosisTitle>некий диагноз</ns2:diagnosisTitle></ns2:diagnosis>
			</result>
		</GetPlanShortResponse>
	</soap:Body>
</soap:Envelope>
]]></con:value></con:property><con:property><con:name>infoResponse</con:name><con:value>{"payload":{"selfControlForm":{"available":true,"diagnosisCode":["I11.9"]},"indicatorMeasurements":[{"title":"Артериальное давление","code":"bloodPressure","aiMeasurementInputEnabled":true}]}}</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>emiasInfoEndpoint</con:name><con:value>http://application-emiasinfo4.emias.solit-clouds.ru/</con:value></con:property><con:property><con:name>emiasInfoDbConnection</con:name><con:value>172.17.5.11:29301/emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoDbLogin</con:name><con:value>emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoDbPassword</con:name><con:value>emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoFullDbConnection</con:name><con:value>jdbc:postgresql://172.17.5.11:29301/emiasinfoapp?user=emiasinfoapp&amp;password=emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoDBDriver</con:name><con:value>org.postgresql.Driver</con:value></con:property><con:property><con:name>lkEndpoint</con:name><con:value>https://lkservice.test.emias.ru</con:value></con:property><con:property><con:name>loginEndpoint</con:name><con:value>https://login-tech.mos.ru</con:value></con:property><con:property><con:name>pdnEndpoint</con:name><con:value>http://esbcamel.test.emias.mos.ru/proxy/dnpdn/dnpdnService/v2S/ProxyService</con:value></con:property><con:property><con:name>sudirToken</con:name><con:value>Z8jZ4d59Sp_0HcPIIat5b93CQwvm6KPBcZY0mCQEQd8</con:value></con:property><con:property><con:name>X-Access-JWT</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE3MDkyNzk3NzAsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJjMzdlYWU5ZC1hOTJhLTRmOTMtODlhYy05MjI4NjU3MjM2YWEiLCJzaWQiOiI1MWQzMTViNS03M2IzLTQ1MDMtYjdkNi02ZjNmNGY3NWI4NDgiLCJwaG9uZSI6Ijc5MjY1MjA5MjA3Iiwic3NvX2lkIjoiQldvMDNVL2ROdW5pcEZmVy9pdy9uRG9aWXYwdEpOKzA1Mjd6VnVnWkE3ZU5KUlpMSEo4UjQxWmEya0UyNnhQSVhwYTMyZ0JTcVdJVnkzRU5PVzQ2dWR3YXplSFlNYmE3S28yTFVFRzlmRGI2TnRERlQrcFlDd0ZVUGhPZ1dCMm5UUmlkSFh2bzIxazVwTGNTTWVjMUd4NVpoelNEZHc3cnRHeUpBa0U4T2x2bUJpRnhOT1hxQmp0ZlFraWlEQ1VnTFZ0YW1Mc0U0UkZ6RGxMSUNndjNDY0pWRkRNRXRlVmtTdGhOTnI4ZHkyYWV4N2pCdm42UUtzTHBCbXh2NG94TTZXVWxmV0tvZFZTR2QwS1VQczJVblUxVk5zc0UxMnZmWnFIQjVJT1pSQWRsZldTcmNhSTAyT1NKZktOQ2FYbS83QUNSUGJkOWxYR1M2ZlF1VlQ1QkZ3PT0iLCJlbWFpbCI6IiIsImZpcnN0X25hbWUiOiJcdTA0MmZcdTA0M2RcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzOFx1MDQ0NVx1MDQzMFx1MDQzOVx1MDQzYlx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIxOTgyLTA0LTA5IiwiYW1yIjpbXX0.IXgmNg5F6cJwIXDnqI9r5KFSwCxJzthBzdVt8QiJZTotIyFwAklGR71UbWTM8-xjfoLOcmLsgWu8um4niigpitCY8rAb4MekfYl37DFcmGaSMU-FTHv-hKAtcmBV5KJtX8Kn7xmz2GIM5PtOuNOAdk_i35qAKHeNuCOkgWZ48_6lMe2ZFRvzf5XxUqdaD31OipcAaVXfsLar3pZ2ZDOGDSN4NmXsY2GFDemgDMuBbsTEYKelz-5nddX9Ho6lnm3g0KMbAc0CEZfI7iVpYg3o0OGCr7deGKeNvkM1YvoWSNh-dc5oaQWJLxF7phKIVM7wO8DKr7L-NfhNWZRxi1ICK2L95lgUCbwjfe_GOlxjGsqaHjiC6qgggG3ykNytz1HVadDIhGcDFMj8L-YB08Xu3hzjbp_wKpo09DHeJqRp810lxyX8DhL7JTW499oFdc4BrC2nlqGBeAoRu91LZJcVBil3PFHIlxZ_cu1VJup7TkiIcjHdRmdIu5CLbFQ4j_12OqYSn0txPB1_eRa5PQAEFgm0tIaeDnPNHo-miUkPFYMHeGIiRTjm0pk_a2Q9CgZ9P7-uxSjoVF8u8-2hwm6zg4iRu4YBU0uejM5FLydkphnye75NIKLJfEv_q01PHF31PTH2k3Eph4XgCvb1lWw5B7-lKWVHvpu8aaqaFkPEI9c</con:value></con:property><con:property><con:name>refreshToken</con:name><con:value>2UuxtPWQIxZJQyMJFDnPixifr25LzNbTRnbSCcpQfyfoeUT-WUbi9fgCecYIuEUv7zcugW8Cuqtv6NG4bV7u-g</con:value></con:property><con:property><con:name>refresh-X-Access-JWT</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJyaWQiOiI5ZDcwN2Y0Ny00N2FmLTQxNDQtOGM2ZC1kZjRiZTYwMzg2NDMiLCJzaWQiOiI1MWQzMTViNS03M2IzLTQ1MDMtYjdkNi02ZjNmNGY3NWI4NDgiLCJleHAiOjE3MDk4ODA5NzAsInN1YiI6ImMzN2VhZTlkLWE5MmEtNGY5My04OWFjLTkyMjg2NTcyMzZhYSIsInNzb19pZCI6ImcxaDV4M0NxTlE4NUIxS1IvekUyWDYyMXc3YldqOFNhdndCMFlzMnJmcVp4ZSswTS9TeklHZEN2cHR0ZHhvcnVVVmlNZDNVbkR2OCswS0pmK0FyejZ5eWNXdmNNdVpLZ0pRVGNJZndQL010b3dZdzM0UnVScUY3cS9NSUhvbHZzcXdvSzYxRlp5VlMyOVZaTndDb1pneStOdVpUbHlrVjQ3MGdQUzkwN3Rsa1A4VUVMTUpORmNjc3NsY2UvMkNieDhqTnpWOTRDd1ljdWFTYmRsbWhBaHdJQkdHbzVFbExlNGZnMFV1SVQ0L2tLWTdhblB2RG9pMGNqUFBTNWI5NXBWN1dMVk1NVW1hWU1XckhaVFRpOHNIRERTNkF3a0VTaWdXWEY0bjQ2cWJNS0dHOFAzb3FQcG5zN1lITFhTTlNGb3pFSEQ5SVVKMXJyTkIxWis5YmQ4QT09In0.erWKXGGGTL5Du6TXZWwIxY9M6pzJ_V9V8fXKo8EVzZECfrorGWs4vjd59BodfiW6gHBRrOa-gelgAe0cXtyuwkdYAvb9Xh9I51VcMapLDmjwtzKb3ukkh0LLtENf2myG2P91Pczr-jI3W7ByEzeQ1PiaeqM5DUFWl2foD6ZIogzkGvEmdLRPG8b6oavrzyqFWBpIDEiUcnmTQFD9UC7ZERizH4bwNWN0mAxlo9enPR8dQhigSej23lcKOe32qVqsLMuorC_JkCaUmBYG35akjLYPdq7lO2DwxwV9mX6zHneHHqqGQeypEi7bSifpwKT3VuiCu-Sm5s8NaKmgN-eEHt48aadXHaSSscmek9f9aHakAmN74oKrQ2XtQVuzjrUeh7YTyzPJe8JNd62WyKBo1rQ5u4igDMCkGyfD9iUPFz7Ouq8pTEavNe30NO7kyewhz8bBwpMYwdKj3Qjdf_ffYbZeWgi1X4bA8Nmp8lrF7DvYXPHQ5vesLYCx_yrasK9FyGTDxxjp3IDmg--FJXE-qeDEnjvvW8ntlH9U6cGHOofp66gq1JyVl9Rx8Jvyd8MfPg-gvVKQslVfUoOme3PuOYZ9pfMtrvA0GsN-Y-ErLIVpY9XTa8J3QznNLX2kVNKfTiqoFbxZAXAv1U2TwgghICYjwmY5A6RvD7_AINyH5W4</con:value></con:property><con:property><con:name>base64</con:name><con:value>ZHlufmVtaWFzLmluZm9+ZDQyMDkwMTctZDM5MC00MTcxLTlhODItMDkyY2JlMDk4MThlOnhvTk1lWGFhNDN0ejg1MQ==</con:value></con:property><con:property><con:name>guid</con:name><con:value>af3e4ac5-96dd-4167-afb3-244eb7187aba</con:value></con:property><con:property><con:name>mockUrl</con:name><con:value>http://application-mock.emias.solit-clouds.ru/mock</con:value></con:property><con:property><con:name>mockDbFullConnection</con:name><con:value>jdbc:postgresql://172.17.5.13:29107/emias_info_mock?user=emias_info&amp;password=emias_info</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>