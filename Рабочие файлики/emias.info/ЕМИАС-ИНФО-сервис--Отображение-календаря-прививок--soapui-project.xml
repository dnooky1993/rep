<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="c7bd95ba-4ae4-46a6-aceb-bb54cb7694c9" activeEnvironment="Default" name="ЕМИАС.ИНФО сервис &quot;Отображение календаря прививок&quot;" resourceRoot="" soapui-version="5.7.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="c8a726bd-2e34-40bc-8a06-ca437bb0da0f" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://emiasinfo1.emias.solit-clouds.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint></con:endpoints><con:resource name="GetCalendar v4" path="/api/v4/calendar/getCalendar" id="d991a0c4-d7eb-4982-b880-86c2fbfe7ec5"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:value><con:style>QUERY</con:style><con:default>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>birthDate</con:name><con:value>2014-04-08</con:value><con:style>QUERY</con:style><con:default>2014-04-08</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetCalendar 1" id="08027d05-e0dd-404f-91e7-f4830111320b" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar">get:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502 400 403 401 500 404</con:status><con:params/><con:element xmlns:get="http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar">get:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>403</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GetCalendar v5" path="/api/v5/calendar/getCalendar" id="d991a0c4-d7eb-4982-b880-86c2fbfe7ec5"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:value><con:style>QUERY</con:style><con:default>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>birthDate</con:name><con:value>2014-04-08</con:value><con:style>QUERY</con:style><con:default>2014-04-08</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetCalendar 1" id="08027d05-e0dd-404f-91e7-f4830111320b" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar">get:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502 403 401 500 400 404</con:status><con:params/><con:element xmlns:get="http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar">get:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>403</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="5729f02b-d73f-4339-aa49-506a30a2836e" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://lkservice.test.emias.mos.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint></con:endpoints><con:resource name="Vaccinations" path="/api/3/vaccinations" id="b514009c-29ca-4cb7-9008-6a7e23331d63"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:value><con:style>QUERY</con:style><con:default>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Vaccinations 1" id="72daed71-4adf-4173-9cee-5b9713808d85" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:vac="https://lkservice.test.emias.mos.ru/api/3/vaccinations">vac:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>520 401 404</con:status><con:params/><con:element xmlns:vac="https://lkservice.test.emias.mos.ru/api/3/vaccinations">vac:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="bccb1561-673d-49c8-9fb4-4a0bcc09afec" wadlVersion="http://wadl.dev.java.net/2009/02" name="ЕМИАС.ИНФО сервис &quot;Отображение календаря прививок&quot;" type="rest" definitionUrl="aa0ecc57-6ef0-4013-9809-72580b96be74" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/></con:interface><con:testSuite id="cbd994f3-c685-4753-b22a-f41d8748fd4e" name="getCalendar v4"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b674d56a-cb78-4949-ba63-dea421064c92" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="145382_Проверка календаря справок новорожденного пациента без прививок" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="55ce9a39-a425-4de2-892b-b1e0651ec6e3"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет + 1 день) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, 0)
c.add(Calendar.DATE, 0)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getVaccinations" id="94c7fd2e-53f3-4d81-8095-30ea5f600368" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/3/vaccinations" methodName="Vaccinations 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getVaccinations" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/vaccinations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52227a58-9a22-4e7c-af56-268ebb89752d" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="a1b1e16b-c295-41a2-92e1-d0311eda4703"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/145382"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="81864677-7315-4616-886a-ea5c80fdcbb7" name="Not Contains addInfectionInfo"><con:configuration><token>addInfectionInfo</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31882583-76ba-4b06-a83a-6fa733d8cd19" name="isChild = true"><con:configuration><path>$.payload.isChild</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9a02f52e-75e7-4425-bebf-5afe6b58c9a7" name="Contains calendarComponent"><con:configuration><token>calendarComponent</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="de513411-cc15-4cb5-aba8-e7ec1422bac9"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == true //Проверяем что вернулся действительно ребёнок

assert calendar.addInfectionInfo == null //Проверяем что не вернулось поле addInfectionInfo, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 52 //В маппинге инфекций 52 с признаком isChild = true

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и вакцин у calendarComponent" id="bb7f6542-7354-4e63-93d2-f0297dc25308"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter
import groovy.sql.Sql

//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

path = testRunner.testCase.getPropertyValue("path")
query="select response from template_response where \"path\"= '"+path+"'"
def responseVac = sql.firstRow(query).response
def vaccinations  = new JsonSlurper().parseText(responseVac).doneList

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

log.info vaccinations
log.info calendar
//restResponse = context.expand( '${getVaccinations#Response}' ).toString()
//def vaccinations  = new JsonSlurper().parseText(restResponse).doneList

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

def doneList = []
for(done in vaccinations)
{
	if ((done.uploadedByUser == true && done.status == "confirmed") || done.uploadedByUser == false) //Отбирает подтверждённые сделанные вакцины
		doneList.add(done)
}

def getDoneVacines(infectionIDs, doneList)
{
	def vaccinations = []
	for (done in doneList)
	{
		infectionIDs.each{
			if (done.infectionList.infectionId.contains(it))
				vaccinations.add(done)
		}
	}
	vaccinations.sort{it.dateVaccination}
	return vaccinations
}

def checkVaccinatedInfoMapping(vInfo, dList)
{
	assert vInfo.date == dList.dateVaccination
	assert vInfo.vaccinationName == dList.vaccinationName
	assert vInfo.series == dList.series
	assert vInfo.dosage == dList.dosage
	assert vInfo.unitName == dList.unitName
	assert vInfo.method == dList.method
	assert dList.infectionList.multiplicity.contains(vInfo.multiplicity)
	assert vInfo.reactionList == dList.reactionList
	assert vInfo.moName == dList.moName
	assert vInfo.documentId == dList.documentId
}

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null // Проверяет что нет объекта vaccineInfo

								def doneVacinesOrdered = getDoneVacines(["80"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0]) //Проверяет маппинг объекта vaccinatedInfo, используя переданное вакцинирование
							}
							else
								assert infectionComponent.vaccinatedInfo == null // Проверяет что нет объекта vaccinatedInfo
								
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["81", "165"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["37", "105", "113", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["38", "106", "114", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["92"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["123"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["124"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["125"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["94"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84", "93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "56", "113", "150", "126", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "57", "114", "151", "127", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "58", "115", "152", "128", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "59", "116", "147", "129", "177", "156"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["54", "60", "117", "148", "130", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["44", "50", "85", "105", "113", "150", "153", "126", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["45", "51", "95", "106", "114", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["46", "52", "99", "107", "115", "152", "155", "128", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["47", "53", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["48", "54", "97", "109", "117", "130", "148","157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["49", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "74", "85", "105", "113", "126", "150", "153", "174", "227"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "75", "95", "106", "114", "127", "151", "154", "175", "228"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "76", "99", "107", "115", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "77", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["78", "54", "97", "109", "117", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["79", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["68", "126", "150", "153", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["69", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["70", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["71", "129", "147", "156","177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["72", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "2-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "20-24 месяца"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"

								assert infectionComponent.vaccinatedInfo == null
							}
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["73", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "3-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "6-7 лет"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"
								assert infectionComponent.vaccinatedInfo == null
							}
								
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["40", "126", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["41", "127", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["42", "128", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["43", "129", "130", "131", "156", "157", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["62", "64", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["63", "65", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "66", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "67"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "82", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "83", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["119", "120", "121", "122"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["36", "91", "178", "235"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["35", "90", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["162", "163"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["102", "103", "104"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2024-03-07</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/145382/3/vaccinations</con:value></con:property></con:properties></con:testCase><con:testCase id="b93529ad-a48c-4969-99f1-7bf18f9325c1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="145432_Проверка календаря справок пациента старше 18 лет" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="417d081c-1cac-4586-ab8c-9b228a173015"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет - 1 день) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)
c.add(Calendar.DATE, -1)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="4b9f1ddc-bd72-4a89-9eef-db66c0e2446e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="f899c5e9-13b6-4449-affc-07f1399f625b"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == false  //Проверяем что вернулся не ребёнок

assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 15 //В маппинге инфекций 15 с признаком isChild = false

def checkCount = 0 //Счетчик циклов

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1,V2,V3")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие и не являющиеся носителями HBs-Ag.</p>\n<p>Схема: 0–1-6 мес. (V2 через 1 месяц от первой прививки, V3 через 6 месяцев от первой прививки).</p>\n<p>Контактные в очаге (не привитые, не болевшие и не являющиеся носителями HBs-Ag) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "Группы риска")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [23])
							if (infectionComponent.description == "<p>Иммунизация однократно конъюгированной вакциной или каждые пять лет полисахаридной вакциной.</p>\n<p>Лица из групп риска — лица старше 60 лет, страдающие хроническими заболеваниями (дыхательной, сердечно-сосудистой систем, печени, почек, сахарным диабетом).</p>\n<p>Лица, проживающих в организациях социального обслуживания.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дифтерия":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес.</p>\n<p>Контактные в очаге (не привитые, не болевшие, привитые однократно) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18-35 лет")
										calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V+R")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [21])
						if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, организаций торговли, транспорта, коммунальной и социальной сферы, общественного питания.</p>\n<p>Лица, работающие вахтовым методом, и сотрудники государственных контрольных органов в пунктах пропуска через государственную границу Российской Федерации не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
									if (infectionComponent.vaccineInfo.age == "36–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "Женщины V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках. Ревакцинации подлежат однократно привитые.</p>\n<p>Перед вакцинацией для женщин рекомендовано исключить вероятность беременности, а также в течение 2 месяцев избегать вероятность зачатия.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–25 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Интервал между вакцинацией и ревакцинацией 6–12 месяцев. Для отдельных вакцин ограничение по возрасту — с 18 до 50 лет.</p>\n\n\n<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Лица, подверженные профессиональному риску заражения (работники медицинских организаций, персонал по уходу за больными, работники сферы обслуживания населения, занятые на предприятиях пищевой промышленности, а таже обслуживающие водопроводные и канализационные сооружения, оборудование и сети).</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций и учреждений всех форм собственности.\nСотрудники учреждений социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>\n<p>Лица, выезжающие в неблагополучные регионы и страны, где регистрируется вспышечная заболеваемость</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Грипп":
				if (infectionComponent.text == "Ежегодно")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, транспорта, коммунальной сферы, беременные женщины.</p>\n<p>Лица, подлежащие призыву на военную службу.</p>\n<p>Лица с хроническими заболеваниями, в том числе с заболеваниями лёгких, сердечно-сосудистыми заболеваниями, метаболическими нарушениями и ожирением.</p>\n<p>Мигранты.</p>\n<p>Строительные рабочие.</p>\n<p>Работники торговли, общественного питания, лица, имеющие контакт с птицей</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–59 лет")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Брюшной тиф":
			if (infectionComponent.text == "V каждые 3 года")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Лица, занятые в сфере коммунального благоустройства (работники, обслуживающие канализационные сети, сооружения и оборудование, работникам, участвующим в процессе водоподготовки и водоотведения, а также организаций, осуществляющих санитарную очистку населённых мест, сбор, транспортировку, утилизацию бытовых отходов).</p>\n<p>Лица, работающие с живыми культурами возбудителей брюшного тифа.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дизентерия Зонне":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Работники медицинских организаций (их структурных подразделений) инфекционного профиля и бактериологических лабораторий.</p>\n<p>Лица, занятые в сфере коммунального благоустройства, в том числе выезжающие на работу в оздоровительные лагеря. Персонал детских дошкольных организаций.</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций всех форм собственности.\nСотрудники социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
									
				break

			case "Клещевой вирусный энцефалит":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Вакцинация проводится двухкратно с интервалом между V1 и V2 от 1 месяца до полугода (возможно до 7 месяцев), ревакцинация через 1 год после заврешения первичного курса вакцинации. Последующие ревакцинации проводят каждые 3 года.</p>\n<p>Лица, работающие с живыми культурами возбудителя клещевого энцефалита.</p>\n<p>Лица, проживающие на эндемичных по клещевому вирусному энцефалиту территориях.</p>\n<p>Лица, выезжающие на эндемичные по клещевому вирусному энцефалиту территории, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и описаний у addInfectionInfo" id="a1026898-5cb5-4b11-a6ad-8dcfdd42d362"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload


assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.addInfectionInfo.size() == 9 //В маппинге 9 инфекций 

def checkCount = 0 //Счетчик циклов

while (calendar.addInfectionInfo.size() > 0)
{
	infectionComponent = calendar.addInfectionInfo[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Сибирская язва":
				if (infectionComponent.description == "<p>Вакцинация проводится двукратно с интервалом между введениями 20-30 суток. Ревакцинация - ежегодно.</p>\n\n<p>Лица, выполняющие следующие работы: зооветработники и другие лица, профессионально занятые предубойным содержанием скота, а также убоем, снятием шкур и разделкой туш; сбор, хранение, транспортировка и первичная обработка сырья животного происхождения; сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные на энзоотичных по сибирской язве территориях.</p>\n\n<p>Лица, работающие с материалом, подозрительным на инфицирование возбудителем сибирской язвы.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Туляремия":
				if (infectionComponent.description == "<p>Вакцинация проводится однократно. Ревакцинация каждые 5 лет. Перед проведением профилактических прививок необходимо проведение иммунодиагностического теста с тулярином. Вакцинация проводится при отрицательных результатах.</p>\n\n<p>Лица, проживающие на энзоотичных по туляремии территориях, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, другие работы по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя туляремии.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Чума":
				if (infectionComponent.description == "<p>Иммунизацию проводят однократно. Дозировка препарата зависит от способа введения: внутрикожно, подкожно, накожно, ингаляционно.</p>\n\n<p>Лица, проживающие на энзоотичных по чуме территориях.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя чумы.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бруцеллез":
				if (infectionComponent.description == "<p>Перед вакцинацией необходимо проведение иммунодиагностического теста с Бруцеллином или ИФА на наличие специфических антител. Вакцинация проводится при отрицательных результатах. Вакцинация - однократно, ревакцинация - через 10-12 месяцев (при отрицательных результатах тестов). В очагах козье-овечьего типа бруцеллеза лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания скота бруцеллезом; по убою скота, больного бруцеллезом, заготовке и переработке полученных от него мяса и мясопродуктов. Животноводы, ветеринарные работники, зоотехники в хозяйствах, энзоотичных по бруцеллезу.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя бруцеллеза.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бешенство":
				if (infectionComponent.description == "<p>Схема профилактической иммунизации: Первичная иммунизация - трехкратно (0, 7, 30 дни), первая ревакцинация - через год после законченного курса первичной иммунизации. Последующие ревакцинации - каждые 3 года. С профилактической целью вакцинируют лиц, имеющих высокий риск заражения бешенством: лица, работающие с \"уличным\" вирусом бешенства; ветеринарные работники; егеря, охотники, лесники; лица, выполняющие работы по отлову и содержанию животных.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лептоспироз":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через год по показаниям.</p>\n\n<p>Лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, расположенных на энзоотичных по лептоспирозу территориях; по убою скота, больного лептоспирозом, заготовке и переработке мяса и мясопродуктов, полученных от больных лептоспирозом животных; по отлову и содержанию безнадзорных животных.</p> \n\n<p>Лица, работающие с живыми культурами возбудителя лептоспироза.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лихорадка Ку":
				if (infectionComponent.description == "<p>Вакцинация однократно, ревакцинация - через 1 год.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания лихорадкой Ку.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению и переработке сельскохозяйственной продукции на энзоотичных территориях по лихорадке Ку.</p>\n\n<p>Лица, работающие с живыми культурами возбудителей лихорадки Ку.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Желтая лихорадка":
				if (infectionComponent.description == "<p>Вакцинация - однократно.</p>\n\n<p>Лица, подвергшиеся вакцинации, получают международное свидетельство о вакцинации (действительно в течение всей жизни вакцинированного лица и вступает в силу через 10 дней после даты вакцинации).</p>\n\n<p>Лица, выезжающие за пределы Российской Федерации в энзоотичные по желтой лихорадке страны (регионы).</p>\n\n<p>Лица, работающие с живыми культурами возбудителя желтой лихорадки.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Холера":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через 6 месяцев по показаниям.</p>\n\n<p>Лица, выезжающие в неблагополучные по холере страны (регионы). Население субъектов Российской Федерации в случае осложнения санитарно-эпидемиологической обстановки по холере в сопредельных странах, а также на территории Российской Федерации.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break
				
			default:
				break
		}
		checkCount++
}

assert calendar.addInfectionInfo.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property></con:properties></con:testCase><con:testCase id="50371664-5786-4b88-bf8b-ec2d81b99d23" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="145393_Пациент с прививками, которому завтра 18 лет (uploadedByUser = false)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="58cb4fe1-7134-4bf2-9dcd-ee273e8836e5"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет + 1 день) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)
c.add(Calendar.DATE, 1)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getVaccinations" id="26f753a7-8747-473c-900f-74fa281fe876" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/3/vaccinations" methodName="Vaccinations 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getVaccinations" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#Project#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/vaccinations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52227a58-9a22-4e7c-af56-268ebb89752d" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="4a243c7f-1fb6-4152-8c7e-e42246aefc79"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/145393"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="a467e7f3-6a6e-4f66-a1a9-e3107f3ce4ae"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == true //Проверяем что вернулся действительно ребёнок

assert calendar.addInfectionInfo == null //Проверяем что не вернулось поле addInfectionInfo, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 52 //В маппинге инфекций 52 с признаком isChild = true

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и вакцин у calendarComponent" id="6900dd13-5842-45a7-aa17-4b48b769642c"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter
import groovy.sql.Sql

//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

path = testRunner.testCase.getPropertyValue("path")
query="select response from template_response where \"path\"= '"+path+"'"
def responseVac = sql.firstRow(query).response
def vaccinations  = new JsonSlurper().parseText(responseVac).doneList

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

def doneList = []
for(done in vaccinations)
{
	if ((done.uploadedByUser == true && done.status == "confirmed") || done.uploadedByUser == false) //Отбирает подтверждённые сделанные вакцины
		doneList.add(done)
}

def getDoneVacines(infectionIDs, doneList)
{
	def vaccinations = []
	for (done in doneList)
	{
		infectionIDs.each{
			if (done.infectionList.infectionId.contains(it))
				vaccinations.add(done)
		}
	}
	vaccinations.sort{it.dateVaccination}
	return vaccinations
}

def checkVaccinatedInfoMapping(vInfo, dList)
{
	assert vInfo.date == dList.dateVaccination
	assert vInfo.vaccinationName == dList.vaccinationName
	assert vInfo.series == dList.series
	assert vInfo.dosage == dList.dosage
	assert vInfo.unitName == dList.unitName
	assert vInfo.method == dList.method
	assert dList.infectionList.multiplicity.contains(vInfo.multiplicity)
	assert vInfo.reactionList == dList.reactionList
	assert vInfo.moName == dList.moName
	assert vInfo.documentId == dList.documentId
}

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null // Проверяет что нет объекта vaccineInfo

								def doneVacinesOrdered = getDoneVacines(["80"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0]) //Проверяет маппинг объекта vaccinatedInfo, используя переданное вакцинирование
							}
							else
								assert infectionComponent.vaccinatedInfo == null // Проверяет что нет объекта vaccinatedInfo
								
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["81", "165"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["37", "105", "113", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["38", "106", "114", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["92"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["123"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["124"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["125"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["94"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84", "93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "56", "113", "150", "126", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "57", "114", "151", "127", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "58", "115", "152", "128", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "59", "116", "147", "129", "177", "156"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["54", "60", "117", "148", "130", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["44", "50", "85", "105", "113", "150", "153", "126", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["45", "51", "95", "106", "114", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["46", "52", "99", "107", "115", "152", "155", "128", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["47", "53", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["48", "54", "97", "109", "117", "130", "148","157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["49", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "74", "85", "105", "113", "126", "150", "153", "174", "227"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "75", "95", "106", "114", "127", "151", "154", "175", "228"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "76", "99", "107", "115", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "77", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["78", "54", "97", "109", "117", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["79", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["68", "126", "150", "153", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["69", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["70", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["71", "129", "147", "156","177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["72", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "2-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "20-24 месяца"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"

								assert infectionComponent.vaccinatedInfo == null
							}
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["73", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "3-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "6-7 лет"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"
								assert infectionComponent.vaccinatedInfo == null
							}
								
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["40", "126", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["41", "127", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["42", "128", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["43", "129", "130", "131", "156", "157", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["62", "64", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["63", "65", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "66", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "67"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "82", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "83", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["119", "120", "121", "122"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["36", "91", "178", "235"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["35", "90", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["162", "163"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["102", "103", "104"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2006-03-08</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/145393/3/vaccinations</con:value></con:property></con:properties></con:testCase><con:testCase id="02579c3f-2aa5-4ada-8e50-bc25988fece1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="145433_Пациент с прививками, которому завтра 18 лет (uploadedByUser =true и status=confirmed)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="42e86616-3493-4e60-a8af-934c929c86cd"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет + 1 день) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)
c.add(Calendar.DATE, 1)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="1ae97fa9-dfb2-4500-a1d0-69e6d84f0e99"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/145433"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8b0b1a49-181b-472f-a4b0-f9a1f5f672f2" name="Contains documentId, у которого uploadedByUser = true и status = confirmed"><con:configuration><token>49845971-7e74-4436-b0af-3634f95f1409</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="379fb8cf-845c-48e1-bb10-731d8493d7ef" name="Not Contains documentId, у которого uploadedByUser = true и status = processed"><con:configuration><token>74141698-7561-4c76-acc9-a8102221d817</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="379fb8cf-845c-48e1-bb10-731d8493d7ef" name="Not Contains documentId, у которого uploadedByUser = true и status = notProcessed"><con:configuration><token>fc20dabd-16d7-42e6-b502-4ea8626887e7</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="a5e6cd0d-dd11-46d3-8d71-6ad2009f997c"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == true //Проверяем что вернулся действительно ребёнок

assert calendar.addInfectionInfo == null //Проверяем что не вернулось поле addInfectionInfo, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 52 //В маппинге инфекций 52 с признаком isChild = true

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и описаний у addInfectionInfo" id="1b8c655c-d19e-408a-a7bb-24244c4dbe5b"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter
import groovy.sql.Sql

//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

path = testRunner.testCase.getPropertyValue("path")
query="select response from template_response where \"path\"= '"+path+"'"
def responseVac = sql.firstRow(query).response
def vaccinations  = new JsonSlurper().parseText(responseVac).doneList

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

def doneList = []
for(done in vaccinations)
{
	if ((done.uploadedByUser == true && done.status == "confirmed") || done.uploadedByUser == false) //Отбирает подтверждённые сделанные вакцины
		doneList.add(done)
}

def getDoneVacines(infectionIDs, doneList)
{
	def vaccinations = []
	for (done in doneList)
	{
		infectionIDs.each{
			if (done.infectionList.infectionId.contains(it))
				vaccinations.add(done)
		}
	}
	vaccinations.sort{it.dateVaccination}
	return vaccinations
}

def checkVaccinatedInfoMapping(vInfo, dList)
{
	assert vInfo.date == dList.dateVaccination
	assert vInfo.vaccinationName == dList.vaccinationName
	assert vInfo.series == dList.series
	assert vInfo.dosage == dList.dosage
	assert vInfo.unitName == dList.unitName
	assert vInfo.method == dList.method
	assert dList.infectionList.multiplicity.contains(vInfo.multiplicity)
	assert vInfo.reactionList == dList.reactionList
	assert vInfo.moName == dList.moName
	assert vInfo.documentId == dList.documentId
}

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null // Проверяет что нет объекта vaccineInfo

								def doneVacinesOrdered = getDoneVacines(["80"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0]) //Проверяет маппинг объекта vaccinatedInfo, используя переданное вакцинирование
							}
							else
								assert infectionComponent.vaccinatedInfo == null // Проверяет что нет объекта vaccinatedInfo
								
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["81", "165"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["37", "105", "113", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["38", "106", "114", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["92"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["123"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["124"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["125"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["94"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84", "93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "56", "113", "150", "126", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "57", "114", "151", "127", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "58", "115", "152", "128", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "59", "116", "147", "129", "177", "156"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["54", "60", "117", "148", "130", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["44", "50", "85", "105", "113", "150", "153", "126", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["45", "51", "95", "106", "114", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["46", "52", "99", "107", "115", "152", "155", "128", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["47", "53", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["48", "54", "97", "109", "117", "130", "148","157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["49", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "74", "85", "105", "113", "126", "150", "153", "174", "227"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "75", "95", "106", "114", "127", "151", "154", "175", "228"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "76", "99", "107", "115", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "77", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["78", "54", "97", "109", "117", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["79", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["68", "126", "150", "153", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["69", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["70", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["71", "129", "147", "156","177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["72", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "2-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "20-24 месяца"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"

								assert infectionComponent.vaccinatedInfo == null
							}
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["73", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "3-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "6-7 лет"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"
								assert infectionComponent.vaccinatedInfo == null
							}
								
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["40", "126", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["41", "127", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["42", "128", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["43", "129", "130", "131", "156", "157", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["62", "64", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["63", "65", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "66", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "67"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "82", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "83", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["119", "120", "121", "122"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["36", "91", "178", "235"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["35", "90", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["162", "163"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["102", "103", "104"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2006-03-12</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/145433/3/vaccinations</con:value></con:property></con:properties></con:testCase><con:testCase id="3f696a09-90f9-4fbe-a926-0e4f010873d9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="145384_Проверка календаря справок пациента до 18 лет (интеграционный)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="f4c961d6-935e-4230-a26d-58db9dc835cf"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет + 1 день) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)
c.add(Calendar.DATE, 1)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getVaccinations" id="eee2cad2-1a71-4d67-866c-07e349f55b17"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/3/vaccinations" methodName="Vaccinations 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getVaccinations" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/vaccinations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52227a58-9a22-4e7c-af56-268ebb89752d" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="c2dddec2-5e76-4e08-8a45-467ad21f9e86"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="81864677-7315-4616-886a-ea5c80fdcbb7" name="Not Contains addInfectionInfo"><con:configuration><token>addInfectionInfo</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31882583-76ba-4b06-a83a-6fa733d8cd19" name="isChild = true"><con:configuration><path>$.payload.isChild</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9a02f52e-75e7-4425-bebf-5afe6b58c9a7" name="Contains calendarComponent"><con:configuration><token>calendarComponent</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="afbbebad-3ff7-4171-8d54-24a85cee634e"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == true //Проверяем что вернулся действительно ребёнок

assert calendar.addInfectionInfo == null //Проверяем что не вернулось поле addInfectionInfo, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 52 //В маппинге инфекций 52 с признаком isChild = true

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и вакцин у calendarComponent" id="d3fdc77a-7b32-4084-8bcd-ba46a3f578f5"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload
restResponse = context.expand( '${getVaccinations#Response}' ).toString()
def vaccinations  = new JsonSlurper().parseText(restResponse).doneList

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

def doneList = []
for(done in vaccinations)
{
	if ((done.uploadedByUser == true && done.status == "confirmed") || done.uploadedByUser == false) //Отбирает подтверждённые сделанные вакцины
		doneList.add(done)
}

def getDoneVacines(infectionIDs, doneList)
{
	def vaccinations = []
	for (done in doneList)
	{
		infectionIDs.each{
			if (done.infectionList.infectionId.contains(it))
				vaccinations.add(done)
		}
	}
	vaccinations.sort{it.dateVaccination}
	return vaccinations
}

def checkVaccinatedInfoMapping(vInfo, dList)
{
	assert vInfo.date == dList.dateVaccination
	assert vInfo.vaccinationName == dList.vaccinationName
	assert vInfo.series == dList.series
	assert vInfo.dosage == dList.dosage
	assert vInfo.unitName == dList.unitName
	assert vInfo.method == dList.method
	assert dList.infectionList.multiplicity.contains(vInfo.multiplicity)
	assert vInfo.reactionList == dList.reactionList
	assert vInfo.moName == dList.moName
	assert vInfo.documentId == dList.documentId
}

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null // Проверяет что нет объекта vaccineInfo

								def doneVacinesOrdered = getDoneVacines(["80"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0]) //Проверяет маппинг объекта vaccinatedInfo, используя переданное вакцинирование
							}
							else
								assert infectionComponent.vaccinatedInfo == null // Проверяет что нет объекта vaccinatedInfo
								
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["81", "165"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["37", "105", "113", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["38", "106", "114", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["92"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["123"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["124"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["125"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["94"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84", "93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "56", "113", "150", "126", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "57", "114", "151", "127", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "58", "115", "152", "128", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "59", "116", "147", "129", "177", "156"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["54", "60", "117", "148", "130", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["44", "50", "85", "105", "113", "150", "153", "126", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["45", "51", "95", "106", "114", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["46", "52", "99", "107", "115", "152", "155", "128", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["47", "53", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["48", "54", "97", "109", "117", "130", "148","157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["49", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "74", "85", "105", "113", "126", "150", "153", "174", "227"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "75", "95", "106", "114", "127", "151", "154", "175", "228"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "76", "99", "107", "115", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "77", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["78", "54", "97", "109", "117", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["79", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["68", "126", "150", "153", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["69", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["70", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["71", "129", "147", "156","177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["72", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "2-я ревакцинация"
								assert infectionComponent.vaccineInfo.range == "20-24 месяца"
								assert infectionComponent.vaccineInfo.description == "Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)"

								assert infectionComponent.vaccinatedInfo == null
							}
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["73", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "3-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "6-7 лет"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"
								assert infectionComponent.vaccinatedInfo == null
							}
								
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["40", "126", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["41", "127", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["42", "128", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["43", "129", "130", "131", "156", "157", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["62", "64", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["63", "65", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "66", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "67"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "82", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "83", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["119", "120", "121", "122"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["36", "91", "178", "235"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["35", "90", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["162", "163"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["102", "103", "104"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2006-03-12</con:value></con:property></con:properties></con:testCase><con:testCase id="f69badd8-0fca-4603-bf30-c12b1384e561" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="145432_Проверка календаря справок пациента, которому ровно 18 лет" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="aa632752-e269-4f15-9a36-a7ee37fda872"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="e7c317fb-c064-4ef7-91ed-30104f98cff0"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="b7ec5e8d-f930-44dd-85a2-319b7dc8acdf"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == false  //Проверяем что вернулся не ребёнок

assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 15 //В маппинге инфекций 15 с признаком isChild = false

def checkCount = 0 //Счетчик циклов

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1,V2,V3")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие и не являющиеся носителями HBs-Ag.</p>\n<p>Схема: 0–1-6 мес. (V2 через 1 месяц от первой прививки, V3 через 6 месяцев от первой прививки).</p>\n<p>Контактные в очаге (не привитые, не болевшие и не являющиеся носителями HBs-Ag) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "Группы риска")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [23])
							if (infectionComponent.description == "<p>Иммунизация однократно конъюгированной вакциной или каждые пять лет полисахаридной вакциной.</p>\n<p>Лица из групп риска — лица старше 60 лет, страдающие хроническими заболеваниями (дыхательной, сердечно-сосудистой систем, печени, почек, сахарным диабетом).</p>\n<p>Лица, проживающих в организациях социального обслуживания.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дифтерия":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес.</p>\n<p>Контактные в очаге (не привитые, не болевшие, привитые однократно) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18-35 лет")
										calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V+R")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [21])
						if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, организаций торговли, транспорта, коммунальной и социальной сферы, общественного питания.</p>\n<p>Лица, работающие вахтовым методом, и сотрудники государственных контрольных органов в пунктах пропуска через государственную границу Российской Федерации не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
									if (infectionComponent.vaccineInfo.age == "36–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "Женщины V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках. Ревакцинации подлежат однократно привитые.</p>\n<p>Перед вакцинацией для женщин рекомендовано исключить вероятность беременности, а также в течение 2 месяцев избегать вероятность зачатия.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–25 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Интервал между вакцинацией и ревакцинацией 6–12 месяцев. Для отдельных вакцин ограничение по возрасту — с 18 до 50 лет.</p>\n\n\n<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Лица, подверженные профессиональному риску заражения (работники медицинских организаций, персонал по уходу за больными, работники сферы обслуживания населения, занятые на предприятиях пищевой промышленности, а таже обслуживающие водопроводные и канализационные сооружения, оборудование и сети).</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций и учреждений всех форм собственности.\nСотрудники учреждений социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>\n<p>Лица, выезжающие в неблагополучные регионы и страны, где регистрируется вспышечная заболеваемость</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Грипп":
				if (infectionComponent.text == "Ежегодно")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, транспорта, коммунальной сферы, беременные женщины.</p>\n<p>Лица, подлежащие призыву на военную службу.</p>\n<p>Лица с хроническими заболеваниями, в том числе с заболеваниями лёгких, сердечно-сосудистыми заболеваниями, метаболическими нарушениями и ожирением.</p>\n<p>Мигранты.</p>\n<p>Строительные рабочие.</p>\n<p>Работники торговли, общественного питания, лица, имеющие контакт с птицей</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–59 лет")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Брюшной тиф":
			if (infectionComponent.text == "V каждые 3 года")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Лица, занятые в сфере коммунального благоустройства (работники, обслуживающие канализационные сети, сооружения и оборудование, работникам, участвующим в процессе водоподготовки и водоотведения, а также организаций, осуществляющих санитарную очистку населённых мест, сбор, транспортировку, утилизацию бытовых отходов).</p>\n<p>Лица, работающие с живыми культурами возбудителей брюшного тифа.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дизентерия Зонне":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Работники медицинских организаций (их структурных подразделений) инфекционного профиля и бактериологических лабораторий.</p>\n<p>Лица, занятые в сфере коммунального благоустройства, в том числе выезжающие на работу в оздоровительные лагеря. Персонал детских дошкольных организаций.</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций всех форм собственности.\nСотрудники социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
									
				break

			case "Клещевой вирусный энцефалит":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Вакцинация проводится двухкратно с интервалом между V1 и V2 от 1 месяца до полугода (возможно до 7 месяцев), ревакцинация через 1 год после заврешения первичного курса вакцинации. Последующие ревакцинации проводят каждые 3 года.</p>\n<p>Лица, работающие с живыми культурами возбудителя клещевого энцефалита.</p>\n<p>Лица, проживающие на эндемичных по клещевому вирусному энцефалиту территориях.</p>\n<p>Лица, выезжающие на эндемичные по клещевому вирусному энцефалиту территории, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

//assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и описаний у addInfectionInfo" id="b39de5df-cacb-46cd-8ec3-e8c7be91dbd6"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload


assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.addInfectionInfo.size() == 9 //В маппинге 9 инфекций 

def checkCount = 0 //Счетчик циклов

while (calendar.addInfectionInfo.size() > 0)
{
	infectionComponent = calendar.addInfectionInfo[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Сибирская язва":
				if (infectionComponent.description == "<p>Вакцинация проводится двукратно с интервалом между введениями 20-30 суток. Ревакцинация - ежегодно.</p>\n\n<p>Лица, выполняющие следующие работы: зооветработники и другие лица, профессионально занятые предубойным содержанием скота, а также убоем, снятием шкур и разделкой туш; сбор, хранение, транспортировка и первичная обработка сырья животного происхождения; сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные на энзоотичных по сибирской язве территориях.</p>\n\n<p>Лица, работающие с материалом, подозрительным на инфицирование возбудителем сибирской язвы.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Туляремия":
				if (infectionComponent.description == "<p>Вакцинация проводится однократно. Ревакцинация каждые 5 лет. Перед проведением профилактических прививок необходимо проведение иммунодиагностического теста с тулярином. Вакцинация проводится при отрицательных результатах.</p>\n\n<p>Лица, проживающие на энзоотичных по туляремии территориях, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, другие работы по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя туляремии.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Чума":
				if (infectionComponent.description == "<p>Иммунизацию проводят однократно. Дозировка препарата зависит от способа введения: внутрикожно, подкожно, накожно, ингаляционно.</p>\n\n<p>Лица, проживающие на энзоотичных по чуме территориях.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя чумы.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бруцеллез":
				if (infectionComponent.description == "<p>Перед вакцинацией необходимо проведение иммунодиагностического теста с Бруцеллином или ИФА на наличие специфических антител. Вакцинация проводится при отрицательных результатах. Вакцинация - однократно, ревакцинация - через 10-12 месяцев (при отрицательных результатах тестов). В очагах козье-овечьего типа бруцеллеза лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания скота бруцеллезом; по убою скота, больного бруцеллезом, заготовке и переработке полученных от него мяса и мясопродуктов. Животноводы, ветеринарные работники, зоотехники в хозяйствах, энзоотичных по бруцеллезу.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя бруцеллеза.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бешенство":
				if (infectionComponent.description == "<p>Схема профилактической иммунизации: Первичная иммунизация - трехкратно (0, 7, 30 дни), первая ревакцинация - через год после законченного курса первичной иммунизации. Последующие ревакцинации - каждые 3 года. С профилактической целью вакцинируют лиц, имеющих высокий риск заражения бешенством: лица, работающие с \"уличным\" вирусом бешенства; ветеринарные работники; егеря, охотники, лесники; лица, выполняющие работы по отлову и содержанию животных.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лептоспироз":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через год по показаниям.</p>\n\n<p>Лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, расположенных на энзоотичных по лептоспирозу территориях; по убою скота, больного лептоспирозом, заготовке и переработке мяса и мясопродуктов, полученных от больных лептоспирозом животных; по отлову и содержанию безнадзорных животных.</p> \n\n<p>Лица, работающие с живыми культурами возбудителя лептоспироза.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лихорадка Ку":
				if (infectionComponent.description == "<p>Вакцинация однократно, ревакцинация - через 1 год.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания лихорадкой Ку.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению и переработке сельскохозяйственной продукции на энзоотичных территориях по лихорадке Ку.</p>\n\n<p>Лица, работающие с живыми культурами возбудителей лихорадки Ку.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Желтая лихорадка":
				if (infectionComponent.description == "<p>Вакцинация - однократно.</p>\n\n<p>Лица, подвергшиеся вакцинации, получают международное свидетельство о вакцинации (действительно в течение всей жизни вакцинированного лица и вступает в силу через 10 дней после даты вакцинации).</p>\n\n<p>Лица, выезжающие за пределы Российской Федерации в энзоотичные по желтой лихорадке страны (регионы).</p>\n\n<p>Лица, работающие с живыми культурами возбудителя желтой лихорадки.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Холера":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через 6 месяцев по показаниям.</p>\n\n<p>Лица, выезжающие в неблагополучные по холере страны (регионы). Население субъектов Российской Федерации в случае осложнения санитарно-эпидемиологической обстановки по холере в сопредельных странах, а также на территории Российской Федерации.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break
				
			default:
				break
		}
		checkCount++
}

assert calendar.addInfectionInfo.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2006-03-11</con:value></con:property></con:properties></con:testCase><con:testCase id="5a178b94-b47c-40e8-86ce-a53d8a689f18" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="145385_Получение календаря прививок 18-летнего пациента без прививок" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="72797acf-b7f3-4098-923c-1b988edca352"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="b9e98549-33b8-4346-a474-2a21ffe6fe96"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/145385"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="30a7f1ca-806f-4a02-83e3-b6d4ae775049"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == false  //Проверяем что вернулся не ребёнок

assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 15 //В маппинге инфекций 15 с признаком isChild = false

def checkCount = 0 //Счетчик циклов

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1,V2,V3")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие и не являющиеся носителями HBs-Ag.</p>\n<p>Схема: 0–1-6 мес. (V2 через 1 месяц от первой прививки, V3 через 6 месяцев от первой прививки).</p>\n<p>Контактные в очаге (не привитые, не болевшие и не являющиеся носителями HBs-Ag) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "Группы риска")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [23])
							if (infectionComponent.description == "<p>Иммунизация однократно конъюгированной вакциной или каждые пять лет полисахаридной вакциной.</p>\n<p>Лица из групп риска — лица старше 60 лет, страдающие хроническими заболеваниями (дыхательной, сердечно-сосудистой систем, печени, почек, сахарным диабетом).</p>\n<p>Лица, проживающих в организациях социального обслуживания.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дифтерия":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес.</p>\n<p>Контактные в очаге (не привитые, не болевшие, привитые однократно) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18-35 лет")
										calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V+R")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [21])
						if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, организаций торговли, транспорта, коммунальной и социальной сферы, общественного питания.</p>\n<p>Лица, работающие вахтовым методом, и сотрудники государственных контрольных органов в пунктах пропуска через государственную границу Российской Федерации не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
									if (infectionComponent.vaccineInfo.age == "36–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "Женщины V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках. Ревакцинации подлежат однократно привитые.</p>\n<p>Перед вакцинацией для женщин рекомендовано исключить вероятность беременности, а также в течение 2 месяцев избегать вероятность зачатия.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–25 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Интервал между вакцинацией и ревакцинацией 6–12 месяцев. Для отдельных вакцин ограничение по возрасту — с 18 до 50 лет.</p>\n\n\n<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Лица, подверженные профессиональному риску заражения (работники медицинских организаций, персонал по уходу за больными, работники сферы обслуживания населения, занятые на предприятиях пищевой промышленности, а таже обслуживающие водопроводные и канализационные сооружения, оборудование и сети).</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций и учреждений всех форм собственности.\nСотрудники учреждений социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>\n<p>Лица, выезжающие в неблагополучные регионы и страны, где регистрируется вспышечная заболеваемость</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Грипп":
				if (infectionComponent.text == "Ежегодно")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, транспорта, коммунальной сферы, беременные женщины.</p>\n<p>Лица, подлежащие призыву на военную службу.</p>\n<p>Лица с хроническими заболеваниями, в том числе с заболеваниями лёгких, сердечно-сосудистыми заболеваниями, метаболическими нарушениями и ожирением.</p>\n<p>Мигранты.</p>\n<p>Строительные рабочие.</p>\n<p>Работники торговли, общественного питания, лица, имеющие контакт с птицей</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–59 лет")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Брюшной тиф":
			if (infectionComponent.text == "V каждые 3 года")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Лица, занятые в сфере коммунального благоустройства (работники, обслуживающие канализационные сети, сооружения и оборудование, работникам, участвующим в процессе водоподготовки и водоотведения, а также организаций, осуществляющих санитарную очистку населённых мест, сбор, транспортировку, утилизацию бытовых отходов).</p>\n<p>Лица, работающие с живыми культурами возбудителей брюшного тифа.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дизентерия Зонне":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Работники медицинских организаций (их структурных подразделений) инфекционного профиля и бактериологических лабораторий.</p>\n<p>Лица, занятые в сфере коммунального благоустройства, в том числе выезжающие на работу в оздоровительные лагеря. Персонал детских дошкольных организаций.</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций всех форм собственности.\nСотрудники социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
									
				break

			case "Клещевой вирусный энцефалит":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Вакцинация проводится двухкратно с интервалом между V1 и V2 от 1 месяца до полугода (возможно до 7 месяцев), ревакцинация через 1 год после заврешения первичного курса вакцинации. Последующие ревакцинации проводят каждые 3 года.</p>\n<p>Лица, работающие с живыми культурами возбудителя клещевого энцефалита.</p>\n<p>Лица, проживающие на эндемичных по клещевому вирусному энцефалиту территориях.</p>\n<p>Лица, выезжающие на эндемичные по клещевому вирусному энцефалиту территории, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

//assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и описаний у addInfectionInfo" id="d29ce7ee-8187-4a06-8049-76f42de7d022"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload


assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.addInfectionInfo.size() == 9 //В маппинге 9 инфекций 

def checkCount = 0 //Счетчик циклов

while (calendar.addInfectionInfo.size() > 0)
{
	infectionComponent = calendar.addInfectionInfo[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Сибирская язва":
				if (infectionComponent.description == "<p>Вакцинация проводится двукратно с интервалом между введениями 20-30 суток. Ревакцинация - ежегодно.</p>\n\n<p>Лица, выполняющие следующие работы: зооветработники и другие лица, профессионально занятые предубойным содержанием скота, а также убоем, снятием шкур и разделкой туш; сбор, хранение, транспортировка и первичная обработка сырья животного происхождения; сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные на энзоотичных по сибирской язве территориях.</p>\n\n<p>Лица, работающие с материалом, подозрительным на инфицирование возбудителем сибирской язвы.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Туляремия":
				if (infectionComponent.description == "<p>Вакцинация проводится однократно. Ревакцинация каждые 5 лет. Перед проведением профилактических прививок необходимо проведение иммунодиагностического теста с тулярином. Вакцинация проводится при отрицательных результатах.</p>\n\n<p>Лица, проживающие на энзоотичных по туляремии территориях, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, другие работы по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя туляремии.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Чума":
				if (infectionComponent.description == "<p>Иммунизацию проводят однократно. Дозировка препарата зависит от способа введения: внутрикожно, подкожно, накожно, ингаляционно.</p>\n\n<p>Лица, проживающие на энзоотичных по чуме территориях.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя чумы.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бруцеллез":
				if (infectionComponent.description == "<p>Перед вакцинацией необходимо проведение иммунодиагностического теста с Бруцеллином или ИФА на наличие специфических антител. Вакцинация проводится при отрицательных результатах. Вакцинация - однократно, ревакцинация - через 10-12 месяцев (при отрицательных результатах тестов). В очагах козье-овечьего типа бруцеллеза лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания скота бруцеллезом; по убою скота, больного бруцеллезом, заготовке и переработке полученных от него мяса и мясопродуктов. Животноводы, ветеринарные работники, зоотехники в хозяйствах, энзоотичных по бруцеллезу.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя бруцеллеза.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бешенство":
				if (infectionComponent.description == "<p>Схема профилактической иммунизации: Первичная иммунизация - трехкратно (0, 7, 30 дни), первая ревакцинация - через год после законченного курса первичной иммунизации. Последующие ревакцинации - каждые 3 года. С профилактической целью вакцинируют лиц, имеющих высокий риск заражения бешенством: лица, работающие с \"уличным\" вирусом бешенства; ветеринарные работники; егеря, охотники, лесники; лица, выполняющие работы по отлову и содержанию животных.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лептоспироз":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через год по показаниям.</p>\n\n<p>Лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, расположенных на энзоотичных по лептоспирозу территориях; по убою скота, больного лептоспирозом, заготовке и переработке мяса и мясопродуктов, полученных от больных лептоспирозом животных; по отлову и содержанию безнадзорных животных.</p> \n\n<p>Лица, работающие с живыми культурами возбудителя лептоспироза.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лихорадка Ку":
				if (infectionComponent.description == "<p>Вакцинация однократно, ревакцинация - через 1 год.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания лихорадкой Ку.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению и переработке сельскохозяйственной продукции на энзоотичных территориях по лихорадке Ку.</p>\n\n<p>Лица, работающие с живыми культурами возбудителей лихорадки Ку.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Желтая лихорадка":
				if (infectionComponent.description == "<p>Вакцинация - однократно.</p>\n\n<p>Лица, подвергшиеся вакцинации, получают международное свидетельство о вакцинации (действительно в течение всей жизни вакцинированного лица и вступает в силу через 10 дней после даты вакцинации).</p>\n\n<p>Лица, выезжающие за пределы Российской Федерации в энзоотичные по желтой лихорадке страны (регионы).</p>\n\n<p>Лица, работающие с живыми культурами возбудителя желтой лихорадки.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Холера":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через 6 месяцев по показаниям.</p>\n\n<p>Лица, выезжающие в неблагополучные по холере страны (регионы). Население субъектов Российской Федерации в случае осложнения санитарно-эпидемиологической обстановки по холере в сопредельных странах, а также на территории Российской Федерации.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break
				
			default:
				break
		}
		checkCount++
}

assert calendar.addInfectionInfo.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2006-03-07</con:value></con:property></con:properties></con:testCase><con:testCase id="d0054937-a328-4c42-b200-6e556e18d7d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/2/1_АС2. LK_SERVER_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="05ab812d-f619-43a0-853b-040c8bd87f37"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/2/1"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 500"><con:configuration><codes>500</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_SERVER_ERROR"><con:configuration><path>$.error.code</path><content>LK_SERVER_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Ошибка вызова сервиса ЛК"><con:configuration><path>$.error.description</path><content>Ошибка вызова сервиса ЛК</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = TECHNICAL"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="f6fb203b-8b19-4b70-806e-220bb86b8ce7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/2/2_АС2. LK_SERVER_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="31c47f11-2ac0-4baa-9f7d-a732df661458"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/2/2"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 500"><con:configuration><codes>500</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_SERVER_ERROR"><con:configuration><path>$.error.code</path><content>LK_SERVER_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Ошибка вызова сервиса ЛК"><con:configuration><path>$.error.description</path><content>Ошибка вызова сервиса ЛК</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = TECHNICAL"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="e08b1000-a272-4572-bed1-fdb279c18d78" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/3_АС3. LK_USER_NOT_FOUND" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="7add4d6b-7118-489d-a091-2cd31c1f7838"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/3"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_USER_NOT_FOUND"><con:configuration><path>$.error.code</path><content>LK_USER_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Переданный пациент не найден"><con:configuration><path>$.error.description</path><content>Переданный пациент не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="81b5404c-390a-4c52-887f-4ca6193e8f3d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/4_АС4. LK_VACCINATION_AGE_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="04b8fe60-be9f-4431-a207-42c589c1f718"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/4"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 403"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_VACCINATION_AGE_ERROR"><con:configuration><path>$.error.code</path><content>LK_VACCINATION_AGE_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Переданный возраст пациента некорректен"><con:configuration><path>$.error.description</path><content>Переданный возраст пациента некорректен</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="8a568184-0e62-4300-9f27-b768daabc4b3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/5_АС5. ACCESS_DENIED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="32ce30d5-97c4-4422-9d90-1a0edbf90858"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 403"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55ab4ca8-6967-4663-b23e-8f4cb35194fe" name="error.code = ACCESS_DENIED"><con:configuration><path>$.error.code</path><content>ACCESS_DENIED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55ab4ca8-6967-4663-b23e-8f4cb35194fe" name="error.description = Доступ к запрошенной медкарте отсутствует"><con:configuration><path>$.error.description</path><content>Доступ к запрошенной медкарте отсутствует</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55ab4ca8-6967-4663-b23e-8f4cb35194fe" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55ab4ca8-6967-4663-b23e-8f4cb35194fe" name="error.origin = ACCESS_DENIED"><con:configuration><path>$.error.origin</path><content>ACCESS_DENIED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>0f84d61f-4456-4b8b-b47a-4d3009c4e3e1</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2000-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="80421bd0-e745-4572-b528-71189c293911" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/6_АС5. SUDIR_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="350aed38-cbb1-47c1-98da-5a37b2c54d89"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}1"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="854865ea-4618-4239-80b3-c2697d17da1f" name="error.code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="854865ea-4618-4239-80b3-c2697d17da1f" name="error.description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="854865ea-4618-4239-80b3-c2697d17da1f" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>0f84d61f-4456-4b8b-b47a-4d3009c4e3e2</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2000-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="cf63edc7-e410-4b49-bc9e-d5505bac0d7d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/7_АС6. LK_AUTH_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="4e7fc980-bb86-4dc3-bb3f-c9140ac8007e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/7"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_AUTH_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>LK_AUTH_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Токен авторизации не действителен"><con:configuration><path>$.error.description</path><content>Токен авторизации не действителен</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getVaccinations" id="90b83e6a-59ee-441a-a1d9-a2b249e568a9" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/3/vaccinations" methodName="Vaccinations 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getVaccinations" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/vaccinations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52227a58-9a22-4e7c-af56-268ebb89752d" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="3fb04969-4347-41e0-a647-f3ab4ea68d77" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/8_АС7. LK_EHR_OBTAIN_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="52e77227-99eb-430f-8542-7368a754dd35"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/8"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_EHR_OBTAIN_ERROR"><con:configuration><path>$.error.code</path><content>LK_EHR_OBTAIN_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Ошибка получения медицинской карты"><con:configuration><path>$.error.description</path><content>Ошибка получения медицинской карты</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getVaccinations" id="0fdf13c4-634a-4f03-a473-40b61abd58dd" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/3/vaccinations" methodName="Vaccinations 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getVaccinations" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/vaccinations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52227a58-9a22-4e7c-af56-268ebb89752d" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="c5ab8f06-73e6-41d9-affb-5295fa806ec8" name="getCalendar v5"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="3f7db70d-3af0-4ddb-a24a-43fbc4ac4e36" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="322569_Проверка календаря справок новорожденного пациента без прививок" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="f6517dfe-985c-4031-9b95-62ad601da69e"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет + 1 день) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, 0)
c.add(Calendar.DATE, 0)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getVaccinations" id="5181a00e-eb65-4ea9-8c05-0235641c8e90" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/3/vaccinations" methodName="Vaccinations 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getVaccinations" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/vaccinations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52227a58-9a22-4e7c-af56-268ebb89752d" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="e0dcb295-17e2-40b5-b2d4-f1822079c058"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/145382"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="9329bf27-7873-4696-9d8b-c680d1801068"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == true //Проверяем что вернулся действительно ребёнок

assert calendar.addInfectionInfo == null //Проверяем что не вернулось поле addInfectionInfo, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 52 //В маппинге инфекций 52 с признаком isChild = true

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и вакцин у calendarComponent" id="761d7cc3-48ae-4737-84af-57057e0a14e0"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter
import groovy.sql.Sql

//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

path = testRunner.testCase.getPropertyValue("path")
query="select response from template_response where \"path\"= '"+path+"'"
def responseVac = sql.firstRow(query).response
def vaccinations  = new JsonSlurper().parseText(responseVac).doneList

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload
//restResponse = context.expand( '${getVaccinations#Response}' ).toString()
//def vaccinations  = new JsonSlurper().parseText(restResponse).doneList

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

def doneList = []
for(done in vaccinations)
{
	if ((done.uploadedByUser == true && done.status == "confirmed") || done.uploadedByUser == false) //Отбирает подтверждённые сделанные вакцины
		doneList.add(done)
}

def getDoneVacines(infectionIDs, doneList)
{
	def vaccinations = []
	for (done in doneList)
	{
		infectionIDs.each{
			if (done.infectionList.infectionId.contains(it))
				vaccinations.add(done)
		}
	}
	vaccinations.sort{it.dateVaccination}
	return vaccinations
}

def checkVaccinatedInfoMapping(vInfo, dList)
{
	assert vInfo.date == dList.dateVaccination
	assert vInfo.vaccinationName == dList.vaccinationName
	assert vInfo.series == dList.series
	assert vInfo.dosage == dList.dosage
	assert vInfo.unitName == dList.unitName
	assert vInfo.method == dList.method
	assert dList.infectionList.multiplicity.contains(vInfo.multiplicity)
	assert vInfo.reactionList == dList.reactionList
	assert vInfo.moName == dList.moName
	assert vInfo.documentId == dList.documentId
}

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null // Проверяет что нет объекта vaccineInfo

								def doneVacinesOrdered = getDoneVacines(["80"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0]) //Проверяет маппинг объекта vaccinatedInfo, используя переданное вакцинирование
							}
							else
								assert infectionComponent.vaccinatedInfo == null // Проверяет что нет объекта vaccinatedInfo
								
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["81", "165"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["37", "105", "113", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["38", "106", "114", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["92"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["123"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["124"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["125"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["94"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84", "93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "56", "113", "150", "126", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "57", "114", "151", "127", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "58", "115", "152", "128", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "59", "116", "147", "129", "177", "156"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["54", "60", "117", "148", "130", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["44", "50", "85", "105", "113", "150", "153", "126", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["45", "51", "95", "106", "114", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["46", "52", "99", "107", "115", "152", "155", "128", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["47", "53", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["48", "54", "97", "109", "117", "130", "148","157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["49", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "74", "85", "105", "113", "126", "150", "153", "174", "227"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "75", "95", "106", "114", "127", "151", "154", "175", "228"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "76", "99", "107", "115", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "77", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["78", "54", "97", "109", "117", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["79", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["68", "126", "150", "153", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["69", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["70", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["71", "129", "147", "156","177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["72", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "2-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "20-24 месяца"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"

								assert infectionComponent.vaccinatedInfo == null
							}
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["73", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "3-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "6-7 лет"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"
								assert infectionComponent.vaccinatedInfo == null
							}
								
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["40", "126", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["41", "127", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["42", "128", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["43", "129", "130", "131", "156", "157", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["62", "64", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["63", "65", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "66", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "67"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "82", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "83", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["119", "120", "121", "122"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["36", "91", "178", "235"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["35", "90", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["162", "163"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["102", "103", "104"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2024-03-11</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/145382/3/vaccinations</con:value></con:property></con:properties></con:testCase><con:testCase id="de4a04db-e894-4bb8-a55b-e1b1f0a5d0b7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="322570_Пациент с прививками, которому завтра 18 лет (uploadedByUser =true и status=confirmed)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="91b0d195-b945-4f1e-97be-9d69fca5c60d"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет + 1 день) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)
c.add(Calendar.DATE, 1)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="2d91f23a-8862-45f6-bcd0-c6e48d9338fd"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/145433"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8b0b1a49-181b-472f-a4b0-f9a1f5f672f2" name="Contains documentId, у которого uploadedByUser = true и status = confirmed"><con:configuration><token>49845971-7e74-4436-b0af-3634f95f1409</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="379fb8cf-845c-48e1-bb10-731d8493d7ef" name="Not Contains documentId, у которого uploadedByUser = true и status = processed"><con:configuration><token>74141698-7561-4c76-acc9-a8102221d817</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="379fb8cf-845c-48e1-bb10-731d8493d7ef" name="Not Contains documentId, у которого uploadedByUser = true и status = notProcessed"><con:configuration><token>fc20dabd-16d7-42e6-b502-4ea8626887e7</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="51d4e205-4fbe-4277-b325-c705fbecebaf"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == true //Проверяем что вернулся действительно ребёнок

assert calendar.addInfectionInfo == null //Проверяем что не вернулось поле addInfectionInfo, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 52 //В маппинге инфекций 52 с признаком isChild = true

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и описаний у addInfectionInfo" id="a993ec72-7ecb-4819-9625-5d7abaec1983"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter
import groovy.sql.Sql

//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

path = testRunner.testCase.getPropertyValue("path")
query="select response from template_response where \"path\"= '"+path+"'"
def responseVac = sql.firstRow(query).response
def vaccinations  = new JsonSlurper().parseText(responseVac).doneList

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

def doneList = []
for(done in vaccinations)
{
	if ((done.uploadedByUser == true && done.status == "confirmed") || done.uploadedByUser == false) //Отбирает подтверждённые сделанные вакцины
		doneList.add(done)
}

def getDoneVacines(infectionIDs, doneList)
{
	def vaccinations = []
	for (done in doneList)
	{
		infectionIDs.each{
			if (done.infectionList.infectionId.contains(it))
				vaccinations.add(done)
		}
	}
	vaccinations.sort{it.dateVaccination}
	return vaccinations
}

def checkVaccinatedInfoMapping(vInfo, dList)
{
	assert vInfo.date == dList.dateVaccination
	assert vInfo.vaccinationName == dList.vaccinationName
	assert vInfo.series == dList.series
	assert vInfo.dosage == dList.dosage
	assert vInfo.unitName == dList.unitName
	assert vInfo.method == dList.method
	assert dList.infectionList.multiplicity.contains(vInfo.multiplicity)
	assert vInfo.reactionList == dList.reactionList
	assert vInfo.moName == dList.moName
	assert vInfo.documentId == dList.documentId
}

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null // Проверяет что нет объекта vaccineInfo

								def doneVacinesOrdered = getDoneVacines(["80"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0]) //Проверяет маппинг объекта vaccinatedInfo, используя переданное вакцинирование
							}
							else
								assert infectionComponent.vaccinatedInfo == null // Проверяет что нет объекта vaccinatedInfo
								
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["81", "165"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["37", "105", "113", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["38", "106", "114", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["92"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["123"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["124"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["125"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["94"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84", "93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "56", "113", "150", "126", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "57", "114", "151", "127", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "58", "115", "152", "128", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "59", "116", "147", "129", "177", "156"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["54", "60", "117", "148", "130", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["44", "50", "85", "105", "113", "150", "153", "126", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["45", "51", "95", "106", "114", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["46", "52", "99", "107", "115", "152", "155", "128", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["47", "53", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["48", "54", "97", "109", "117", "130", "148","157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["49", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "74", "85", "105", "113", "126", "150", "153", "174", "227"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "75", "95", "106", "114", "127", "151", "154", "175", "228"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "76", "99", "107", "115", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "77", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["78", "54", "97", "109", "117", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["79", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["68", "126", "150", "153", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["69", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["70", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["71", "129", "147", "156","177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["72", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "2-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "20-24 месяца"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"

								assert infectionComponent.vaccinatedInfo == null
							}
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["73", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "3-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "6-7 лет"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"
								assert infectionComponent.vaccinatedInfo == null
							}
								
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["40", "126", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["41", "127", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["42", "128", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["43", "129", "130", "131", "156", "157", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["62", "64", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["63", "65", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "66", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "67"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "82", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "83", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["119", "120", "121", "122"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["36", "91", "178", "235"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["35", "90", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["162", "163"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["102", "103", "104"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2006-03-12</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/145433/3/vaccinations</con:value></con:property></con:properties></con:testCase><con:testCase id="a7d16670-8d33-4416-bd63-6e7cfee11b19" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="322570_Проверка календаря справок пациента до 18 лет (интеграционный)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="30f8943b-6cde-4ecc-8550-6da0c7e5db16"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет + 1 день) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)
c.add(Calendar.DATE, 1)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getVaccinations" id="3d76e2e9-f33b-4dfe-8480-155a5bdb9cc1"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/3/vaccinations" methodName="Vaccinations 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getVaccinations" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/vaccinations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52227a58-9a22-4e7c-af56-268ebb89752d" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="17640bae-8109-4e96-a3b0-b9db2e18d92b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="684aac65-bc19-4b26-9d08-c50271c93983"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == true //Проверяем что вернулся действительно ребёнок

assert calendar.addInfectionInfo == null //Проверяем что не вернулось поле addInfectionInfo, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 52 //В маппинге инфекций 52 с признаком isChild = true

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и вакцин у calendarComponent" id="c5347268-43b2-476f-8d11-55532f8db74a"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload
restResponse = context.expand( '${getVaccinations#Response}' ).toString()
def vaccinations  = new JsonSlurper().parseText(restResponse).doneList

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

def doneList = []
for(done in vaccinations)
{
	if ((done.uploadedByUser == true && done.status == "confirmed") || done.uploadedByUser == false) //Отбирает подтверждённые сделанные вакцины
		doneList.add(done)
}

def getDoneVacines(infectionIDs, doneList)
{
	def vaccinations = []
	for (done in doneList)
	{
		infectionIDs.each{
			if (done.infectionList.infectionId.contains(it))
				vaccinations.add(done)
		}
	}
	vaccinations.sort{it.dateVaccination}
	return vaccinations
}

def checkVaccinatedInfoMapping(vInfo, dList)
{
	assert vInfo.date == dList.dateVaccination
	assert vInfo.vaccinationName == dList.vaccinationName
	assert vInfo.series == dList.series
	assert vInfo.dosage == dList.dosage
	assert vInfo.unitName == dList.unitName
	assert vInfo.method == dList.method
	assert dList.infectionList.multiplicity.contains(vInfo.multiplicity)
	assert vInfo.reactionList == dList.reactionList
	assert vInfo.moName == dList.moName
	assert vInfo.documentId == dList.documentId
}

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null // Проверяет что нет объекта vaccineInfo

								def doneVacinesOrdered = getDoneVacines(["80"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0]) //Проверяет маппинг объекта vaccinatedInfo, используя переданное вакцинирование
							}
							else
								assert infectionComponent.vaccinatedInfo == null // Проверяет что нет объекта vaccinatedInfo
								
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["81", "165"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["37", "105", "113", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["38", "106", "114", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["92"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["123"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["124"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["125"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["94"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84", "93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "56", "113", "150", "126", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "57", "114", "151", "127", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "58", "115", "152", "128", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "59", "116", "147", "129", "177", "156"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["54", "60", "117", "148", "130", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["44", "50", "85", "105", "113", "150", "153", "126", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["45", "51", "95", "106", "114", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["46", "52", "99", "107", "115", "152", "155", "128", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["47", "53", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["48", "54", "97", "109", "117", "130", "148","157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["49", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "74", "85", "105", "113", "126", "150", "153", "174", "227"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "75", "95", "106", "114", "127", "151", "154", "175", "228"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "76", "99", "107", "115", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "77", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["78", "54", "97", "109", "117", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["79", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["68", "126", "150", "153", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["69", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["70", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["71", "129", "147", "156","177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["72", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "2-я ревакцинация"
								assert infectionComponent.vaccineInfo.range == "20-24 месяца"
								assert infectionComponent.vaccineInfo.description == "Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)"

								assert infectionComponent.vaccinatedInfo == null
							}
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["73", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "3-я ревакцинация"
								assert infectionComponent.vaccineInfo.age == "6-7 лет"
								assert infectionComponent.vaccineInfo.description == "<p>Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)</p>"
								assert infectionComponent.vaccinatedInfo == null
							}
								
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["40", "126", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["41", "127", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["42", "128", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["43", "129", "130", "131", "156", "157", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["62", "64", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["63", "65", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "66", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "67"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "82", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "83", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["119", "120", "121", "122"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["36", "91", "178", "235"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["35", "90", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["162", "163"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["102", "103", "104"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2006-03-12</con:value></con:property></con:properties></con:testCase><con:testCase id="0d1a8905-1b12-4767-9cff-eb54155fdf54" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="322571_Проверка календаря справок пациента старше 18 лет" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="dacc4ed7-1939-4740-93de-f05b76ee6a0c"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет - 1 день) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)
c.add(Calendar.DATE, -1)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="4c4604db-11b0-4178-975b-36246d98e9cf"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="45206585-4448-4190-ae7e-f3d25233ca7f"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == false  //Проверяем что вернулся не ребёнок

assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 15 //В маппинге инфекций 15 с признаком isChild = false

def checkCount = 0 //Счетчик циклов

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1,V2,V3")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие и не являющиеся носителями HBs-Ag.</p>\n<p>Схема: 0–1-6 мес. (V2 через 1 месяц от первой прививки, V3 через 6 месяцев от первой прививки).</p>\n<p>Контактные в очаге (не привитые, не болевшие и не являющиеся носителями HBs-Ag) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "Группы риска")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [23])
							if (infectionComponent.description == "<p>Иммунизация однократно конъюгированной вакциной или каждые пять лет полисахаридной вакциной.</p>\n<p>Лица из групп риска — лица старше 60 лет, страдающие хроническими заболеваниями (дыхательной, сердечно-сосудистой систем, печени, почек, сахарным диабетом).</p>\n<p>Лица, проживающих в организациях социального обслуживания.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дифтерия":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес.</p>\n<p>Контактные в очаге (не привитые, не болевшие, привитые однократно) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18-35 лет")
										calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V+R")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [21])
						if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, организаций торговли, транспорта, коммунальной и социальной сферы, общественного питания.</p>\n<p>Лица, работающие вахтовым методом, и сотрудники государственных контрольных органов в пунктах пропуска через государственную границу Российской Федерации не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
									if (infectionComponent.vaccineInfo.age == "36–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "Женщины V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках. Ревакцинации подлежат однократно привитые.</p>\n<p>Перед вакцинацией для женщин рекомендовано исключить вероятность беременности, а также в течение 2 месяцев избегать вероятность зачатия.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–25 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Интервал между вакцинацией и ревакцинацией 6–12 месяцев. Для отдельных вакцин ограничение по возрасту — с 18 до 50 лет.</p>\n\n\n<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Лица, подверженные профессиональному риску заражения (работники медицинских организаций, персонал по уходу за больными, работники сферы обслуживания населения, занятые на предприятиях пищевой промышленности, а таже обслуживающие водопроводные и канализационные сооружения, оборудование и сети).</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций и учреждений всех форм собственности.\nСотрудники учреждений социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>\n<p>Лица, выезжающие в неблагополучные регионы и страны, где регистрируется вспышечная заболеваемость</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Грипп":
				if (infectionComponent.text == "Ежегодно")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, транспорта, коммунальной сферы, беременные женщины.</p>\n<p>Лица, подлежащие призыву на военную службу.</p>\n<p>Лица с хроническими заболеваниями, в том числе с заболеваниями лёгких, сердечно-сосудистыми заболеваниями, метаболическими нарушениями и ожирением.</p>\n<p>Мигранты.</p>\n<p>Строительные рабочие.</p>\n<p>Работники торговли, общественного питания, лица, имеющие контакт с птицей</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–59 лет")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Брюшной тиф":
			if (infectionComponent.text == "V каждые 3 года")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Лица, занятые в сфере коммунального благоустройства (работники, обслуживающие канализационные сети, сооружения и оборудование, работникам, участвующим в процессе водоподготовки и водоотведения, а также организаций, осуществляющих санитарную очистку населённых мест, сбор, транспортировку, утилизацию бытовых отходов).</p>\n<p>Лица, работающие с живыми культурами возбудителей брюшного тифа.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дизентерия Зонне":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Работники медицинских организаций (их структурных подразделений) инфекционного профиля и бактериологических лабораторий.</p>\n<p>Лица, занятые в сфере коммунального благоустройства, в том числе выезжающие на работу в оздоровительные лагеря. Персонал детских дошкольных организаций.</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций всех форм собственности.\nСотрудники социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
									
				break

			case "Клещевой вирусный энцефалит":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Вакцинация проводится двухкратно с интервалом между V1 и V2 от 1 месяца до полугода (возможно до 7 месяцев), ревакцинация через 1 год после заврешения первичного курса вакцинации. Последующие ревакцинации проводят каждые 3 года.</p>\n<p>Лица, работающие с живыми культурами возбудителя клещевого энцефалита.</p>\n<p>Лица, проживающие на эндемичных по клещевому вирусному энцефалиту территориях.</p>\n<p>Лица, выезжающие на эндемичные по клещевому вирусному энцефалиту территории, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

//assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и описаний у addInfectionInfo" id="5196f1be-d0d3-44f6-b23f-ccf6bf29a967"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload


assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.addInfectionInfo.size() == 9 //В маппинге 9 инфекций 

def checkCount = 0 //Счетчик циклов

while (calendar.addInfectionInfo.size() > 0)
{
	infectionComponent = calendar.addInfectionInfo[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Сибирская язва":
				if (infectionComponent.description == "<p>Вакцинация проводится двукратно с интервалом между введениями 20-30 суток. Ревакцинация - ежегодно.</p>\n\n<p>Лица, выполняющие следующие работы: зооветработники и другие лица, профессионально занятые предубойным содержанием скота, а также убоем, снятием шкур и разделкой туш; сбор, хранение, транспортировка и первичная обработка сырья животного происхождения; сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные на энзоотичных по сибирской язве территориях.</p>\n\n<p>Лица, работающие с материалом, подозрительным на инфицирование возбудителем сибирской язвы.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Туляремия":
				if (infectionComponent.description == "<p>Вакцинация проводится однократно. Ревакцинация каждые 5 лет. Перед проведением профилактических прививок необходимо проведение иммунодиагностического теста с тулярином. Вакцинация проводится при отрицательных результатах.</p>\n\n<p>Лица, проживающие на энзоотичных по туляремии территориях, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, другие работы по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя туляремии.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Чума":
				if (infectionComponent.description == "<p>Иммунизацию проводят однократно. Дозировка препарата зависит от способа введения: внутрикожно, подкожно, накожно, ингаляционно.</p>\n\n<p>Лица, проживающие на энзоотичных по чуме территориях.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя чумы.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бруцеллез":
				if (infectionComponent.description == "<p>Перед вакцинацией необходимо проведение иммунодиагностического теста с Бруцеллином или ИФА на наличие специфических антител. Вакцинация проводится при отрицательных результатах. Вакцинация - однократно, ревакцинация - через 10-12 месяцев (при отрицательных результатах тестов). В очагах козье-овечьего типа бруцеллеза лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания скота бруцеллезом; по убою скота, больного бруцеллезом, заготовке и переработке полученных от него мяса и мясопродуктов. Животноводы, ветеринарные работники, зоотехники в хозяйствах, энзоотичных по бруцеллезу.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя бруцеллеза.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бешенство":
				if (infectionComponent.description == "<p>Схема профилактической иммунизации: Первичная иммунизация - трехкратно (0, 7, 30 дни), первая ревакцинация - через год после законченного курса первичной иммунизации. Последующие ревакцинации - каждые 3 года. С профилактической целью вакцинируют лиц, имеющих высокий риск заражения бешенством: лица, работающие с \"уличным\" вирусом бешенства; ветеринарные работники; егеря, охотники, лесники; лица, выполняющие работы по отлову и содержанию животных.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лептоспироз":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через год по показаниям.</p>\n\n<p>Лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, расположенных на энзоотичных по лептоспирозу территориях; по убою скота, больного лептоспирозом, заготовке и переработке мяса и мясопродуктов, полученных от больных лептоспирозом животных; по отлову и содержанию безнадзорных животных.</p> \n\n<p>Лица, работающие с живыми культурами возбудителя лептоспироза.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лихорадка Ку":
				if (infectionComponent.description == "<p>Вакцинация однократно, ревакцинация - через 1 год.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания лихорадкой Ку.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению и переработке сельскохозяйственной продукции на энзоотичных территориях по лихорадке Ку.</p>\n\n<p>Лица, работающие с живыми культурами возбудителей лихорадки Ку.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Желтая лихорадка":
				if (infectionComponent.description == "<p>Вакцинация - однократно.</p>\n\n<p>Лица, подвергшиеся вакцинации, получают международное свидетельство о вакцинации (действительно в течение всей жизни вакцинированного лица и вступает в силу через 10 дней после даты вакцинации).</p>\n\n<p>Лица, выезжающие за пределы Российской Федерации в энзоотичные по желтой лихорадке страны (регионы).</p>\n\n<p>Лица, работающие с живыми культурами возбудителя желтой лихорадки.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Холера":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через 6 месяцев по показаниям.</p>\n\n<p>Лица, выезжающие в неблагополучные по холере страны (регионы). Население субъектов Российской Федерации в случае осложнения санитарно-эпидемиологической обстановки по холере в сопредельных странах, а также на территории Российской Федерации.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break
				
			default:
				break
		}
		checkCount++
}

assert calendar.addInfectionInfo.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2006-03-10</con:value></con:property></con:properties></con:testCase><con:testCase id="19f3b3be-a31c-4e1e-9dbf-316d7414bab9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="322571_Проверка календаря справок пациента, которому ровно 18 лет" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="a3d183bc-0361-488f-ae02-f61e9fb5261a"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="e23cbb25-3222-4d5f-98c0-ec515f0d02f2"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="d45885a7-5026-4783-8b42-4f6a9b583f97"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == false  //Проверяем что вернулся не ребёнок

assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 15 //В маппинге инфекций 15 с признаком isChild = false

def checkCount = 0 //Счетчик циклов

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1,V2,V3")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие и не являющиеся носителями HBs-Ag.</p>\n<p>Схема: 0–1-6 мес. (V2 через 1 месяц от первой прививки, V3 через 6 месяцев от первой прививки).</p>\n<p>Контактные в очаге (не привитые, не болевшие и не являющиеся носителями HBs-Ag) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "Группы риска")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [23])
							if (infectionComponent.description == "<p>Иммунизация однократно конъюгированной вакциной или каждые пять лет полисахаридной вакциной.</p>\n<p>Лица из групп риска — лица старше 60 лет, страдающие хроническими заболеваниями (дыхательной, сердечно-сосудистой систем, печени, почек, сахарным диабетом).</p>\n<p>Лица, проживающих в организациях социального обслуживания.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дифтерия":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес.</p>\n<p>Контактные в очаге (не привитые, не болевшие, привитые однократно) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18-35 лет")
										calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V+R")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [21])
						if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, организаций торговли, транспорта, коммунальной и социальной сферы, общественного питания.</p>\n<p>Лица, работающие вахтовым методом, и сотрудники государственных контрольных органов в пунктах пропуска через государственную границу Российской Федерации не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
									if (infectionComponent.vaccineInfo.age == "36–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "Женщины V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках. Ревакцинации подлежат однократно привитые.</p>\n<p>Перед вакцинацией для женщин рекомендовано исключить вероятность беременности, а также в течение 2 месяцев избегать вероятность зачатия.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–25 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Интервал между вакцинацией и ревакцинацией 6–12 месяцев. Для отдельных вакцин ограничение по возрасту — с 18 до 50 лет.</p>\n\n\n<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Лица, подверженные профессиональному риску заражения (работники медицинских организаций, персонал по уходу за больными, работники сферы обслуживания населения, занятые на предприятиях пищевой промышленности, а таже обслуживающие водопроводные и канализационные сооружения, оборудование и сети).</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций и учреждений всех форм собственности.\nСотрудники учреждений социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>\n<p>Лица, выезжающие в неблагополучные регионы и страны, где регистрируется вспышечная заболеваемость</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Грипп":
				if (infectionComponent.text == "Ежегодно")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, транспорта, коммунальной сферы, беременные женщины.</p>\n<p>Лица, подлежащие призыву на военную службу.</p>\n<p>Лица с хроническими заболеваниями, в том числе с заболеваниями лёгких, сердечно-сосудистыми заболеваниями, метаболическими нарушениями и ожирением.</p>\n<p>Мигранты.</p>\n<p>Строительные рабочие.</p>\n<p>Работники торговли, общественного питания, лица, имеющие контакт с птицей</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–59 лет")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Брюшной тиф":
			if (infectionComponent.text == "V каждые 3 года")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Лица, занятые в сфере коммунального благоустройства (работники, обслуживающие канализационные сети, сооружения и оборудование, работникам, участвующим в процессе водоподготовки и водоотведения, а также организаций, осуществляющих санитарную очистку населённых мест, сбор, транспортировку, утилизацию бытовых отходов).</p>\n<p>Лица, работающие с живыми культурами возбудителей брюшного тифа.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дизентерия Зонне":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Работники медицинских организаций (их структурных подразделений) инфекционного профиля и бактериологических лабораторий.</p>\n<p>Лица, занятые в сфере коммунального благоустройства, в том числе выезжающие на работу в оздоровительные лагеря. Персонал детских дошкольных организаций.</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций всех форм собственности.\nСотрудники социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
									
				break

			case "Клещевой вирусный энцефалит":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Вакцинация проводится двухкратно с интервалом между V1 и V2 от 1 месяца до полугода (возможно до 7 месяцев), ревакцинация через 1 год после заврешения первичного курса вакцинации. Последующие ревакцинации проводят каждые 3 года.</p>\n<p>Лица, работающие с живыми культурами возбудителя клещевого энцефалита.</p>\n<p>Лица, проживающие на эндемичных по клещевому вирусному энцефалиту территориях.</p>\n<p>Лица, выезжающие на эндемичные по клещевому вирусному энцефалиту территории, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

//assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и описаний у addInfectionInfo" id="cf6a7cbe-748f-49f4-af0a-b7cb54a3c98f"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload


assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.addInfectionInfo.size() == 9 //В маппинге 9 инфекций 

def checkCount = 0 //Счетчик циклов

while (calendar.addInfectionInfo.size() > 0)
{
	infectionComponent = calendar.addInfectionInfo[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Сибирская язва":
				if (infectionComponent.description == "<p>Вакцинация проводится двукратно с интервалом между введениями 20-30 суток. Ревакцинация - ежегодно.</p>\n\n<p>Лица, выполняющие следующие работы: зооветработники и другие лица, профессионально занятые предубойным содержанием скота, а также убоем, снятием шкур и разделкой туш; сбор, хранение, транспортировка и первичная обработка сырья животного происхождения; сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные на энзоотичных по сибирской язве территориях.</p>\n\n<p>Лица, работающие с материалом, подозрительным на инфицирование возбудителем сибирской язвы.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Туляремия":
				if (infectionComponent.description == "<p>Вакцинация проводится однократно. Ревакцинация каждые 5 лет. Перед проведением профилактических прививок необходимо проведение иммунодиагностического теста с тулярином. Вакцинация проводится при отрицательных результатах.</p>\n\n<p>Лица, проживающие на энзоотичных по туляремии территориях, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, другие работы по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя туляремии.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Чума":
				if (infectionComponent.description == "<p>Иммунизацию проводят однократно. Дозировка препарата зависит от способа введения: внутрикожно, подкожно, накожно, ингаляционно.</p>\n\n<p>Лица, проживающие на энзоотичных по чуме территориях.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя чумы.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бруцеллез":
				if (infectionComponent.description == "<p>Перед вакцинацией необходимо проведение иммунодиагностического теста с Бруцеллином или ИФА на наличие специфических антител. Вакцинация проводится при отрицательных результатах. Вакцинация - однократно, ревакцинация - через 10-12 месяцев (при отрицательных результатах тестов). В очагах козье-овечьего типа бруцеллеза лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания скота бруцеллезом; по убою скота, больного бруцеллезом, заготовке и переработке полученных от него мяса и мясопродуктов. Животноводы, ветеринарные работники, зоотехники в хозяйствах, энзоотичных по бруцеллезу.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя бруцеллеза.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бешенство":
				if (infectionComponent.description == "<p>Схема профилактической иммунизации: Первичная иммунизация - трехкратно (0, 7, 30 дни), первая ревакцинация - через год после законченного курса первичной иммунизации. Последующие ревакцинации - каждые 3 года. С профилактической целью вакцинируют лиц, имеющих высокий риск заражения бешенством: лица, работающие с \"уличным\" вирусом бешенства; ветеринарные работники; егеря, охотники, лесники; лица, выполняющие работы по отлову и содержанию животных.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лептоспироз":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через год по показаниям.</p>\n\n<p>Лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, расположенных на энзоотичных по лептоспирозу территориях; по убою скота, больного лептоспирозом, заготовке и переработке мяса и мясопродуктов, полученных от больных лептоспирозом животных; по отлову и содержанию безнадзорных животных.</p> \n\n<p>Лица, работающие с живыми культурами возбудителя лептоспироза.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лихорадка Ку":
				if (infectionComponent.description == "<p>Вакцинация однократно, ревакцинация - через 1 год.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания лихорадкой Ку.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению и переработке сельскохозяйственной продукции на энзоотичных территориях по лихорадке Ку.</p>\n\n<p>Лица, работающие с живыми культурами возбудителей лихорадки Ку.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Желтая лихорадка":
				if (infectionComponent.description == "<p>Вакцинация - однократно.</p>\n\n<p>Лица, подвергшиеся вакцинации, получают международное свидетельство о вакцинации (действительно в течение всей жизни вакцинированного лица и вступает в силу через 10 дней после даты вакцинации).</p>\n\n<p>Лица, выезжающие за пределы Российской Федерации в энзоотичные по желтой лихорадке страны (регионы).</p>\n\n<p>Лица, работающие с живыми культурами возбудителя желтой лихорадки.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Холера":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через 6 месяцев по показаниям.</p>\n\n<p>Лица, выезжающие в неблагополучные по холере страны (регионы). Население субъектов Российской Федерации в случае осложнения санитарно-эпидемиологической обстановки по холере в сопредельных странах, а также на территории Российской Федерации.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break
				
			default:
				break
		}
		checkCount++
}

assert calendar.addInfectionInfo.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2006-03-06</con:value></con:property></con:properties></con:testCase><con:testCase id="06b08b9e-dcd4-4183-9161-2d927c849bdb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="145385_Получение календаря прививок 18-летнего пациента без прививок" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="1c0d9e5d-7fa9-49ea-ae51-e38302c4674e"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="130bb196-22b0-4823-ac01-4c8785986ea3"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/145385"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="6acdede5-4307-44cb-a625-65960da7a26b"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == false  //Проверяем что вернулся не ребёнок

assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 15 //В маппинге инфекций 15 с признаком isChild = false

def checkCount = 0 //Счетчик циклов

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1,V2,V3")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие и не являющиеся носителями HBs-Ag.</p>\n<p>Схема: 0–1-6 мес. (V2 через 1 месяц от первой прививки, V3 через 6 месяцев от первой прививки).</p>\n<p>Контактные в очаге (не привитые, не болевшие и не являющиеся носителями HBs-Ag) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "Группы риска")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [23])
							if (infectionComponent.description == "<p>Иммунизация однократно конъюгированной вакциной или каждые пять лет полисахаридной вакциной.</p>\n<p>Лица из групп риска — лица старше 60 лет, страдающие хроническими заболеваниями (дыхательной, сердечно-сосудистой систем, печени, почек, сахарным диабетом).</p>\n<p>Лица, проживающих в организациях социального обслуживания.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дифтерия":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес.</p>\n<p>Контактные в очаге (не привитые, не болевшие, привитые однократно) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18-35 лет")
										calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V+R")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [21])
						if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, организаций торговли, транспорта, коммунальной и социальной сферы, общественного питания.</p>\n<p>Лица, работающие вахтовым методом, и сотрудники государственных контрольных органов в пунктах пропуска через государственную границу Российской Федерации не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
									if (infectionComponent.vaccineInfo.age == "36–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "Женщины V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках. Ревакцинации подлежат однократно привитые.</p>\n<p>Перед вакцинацией для женщин рекомендовано исключить вероятность беременности, а также в течение 2 месяцев избегать вероятность зачатия.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–25 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Интервал между вакцинацией и ревакцинацией 6–12 месяцев. Для отдельных вакцин ограничение по возрасту — с 18 до 50 лет.</p>\n\n\n<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Лица, подверженные профессиональному риску заражения (работники медицинских организаций, персонал по уходу за больными, работники сферы обслуживания населения, занятые на предприятиях пищевой промышленности, а таже обслуживающие водопроводные и канализационные сооружения, оборудование и сети).</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций и учреждений всех форм собственности.\nСотрудники учреждений социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>\n<p>Лица, выезжающие в неблагополучные регионы и страны, где регистрируется вспышечная заболеваемость</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Грипп":
				if (infectionComponent.text == "Ежегодно")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, транспорта, коммунальной сферы, беременные женщины.</p>\n<p>Лица, подлежащие призыву на военную службу.</p>\n<p>Лица с хроническими заболеваниями, в том числе с заболеваниями лёгких, сердечно-сосудистыми заболеваниями, метаболическими нарушениями и ожирением.</p>\n<p>Мигранты.</p>\n<p>Строительные рабочие.</p>\n<p>Работники торговли, общественного питания, лица, имеющие контакт с птицей</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–59 лет")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Брюшной тиф":
			if (infectionComponent.text == "V каждые 3 года")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Лица, занятые в сфере коммунального благоустройства (работники, обслуживающие канализационные сети, сооружения и оборудование, работникам, участвующим в процессе водоподготовки и водоотведения, а также организаций, осуществляющих санитарную очистку населённых мест, сбор, транспортировку, утилизацию бытовых отходов).</p>\n<p>Лица, работающие с живыми культурами возбудителей брюшного тифа.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дизентерия Зонне":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Работники медицинских организаций (их структурных подразделений) инфекционного профиля и бактериологических лабораторий.</p>\n<p>Лица, занятые в сфере коммунального благоустройства, в том числе выезжающие на работу в оздоровительные лагеря. Персонал детских дошкольных организаций.</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций всех форм собственности.\nСотрудники социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
									
				break

			case "Клещевой вирусный энцефалит":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Вакцинация проводится двухкратно с интервалом между V1 и V2 от 1 месяца до полугода (возможно до 7 месяцев), ревакцинация через 1 год после заврешения первичного курса вакцинации. Последующие ревакцинации проводят каждые 3 года.</p>\n<p>Лица, работающие с живыми культурами возбудителя клещевого энцефалита.</p>\n<p>Лица, проживающие на эндемичных по клещевому вирусному энцефалиту территориях.</p>\n<p>Лица, выезжающие на эндемичные по клещевому вирусному энцефалиту территории, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

//assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и описаний у addInfectionInfo" id="7dbf7897-01b7-4f85-b8b2-52d2f909ac70"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload


assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.addInfectionInfo.size() == 9 //В маппинге 9 инфекций 

def checkCount = 0 //Счетчик циклов

while (calendar.addInfectionInfo.size() > 0)
{
	infectionComponent = calendar.addInfectionInfo[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Сибирская язва":
				if (infectionComponent.description == "<p>Вакцинация проводится двукратно с интервалом между введениями 20-30 суток. Ревакцинация - ежегодно.</p>\n\n<p>Лица, выполняющие следующие работы: зооветработники и другие лица, профессионально занятые предубойным содержанием скота, а также убоем, снятием шкур и разделкой туш; сбор, хранение, транспортировка и первичная обработка сырья животного происхождения; сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные на энзоотичных по сибирской язве территориях.</p>\n\n<p>Лица, работающие с материалом, подозрительным на инфицирование возбудителем сибирской язвы.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Туляремия":
				if (infectionComponent.description == "<p>Вакцинация проводится однократно. Ревакцинация каждые 5 лет. Перед проведением профилактических прививок необходимо проведение иммунодиагностического теста с тулярином. Вакцинация проводится при отрицательных результатах.</p>\n\n<p>Лица, проживающие на энзоотичных по туляремии территориях, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, другие работы по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя туляремии.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Чума":
				if (infectionComponent.description == "<p>Иммунизацию проводят однократно. Дозировка препарата зависит от способа введения: внутрикожно, подкожно, накожно, ингаляционно.</p>\n\n<p>Лица, проживающие на энзоотичных по чуме территориях.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя чумы.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бруцеллез":
				if (infectionComponent.description == "<p>Перед вакцинацией необходимо проведение иммунодиагностического теста с Бруцеллином или ИФА на наличие специфических антител. Вакцинация проводится при отрицательных результатах. Вакцинация - однократно, ревакцинация - через 10-12 месяцев (при отрицательных результатах тестов). В очагах козье-овечьего типа бруцеллеза лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания скота бруцеллезом; по убою скота, больного бруцеллезом, заготовке и переработке полученных от него мяса и мясопродуктов. Животноводы, ветеринарные работники, зоотехники в хозяйствах, энзоотичных по бруцеллезу.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя бруцеллеза.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бешенство":
				if (infectionComponent.description == "<p>Схема профилактической иммунизации: Первичная иммунизация - трехкратно (0, 7, 30 дни), первая ревакцинация - через год после законченного курса первичной иммунизации. Последующие ревакцинации - каждые 3 года. С профилактической целью вакцинируют лиц, имеющих высокий риск заражения бешенством: лица, работающие с \"уличным\" вирусом бешенства; ветеринарные работники; егеря, охотники, лесники; лица, выполняющие работы по отлову и содержанию животных.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лептоспироз":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через год по показаниям.</p>\n\n<p>Лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, расположенных на энзоотичных по лептоспирозу территориях; по убою скота, больного лептоспирозом, заготовке и переработке мяса и мясопродуктов, полученных от больных лептоспирозом животных; по отлову и содержанию безнадзорных животных.</p> \n\n<p>Лица, работающие с живыми культурами возбудителя лептоспироза.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лихорадка Ку":
				if (infectionComponent.description == "<p>Вакцинация однократно, ревакцинация - через 1 год.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания лихорадкой Ку.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению и переработке сельскохозяйственной продукции на энзоотичных территориях по лихорадке Ку.</p>\n\n<p>Лица, работающие с живыми культурами возбудителей лихорадки Ку.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Желтая лихорадка":
				if (infectionComponent.description == "<p>Вакцинация - однократно.</p>\n\n<p>Лица, подвергшиеся вакцинации, получают международное свидетельство о вакцинации (действительно в течение всей жизни вакцинированного лица и вступает в силу через 10 дней после даты вакцинации).</p>\n\n<p>Лица, выезжающие за пределы Российской Федерации в энзоотичные по желтой лихорадке страны (регионы).</p>\n\n<p>Лица, работающие с живыми культурами возбудителя желтой лихорадки.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Холера":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через 6 месяцев по показаниям.</p>\n\n<p>Лица, выезжающие в неблагополучные по холере страны (регионы). Население субъектов Российской Федерации в случае осложнения санитарно-эпидемиологической обстановки по холере в сопредельных странах, а также на территории Российской Федерации.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break
				
			default:
				break
		}
		checkCount++
}

assert calendar.addInfectionInfo.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2006-03-11</con:value></con:property></con:properties></con:testCase><con:testCase id="dd555520-4abf-4ae4-aa20-45be159ebb94" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/2/1_АС2. LK_SERVER_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="ba4b4af7-1f81-41e0-814f-ea498b12759d"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/2/1"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 500"><con:configuration><codes>500</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_SERVER_ERROR"><con:configuration><path>$.error.code</path><content>LK_SERVER_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Ошибка вызова сервиса ЛК"><con:configuration><path>$.error.description</path><content>Ошибка вызова сервиса ЛК</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = TECHNICAL"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="9f6ebc19-27e8-4443-808e-f75edbc58ebd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/2/2_АС2. LK_SERVER_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="fa2273b5-17eb-4037-8d39-4663a8b8c2db"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/2/2"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 500"><con:configuration><codes>500</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_SERVER_ERROR"><con:configuration><path>$.error.code</path><content>LK_SERVER_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Ошибка вызова сервиса ЛК"><con:configuration><path>$.error.description</path><content>Ошибка вызова сервиса ЛК</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = TECHNICAL"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="bde25080-2855-4e1c-9fc0-b79420c623e2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/3_АС3. LK_USER_NOT_FOUND" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="d7a6c4eb-53c5-4df9-b287-6dde90014d8b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/3"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_USER_NOT_FOUND"><con:configuration><path>$.error.code</path><content>LK_USER_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Переданный пациент не найден"><con:configuration><path>$.error.description</path><content>Переданный пациент не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="aca7496f-4475-45df-a174-3e928b275ff1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/4_АС4. LK_VACCINATION_AGE_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="4a549c6b-5754-4429-99a2-c2dd2787c383"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/4"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 403"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_VACCINATION_AGE_ERROR"><con:configuration><path>$.error.code</path><content>LK_VACCINATION_AGE_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Переданный возраст пациента некорректен"><con:configuration><path>$.error.description</path><content>Переданный возраст пациента некорректен</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="31f06c9f-5cc2-473e-88fa-b2e450e4a6d7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/5_АС5. ACCESS_DENIED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="8681b551-d0dd-4ce4-84e0-187b26021343"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 403"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55ab4ca8-6967-4663-b23e-8f4cb35194fe" name="error.code = ACCESS_DENIED"><con:configuration><path>$.error.code</path><content>ACCESS_DENIED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55ab4ca8-6967-4663-b23e-8f4cb35194fe" name="error.description = Доступ к запрошенной медкарте отсутствует"><con:configuration><path>$.error.description</path><content>Доступ к запрошенной медкарте отсутствует</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55ab4ca8-6967-4663-b23e-8f4cb35194fe" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55ab4ca8-6967-4663-b23e-8f4cb35194fe" name="error.origin = ACCESS_DENIED"><con:configuration><path>$.error.origin</path><content>ACCESS_DENIED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>0f84d61f-4456-4b8b-b47a-4d3009c4e3e1</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2000-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="e12c5dae-e7e3-46d0-ac74-b19a6db93a35" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/6_АС5. SUDIR_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="5193299d-2d9e-4e88-a4b5-a8e98898b955"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}1"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="854865ea-4618-4239-80b3-c2697d17da1f" name="error.code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="854865ea-4618-4239-80b3-c2697d17da1f" name="error.description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="854865ea-4618-4239-80b3-c2697d17da1f" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>0f84d61f-4456-4b8b-b47a-4d3009c4e3e2</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2000-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="4ffe4bd4-6102-4905-a837-c626757ee14b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/7_АС6. LK_AUTH_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="b02066a7-79dc-4041-b7ef-b752b3704e32"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/7"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_AUTH_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>LK_AUTH_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Токен авторизации не действителен"><con:configuration><path>$.error.description</path><content>Токен авторизации не действителен</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getVaccinations" id="dbcf79e6-5716-4f9a-9d58-81e3e25c4c64" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/3/vaccinations" methodName="Vaccinations 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getVaccinations" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/vaccinations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52227a58-9a22-4e7c-af56-268ebb89752d" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:testCase id="6a5a1ce5-ff09-437d-a2d0-3e4784f222cd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="293228/8_АС7. LK_EHR_OBTAIN_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCalendar" id="46257192-c05c-42e6-8919-654c8647b3d9"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>&#13;
  &lt;con:entry key="Mock-lk" value="${#Project#Mock}/293228/8"/>&#13;
  &lt;con:entry key="EI-Token" value="${#Project#sudirToken}"/>&#13;
&lt;/xml-fragment></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code = 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.code = LK_EHR_OBTAIN_ERROR"><con:configuration><path>$.error.code</path><content>LK_EHR_OBTAIN_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.description = Ошибка получения медицинской карты"><con:configuration><path>$.error.description</path><content>Ошибка получения медицинской карты</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6904e673-d675-435a-a677-474859020063" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getVaccinations" id="0cef832e-3b9c-4880-b883-d208a5c72245" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/3/vaccinations" methodName="Vaccinations 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getVaccinations" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/vaccinations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52227a58-9a22-4e7c-af56-268ebb89752d" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>78c3f6ee-e387-4b98-abe8-8f9332fe2401</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2023-08-10</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>emiasInfoEndpoint</con:name><con:value>http://application-emiasinfo4.emias.solit-clouds.ru/</con:value></con:property><con:property><con:name>lkEndpoint</con:name><con:value>https://lkservice.test.emias.ru</con:value></con:property><con:property><con:name>Mock</con:name><con:value>http://application-mock.emias.solit-clouds.ru/mock</con:value></con:property><con:property><con:name>mockDbFullConnection</con:name><con:value>jdbc:postgresql://172.17.5.13:29107/emias_info_mock?user=emias_info&amp;password=emias_info</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>