<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="add23102-1014-4169-8070-20469d43ce8e" activeEnvironment="Default" name="ЕМИАС.ИНФО сервис &quot;Архивные записи&quot;" resourceRoot="" soapui-version="5.7.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="7126aee9-8cec-4d28-8e50-effd6551b32a" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://emiasinfo1.emias.solit-clouds.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint></con:endpoints><con:resource name="delete" path="/api/v3/archiveAppointment/delete" id="2bb79326-3f60-4da1-a3ce-f9c53fb27ab5"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>appointmentId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>omsNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>birthDate</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="bdbe5cc5-4c86-4cc4-9949-23b6c9ebe959" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:del="http://emiasinfo-application.test.emias.mos.ru/api/v3/archiveAppointment/delete">del:Fault</con:element></con:representation><con:request name="Request 1" id="2e76004a-bba3-421b-bc76-366689bc860c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>appointmentId</con:entry><con:entry>omsNumber</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="createAppointment" path="/api/v2/saOrchestrator/createAppointment" id="7e6fdc1f-ece6-465d-81c1-c246cfa43332"><con:settings/><con:parameters/><con:method name="Method 1" id="0bcf6ea5-72b5-4405-9875-ce98146660a8" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="http://176.214.77.53/api/v2/saOrchestrator/createAppointment">cre:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="b5388141-6c65-4953-82a3-f76598e890fc" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="cancelAppointment" path="/api/v3/saOrchestrator/cancelAppointment" id="e57c3732-d013-436e-9287-7b42b43645d9"><con:settings/><con:parameters/><con:method name="Method 1" id="4453608e-619d-44e4-9db8-d322aebaa613" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="9c52ed58-accd-4c1a-be2e-46c37e772f17" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="list" path="/api/v3/archiveAppointment/list" id="c639bd5e-56c0-48b2-8ae2-ddeef691b41f"><con:settings/><con:parameters/><con:method name="Method 1" id="6a98f921-d38d-412c-a5e5-6ec7c3738322" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:list="http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list">list:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>403 400 401 404</con:status><con:params/><con:element xmlns:list="http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list">list:Fault</con:element></con:representation><con:request name="Request 1" id="f6c36c42-2d1c-478f-80db-8870ef4c5047" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="list v4" path="/api/v4/archiveAppointment/list" id="07c8e63b-26c2-4e93-8fdd-76ea0afc8d01"><con:settings/><con:parameters><con:parameter><con:name>EI-Token</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="c929dbcc-acad-4aa8-bde4-0124af54c4d1" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:list="http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list">list:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 400 403 500</con:status><con:params/><con:element xmlns:list="http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list">list:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="appointmentsByIds" path="/api/v2/archiveAppointment/appointmentsByIds" id="49c3cad7-1025-433c-a437-148338486128"><con:settings/><con:parameters><con:parameter><con:name>Mock-saOrchestrator</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="e77d09c6-72c9-4fdb-96a5-ab957a1b7626" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds">app:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:app="http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds">app:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Post appointmentsByIds" id="7feb5647-8a0d-4119-9059-10204a30aae7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7791889720000557",
  "birthDate": "2011-08-29",
  "appointmentId": [
    391927704348
  ]
}</con:request><con:originalUri>http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/388444" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Mock-saOrchestrator</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="list v5" path="/api/v5/archiveAppointment/list" id="07c8e63b-26c2-4e93-8fdd-76ea0afc8d01"><con:settings/><con:parameters><con:parameter><con:name>EI-Token</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="c929dbcc-acad-4aa8-bde4-0124af54c4d1" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:list="http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list">list:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 500 404 403</con:status><con:params/><con:element xmlns:list="http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list">list:Fault</con:element></con:representation><con:request name="Request 1" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="09f587c9-8209-48de-a49c-013b278ebde9" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://lkservice.test.emias.mos.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint></con:endpoints><con:resource name="login" path="/api/auth/1/login" id="07db3459-0f7f-461e-89e7-4f96441ad38c"><con:settings/><con:parameters><con:parameter><con:name>X-Environment</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="79692951-2727-4361-a241-bce8ae6b8917" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="http://lkservice-apigateway.test.emias.mos.ru/api/user/auth/1/login">log:Response</con:element></con:representation><con:request name="Request 1" id="42292974-4cbe-4bfc-b514-f208a279f2b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>X-Environment</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="confirm" path="/api/auth/1/confirm" id="5ba153e0-e37f-4c1e-aeab-09616de1b7ad"><con:settings/><con:parameters/><con:method name="Method 1" id="cc5ce9b7-3d8b-42cd-8c99-1d5b2924a20a" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:con1="http://lkservice-apigateway.test.emias.mos.ru/api/auth/1/confirm">con1:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="777c156c-0e14-4a91-bbb5-c6ce5300402d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="grant-permission" path="/api/internal/1/user/grant-permission" id="2133d0f3-75bf-4694-b445-f9258bf70fff"><con:settings/><con:parameters/><con:method name="Method 1" id="80b580f1-afc7-4248-ad5f-a84dba53c05d" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="df64f6d9-ab38-4e3b-96aa-89dde0f1a825" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:WsdlInterface" id="9a1ec62e-966b-49d4-82a0-bfd3fb95c291" wsaVersion="NONE" name="SelfAppointmentServiceV5Binding" type="wsdl" bindingName="{http://impl.service.soap.emias.lanit.ru/v5/}SelfAppointmentServiceV5Binding" soapVersion="1_2" anonymous="optional" definition="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?wsdl"><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="SelfAppointmentService" targetNamespace="http://impl.service.soap.emias.lanit.ru/v5/" xmlns:api="http://api.service.soap.emias.lanit.ru/v5/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="http://impl.service.soap.emias.lanit.ru/v5/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--WSDL контракта 5 (доработки по записи 2-х детей, для Инфомата и поддержки ЦЛС)-->
  <wsdl:documentation>version="5.2"</wsdl:documentation>
  <wsdl:types>
    <xs:schema xmlns="http://www.w3.org/2001/XMLSchema">
      <import namespace="http://api.service.soap.emias.lanit.ru/v5/" schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELvH8olfvFUzUOzR9Es_rBviwyrRrnxXTOMZf1KYWzL6hlqv_eyPYq5HlejT1ROkMeQ--"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="SoapException">
    <wsdl:part element="api:soapException" name="SoapException"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointment">
    <wsdl:part element="api:cancelAppointment" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentResponse">
    <wsdl:part element="api:cancelAppointmentResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getAppointmentReceptionsByPatient">
    <wsdl:part element="api:getAppointmentReceptionsByPatient" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getAppointmentReceptionsByPatientResponse">
    <wsdl:part element="api:getAppointmentReceptionsByPatientResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getReferralsInfo">
    <wsdl:part element="api:getReferralsInfo" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getReferralsInfoResponse">
    <wsdl:part element="api:getReferralsInfoResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="createAppointment">
    <wsdl:part element="api:createAppointment" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="createAppointmentResponse">
    <wsdl:part element="api:createAppointmentResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getAvailableResourceScheduleInfo">
    <wsdl:part element="api:getAvailableResourceScheduleInfo" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getAvailableResourceScheduleInfoResponse">
    <wsdl:part element="api:getAvailableResourceScheduleInfoResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfo">
    <wsdl:part element="api:getDoctorsInfo" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfoResponse">
    <wsdl:part element="api:getDoctorsInfoResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getSpecialitiesInfo">
    <wsdl:part element="api:getSpecialitiesInfo" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getSpecialitiesInfoResponse">
    <wsdl:part element="api:getSpecialitiesInfoResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="shiftAppointment">
    <wsdl:part element="api:shiftAppointment" name="shiftAppointment"/>
  </wsdl:message>
  <wsdl:message name="shiftAppointmentResponse">
    <wsdl:part element="api:shiftAppointmentResponse" name="shiftAppointmentResponse"/>
  </wsdl:message>
  <wsdl:message name="getDutyARScheduleByPatient">
    <wsdl:part element="api:getDutyARScheduleByPatient" name="getDutyARScheduleByPatient"/>
  </wsdl:message>
  <wsdl:message name="getDutyARScheduleByPatientResponse">
    <wsdl:part element="api:getDutyARScheduleByPatientResponse" name="getDutyARScheduleByPatientResponse"/>
  </wsdl:message>
  <wsdl:message name="createAppointmentToDutyDoctorByPatient">
    <wsdl:part element="api:createAppointmentToDutyDoctorByPatient" name="createAppointmentToDutyDoctorByPatient"/>
  </wsdl:message>
  <wsdl:message name="createAppointmentToDutyDoctorByPatientResponse">
    <wsdl:part element="api:createAppointmentToDutyDoctorByPatientResponse" name="createAppointmentToDutyDoctorByPatientResponse"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentToDutyDoctorByPatient">
    <wsdl:part element="api:cancelAppointmentToDutyDoctorByPatient" name="cancelAppointmentToDutyDoctorByPatient"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentToDutyDoctorByPatientResponse">
    <wsdl:part element="api:cancelAppointmentToDutyDoctorByPatientResponse" name="cancelAppointmentToDutyDoctorByPatientResponse"/>
  </wsdl:message>
  <wsdl:message name="getHealthCareAvailabilityAttributes">
    <wsdl:part element="api:getHealthCareAvailabilityAttributes" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getHealthCareAvailabilityAttributesResponse">
    <wsdl:part element="api:getHealthCareAvailabilityAttributesResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentBySms">
    <wsdl:part element="api:cancelAppointmentBySms" name="cancelAppointmentBySms"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentBySmsResponse">
    <wsdl:part element="api:cancelAppointmentBySmsResponse" name="cancelAppointmentBySmsResponse"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentByID">
    <wsdl:part element="api:cancelAppointmentByID" name="cancelAppointmentByID"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentByIDResponse">
    <wsdl:part element="api:cancelAppointmentByIDResponse" name="cancelAppointmentByIDResponse"/>
  </wsdl:message>
  <wsdl:message name="getAssignmentsInfo">
    <wsdl:part element="api:getAssignmentsInfo" name="getAssignmentsInfo"/>
  </wsdl:message>
  <wsdl:message name="getAssignmentsInfoResponse">
    <wsdl:part element="api:getAssignmentsInfoResponse" name="getAssignmentsInfoResponse"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfoForLI">
    <wsdl:part element="api:getDoctorsInfoForLI" name="getDoctorsInfoForLI"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfoForLIResponse">
    <wsdl:part element="api:getDoctorsInfoForLIResponse" name="getDoctorsInfoForLIResponse"/>
  </wsdl:message>
  <wsdl:message name="getSpecialitiesInfoForGroup">
    <wsdl:part element="api:getSpecialitiesInfoForGroup" name="getSpecialitiesInfoForGroup"/>
  </wsdl:message>
  <wsdl:message name="getSpecialitiesInfoForGroupResponse">
    <wsdl:part element="api:getSpecialitiesInfoForGroupResponse" name="getSpecialitiesInfoForGroupResponse"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfoForGroup">
    <wsdl:part element="api:getDoctorsInfoForGroup" name="getDoctorsInfoForGroup"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfoForGroupResponse">
    <wsdl:part element="api:getDoctorsInfoForGroupResponse" name="getDoctorsInfoForGroupResponse"/>
  </wsdl:message>
  <wsdl:message name="getAvailableResourceScheduleInfoForGroup">
    <wsdl:part element="api:getAvailableResourceScheduleInfoForGroup" name="getAvailableResourceScheduleInfoForGroup"/>
  </wsdl:message>
  <wsdl:message name="getAvailableResourceScheduleInfoForGroupResponse">
    <wsdl:part element="api:getAvailableResourceScheduleInfoForGroupResponse" name="getAvailableResourceScheduleInfoForGroupResponse"/>
  </wsdl:message>
  <wsdl:message name="createAppointmentForGroup">
    <wsdl:part element="api:createAppointmentForGroup" name="createAppointmentForGroup"/>
  </wsdl:message>
  <wsdl:message name="createAppointmentForGroupResponse">
    <wsdl:part element="api:createAppointmentForGroupResponse" name="createAppointmentForGroupResponse"/>
  </wsdl:message>
  <wsdl:message name="shiftAppointmentForGroup">
    <wsdl:part element="api:shiftAppointmentForGroup" name="shiftAppointmentForGroup"/>
  </wsdl:message>
  <wsdl:message name="shiftAppointmentForGroupResponse">
    <wsdl:part element="api:shiftAppointmentForGroupResponse" name="shiftAppointmentForGroupResponse"/>
  </wsdl:message>
  <wsdl:message name="getArchivedAppointments">
    <wsdl:part element="api:getArchivedAppointments" name="getArchivedAppointments"/>
  </wsdl:message>
  <wsdl:message name="getArchivedAppointmentsResponse">
    <wsdl:part element="api:getArchivedAppointmentsResponse" name="getArchivedAppointmentsResponse"/>
  </wsdl:message>
  <wsdl:portType name="SelfAppointmentServiceV5PT">
    <wsdl:operation name="getHealthCareAvailabilityAttributes">
      <wsdl:input message="tns:getHealthCareAvailabilityAttributes" name="getHealthCareAvailabilityAttributes"/>
      <wsdl:output message="tns:getHealthCareAvailabilityAttributesResponse" name="getHealthCareAvailabilityAttributesResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="createAppointment">
      <wsdl:input message="tns:createAppointment" name="createAppointment"/>
      <wsdl:output message="tns:createAppointmentResponse" name="createAppointmentResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getAvailableResourceScheduleInfo">
      <wsdl:input message="tns:getAvailableResourceScheduleInfo" name="getAvailableResourceScheduleInfo"/>
      <wsdl:output message="tns:getAvailableResourceScheduleInfoResponse" name="getAvailableResourceScheduleInfoResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfo">
      <wsdl:input message="tns:getDoctorsInfo" name="getDoctorsInfo"/>
      <wsdl:output message="tns:getDoctorsInfoResponse" name="getDoctorsInfoResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getSpecialitiesInfo">
      <wsdl:input message="tns:getSpecialitiesInfo" name="getSpecialitiesInfo"/>
      <wsdl:output message="tns:getSpecialitiesInfoResponse" name="getSpecialitiesInfoResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="shiftAppointment">
      <wsdl:input message="tns:shiftAppointment" name="shiftAppointment"/>
      <wsdl:output message="tns:shiftAppointmentResponse" name="shiftAppointmentResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointment">
      <wsdl:input message="tns:cancelAppointment" name="cancelAppointment"/>
      <wsdl:output message="tns:cancelAppointmentResponse" name="cancelAppointmentResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getAppointmentReceptionsByPatient">
      <wsdl:input message="tns:getAppointmentReceptionsByPatient" name="getAppointmentReceptionsByPatient"/>
      <wsdl:output message="tns:getAppointmentReceptionsByPatientResponse" name="getAppointmentReceptionsByPatientResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getReferralsInfo">
      <wsdl:input message="tns:getReferralsInfo" name="getReferralsInfo"/>
      <wsdl:output message="tns:getReferralsInfoResponse" name="getReferralsInfoResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getDutyARScheduleByPatient">
      <wsdl:input message="tns:getDutyARScheduleByPatient" name="getDutyARScheduleByPatient"/>
      <wsdl:output message="tns:getDutyARScheduleByPatientResponse" name="getDutyARScheduleByPatientResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="createAppointmentToDutyDoctorByPatient">
      <wsdl:input message="tns:createAppointmentToDutyDoctorByPatient" name="createAppointmentToDutyDoctorByPatient"/>
      <wsdl:output message="tns:createAppointmentToDutyDoctorByPatientResponse" name="createAppointmentToDutyDoctorByPatientResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentToDutyDoctorByPatient">
      <wsdl:input message="tns:cancelAppointmentToDutyDoctorByPatient" name="cancelAppointmentToDutyDoctorByPatient"/>
      <wsdl:output message="tns:cancelAppointmentToDutyDoctorByPatientResponse" name="cancelAppointmentToDutyDoctorByPatientResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentBySms">
      <wsdl:input message="tns:cancelAppointmentBySms" name="cancelAppointmentBySms"/>
      <wsdl:output message="tns:cancelAppointmentBySmsResponse" name="cancelAppointmentBySmsResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentByID">
      <wsdl:input message="tns:cancelAppointmentByID" name="cancelAppointmentByID"/>
      <wsdl:output message="tns:cancelAppointmentByIDResponse" name="cancelAppointmentByIDResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getAssignmentsInfo">
      <wsdl:input message="tns:getAssignmentsInfo" name="getAssignmentsInfo"/>
      <wsdl:output message="tns:getAssignmentsInfoResponse" name="getAssignmentsInfoResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfoForLI">
      <wsdl:input message="tns:getDoctorsInfoForLI" name="getDoctorsInfoForLI"/>
      <wsdl:output message="tns:getDoctorsInfoForLIResponse" name="getDoctorsInfoForLIResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getSpecialitiesInfoForGroup">
      <wsdl:input message="tns:getSpecialitiesInfoForGroup" name="getSpecialitiesInfoForGroup"/>
      <wsdl:output message="tns:getSpecialitiesInfoForGroupResponse" name="getSpecialitiesInfoForGroupResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfoForGroup">
      <wsdl:input message="tns:getDoctorsInfoForGroup" name="getDoctorsInfoForGroup"/>
      <wsdl:output message="tns:getDoctorsInfoForGroupResponse" name="getDoctorsInfoForGroupResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getAvailableResourceScheduleInfoForGroup">
      <wsdl:input message="tns:getAvailableResourceScheduleInfoForGroup" name="getAvailableResourceScheduleInfoForGroup"/>
      <wsdl:output message="tns:getAvailableResourceScheduleInfoForGroupResponse" name="getAvailableResourceScheduleInfoForGroupResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="createAppointmentForGroup">
      <wsdl:input message="tns:createAppointmentForGroup" name="createAppointmentForGroup"/>
      <wsdl:output message="tns:createAppointmentForGroupResponse" name="createAppointmentForGroupResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="shiftAppointmentForGroup">
      <wsdl:input message="tns:shiftAppointmentForGroup" name="shiftAppointmentForGroup"/>
      <wsdl:output message="tns:shiftAppointmentForGroupResponse" name="shiftAppointmentForGroupResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getArchivedAppointments">
      <wsdl:input message="tns:getArchivedAppointments" name="getArchivedAppointments"/>
      <wsdl:output message="tns:getArchivedAppointmentsResponse" name="getArchivedAppointmentsResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="SelfAppointmentServiceV5Binding" type="tns:SelfAppointmentServiceV5PT">
    <soap12:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getHealthCareAvailabilityAttributes">
      <soap12:operation soapAction="urn://getHealthCareAvailabilityAttributes"/>
      <wsdl:input name="getHealthCareAvailabilityAttributes">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getHealthCareAvailabilityAttributesResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointment">
      <soap12:operation soapAction="urn://cancelAppointment"/>
      <wsdl:input name="cancelAppointment">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelAppointmentResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAppointmentReceptionsByPatient">
      <soap12:operation soapAction="urn://getAppointmentReceptionsByPatient"/>
      <wsdl:input name="getAppointmentReceptionsByPatient">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAppointmentReceptionsByPatientResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getReferralsInfo">
      <soap12:operation soapAction="urn://getReferralsInfo"/>
      <wsdl:input name="getReferralsInfo">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getReferralsInfoResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createAppointment">
      <soap12:operation soapAction="urn://createAppointment"/>
      <wsdl:input name="createAppointment">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createAppointmentResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAvailableResourceScheduleInfo">
      <soap12:operation soapAction="urn://getAvailableResourceScheduleInfo"/>
      <wsdl:input name="getAvailableResourceScheduleInfo">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAvailableResourceScheduleInfoResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfo">
      <soap12:operation soapAction="urn://getDoctorsInfo"/>
      <wsdl:input name="getDoctorsInfo">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDoctorsInfoResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfoForLI">
      <soap12:operation soapAction="urn://getDoctorsInfoForLI"/>
      <wsdl:input name="getDoctorsInfoForLI">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDoctorsInfoForLIResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSpecialitiesInfo">
      <soap12:operation soapAction="urn://getSpecialitiesInfo"/>
      <wsdl:input name="getSpecialitiesInfo">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSpecialitiesInfoResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="shiftAppointment">
      <soap12:operation soapAction="urn://shiftAppointment"/>
      <wsdl:input name="shiftAppointment">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="shiftAppointmentResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDutyARScheduleByPatient">
      <soap12:operation soapAction="urn://getDutyARScheduleByPatient"/>
      <wsdl:input name="getDutyARScheduleByPatient">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDutyARScheduleByPatientResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createAppointmentToDutyDoctorByPatient">
      <soap12:operation soapAction="urn://createAppointmentToDutyDoctorByPatient"/>
      <wsdl:input name="createAppointmentToDutyDoctorByPatient">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createAppointmentToDutyDoctorByPatientResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentToDutyDoctorByPatient">
      <soap12:operation soapAction="urn://cancelAppointmentToDutyDoctorByPatient"/>
      <wsdl:input name="cancelAppointmentToDutyDoctorByPatient">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelAppointmentToDutyDoctorByPatientResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentBySms">
      <soap12:operation soapAction="urn://cancelAppointmentBySms"/>
      <wsdl:input name="cancelAppointmentBySms">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelAppointmentBySmsResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentByID">
      <soap12:operation soapAction="urn://cancelAppointmentByID"/>
      <wsdl:input name="cancelAppointmentByID">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelAppointmentByIDResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAssignmentsInfo">
      <soap12:operation soapAction="urn://getAssignmentsInfo"/>
      <wsdl:input name="getAssignmentsInfo">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAssignmentsInfoResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSpecialitiesInfoForGroup">
      <soap12:operation soapAction="urn://getSpecialitiesInfoForGroup"/>
      <wsdl:input name="getSpecialitiesInfoForGroup">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSpecialitiesInfoForGroupResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfoForGroup">
      <soap12:operation soapAction="urn://getDoctorsInfoForGroup"/>
      <wsdl:input name="getDoctorsInfoForGroup">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDoctorsInfoForGroupResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAvailableResourceScheduleInfoForGroup">
      <soap12:operation soapAction="urn://getAvailableResourceScheduleInfoForGroup"/>
      <wsdl:input name="getAvailableResourceScheduleInfoForGroup">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAvailableResourceScheduleInfoForGroupResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createAppointmentForGroup">
      <soap12:operation soapAction="urn://createAppointmentForGroup"/>
      <wsdl:input name="createAppointmentForGroup">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createAppointmentForGroupResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="shiftAppointmentForGroup">
      <soap12:operation soapAction="urn://shiftAppointmentForGroup"/>
      <wsdl:input name="shiftAppointmentForGroup">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="shiftAppointmentForGroupResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getArchivedAppointments">
      <soap12:operation soapAction="urn://getArchivedAppointments"/>
      <wsdl:input name="getArchivedAppointments">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getArchivedAppointmentsResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SelfAppointmentServiceV5">
    <wsdl:port binding="tns:SelfAppointmentServiceV5Binding" name="SelfAppointmentServiceV5PTB">
      <soap12:address location="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELvH8olfvFUzUOzR9Es_rBviwyrRrnxXTOMZf1KYWzL6hlqv_eyPYq5HlejT1ROkMeQ--</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://api.service.soap.emias.lanit.ru/v5/" version="5.2" xmlns:core="http://api.service.soap.emias.lanit.ru/core/v5/" xmlns:ns1="http://api.service.soap.emias.lanit.ru/v5/" xmlns:tns="http://api.service.soap.emias.lanit.ru/v5/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://api.service.soap.emias.lanit.ru/core/v5/" schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELs3rrVnLFkjJMy5mDfngAN2826cviAmOKcwB0rpK0eO9luhxWIPHWt9l0e4P44rDtQmP"/>
  <!--======================== Элементы =====================================-->
  <!--Отмена записи на прием-->
  <xs:element name="cancelAppointment" type="tns:cancelAppointment"/>
  <xs:element name="cancelAppointmentResponse" type="tns:cancelAppointmentResponse"/>
  <!--Создание записи на прием2-->
  <xs:element name="createAppointment" type="tns:createAppointment"/>
  <xs:element name="createAppointmentResponse" type="tns:createAppointmentResponse"/>
  <!--Получение списка записей для пациента-->
  <xs:element name="getAppointmentReceptionsByPatient" type="tns:getAppointmentReceptionsByPatient"/>
  <xs:element name="getAppointmentReceptionsByPatientResponse" type="tns:getAppointmentReceptionsByPatientResponse"/>
  <!--Получение расписания врача-->
  <xs:element name="getAvailableResourceScheduleInfo" type="tns:getAvailableResourceScheduleInfo"/>
  <xs:element name="getAvailableResourceScheduleInfoResponse" type="tns:getAvailableResourceScheduleInfoResponse"/>
  <!--Получение списка врачей-->
  <xs:element name="getDoctorsInfo" type="tns:getDoctorsInfo"/>
  <xs:element name="getDoctorsInfoResponse" type="tns:getDoctorsInfoResponse"/>
  <!--Получение направлений для пациента-->
  <xs:element name="getReferralsInfo" type="tns:getReferralsInfo"/>
  <xs:element name="getReferralsInfoResponse" type="tns:getReferralsInfoResponse"/>
  <!--Получение списка специальностей-->
  <xs:element name="getSpecialitiesInfo" type="tns:getSpecialitiesInfo"/>
  <xs:element name="getSpecialitiesInfoResponse" type="tns:getSpecialitiesInfoResponse"/>
  <!--Перенос записи на прием-->
  <xs:element name="shiftAppointment" type="tns:shiftAppointment"/>
  <xs:element name="shiftAppointmentResponse" type="tns:shiftAppointmentResponse"/>
  <!--Предоставление расписания ближайшего доступного ДВ-->
  <xs:element name="getDutyARScheduleByPatient" type="tns:getDutyARScheduleByPatient"/>
  <xs:element name="getDutyARScheduleByPatientResponse" type="tns:getDutyARScheduleByPatientResponse"/>
  <!--Создание записи к ДВ-->
  <xs:element name="createAppointmentToDutyDoctorByPatient" type="tns:createAppointmentToDutyDoctorByPatient"/>
  <xs:element name="createAppointmentToDutyDoctorByPatientResponse" type="tns:createAppointmentToDutyDoctorByPatientResponse"/>
  <!--Отмена записи к ДВ-->
  <xs:element name="cancelAppointmentToDutyDoctorByPatient" type="tns:cancelAppointmentToDutyDoctorByPatient"/>
  <xs:element name="cancelAppointmentToDutyDoctorByPatientResponse" type="tns:cancelAppointmentToDutyDoctorByPatientResponse"/>
  <!--Предоставление ожидания по самозаписи-->
  <xs:element name="getHealthCareAvailabilityAttributes" type="tns:getHealthCareAvailabilityAttributes"/>
  <xs:element name="getHealthCareAvailabilityAttributesResponse" type="tns:getHealthCareAvailabilityAttributesResponse"/>
  <!--Отмена записи к ДВ-->
  <xs:element name="cancelAppointmentBySms" type="tns:cancelAppointmentBySms"/>
  <xs:element name="cancelAppointmentBySmsResponse" type="tns:cancelAppointmentBySmsResponse"/>
  <!--Отмена записи на прием (вариант 2, для ЦТО)-->
  <xs:element name="cancelAppointmentByID" type="tns:cancelAppointmentByID"/>
  <xs:element name="cancelAppointmentByIDResponse" type="tns:cancelAppointmentByIDResponse"/>
  <!--Предоставление перечня активных назначений пациента на ЛИ-->
  <xs:element name="getAssignmentsInfo" type="tns:getAssignmentsInfo"/>
  <xs:element name="getAssignmentsInfoResponse" type="tns:getAssignmentsInfoResponse"/>
  <!--Получение ДР на лабораторные исследования-->
  <xs:element name="getDoctorsInfoForLI" type="tns:getDoctorsInfoForLI"/>
  <xs:element name="getDoctorsInfoForLIResponse" type="tns:getDoctorsInfoForLIResponse"/>
  <!--Предоставление перечня специальностей доступных для самозаписи группой пациентов-->
  <xs:element name="getSpecialitiesInfoForGroup" type="tns:getSpecialitiesInfoForGroup"/>
  <xs:element name="getSpecialitiesInfoForGroupResponse" type="tns:getSpecialitiesInfoForGroupResponse"/>
  <!--Предоставление перечня ДР, к которым разрешена самозапись пациента-->
  <xs:element name="getDoctorsInfoForGroup" type="tns:getDoctorsInfoForGroup"/>
  <xs:element name="getDoctorsInfoForGroupResponse" type="tns:getDoctorsInfoForGroupResponse"/>
  <!--Предоставление расписания доступного ресурса и его слотов, доступных для самозаписи группе пациентов-->
  <xs:element name="getAvailableResourceScheduleInfoForGroup" type="tns:getAvailableResourceScheduleInfoForGroup"/>
  <xs:element name="getAvailableResourceScheduleInfoForGroupResponse" type="tns:getAvailableResourceScheduleInfoForGroupResponse"/>
  <!--Создание несколько записей-->
  <xs:element name="createAppointmentForGroup" type="tns:createAppointmentForGroup"/>
  <xs:element name="createAppointmentForGroupResponse" type="tns:createAppointmentForGroupResponse"/>
  <!--Перенос нескольких записей-->
  <xs:element name="shiftAppointmentForGroup" type="tns:shiftAppointmentForGroup"/>
  <xs:element name="shiftAppointmentForGroupResponse" type="tns:shiftAppointmentForGroupResponse"/>
  <!--Получение отмененных и архивных записей пациента-->
  <xs:element name="getArchivedAppointments" type="tns:getArchivedAppointments"/>
  <xs:element name="getArchivedAppointmentsResponse" type="tns:getArchivedAppointmentsResponse"/>
  <!--======================== Ошибки =====================================-->
  <xs:element name="soapException" nillable="false" type="tns:soapException"/>
  <xs:element name="appointmentCodeErrorFaultInfo" type="tns:appointmentCodeErrorFaultInfo"/>
  <!--======================== Типы данных =====================================-->
  <xs:complexType name="availableResourceBasis">
    <xs:sequence>
      <xs:element minOccurs="0" name="referralId" type="xs:string">
        <xs:annotation>
          <xs:documentation>Идентификатор направления, по которому осуществлялся подбор ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="medSpecialityAttachment" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак записи по прикреплению к специальности</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="specialityId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД специализации ДР, по которой осуществлялся подбор ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="ldpId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД вида ЛДП</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="samplingTypeId" type="xs:long">
        <xs:annotation>
          <xs:documentation>Профиль взятия</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="referralType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="REF_TO_DOCTOR"/>
      <xs:enumeration value="REF_TO_LDP"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="signActiveArchiveType">
    <xs:annotation>
      <xs:documentation>Признак «Архивные и отмененные записи»</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long">
      <xs:enumeration value="0"/>
      <xs:enumeration value="1"/>
      <xs:enumeration value="2"/>
      <xs:minInclusive value="0"/>
      <xs:maxInclusive value="2"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="baseDto">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="ldpType">
    <xs:sequence>
      <xs:element name="id" type="xs:string"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="procedure" type="xs:boolean"/>
      <xs:element minOccurs="0" name="investigation" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="lpuType">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="ambulatory" type="xs:string"/>
      <xs:element minOccurs="0" name="patientSign" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="referral">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="number" type="xs:string"/>
      <xs:element minOccurs="0" name="comment" type="xs:string"/>
      <xs:element name="startTime" type="xs:date"/>
      <xs:element name="endTime" type="xs:date"/>
      <xs:element minOccurs="0" name="type" type="xs:string"/>
      <xs:element minOccurs="0" name="lpuId" type="xs:long"/>
      <xs:element minOccurs="0" name="lpuType" type="xs:string"/>
      <xs:element minOccurs="0" name="lpuName" type="xs:string"/>
      <xs:element minOccurs="0" name="availableResourceId" type="xs:long"/>
      <xs:element minOccurs="0" name="toDoctor" type="tns:toDoctor"/>
      <xs:element minOccurs="0" name="toLdp" type="tns:toLdp"/>
      <xs:element minOccurs="0" name="diagnosis" type="tns:diagnosis">
        <xs:annotation>
          <xs:documentation>Информация о диагнозе</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="issuedDoctor" type="tns:jobInfo">
        <xs:annotation>
          <xs:documentation>Информация о враче, выдавшем направление/назначение</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="appointmentOpenDate" type="xs:date"/>
      <xs:element name="countActiveAppointment" type="xs:int"/>
      <xs:element name="countAppointmentWithReceptionFact" type="xs:int"/>
      <xs:element minOccurs="0" name="invalid" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="referralDesc">
    <xs:sequence>
      <xs:element name="referralId" type="xs:long"/>
      <xs:element name="startTime" type="xs:date"/>
      <xs:element name="endTime" type="xs:date"/>
      <xs:element minOccurs="0" name="availableResourceId" type="xs:long"/>
      <xs:element minOccurs="0" name="lpuId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="appointmentDesc">
    <xs:sequence>
      <xs:element name="appointmentId" type="xs:long"/>
      <xs:element name="appointmentNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="patient" type="tns:patientShort"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="scheduleOfDay">
    <xs:sequence>
      <xs:element name="date" type="xs:date"/>
      <xs:element maxOccurs="unbounded" name="scheduleBySlot" type="tns:scheduleBySlot"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="medicalSpeciality">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="male" type="xs:boolean"/>
      <xs:element minOccurs="0" name="female" type="xs:boolean"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="areaType" type="xs:string"/>
      <xs:element minOccurs="0" name="onlyByRefferal" type="xs:boolean"/>
      <xs:element minOccurs="0" name="therapeutic" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="toDoctor">
    <xs:sequence>
      <xs:element name="specialityId" type="xs:long"/>
      <xs:element name="specialityName" type="xs:string"/>
      <xs:element minOccurs="0" name="doctorFio" type="xs:string"/>
      <xs:element name="receptionTypeId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="toLdp">
    <xs:sequence>
      <xs:element name="ldpTypeId" type="xs:long"/>
      <xs:element name="ldpTypeName" type="xs:string"/>
      <xs:element minOccurs="0" name="countAssignmentProcedures" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="diagnosis">
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код по МКБ-10</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование диагноза</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="jobInfo">
    <xs:sequence>
      <xs:element name="jobExecutionId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД_Исполнение должности</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="fio" type="xs:string">
        <xs:annotation>
          <xs:documentation>Фамилия Имя Отчество</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="snils" type="xs:string">
        <xs:annotation>
          <xs:documentation>СНИЛС</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="specialityId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД_Специальность</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="specialityName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование специальности</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="appointmentReception">
    <xs:sequence>
      <xs:element name="appointmentId" type="xs:long"/>
      <xs:element minOccurs="0" name="appointmentNumber" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="appointment">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="number" type="xs:string"/>
      <xs:element minOccurs="0" name="liveQueueTicketId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД талона в ЖО</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="liveQueueTicketNumber" type="xs:string">
        <xs:annotation>
          <xs:documentation>Номер талона в ЖО</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="lpuId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД ЛПУ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="typeLpu" type="xs:string"/>
      <xs:element name="nameLpu" type="xs:string"/>
      <xs:element name="lpuAddress" type="xs:string"/>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:element name="type" type="xs:string"/>
      <xs:element minOccurs="0" name="enableCancel" type="xs:boolean"/>
      <xs:element minOccurs="0" name="enableShift" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Разрешен ли перенос</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element name="complexResourceId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД КР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="roomId" type="xs:long"/>
      <xs:element minOccurs="0" name="roomNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="addressPointId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД Адресной точки кабинета</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="toDoctor" type="tns:toDoctor"/>
      <xs:element minOccurs="0" name="toLdp" type="tns:toLdp"/>
      <xs:element minOccurs="0" name="toBM" type="ns1:SamplingType"/>
      <xs:element name="statusId" type="xs:int"/>
      <xs:element minOccurs="0" name="cancelInfo" type="ns1:cancelInfo"/>
      <xs:element minOccurs="0" name="receptionFactId" type="xs:long"/>
      <xs:element minOccurs="0" name="referral" type="tns:referralDesc">
        <xs:annotation>
          <xs:documentation>Направление</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="eno" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelInfo">
    <xs:annotation>
      <xs:documentation>Информация об отмене записи</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="cancelReasonId" type="xs:long"/>
      <xs:element name="cancelReasonDesc" type="xs:string"/>
      <xs:element minOccurs="0" name="cancelTime" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="appointmentReceptionToDoctor">
    <xs:sequence>
      <xs:element minOccurs="0" name="doctorSpecialityCode" type="xs:string"/>
      <xs:element minOccurs="0" name="doctorSpeciality" type="xs:string"/>
      <xs:element minOccurs="0" name="doctorFio" type="xs:string"/>
      <xs:element minOccurs="0" name="viewReceptionCode" type="xs:string"/>
      <xs:element minOccurs="0" name="room" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="availableResource">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="lpuId" type="xs:long"/>
      <xs:element minOccurs="0" name="name" type="xs:string"/>
      <xs:element name="arType" type="xs:int"/>
      <xs:element minOccurs="0" name="specialityChangeAbility" type="xs:boolean"/>
      <xs:element minOccurs="0" name="arSpecialityId" type="xs:long"/>
      <xs:element minOccurs="0" name="arSpecialityName" type="xs:string"/>
      <xs:element minOccurs="0" name="mainDoctor" type="ns1:mainDoctor"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="receptionType" type="ns1:receptionType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ldpType" type="ns1:ldpTypeForAr"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="samplingType" type="ns1:SamplingType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="complexResource" type="ns1:complexResource"/>
      <xs:element default="false" name="district" type="xs:boolean"/>
      <xs:element default="false" name="replacement" type="xs:boolean"/>
      <xs:element minOccurs="0" name="nondistrict" type="xs:boolean"/>
      <xs:element default="false" name="availableByReferral" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DutyARScheduleInfo">
    <xs:sequence>
      <xs:element name="startTime" type="xs:time"/>
      <xs:element name="endTime" type="xs:time"/>
      <xs:element name="existedLiveQueueTickets" type="xs:int"/>
      <xs:element name="availableResource" type="tns:availableResource"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResultCreationAppointmentToDutyDoctor">
    <xs:sequence>
      <xs:element name="appointmentDesc" type="tns:appointmentDesc"/>
      <xs:element name="liveQueueTicketId" type="xs:long"/>
      <xs:element name="liveQueueTicketNumber" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointment">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element name="complexResourceId" type="xs:long"/>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:choice minOccurs="0">
        <xs:element name="referralId" type="xs:long"/>
        <xs:element name="receptionTypeId" type="xs:long"/>
      </xs:choice>
      <xs:element minOccurs="0" name="complaintId" type="xs:long"/>
      <xs:element minOccurs="0" name="inquiryPurposeId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element minOccurs="0" name="eno" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointmentResponse">
    <xs:sequence>
      <xs:element name="appointmentDesc" type="ns1:appointmentDesc"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAppointmentReceptionsByPatient">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element minOccurs="0" name="signActiveArchive" type="tns:signActiveArchiveType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAppointmentReceptionsByPatientResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="appointment" type="tns:appointment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAvailableResourceScheduleInfo">
    <xs:sequence>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element minOccurs="0" name="complexResourceId" type="xs:long"/>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element minOccurs="0" name="referralId" type="xs:long"/>
      <xs:element minOccurs="0" name="period" type="ns1:DatePeriod"/>
      <xs:element minOccurs="0" name="appointmentId" type="xs:long"/>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAvailableResourceScheduleInfoResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:availableResourceScheduleBySlots"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfo">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:choice>
        <xs:element name="appointmentId" type="xs:long"/>
        <xs:element name="referralId" type="xs:long"/>
        <xs:element name="specialityId" type="xs:long"/>
      </xs:choice>
      <xs:element minOccurs="0" name="includeArWithoutSlots" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>По умолчанию - true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="quotaTypes">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="quotaType" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfoResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="availableResource" type="tns:availableResource"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getReferralsInfo">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element default="false" minOccurs="0" name="returnCompleted" type="xs:boolean"/>
      <xs:element minOccurs="0" name="returnExtended" type="xs:boolean"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getReferralsInfoResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="referral" type="tns:referral"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSpecialitiesInfo">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSpecialitiesInfoResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="medicalSpeciality" type="tns:medicalSpeciality"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="shiftAppointment">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element minOccurs="0" name="complexResourceId" type="xs:long"/>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:choice minOccurs="0">
        <xs:element name="referralId" type="xs:long"/>
        <xs:element name="receptionTypeId" type="xs:long"/>
      </xs:choice>
      <xs:element name="appointmentId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="shiftAppointmentResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:appointmentDesc"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointment">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="appointmentId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDutyARScheduleByPatient">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element name="lpuId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDutyARScheduleByPatientResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:DutyARScheduleInfo"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointmentToDutyDoctorByPatient">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element name="lpuId" type="xs:long"/>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element name="complexResourceId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointmentToDutyDoctorByPatientResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:ResultCreationAppointmentToDutyDoctor"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentToDutyDoctorByPatient">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element name="appointmentId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentToDutyDoctorByPatientResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getHealthCareAvailabilityAttributes">
    <xs:sequence>
      <xs:element name="patientId" type="xs:long">
        <xs:annotation>
          <xs:documentation>Идентификатор пациента</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="referralId" type="xs:long"/>
        <xs:element name="specialityId" type="xs:long"/>
        <xs:element name="ldpId" type="xs:long"/>
        <xs:element name="samplingTypeId" type="xs:long"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getHealthCareAvailabilityAttributesResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="availabilityInfo" type="tns:availabilityInfo"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="availabilityInfo">
    <xs:sequence>
      <xs:element name="nearestAppointmentDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>Дата и время ближайшего свободного талона</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="availableResourceBasis" type="tns:availableResourceBasis">
        <xs:annotation>
          <xs:documentation>Группирующая сущность: основание для подбора ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="externalSystemId" type="xs:string">
        <xs:annotation>
          <xs:documentation>ИД внешней системы, через которую осуществлялся подбор ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="creationDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>Дата и время создания записи</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="ldpId" type="xs:long"/>
      <xs:element minOccurs="0" name="nearestMainDoctorDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>Дата и время ближайшего свободного талона основного врача</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="nearestReplacementDoctorDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>Дата и время ближайшего свободного талона замещающего врача</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentBySms">
    <xs:sequence>
      <xs:element name="patientPhoneNumber" type="xs:string"/>
      <xs:element name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentBySmsResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentByID">
    <xs:sequence>
      <xs:element name="appointmentId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentByIDResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAssignmentsInfo">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string">
        <xs:annotation>
          <xs:documentation>Номер полиса ОМС</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string">
        <xs:annotation>
          <xs:documentation>Серия полиса ОМС</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="birthDate" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата рождения пациента</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element default="false" minOccurs="0" name="returnExtended" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Вернуть расширенную версию направления</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="externalSystemId" type="xs:string">
        <xs:annotation>
          <xs:documentation>Обозначение внешней системы</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAssignmentsInfoResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="assignment" type="ns1:AssignmentGroup">
        <xs:annotation>
          <xs:documentation>Активные назначения пациента</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfoForLI">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="assignment" type="ns1:Assignment">
        <xs:annotation>
          <xs:documentation>Назначение</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="appointmentId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfoForLIResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="availableResource" type="tns:availableResource"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSpecialitiesInfoForGroup">
    <xs:sequence>
      <xs:element maxOccurs="10" minOccurs="2" name="patientGroupEntry" type="tns:patientGroupEntry"/>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSpecialitiesInfoForGroupResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="medicalSpeciality" type="tns:medicalSpeciality"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfoForGroup">
    <xs:sequence>
      <xs:element maxOccurs="10" minOccurs="2" name="patientGroupEntry">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="tns:patientGroupEntry">
              <xs:sequence>
                <xs:element minOccurs="0" name="appointmentId" type="xs:long"/>
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="specialityId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfoForGroupResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="availableResource" type="tns:availableResource"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAvailableResourceScheduleInfoForGroup">
    <xs:sequence>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element maxOccurs="10" minOccurs="2" name="patientGroupEntry">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="tns:patientGroupEntry">
              <xs:sequence>
                <xs:element minOccurs="0" name="appointmentId" type="xs:long"/>
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAvailableResourceScheduleInfoForGroupResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:availableResourceScheduleBySlots"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointmentForGroup">
    <xs:sequence>
      <xs:element maxOccurs="10" minOccurs="2" name="patientGroupEntry">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="tns:patientGroupEntry">
              <xs:sequence>
                <xs:element name="appTime" type="tns:TimeInterval"/>
                <xs:element name="complexResourceId" type="xs:long"/>
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element name="receptionTypeId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointmentForGroupResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="appointmentDesc" type="ns1:appointmentDesc"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="shiftAppointmentForGroup">
    <xs:sequence>
      <xs:element maxOccurs="10" minOccurs="2" name="patientGroupEntry">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="tns:patientGroupEntry">
              <xs:sequence>
                <xs:element name="appTime" type="tns:TimeInterval"/>
                <xs:element name="complexResourceId" type="xs:long"/>
                <xs:element name="appointmentId" type="xs:long"/>
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element name="receptionTypeId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="shiftAppointmentForGroupResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="appointmentDesc" type="tns:appointmentDesc"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getArchivedAppointments">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element minOccurs="0" name="period" type="ns1:DatePeriodOptional"/>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element minOccurs="0" name="pagingOptions" type="core:PagingOptions"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getArchivedAppointmentsResponse">
    <xs:sequence>
      <xs:element name="result" type="tns:AppointmentListPage"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AppointmentListPage">
    <xs:annotation>
      <xs:documentation>Страница Списка записей</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="appointment" type="tns:appointment">
            <xs:annotation>
              <xs:documentation>Сведения о Записи</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="appointmentCodeErrorFaultInfo">
    <xs:annotation>
      <xs:documentation>Error</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="messageText" type="xs:string"/>
      <xs:element minOccurs="0" name="userId" type="xs:string"/>
      <xs:element minOccurs="0" name="operation" type="xs:string"/>
      <xs:element minOccurs="0" name="resource" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="availableResourceScheduleBySlots">
    <xs:sequence>
      <xs:element name="availableResource" type="ns1:availableResource"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="scheduleOfDay" type="ns1:scheduleOfDay"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="appointmentLock">
    <xs:sequence>
      <xs:element name="appointmentId" type="xs:long"/>
      <xs:element minOccurs="0" name="arSpecialityId" type="xs:long"/>
      <xs:element minOccurs="0" name="arSamplingTypeId" type="xs:long"/>
      <xs:element minOccurs="0" name="lpuId" type="xs:long"/>
      <xs:element minOccurs="0" name="patient" type="tns:patientShort"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="scheduleBySlot">
    <xs:sequence>
      <xs:element name="complexResourceId" type="xs:long"/>
      <xs:element name="cabinetNumber" type="xs:string"/>
      <xs:element maxOccurs="unbounded" name="slot" type="ns1:slot"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="slot">
    <xs:sequence>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="mainDoctor">
    <xs:sequence>
      <xs:element minOccurs="0" name="specialityName" type="xs:string"/>
      <xs:element name="specialityId" type="xs:long"/>
      <xs:element name="firstName" type="xs:string"/>
      <xs:element name="lastName" type="xs:string"/>
      <xs:element minOccurs="0" name="secondName" type="xs:string"/>
      <xs:element name="mejiId" type="xs:long"/>
      <xs:element name="employeeId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Assignment">
    <xs:sequence>
      <xs:element name="moId" type="xs:long"/>
      <xs:element name="samplingTypeId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД профиля взятия БМ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="period" type="ns1:DatePeriod"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AssignmentGroup">
    <xs:sequence>
      <xs:element name="moId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД МО принимающее (головное ЛПУ куста)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="toBM" type="ns1:SamplingType">
        <xs:annotation>
          <xs:documentation>Профиль взятия БМ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="period" type="ns1:DatePeriod">
        <xs:annotation>
          <xs:documentation>Период действия назначения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="active" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак активности назначения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="appointmentAvailable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак возможности создать запись</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="appointmentOpenDate" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата открытия записи по направлению</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="appointmentId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД активной записи по данному назначению</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="unbounded" name="registryEntry" type="ns1:registryEntry">
        <xs:annotation>
          <xs:documentation>Реестровые записи</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:sequence>
      <xs:element name="dateFrom" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dateTo" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="registryEntry">
    <xs:sequence>
      <xs:element name="entryId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД реестровой записи</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="laboratoryId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД лабораторного исследования</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="laboratoryName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование ЛИ (краткое)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="biomaterialId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД биоматериала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="biomaterialName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование биоматериала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="hasMemo" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак наличия памятки</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="diagnosis" type="ns1:diagnosis">
        <xs:annotation>
          <xs:documentation>Информация о диагнозе</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="issuedDoctor" type="ns1:jobInfo">
        <xs:annotation>
          <xs:documentation>Информация о назначившем враче</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="receptionType">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="primary" type="xs:string"/>
      <xs:element minOccurs="0" name="home" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ldpTypeForAr">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="complexResource">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="room" type="ns1:room"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="room">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="number" type="xs:string"/>
      <xs:element minOccurs="0" name="lpuId" type="xs:long"/>
      <xs:element minOccurs="0" name="lpuShortName" type="xs:string"/>
      <xs:element minOccurs="0" name="addressPointId" type="xs:long"/>
      <xs:element minOccurs="0" name="defaultAddress" type="xs:string"/>
      <xs:element name="availabilityDate" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SamplingType">
    <xs:sequence>
      <xs:element name="id" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД профиля взятия БМ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>Название профиля</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="self" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак самовзятого БМ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="soapException">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="text" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="appointmentLock" type="tns:appointmentLock"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="patientGroupError" type="tns:patientShort"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="patientShort">
    <xs:sequence>
      <xs:element minOccurs="0" name="patientId" type="xs:long"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="patientGroupEntry">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TimeInterval">
    <xs:sequence>
      <xs:element name="start" type="xs:dateTime"/>
      <xs:element name="end" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriodOptional">
    <xs:annotation>
      <xs:documentation>Описывает календарный период</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="dateFrom" type="xs:date"/>
      <xs:element minOccurs="0" name="dateTo" type="xs:date"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELs3rrVnLFkjJMy5mDfngAN2826cviAmOKcwB0rpK0eO9luhxWIPHWt9l0e4P44rDtQmP</con:url><con:content>&lt;xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://api.service.soap.emias.lanit.ru/core/v5/" version="1.0" xmlns="http://api.service.soap.emias.lanit.ru/core/v5/" xmlns:xs="http://www.w3.org/2001/XMLSchema">&#13;
  &lt;xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsf0p1DdS1_UID8nCZurCtixl_TVFNCF.Zm2IERIorUG3w--"/>&#13;
&lt;/xs:schema></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsf0p1DdS1_UID8nCZurCtixl_TVFNCF.Zm2IERIorUG3w--</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.2" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsf0p1DdS0_CIS5sEoTzQ4Wty6YHlLYutqNN7wO_MFN0JMBt"/>
  <!--references-->
  <xs:element name="mail" type="Mail">
    <xs:annotation>
      <xs:documentation>Адрес электронной почты</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="compositionId" type="GUID">
    <xs:annotation>
      <xs:documentation>Идентификатор Композиции Think!EHR ЕМИАС.СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="simiDocumentId" type="GUID">
    <xs:annotation>
      <xs:documentation>Идентификатор Документа СИМИ ЕМИАС.СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--abstract types-->
  <xs:complexType abstract="true" name="Base">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания компонентов сущностей, владельцеми которых является текущий продукт ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор сущности/записи на уровне всего ЕМИАС</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания сущностей, владельцем которых является текущий продукт ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base">
        <xs:attribute name="archived" type="xs:boolean" use="required">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания компонентов сущностей, владельцами которых являются другие продукты ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания сущностей, владельцами которых являются другие продукты ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания типов, реализующих справочники ЕМИАС.НСИ.2</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование элемента справочника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiWithCodeBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания типов, реализующих справочники ЕМИАС.НСИ.2, в которых имеется бизнес-код</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Бизнес-код</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="SIMIDocumentBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания cведений о документе СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="simiDocumentId"/>
      <xs:element minOccurs="0" ref="compositionId"/>
    </xs:sequence>
  </xs:complexType>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="totalItemsCount" type="xs:long" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество элементов (на всех страницах)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки (используются в соответствии с переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--keys-->
  <xs:complexType name="EntityId">
    <xs:annotation>
      <xs:documentation>Идентфикатор сущности, непосредственно принадлежащей текущему продукту ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ForeignEntityId">
    <xs:annotation>
      <xs:documentation>Идентфикатор сущности ЕМИАС, внешней по отношнению к текущему продукту ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="NsiGlobalId">
    <xs:annotation>
      <xs:documentation>Глобальный идентфикатор ЕМИАС.НСИ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase"/>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsf0p1DdS0_CIS5sEoTzQ4Wty6YHlLYutqNN7wO_MFN0JMBt</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="Mail">
    <xs:annotation>
      <xs:documentation>Адрес электронной почты</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:maxLength value="320"/>
      <xs:pattern value=".+@.+\..+"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint></con:endpoints><con:operation id="17ec0183-fe1a-4500-993e-155f271ac3cc" isOneWay="false" action="urn://cancelAppointment" name="cancelAppointment" bindingOperationName="cancelAppointment" type="Request-Response" outputName="cancelAppointmentResponse" inputName="cancelAppointment" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="b2bc77cd-37da-4701-a177-3d7f889cc46c" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:cancelAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointment"/></con:call><con:call id="c7c89709-1f76-4678-be31-e0f631c108a6" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:cancelAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointment"/></con:call><con:call id="eb84edba-bbf1-4561-80ff-2c3a222e0ba5" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:cancelAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointment"/></con:call><con:call id="efea5ca7-f2ba-448d-9f37-407c54762060" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:cancelAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointment"/></con:call><con:call id="a5a4ee33-c13e-4d1b-83f7-bffb3428a868" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:cancelAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointment"/></con:call><con:call id="3836d285-8ce7-4074-8e8d-b5b5f648e511" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:cancelAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointment"/></con:call></con:operation><con:operation id="36e7963f-278b-48d5-a6d4-1904cde51d78" isOneWay="false" action="urn://cancelAppointmentByID" name="cancelAppointmentByID" bindingOperationName="cancelAppointmentByID" type="Request-Response" outputName="cancelAppointmentByIDResponse" inputName="cancelAppointmentByID" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="0162389f-1f25-4d18-9c76-07270e3b3d7d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentByID>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentByID>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentByID"/></con:call><con:call id="9200ec28-6e40-4ab6-8e46-60388228ca15" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentByID>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentByID>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentByID"/></con:call><con:call id="4400760f-d044-433e-a6b3-87bbd8b16020" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentByID>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentByID>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentByID"/></con:call><con:call id="8aa18354-c8e2-4cbf-8fac-70e2722168d0" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentByID>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentByID>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentByID"/></con:call><con:call id="6b668cc2-b43f-4cd8-b82c-92533d28fe80" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentByID>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentByID>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentByID"/></con:call><con:call id="30a6b730-df30-4acf-90a8-a481b6ae3f82" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentByID>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentByID>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentByID"/></con:call></con:operation><con:operation id="8ad9e969-5d51-4232-80e0-ae6a24045cb9" isOneWay="false" action="urn://cancelAppointmentBySms" name="cancelAppointmentBySms" bindingOperationName="cancelAppointmentBySms" type="Request-Response" outputName="cancelAppointmentBySmsResponse" inputName="cancelAppointmentBySms" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="7d14e08e-1f74-4c3f-bd0d-86bde378e0f9" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentBySms>\r
         <patientPhoneNumber>?</patientPhoneNumber>\r
         <message>?</message>\r
      </v5:cancelAppointmentBySms>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentBySms"/></con:call><con:call id="6b204e0b-ba38-47d4-855f-314730276893" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentBySms>\r
         <patientPhoneNumber>?</patientPhoneNumber>\r
         <message>?</message>\r
      </v5:cancelAppointmentBySms>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentBySms"/></con:call><con:call id="a0d865bd-8706-4980-9e94-e519f7acb732" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentBySms>\r
         <patientPhoneNumber>?</patientPhoneNumber>\r
         <message>?</message>\r
      </v5:cancelAppointmentBySms>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentBySms"/></con:call><con:call id="9cafadf9-7c2c-43d2-8c13-29df4ef859dc" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentBySms>\r
         <patientPhoneNumber>?</patientPhoneNumber>\r
         <message>?</message>\r
      </v5:cancelAppointmentBySms>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentBySms"/></con:call><con:call id="d48abe42-a4ce-47d2-a6f8-1c890688a163" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentBySms>\r
         <patientPhoneNumber>?</patientPhoneNumber>\r
         <message>?</message>\r
      </v5:cancelAppointmentBySms>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentBySms"/></con:call><con:call id="0a1e2591-0ead-4abd-b4ad-ba099f70365a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentBySms>\r
         <patientPhoneNumber>?</patientPhoneNumber>\r
         <message>?</message>\r
      </v5:cancelAppointmentBySms>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentBySms"/></con:call></con:operation><con:operation id="dc081348-ad35-4680-8b55-e7cf01afb494" isOneWay="false" action="urn://cancelAppointmentToDutyDoctorByPatient" name="cancelAppointmentToDutyDoctorByPatient" bindingOperationName="cancelAppointmentToDutyDoctorByPatient" type="Request-Response" outputName="cancelAppointmentToDutyDoctorByPatientResponse" inputName="cancelAppointmentToDutyDoctorByPatient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="b79d6eb1-9fb6-497e-948f-a0bdc124169e" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentToDutyDoctorByPatient"/></con:call><con:call id="d86476d3-0438-4f4f-a39f-4f7c630ff8fa" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentToDutyDoctorByPatient"/></con:call><con:call id="8790c8c3-80ed-4ab4-b404-0725f32cd432" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentToDutyDoctorByPatient"/></con:call><con:call id="bce6c3f6-a57a-4b09-80f5-415e2b5fc393" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentToDutyDoctorByPatient"/></con:call><con:call id="b1522da3-a237-433d-a51b-a8ccb1c9f256" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentToDutyDoctorByPatient"/></con:call><con:call id="a6f45703-2e56-44e1-91ad-301c961b6e7b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentToDutyDoctorByPatient"/></con:call></con:operation><con:operation id="93ecd90b-f65e-4bdb-99a8-944c82ed244b" isOneWay="false" action="urn://createAppointment" name="createAppointment" bindingOperationName="createAppointment" type="Request-Response" outputName="createAppointmentResponse" inputName="createAppointment" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="2eb2c8b3-053d-43c2-b5af-1a2c08acb388" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <eno>?</eno>\r
      </v5:createAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointment"/></con:call><con:call id="6f2780eb-fd2f-40e9-908b-d59ffa67735f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <eno>?</eno>\r
      </v5:createAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointment"/></con:call><con:call id="19370550-e6f2-4706-8b3e-26e4fe2aea4e" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <eno>?</eno>\r
      </v5:createAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointment"/></con:call><con:call id="a87d8a9b-b7ab-491d-a2e9-0e62aa070a4a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <eno>?</eno>\r
      </v5:createAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointment"/></con:call><con:call id="4bbafbe3-4fb6-4eb6-a2f9-9d3eae2426e6" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <eno>?</eno>\r
      </v5:createAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointment"/></con:call><con:call id="c6501c35-5651-460e-aa42-cc826702a8ef" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <eno>?</eno>\r
      </v5:createAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointment"/></con:call></con:operation><con:operation id="baf57df1-92bc-4a45-bfe2-b1e9e421a3db" isOneWay="false" action="urn://createAppointmentForGroup" name="createAppointmentForGroup" bindingOperationName="createAppointmentForGroup" type="Request-Response" outputName="createAppointmentForGroupResponse" inputName="createAppointmentForGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="9b52e52b-89aa-4464-b910-22af933d4d8c" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:createAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentForGroup"/></con:call><con:call id="91e09445-19c2-47f6-bbbe-6dd52f0df837" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:createAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentForGroup"/></con:call><con:call id="691cb40b-86cb-4b30-8641-a3d1417fd922" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:createAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentForGroup"/></con:call><con:call id="460fd5a5-23f0-4d96-9d83-bc4b99acecfc" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:createAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentForGroup"/></con:call><con:call id="910cc18d-3269-489a-aedc-d8a4cb522f41" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:createAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentForGroup"/></con:call><con:call id="42e66f4d-6d2e-4f0c-b5a5-4553a5e7bee3" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:createAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentForGroup"/></con:call></con:operation><con:operation id="44b21f80-7e03-4c3d-9a3b-c68c92bb4e69" isOneWay="false" action="urn://createAppointmentToDutyDoctorByPatient" name="createAppointmentToDutyDoctorByPatient" bindingOperationName="createAppointmentToDutyDoctorByPatient" type="Request-Response" outputName="createAppointmentToDutyDoctorByPatientResponse" inputName="createAppointmentToDutyDoctorByPatient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="ec13ab2a-5e13-44fe-a92e-adb8dc60eaa9" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
      </v5:createAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentToDutyDoctorByPatient"/></con:call><con:call id="3d8f9c34-b6d8-46e5-8893-bd73ad6fb5c8" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
      </v5:createAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentToDutyDoctorByPatient"/></con:call><con:call id="56f4f202-4625-4d32-87e6-1c81fe120c88" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
      </v5:createAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentToDutyDoctorByPatient"/></con:call><con:call id="b15c2741-6d26-4980-b284-5b4f47a082dd" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
      </v5:createAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentToDutyDoctorByPatient"/></con:call><con:call id="1e2250c6-91c8-4579-a421-dc5342b5edbc" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
      </v5:createAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentToDutyDoctorByPatient"/></con:call><con:call id="3b0180ea-10d8-4715-b37d-6c46959adcb7" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
      </v5:createAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentToDutyDoctorByPatient"/></con:call></con:operation><con:operation id="31fadc47-da34-462d-906b-a8e461837d4b" isOneWay="false" action="urn://getAppointmentReceptionsByPatient" name="getAppointmentReceptionsByPatient" bindingOperationName="getAppointmentReceptionsByPatient" type="Request-Response" outputName="getAppointmentReceptionsByPatientResponse" inputName="getAppointmentReceptionsByPatient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="439a8a23-863d-4561-93a6-949bdd206804" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAppointmentReceptionsByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <signActiveArchive>?</signActiveArchive>\r
      </v5:getAppointmentReceptionsByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAppointmentReceptionsByPatient"/><con:wsrmConfig version="1.2"/></con:call><con:call id="d8038912-3ba4-482b-aaba-110b7dbf3784" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAppointmentReceptionsByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <signActiveArchive>?</signActiveArchive>\r
      </v5:getAppointmentReceptionsByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAppointmentReceptionsByPatient"/></con:call><con:call id="830a7a80-bf2a-44b3-a6ef-954eeef5a7c1" name="Request 3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getAppointmentReceptionsByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <signActiveArchive>?</signActiveArchive>\r
      </v5:getAppointmentReceptionsByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAppointmentReceptionsByPatient"/><con:wsrmConfig version="1.2"/></con:call><con:call id="5edf58dc-e960-477d-94e9-2b6f18dbf702" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAppointmentReceptionsByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <signActiveArchive>?</signActiveArchive>\r
      </v5:getAppointmentReceptionsByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAppointmentReceptionsByPatient"/></con:call><con:call id="2ad2f31c-8546-47c2-bd1c-b79c88205df2" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAppointmentReceptionsByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <signActiveArchive>?</signActiveArchive>\r
      </v5:getAppointmentReceptionsByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAppointmentReceptionsByPatient"/></con:call><con:call id="4ca62d44-c73b-46b3-b214-11e205ef60c0" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAppointmentReceptionsByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <signActiveArchive>?</signActiveArchive>\r
      </v5:getAppointmentReceptionsByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAppointmentReceptionsByPatient"/></con:call><con:call id="36eaa21d-0eaf-4935-b7b2-0177c5a5496d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAppointmentReceptionsByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <signActiveArchive>?</signActiveArchive>\r
      </v5:getAppointmentReceptionsByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAppointmentReceptionsByPatient"/></con:call></con:operation><con:operation id="0db8db6d-de5f-472b-ad06-e7ce1dd7cd69" isOneWay="false" action="urn://getAssignmentsInfo" name="getAssignmentsInfo" bindingOperationName="getAssignmentsInfo" type="Request-Response" outputName="getAssignmentsInfoResponse" inputName="getAssignmentsInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="f586dbca-671f-42c4-acb5-e4ebc2a55b6f" name="getAssignmentsInfo"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>EIM</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <v5:getAssignmentsInfo>\r
         <omsNumber>7758720847000454</omsNumber>\r
         <birthDate>1972-01-02</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
      </v5:getAssignmentsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAssignmentsInfo"/><con:wsrmConfig version="1.2"/></con:call><con:call id="e94bfa63-fb24-4596-a351-318ba3ee0c68" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAssignmentsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAssignmentsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAssignmentsInfo"/></con:call><con:call id="8270b67c-8a02-479f-9fb4-04cc7062f255" name="getAssignmentsInfo"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAssignmentsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAssignmentsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAssignmentsInfo"/><con:wsrmConfig version="1.2"/></con:call><con:call id="32f3096c-6fc6-4edf-8d2d-a9ade562291a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAssignmentsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAssignmentsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAssignmentsInfo"/></con:call><con:call id="90b0a0fb-bb42-47aa-8007-336609459cfe" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAssignmentsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <returnExtended>false</returnExtended>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAssignmentsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAssignmentsInfo"/></con:call><con:call id="0adcdbb1-13d5-4d3a-b908-5ad82f1ea90f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAssignmentsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <returnExtended>false</returnExtended>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAssignmentsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAssignmentsInfo"/></con:call><con:call id="2365bf72-2602-4b52-b40b-28531cdfaa61" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAssignmentsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <returnExtended>false</returnExtended>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAssignmentsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAssignmentsInfo"/></con:call></con:operation><con:operation id="cd47076d-a6be-43c1-bbc1-19b72e766f16" isOneWay="false" action="urn://getAvailableResourceScheduleInfo" name="getAvailableResourceScheduleInfo" bindingOperationName="getAvailableResourceScheduleInfo" type="Request-Response" outputName="getAvailableResourceScheduleInfoResponse" inputName="getAvailableResourceScheduleInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="1f202616-0a51-405e-be72-e27b20d22d21" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfo>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <referralId>?</referralId>\r
         <!--Optional:-->\r
         <period>\r
            <dateFrom>?</dateFrom>\r
            <dateTo>?</dateTo>\r
         </period>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfo"/></con:call><con:call id="03049698-0900-4e13-9688-5f2067bc2122" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfo>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <referralId>?</referralId>\r
         <!--Optional:-->\r
         <period>\r
            <dateFrom>?</dateFrom>\r
            <dateTo>?</dateTo>\r
         </period>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfo"/></con:call><con:call id="2de33c6a-681a-4cd1-8d83-3ee81523ed89" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfo>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <referralId>?</referralId>\r
         <!--Optional:-->\r
         <period>\r
            <dateFrom>?</dateFrom>\r
            <dateTo>?</dateTo>\r
         </period>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfo"/></con:call><con:call id="54d8f657-57ae-42f1-a381-97f857486528" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfo>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <referralId>?</referralId>\r
         <!--Optional:-->\r
         <period>\r
            <dateFrom>?</dateFrom>\r
            <dateTo>?</dateTo>\r
         </period>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfo"/></con:call><con:call id="5a29acea-5280-4888-91e4-69dd2ac02bf0" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfo>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <referralId>?</referralId>\r
         <!--Optional:-->\r
         <period>\r
            <dateFrom>?</dateFrom>\r
            <dateTo>?</dateTo>\r
         </period>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfo"/></con:call><con:call id="e617c13e-56db-438e-b0df-b4c52edc94dd" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfo>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <referralId>?</referralId>\r
         <!--Optional:-->\r
         <period>\r
            <dateFrom>?</dateFrom>\r
            <dateTo>?</dateTo>\r
         </period>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfo"/></con:call></con:operation><con:operation id="438ef92c-a03c-4002-9fd6-0e865d344a9c" isOneWay="false" action="urn://getAvailableResourceScheduleInfoForGroup" name="getAvailableResourceScheduleInfoForGroup" bindingOperationName="getAvailableResourceScheduleInfoForGroup" type="Request-Response" outputName="getAvailableResourceScheduleInfoForGroupResponse" inputName="getAvailableResourceScheduleInfoForGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="1483fc6e-fb0d-49cf-bb98-9fb1b3a1dbe2" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfoForGroup>\r
         <availableResourceId>?</availableResourceId>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfoForGroup"/></con:call><con:call id="759e3f53-eda8-4240-8b07-67d208d7a6c6" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfoForGroup>\r
         <availableResourceId>?</availableResourceId>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfoForGroup"/></con:call><con:call id="e6e23223-f8c6-4e3d-987e-ce5409013da1" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfoForGroup>\r
         <availableResourceId>?</availableResourceId>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfoForGroup"/></con:call><con:call id="f2b1487b-3a5c-4c2b-8ffb-80cc962e4180" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfoForGroup>\r
         <availableResourceId>?</availableResourceId>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfoForGroup"/></con:call><con:call id="bfb6a938-6ada-45c5-b39d-3a3d23f308e6" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfoForGroup>\r
         <availableResourceId>?</availableResourceId>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfoForGroup"/></con:call><con:call id="f7697a56-a99d-40fb-98f4-09c121669f8f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfoForGroup>\r
         <availableResourceId>?</availableResourceId>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfoForGroup"/></con:call></con:operation><con:operation id="384fde5b-144c-4b03-a192-60ba0870656d" isOneWay="false" action="urn://getDoctorsInfo" name="getDoctorsInfo" bindingOperationName="getDoctorsInfo" type="Request-Response" outputName="getDoctorsInfoResponse" inputName="getDoctorsInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="5c344c5e-591e-469f-9159-a5f1e75653b6" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--You have a CHOICE of the next 3 items at this level-->\r
         <appointmentId>?</appointmentId>\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <!--Optional:-->\r
         <includeArWithoutSlots>?</includeArWithoutSlots>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfo"/><con:wsrmConfig version="1.2"/></con:call><con:call id="590ed1c6-b641-444a-93a0-9d23708fb461" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--You have a CHOICE of the next 3 items at this level-->\r
         <appointmentId>?</appointmentId>\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <!--Optional:-->\r
         <includeArWithoutSlots>?</includeArWithoutSlots>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfo"/><con:wsrmConfig version="1.2"/></con:call><con:call id="ee81ac8a-3ef4-4de8-871d-3fe571d902d0" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--You have a CHOICE of the next 3 items at this level-->\r
         <appointmentId>?</appointmentId>\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <!--Optional:-->\r
         <includeArWithoutSlots>?</includeArWithoutSlots>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfo"/></con:call><con:call id="7cb0620b-ade1-47b7-9687-4a62fd6124bb" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--You have a CHOICE of the next 3 items at this level-->\r
         <appointmentId>?</appointmentId>\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <!--Optional:-->\r
         <includeArWithoutSlots>?</includeArWithoutSlots>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfo"/></con:call><con:call id="573c1403-d7a4-457b-9589-4d79a558adb7" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--You have a CHOICE of the next 3 items at this level-->\r
         <appointmentId>?</appointmentId>\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <!--Optional:-->\r
         <includeArWithoutSlots>?</includeArWithoutSlots>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfo"/></con:call><con:call id="d1bf3cd9-d11c-4cd4-9b28-6b54bb6acc44" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--You have a CHOICE of the next 3 items at this level-->\r
         <appointmentId>?</appointmentId>\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <!--Optional:-->\r
         <includeArWithoutSlots>?</includeArWithoutSlots>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfo"/></con:call></con:operation><con:operation id="569eb167-516a-4dc2-b942-cdb30a3c2da1" isOneWay="false" action="urn://getDoctorsInfoForGroup" name="getDoctorsInfoForGroup" bindingOperationName="getDoctorsInfoForGroup" type="Request-Response" outputName="getDoctorsInfoForGroupResponse" inputName="getDoctorsInfoForGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="a6215fba-e3ad-4160-ac86-c200b5aab9e6" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <specialityId>?</specialityId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForGroup"/></con:call><con:call id="cba97cd4-e4ef-4844-a611-c600ec50be86" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <specialityId>?</specialityId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForGroup"/></con:call><con:call id="7865693a-111a-4be0-998d-996a448aee47" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <specialityId>?</specialityId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForGroup"/></con:call><con:call id="2042eb8a-8817-4b4c-89e8-6aabc060a3bb" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <specialityId>?</specialityId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForGroup"/></con:call><con:call id="4e3b4d35-052d-44b4-92aa-872411d258a1" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <specialityId>?</specialityId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForGroup"/></con:call><con:call id="881f0ddb-9f3d-4aef-b1b5-6b538f903b63" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <specialityId>?</specialityId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForGroup"/></con:call></con:operation><con:operation id="1805d766-8b80-4cdb-a4cf-4a104910ac98" isOneWay="false" action="urn://getDoctorsInfoForLI" name="getDoctorsInfoForLI" bindingOperationName="getDoctorsInfoForLI" type="Request-Response" outputName="getDoctorsInfoForLIResponse" inputName="getDoctorsInfoForLI" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="613da22b-6c52-4c98-9b6b-108dcdbb013b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForLI>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <assignment>\r
            <moId>?</moId>\r
            <samplingTypeId>?</samplingTypeId>\r
            <period>\r
               <dateFrom>?</dateFrom>\r
               <dateTo>?</dateTo>\r
            </period>\r
         </assignment>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForLI>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForLI"/><con:wsrmConfig version="1.2"/></con:call><con:call id="3fb8ddd1-cea8-426d-b73b-b05a6c8823ae" name="getDoctorsInfoForLI"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>

   <soap:Body>\r
      <v5:getDoctorsInfoForLI>\r
         <omsNumber>?</omsNumber>\r
         <birthDate>?</birthDate>\r
         <assignment>\r
            <moId>?</moId>\r
            <samplingTypeId>?</samplingTypeId>\r
            <period>\r
               <dateFrom>?</dateFrom>\r
               <dateTo>?</dateTo>\r
            </period>\r
         </assignment>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForLI>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForLI"/><con:wsrmConfig version="1.2"/></con:call><con:call id="b69809b3-b8f5-42d2-9bac-8858bdbc03ac" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForLI>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <assignment>\r
            <moId>?</moId>\r
            <samplingTypeId>?</samplingTypeId>\r
            <period>\r
               <dateFrom>?</dateFrom>\r
               <dateTo>?</dateTo>\r
            </period>\r
         </assignment>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForLI>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForLI"/></con:call><con:call id="506e2495-2882-44b6-b4eb-ac17a2a51b07" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForLI>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <assignment>\r
            <moId>?</moId>\r
            <samplingTypeId>?</samplingTypeId>\r
            <period>\r
               <dateFrom>?</dateFrom>\r
               <dateTo>?</dateTo>\r
            </period>\r
         </assignment>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForLI>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForLI"/></con:call><con:call id="ee539ec5-eca3-4a6c-aaac-725e366db2f5" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForLI>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <assignment>\r
            <moId>?</moId>\r
            <samplingTypeId>?</samplingTypeId>\r
            <period>\r
               <dateFrom>?</dateFrom>\r
               <dateTo>?</dateTo>\r
            </period>\r
         </assignment>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForLI>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForLI"/></con:call><con:call id="80865a56-0ab7-4734-8e0f-05c2351717ab" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForLI>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <assignment>\r
            <moId>?</moId>\r
            <samplingTypeId>?</samplingTypeId>\r
            <period>\r
               <dateFrom>?</dateFrom>\r
               <dateTo>?</dateTo>\r
            </period>\r
         </assignment>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForLI>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForLI"/></con:call></con:operation><con:operation id="12d55011-aaa2-457f-a348-32ee93c9638e" isOneWay="false" action="urn://getDutyARScheduleByPatient" name="getDutyARScheduleByPatient" bindingOperationName="getDutyARScheduleByPatient" type="Request-Response" outputName="getDutyARScheduleByPatientResponse" inputName="getDutyARScheduleByPatient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="52e885cc-13dc-4439-bc1a-badd089de95d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDutyARScheduleByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
      </v5:getDutyARScheduleByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDutyARScheduleByPatient"/></con:call><con:call id="940754d2-362c-4d94-8aa3-a1776ceac735" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDutyARScheduleByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
      </v5:getDutyARScheduleByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDutyARScheduleByPatient"/></con:call><con:call id="7065ebdb-6e3f-4729-8c7b-892fcf181c76" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDutyARScheduleByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
      </v5:getDutyARScheduleByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDutyARScheduleByPatient"/></con:call><con:call id="c2eeaf0a-89bc-49f7-8b10-e09212d24db0" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDutyARScheduleByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
      </v5:getDutyARScheduleByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDutyARScheduleByPatient"/></con:call><con:call id="e389c888-874b-47d2-baf2-f20cb05ee719" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDutyARScheduleByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
      </v5:getDutyARScheduleByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDutyARScheduleByPatient"/></con:call><con:call id="b1aebcfe-1eb1-4ea7-a21a-ddb6187dea3a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDutyARScheduleByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
      </v5:getDutyARScheduleByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDutyARScheduleByPatient"/></con:call></con:operation><con:operation id="1c3b7f13-ddc9-433d-ab70-bf5b6f4a2dc4" isOneWay="false" action="urn://getHealthCareAvailabilityAttributes" name="getHealthCareAvailabilityAttributes" bindingOperationName="getHealthCareAvailabilityAttributes" type="Request-Response" outputName="getHealthCareAvailabilityAttributesResponse" inputName="getHealthCareAvailabilityAttributes" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="7282f000-cc43-43a7-95bd-516cfd204d5c" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getHealthCareAvailabilityAttributes>\r
         <patientId>?</patientId>\r
         <!--You have a CHOICE of the next 4 items at this level-->\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <ldpId>?</ldpId>\r
         <samplingTypeId>?</samplingTypeId>\r
      </v5:getHealthCareAvailabilityAttributes>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getHealthCareAvailabilityAttributes"/></con:call><con:call id="508c8ad9-59c6-4792-bb55-06018da0130e" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getHealthCareAvailabilityAttributes>\r
         <patientId>?</patientId>\r
         <!--You have a CHOICE of the next 4 items at this level-->\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <ldpId>?</ldpId>\r
         <samplingTypeId>?</samplingTypeId>\r
      </v5:getHealthCareAvailabilityAttributes>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getHealthCareAvailabilityAttributes"/></con:call><con:call id="12c2c8a1-7953-4cca-8a48-d1ce67bfefef" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getHealthCareAvailabilityAttributes>\r
         <patientId>?</patientId>\r
         <!--You have a CHOICE of the next 4 items at this level-->\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <ldpId>?</ldpId>\r
         <samplingTypeId>?</samplingTypeId>\r
      </v5:getHealthCareAvailabilityAttributes>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getHealthCareAvailabilityAttributes"/></con:call><con:call id="8579eb9c-1f4d-4b06-9f1d-1528426316f2" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getHealthCareAvailabilityAttributes>\r
         <patientId>?</patientId>\r
         <!--You have a CHOICE of the next 4 items at this level-->\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <ldpId>?</ldpId>\r
         <samplingTypeId>?</samplingTypeId>\r
      </v5:getHealthCareAvailabilityAttributes>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getHealthCareAvailabilityAttributes"/></con:call><con:call id="bed8ef89-34b3-4654-b82a-a417285af4b8" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getHealthCareAvailabilityAttributes>\r
         <patientId>?</patientId>\r
         <!--You have a CHOICE of the next 4 items at this level-->\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <ldpId>?</ldpId>\r
         <samplingTypeId>?</samplingTypeId>\r
      </v5:getHealthCareAvailabilityAttributes>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getHealthCareAvailabilityAttributes"/></con:call><con:call id="ccaa4849-836a-4075-b32e-9c40be318a03" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getHealthCareAvailabilityAttributes>\r
         <patientId>?</patientId>\r
         <!--You have a CHOICE of the next 4 items at this level-->\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <ldpId>?</ldpId>\r
         <samplingTypeId>?</samplingTypeId>\r
      </v5:getHealthCareAvailabilityAttributes>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getHealthCareAvailabilityAttributes"/></con:call></con:operation><con:operation id="b2409d09-2c9f-4019-b2ff-0ab37f9ea4ca" isOneWay="false" action="urn://getReferralsInfo" name="getReferralsInfo" bindingOperationName="getReferralsInfo" type="Request-Response" outputName="getReferralsInfoResponse" inputName="getReferralsInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="50138d2a-6874-41a6-bded-26f14b1a4600" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getReferralsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getReferralsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getReferralsInfo"/><con:wsrmConfig version="1.2"/></con:call><con:call id="eb9e56dd-912d-413d-825f-fc86e6f3dfd7" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getReferralsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getReferralsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getReferralsInfo"/></con:call><con:call id="03229582-e00c-4795-9608-96384488d3d1" name="getReferralsInfo"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getReferralsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getReferralsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getReferralsInfo"/><con:wsrmConfig version="1.2"/></con:call><con:call id="a4d0d225-9136-4c7a-96e7-8e6a4ff8f699" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getReferralsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <returnExtended>?</returnExtended>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getReferralsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getReferralsInfo"/></con:call><con:call id="7386a0b4-f4e3-4efe-ad38-bf0f391eca7c" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getReferralsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <returnExtended>?</returnExtended>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getReferralsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getReferralsInfo"/></con:call><con:call id="2dd23ab4-c34e-4dcd-bce9-3ce6190ea355" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getReferralsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <returnExtended>?</returnExtended>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getReferralsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getReferralsInfo"/></con:call><con:call id="e5ae08b1-c922-457b-9d80-72e1394d772e" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getReferralsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <returnExtended>?</returnExtended>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getReferralsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getReferralsInfo"/></con:call></con:operation><con:operation id="cb612ca5-a672-4eb0-9131-52e7584d3eaf" isOneWay="false" action="urn://getSpecialitiesInfo" name="getSpecialitiesInfo" bindingOperationName="getSpecialitiesInfo" type="Request-Response" outputName="getSpecialitiesInfoResponse" inputName="getSpecialitiesInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="abafa60a-64a3-499b-9e92-8fbc4bbfffc4" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfo"/><con:wsrmConfig version="1.2"/></con:call><con:call id="d4a9476f-d7aa-4829-9f7f-4cdeb5f57474" name="Request 2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">
    <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-1a9756fc-3127-4896-8ed4-e247c28d1700">
            <wsse:Username>MPGU</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">CLS</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <v5:getSpecialitiesInfo>
        <omsNumber>2152500871000015</omsNumber>
         <birthDate>1994-07-28</birthDate>
         <externalSystemId>EIM</externalSystemId>
      </v5:getSpecialitiesInfo>
   </soap:Body>
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfo"/><con:wsrmConfig version="1.2"/></con:call><con:call id="d8909014-1f62-4e35-ac35-8970fcfdd1d9" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>\r
      <v5:getSpecialitiesInfo>\r
         <omsNumber>7795499797000724</omsNumber>\r
         <birthDate>2005-04-02</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
      </v5:getSpecialitiesInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfo"/><con:wsrmConfig version="1.2"/></con:call><con:call id="d114d02c-b3ca-43fe-871e-b37c90446b50" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfo"/><con:wsrmConfig version="1.2"/></con:call><con:call id="2f4f91b5-ea6f-4b3f-9def-35b890c7efc7" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfo"/></con:call><con:call id="32193d52-c438-486d-aa71-409941a0ac8b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfo"/></con:call><con:call id="152d4e4e-f51e-4bde-a237-665a8143732b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfo"/></con:call></con:operation><con:operation id="e1b6acaf-085b-454e-a429-e3450bd04731" isOneWay="false" action="urn://getSpecialitiesInfoForGroup" name="getSpecialitiesInfoForGroup" bindingOperationName="getSpecialitiesInfoForGroup" type="Request-Response" outputName="getSpecialitiesInfoForGroupResponse" inputName="getSpecialitiesInfoForGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="0ad7e781-84f4-47c5-bbbf-b12f56610b3c" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfoForGroup"/></con:call><con:call id="50db2971-a56c-432b-ab34-ec83a32c8c8b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfoForGroup"/></con:call><con:call id="ca027d7b-3b92-4068-8bed-2f251234cc5b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfoForGroup"/></con:call><con:call id="6804caf2-eb4c-4292-b23b-0f35f28be00f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfoForGroup"/></con:call><con:call id="0d1bb396-cc0d-403c-95af-71dac147a944" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfoForGroup"/></con:call><con:call id="ecc278a8-9e44-4d0d-9bf9-1e4a6791f927" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfoForGroup"/></con:call></con:operation><con:operation id="a104be0e-4f79-41e8-a261-cecae1a3cb36" isOneWay="false" action="urn://shiftAppointment" name="shiftAppointment" bindingOperationName="shiftAppointment" type="Request-Response" outputName="shiftAppointmentResponse" inputName="shiftAppointment" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="bb2086db-2517-4677-a67f-836a6b4af6ab" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointment"/></con:call><con:call id="3624f043-36d7-4774-9b20-3b57c9646599" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointment"/></con:call><con:call id="86938723-909a-4c54-8ced-18415715577f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointment"/></con:call><con:call id="91fcf131-c638-412c-bb54-9a30adb8f0f8" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointment"/></con:call><con:call id="299aabc4-53fc-432f-bc90-82f9f21ee4a3" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointment"/></con:call><con:call id="2c92f38e-9785-43e4-a5fa-5c651016a2dc" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointment"/></con:call></con:operation><con:operation id="ab98984a-08cd-4a35-9146-f87f21b03bc1" isOneWay="false" action="urn://shiftAppointmentForGroup" name="shiftAppointmentForGroup" bindingOperationName="shiftAppointmentForGroup" type="Request-Response" outputName="shiftAppointmentForGroupResponse" inputName="shiftAppointmentForGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e3231bf0-e4d6-497a-837d-8565d22f4448" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointmentForGroup"/></con:call><con:call id="c9d88220-831a-4944-b0ab-de106e842c70" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointmentForGroup"/></con:call><con:call id="8916e6bd-71ce-4b0f-b199-4d94a8b55993" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointmentForGroup"/></con:call><con:call id="1bcbfdd0-1242-486a-9d53-8a17d69c0d5f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointmentForGroup"/></con:call><con:call id="412342f6-1a07-4bf7-adcf-4e1704861d4b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointmentForGroup"/></con:call><con:call id="66143114-2b4c-4179-9d7b-9ae6b46e4179" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointmentForGroup"/></con:call></con:operation><con:operation id="c2f82be3-f793-4d9c-9beb-94f073a63967" isOneWay="false" action="urn://getArchivedAppointments" name="getArchivedAppointments" bindingOperationName="getArchivedAppointments" type="Request-Response" outputName="getArchivedAppointmentsResponse" inputName="getArchivedAppointments" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d2e7388e-77e3-4b7e-8952-04b24abe5a12" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/" xmlns:v51="http://api.service.soap.emias.lanit.ru/core/v5/">\r
   <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>\r
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>7749440883000274</omsNumber>\r
         <birthDate>1955-10-16</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="50">\r
         </pagingOptions>\r
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getArchivedAppointments"/><con:wsrmConfig version="1.2"/></con:call><con:call id="d8bc1dfb-2956-48b6-bd7f-bc085164227f" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/" xmlns:v51="http://api.service.soap.emias.lanit.ru/core/v5/">\r
   <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>7749440883000274</omsNumber>\r
         <birthDate>1955-10-16</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="50">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getArchivedAppointments"/><con:wsrmConfig version="1.2"/></con:call><con:call id="ddee8a7f-4f7f-482e-b1b4-8f7aab13bc93" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
<soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>
      <v5:getArchivedAppointments>
         <omsNumber>0556130838000530</omsNumber>
         <birthDate>1968-03-11</birthDate>
          <externalSystemId>EIM</externalSystemId>
      </v5:getArchivedAppointments>
   </soap:Body>
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getArchivedAppointments"/><con:wsrmConfig version="1.2"/></con:call><con:call id="5b71c419-d8ce-498c-8a36-4844e7570fab" name="getArchivedAppointments"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/" xmlns:v51="http://api.service.soap.emias.lanit.ru/core/v5/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>EIM</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>7791889720000557</omsNumber>\r
         <birthDate>2011-08-29</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="3" pageSize="25"/>\r
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getArchivedAppointments"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite id="79c7f906-85b4-4bae-bccd-c6101ca11647" name="putArchivedAppointment"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="68c9e38b-78be-4a18-9b04-02475fe69709" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка работы метода" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Create startTime and endTime params" id="b04b5a3b-d7db-46f1-aef5-88140d84eae4"><con:settings/><con:config><script>import java.text.SimpleDateFormat

def now = new Date()

now.setHours(now.getHours()+1)
now.setMinutes(0)
def startTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(now)
testRunner.testCase.setPropertyValue("startTime", startTime)

now.setMinutes(now.getMinutes()+1)
def endTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(now)
testRunner.testCase.setPropertyValue("endTime", endTime)</script></con:config></con:testStep><con:testStep type="restrequest" name="createAppointment" id="667c0748-bc3e-4ee3-8ba3-c9dde1cd1fe0"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/saOrchestrator/createAppointment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAppointment" id="773f2ce4-caea-45d7-9397-d26917da8607" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#omsNumber}",
  "birthDate": "${#TestCase#birthDate}",
  "availableResourceId": 20281837389,
  "complexResourceId": 239765413,
  "startTime": "${#TestCase#startTime}",
  "endTime": "${#TestCase#endTime}",
  "receptionTypeId": 1861
}</con:request><con:originalUri>http://176.214.77.53/api/v2/saOrchestrator/createAppointment</con:originalUri><con:assertion type="Simple Contains" id="e4ea16cf-ba33-4028-a55e-dfb93e066c03" name="В ответе есть appointmentId"><con:configuration><token>appointmentId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получить appointmentId" id="7a5817a3-5c84-40a1-8fc3-c714e36b5608"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${createAppointment#Response}')
appointment = new JsonSlurper().parseText(ResponseJson)

def appointmentId = appointment.payload.appointmentId.toString()
testRunner.testCase.setPropertyValue("appointmentId", appointmentId)
</script></con:config></con:testStep><con:testStep type="restrequest" name="cancelAppointment" id="e9ad82e6-3e2a-4990-8ab1-19d2892bf3b4"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/saOrchestrator/cancelAppointment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="cancelAppointment" id="be880529-cf7a-43c5-9f68-28da8e22a464" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "appointmentId": ${#TestCase#appointmentId}
}</con:request><con:originalUri>http://176.214.77.53/api/v2/saOrchestrator/cancelAppointment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7065815f-dfc5-4098-b823-ca14bb4fbc0f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Проверить отсутствие записи в БД" id="af682039-6e01-4ee6-80ff-1c2c9efb3203"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>SELECT *
FROM public.f_deleted_archive_appointment
WHERE
appointment_id = '${#TestCase#appointmentId}' AND
oms_number = '${#TestCase#omsNumber}' AND
birth_date = CAST('${#TestCase#birthDate}' As date)</con:query><con:assertion type="XQuery Match" id="b26439d0-576c-4ca5-a61c-129de0be37d4" name="XQuery Match"><con:configuration><path>Results</path><content>&lt;Results>&#13;
  &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="putArchiveAppointment" id="31967095-b23d-428e-9b62-faee7fca484b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/delete" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="putArchiveAppointment" id="43504869-a384-46c9-af5e-941caed8181f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v3/archiveAppointment/delete</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="466a30c1-e928-4c2e-a1a2-909ee763d349" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}"/>
  <con:entry key="appointmentId" value="${#TestCase#appointmentId}"/>
  <con:entry key="omsNumber" value="${#TestCase#omsNumber}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>appointmentId</con:entry><con:entry>omsNumber</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Проверить наличие записи в БД" id="8887c7e8-5d80-48d0-9dbb-9760e64658dd"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>SELECT appointment_id
FROM public.f_deleted_archive_appointment
WHERE
appointment_id = '${#TestCase#appointmentId}' AND
oms_number = '${#TestCase#omsNumber}' AND
birth_date = CAST('${#TestCase#birthDate}' As date)</con:query><con:assertion type="XPath Match" id="46527fec-9c4d-4d0a-8206-3bf971a4793f" name="XPath Match"><con:configuration><path>/Results/ResultSet/Row/F_DELETED_ARCHIVE_APPOINTMENT.APPOINTMENT_ID</path><content>${#TestCase#appointmentId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7749520870003181</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1974-10-29</con:value></con:property><con:property><con:name>startTime</con:name><con:value>2023-04-07T11:00:15</con:value></con:property><con:property><con:name>endTime</con:name><con:value>2023-04-07T11:01:15</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391880439548</con:value></con:property><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property></con:properties></con:testCase><con:testCase id="44ac2b82-a772-4233-83d3-e26d9e833f96" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получние ошибки APPOINTMENT_ALREADY_DELETED" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Create startTime and endTime params" id="d6d89e19-0a75-4eef-a1ba-63fd56972845"><con:settings/><con:config><script>import java.text.SimpleDateFormat

def now = new Date()

now.setHours(now.getHours()+1)
now.setMinutes(0)
def startTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(now)
testRunner.testCase.setPropertyValue("startTime", startTime)

now.setMinutes(now.getMinutes()+1)
def endTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(now)
testRunner.testCase.setPropertyValue("endTime", endTime)</script></con:config></con:testStep><con:testStep type="restrequest" name="createAppointment" id="48e9ad20-7965-4e65-aea1-60fde3592e6b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/saOrchestrator/createAppointment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAppointment" id="773f2ce4-caea-45d7-9397-d26917da8607" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#omsNumber}",
  "birthDate": "${#TestCase#birthDate}",
  "availableResourceId": 20281837389,
  "complexResourceId": 239765413,
  "startTime": "${#TestCase#startTime}",
  "endTime": "${#TestCase#endTime}",
  "receptionTypeId": 1861
}</con:request><con:originalUri>http://176.214.77.53/api/v2/saOrchestrator/createAppointment</con:originalUri><con:assertion type="Simple Contains" id="79d29db5-647d-48d9-bdcb-1ac0baf3ac39" name="В ответе есть appointmentId"><con:configuration><token>appointmentId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение appointmentId" id="92de9638-1b9d-46cb-a31f-483220b6127e"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${createAppointment#Response}')
appointment = new JsonSlurper().parseText(ResponseJson)

def appointmentId = appointment.payload.appointmentId.toString()
testRunner.testCase.setPropertyValue("appointmentId", appointmentId)
</script></con:config></con:testStep><con:testStep type="restrequest" name="cancelAppointment" id="ee902b2b-253c-41a4-8f10-ab924c52cb5c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/saOrchestrator/cancelAppointment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="cancelAppointment" id="be880529-cf7a-43c5-9f68-28da8e22a464" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "appointmentId": ${#TestCase#appointmentId}
}</con:request><con:originalUri>http://176.214.77.53/api/v2/saOrchestrator/cancelAppointment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7065815f-dfc5-4098-b823-ca14bb4fbc0f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Проверить отсутствие записи в БД" id="c0a32fd4-4cd6-4ba2-8dac-7e4568d5a8c8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>SELECT *
FROM public.f_deleted_archive_appointment
WHERE
appointment_id = '${#TestCase#appointmentId}' AND
oms_number = '${#TestCase#omsNumber}' AND
birth_date = CAST('${#TestCase#birthDate}' As date)</con:query><con:assertion type="XQuery Match" id="b26439d0-576c-4ca5-a61c-129de0be37d4" name="XQuery Match"><con:configuration><path>Results</path><content>&lt;Results>&#13;
  &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="putArchiveAppointment" id="3898956c-b252-4f51-9e44-d6584f90c96b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/delete" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="putArchiveAppointment" id="43504869-a384-46c9-af5e-941caed8181f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v3/archiveAppointment/delete</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="466a30c1-e928-4c2e-a1a2-909ee763d349" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}"/>
  <con:entry key="appointmentId" value="${#TestCase#appointmentId}"/>
  <con:entry key="omsNumber" value="${#TestCase#omsNumber}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>appointmentId</con:entry><con:entry>omsNumber</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="putArchiveAppointment Получение ошибки" id="4303a296-aad2-41d9-9396-38c2720df4bf"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/delete" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="putArchiveAppointment Получение ошибки" id="43504869-a384-46c9-af5e-941caed8181f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v3/archiveAppointment/delete</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="466a30c1-e928-4c2e-a1a2-909ee763d349" name="Valid HTTP Status Codes"><con:configuration><codes>409</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7c36ea71-9151-4d37-8df3-1023290e8349" name="Проверка полученой ошибки"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}"/>
  <con:entry key="appointmentId" value="${#TestCase#appointmentId}"/>
  <con:entry key="omsNumber" value="${#TestCase#omsNumber}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>appointmentId</con:entry><con:entry>omsNumber</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Проверить наличие записи в БД" id="8010608d-b9fc-44cc-8ca3-1b88e7d81f33"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>SELECT appointment_id
FROM public.f_deleted_archive_appointment
WHERE
appointment_id = '${#TestCase#appointmentId}' AND
oms_number = '${#TestCase#omsNumber}' AND
birth_date = CAST('${#TestCase#birthDate}' As date)</con:query><con:assertion type="XPath Match" id="46527fec-9c4d-4d0a-8206-3bf971a4793f" name="XPath Match"><con:configuration><path>/Results/ResultSet/Row/F_DELETED_ARCHIVE_APPOINTMENT.APPOINTMENT_ID</path><content>${#TestCase#appointmentId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7749520870003181</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1974-10-29</con:value></con:property><con:property><con:name>startTime</con:name><con:value>2023-04-07T11:00:45</con:value></con:property><con:property><con:name>endTime</con:name><con:value>2023-04-07T11:01:45</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391880440573</con:value></con:property><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property></con:properties></con:testCase><con:testCase id="4744090b-9cb6-4824-882e-118c7c9c88a2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение ошибки PatientNotFound. PermissionNotFound" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="LK login" id="5c6f3e6e-5e4f-4fe9-a45c-ed41af4de422"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK login" id="cb9ad2ba-4d09-47c2-873b-6eef37766e6d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "${#TestCase#user_login}"
}</con:request><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api/user/auth/1/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7dea13c2-f571-4463-990b-3ecd9aa02719" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="X-Environment" value="stage" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>X-Environment</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение attemp-access" id="3270d04b-089f-47b6-9b7e-97c62dffe8ea"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def httpResponseHeaders = context.testCase.testSteps["LK login"].testRequest.response.responseHeaders
testRunner.testCase.setPropertyValue("x-otp", httpResponseHeaders.'x-otp'[0])

ResponseJson = context.expand('${LK login#Response}')
attempt_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("attempt_token", attempt_token.attempt_token)</script></con:config></con:testStep><con:testStep type="restrequest" name="LK confirm login" id="be5a6bdb-8fc5-4c3d-800a-c8ea11ff46df"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK confirm login" id="5e823704-38b6-42a1-bd83-db1cdbabd2eb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "otp_code": "${#TestCase#x-otp}",
  "refresh_token_ttl_seconds": 0,
  "access_token_ttl_seconds": 0,
  "attempt_token": "${#TestCase#attempt_token}"
}</con:request><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4ea421ea-ab49-4068-9ba7-66b79e868769" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение X-Access-JWT" id="0b3df2b8-3f48-4f7b-81c1-edc5da20ec2e"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${LK confirm login#Response}')
access_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("X-Access-JWT", access_token.access_token)</script></con:config></con:testStep><con:testStep type="restrequest" name="putArchiveAppointment" id="f0694368-db82-4539-b0c7-5db4cd887a3b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/delete" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="putArchiveAppointment" id="43504869-a384-46c9-af5e-941caed8181f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v3/archiveAppointment/delete</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="466a30c1-e928-4c2e-a1a2-909ee763d349" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d34286d1-3673-4f9c-a7dc-f74d018d6985" name="Проверка полученной ошибки"><con:configuration><scriptText>import groovy.json.JsonSlurper

ResponseJson = context.expand('${putArchiveAppointment#Response}')
error = new JsonSlurper().parseText(ResponseJson)

assert error.error.code == "PATIENT_NOT_FOUND"
assert error.error.description == "Пациент с полисом ОМС &lt;omsNumber> не найден"
assert error.error.type == "BUSINESS"</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}"/>
  <con:entry key="appointmentId" value="${#TestCase#appointmentId}"/>
  <con:entry key="omsNumber" value="${#TestCase#omsNumber}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>appointmentId</con:entry><con:entry>omsNumber</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>user_login</con:name><con:value>olya-klgd@mail.ru</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6IjZjZDQwYjdjLWU2YWYtNGMyMi1iYmVhLWViNWMwYjA4ZmZkNyIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY3MDU4Nzk0OSwic3ViIjoiZTQyMGQyNWYtYWMyYi00YjA1LTk5M2MtZmRkM2NlOTYyODI5IiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoibFRXTnJ1RFFpU2lZZWNnb3I0M1dNOG8xa2g5MnFKdnhVdy9Cd2FkeStPU0pFZzROL29KM09wQVdtKzN5dnA5R3VESXZEZVNGV3lTOTN4am1XQml2TmY3ZnNqOWNxWUJDV3FBVWRyK0ovOVF5U2pSVmNuODY1UmsrNkw5VmFQUzloWWI1U1hjOWJOaUN6T3VlTGZwL1c3NXZXY2p5L2RYUVFYTEhEMEFqVlUyNU5FRkgrYlhQaFlKeWgwQXBiUG43cHQweWNtNVVBK3RTUjRZZXZFQXJud1VObU12bW8vMDhxTlRqcjdTSGNkeXMrVERIVEl2VSsxTklCYldreFI2K2dwZWdwMk05enVsV3ViTmdHVzBQOEdpakpuZXVDWkQ0bWRrblVreUdKTFVEL0hOSHFlRityaytjNlFWekVUTmFtUTdYSTZNUkxRY1ZQaDZkUmJsUmdBPT0ifQ.fGu87rXapzJtrj1CvJqE9jG6hlvv6Z9MXngw2UTns3FHCbQfpnH-MLaZBuGEF_hP0pXZVUTLFeipATIRjpeQ-4qS1dR-oJOBT5n3yW02VBAZR5kznepyfF3QLfbH4kBYx1Z6v92qq34LQ7jduBJTvr3ZPapiJnRJTGZZH3MzjC-Ah4mHpUCy6XzsInh8j1VUphIRCt3hX36AbGMoD5mZRo4G09q--YvzG1lnTs8eRKTdHpQWef0GWyAYK6nippaEfEuG7SkXZUEdlXgPGp9s7-_ZAw-t-3_GG42_MO65mZ2kv5NyFJv2pjn341XEg6N02e5K1LFwrRIZ8mBCO7DJDF0cvxmb7hrKCpWlPLqS703L26qcg0HgTN1qyUV2VF3on-WB84EC6k2pdoPthIhSJbSvQfGS-dE8ZQZjc0QZweXdIcv7eptmqfpo_EHqHB-bkHOvK4-bDY4n4zY18myCChabW3hygoYUY6FmF-les-ptMtUAPnq0nxAykIQfTVxN5nOmF6rVBmLQTEiH56xeVnwreOxW6fsV7fxkF1GTR-bmV3iD0BM0SqBQ6ydaE2ohJDZ5yV_HX3g0qGArbSiIRMX5O8VeBfUgO1vD3pNVhW4SVUQeL9-mICRI37ilGM2EsFMnvNCRqLiRW1EqhSW1b0bsGaU-yrBxB4qFng29QeA</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>19674</con:value></con:property><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NzA2NzA3NTAsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJlNDIwZDI1Zi1hYzJiLTRiMDUtOTkzYy1mZGQzY2U5NjI4MjkiLCJzaWQiOiIwZDE4MDM4OS0xZDBlLTRhYzYtOGYzNy0wYmY4ODdiYTMzN2QiLCJwaG9uZSI6Ijc5OTk3OTc2MzY3Iiwic3NvX2lkIjoiREpFZjRVTWtBU3lJRk1DYk9HMTlsYWlScnM0QTBuSFg5N2xPSjBxZEliSWtPRExDSElrelBtRWNMTVFYL2VLaU1JeEdLYjY4dDJtTVlicm5SdGt4YUt4ampjbTJ0K3hGWWhzdVFweTREeDhWK1pJSGJwUE1vcVVvT2phdkJyYWtGeWZZMTdqOGVUQVRHaFpTMDgrZkV4enBkcDI5N0NDRXRzWVhLQ0VBMkJPdHVZOWE4Ty9mZUlhQjFsZy8yOVRTR2JQbjhLdUlLWHdlUFhzQURnRUlva1pPczczSEdsZ2x1eTdKSWtrQTVmM1dvUld6RWUzUXhnZEdkVkZjT01jbWoycFpPZkx1aDFwdmdUOWlEM0FJODQrTDJKRlJJQ3EvL2VabFdPREJ1UldRUW5LVWhjSWFTYmNGL29ueTdHSTR1TCs0eExJUkRJWmxJaUhsTTBaNjhBPT0iLCJlbWFpbCI6IiIsImZpcnN0X25hbWUiOiJcdTA0MTBcdTA0M2RcdTA0MzRcdTA0NDBcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQyMS4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQzMFx1MDQ0MVx1MDQzOFx1MDQzYlx1MDQ0Y1x1MDQzNVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTk1LTA4LTMwIn0.TliaU3-LhDVou1fAACuAWj0bWreagwJnzC_EBIZTvS5ezSWnaPUUAkElprKikdk7s0O5M9cUZXIZ-cDlrVE8naoNeKiU7vdevx-lVKBbtN9hW17DhuMpIEG-A-vJpujdeeyU5odnup27pH_FgOvZx61CXn4jHcpcV17H4I8yyrymUKUkDz0MuUrKNVaMjImhB2hv-klMLwNFxitHGATPD83sW0med0L7ziWMcKOxEQwOH_dJtoGxQwZO40w0HGf3ZoUE4hM8-b2ny6iXCJ4tnuzhNIgIoC9cH90ljAMPcr8cNUwemQHWpfKomAtRJYoZ0WJ7jWPyMv3WKrwc7GN193eAbLBxFV1s6NiHqPqwMfL3g_LKMDAWvgP4jf8Vt7Uaz9H8cl_xyF9wF9TQX5Wt2DCZQf-229oqkMa55tT8ePDGrDRjpeAz60xb3GI37kZX5v1sxK-oBxhhb3dsj65xH04keScfTJLR5kc3BI7GT0mP1KDzNT9lBrDmDrfBFeZPxxY63KzA_XLPkeZ5t5B_VQxu6Z7RFwaSEv6eCNnH5go_53woNspMUtDmiqikjXRNw8BuV4i4-m5X-sFGqT1nxfTV90k6hX7vdX7cq6w3FyX01yg9lO4SGvqXbTq4LPSNdK3-aj19VvPbqS-PhBu3wzVX413lbCvHXx4D8M5flt8</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7749520870003181</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1974-10-29</con:value></con:property><con:property><con:name>startTime</con:name><con:value>2022-11-14T14:00:22</con:value></con:property><con:property><con:name>endTime</con:name><con:value>2022-11-14T14:01:22</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391878071798</con:value></con:property></con:properties></con:testCase><con:testCase id="e653570c-790d-42e7-82be-f548ee9fcf14" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение ошибки PatientNotFound. AuthTokenExpired" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="putArchiveAppointment" id="a907a5e4-7554-45fe-b9eb-4d11f4cc0a94"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/delete" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="putArchiveAppointment" id="43504869-a384-46c9-af5e-941caed8181f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v3/archiveAppointment/delete</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="466a30c1-e928-4c2e-a1a2-909ee763d349" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d34286d1-3673-4f9c-a7dc-f74d018d6985" name="Проверка полученной ошибки"><con:configuration><scriptText>import groovy.json.JsonSlurper

ResponseJson = context.expand('${putArchiveAppointment#Response}')
error = new JsonSlurper().parseText(ResponseJson)

assert error.error.code == "PATIENT_NOT_FOUND"
assert error.error.description == "Пациент с полисом ОМС &lt;omsNumber> не найден"
assert error.error.type == "BUSINESS"</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="eeee"/>
  <con:entry key="appointmentId" value="${#TestCase#appointmentId}"/>
  <con:entry key="omsNumber" value="${#TestCase#omsNumber}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>appointmentId</con:entry><con:entry>omsNumber</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>user_login</con:name><con:value>azapov93@yandex.ru</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6ImU4NzRjZTNlLTQ5NTAtNDU2Yy1hMTBhLWVkMWJlNjA4NGZmNCIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY2ODQyNTE2MSwic3ViIjoiZWEyNDQ5ZTgtOWJiNS00MGU0LWEyNWEtNWUzMTNiNWQzYjViIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiV0taSFVzdTNyVXNYSHlxVHR4djU4OHNnOUM5WHFLdDhWa2dFTDRYWHNwbzN3d2puc3RQZXgwb1RrSFcwMXBQcXUycW4zeWU3QTdZRlFhZ1pGTlR0dW8rUElJU1Q3SmlobnBzSHlLZk5STHczb1FXNHkrNWxwRXQ3bHRVSloyTlRwSWZGUFlqOUpCYzlpU20zVXkzYjZvcGRRQ0VjbFZ5ako3S2puK1l6RmQ4cFJ4Mm45dlhEd3Nlbnc5WkswM0pMYnZTQk4va1JXbVpoRlpvTDZYS0tsRmpNWXRwbVVPQ3hDaFN3SDU5ZFYyK1pnRVhhK2NQMC83OGZmZ1I3cFY4dDI2NVNDa1duLzRJcE5vaGZBWTRlQ1AvcWdURHhaMEdpeFZBTjVuRWt6YUo4RHNycHY1WU11ZXE1S3FvVExmQ3hZVnV4VjNIZlZQSTUzMHlsTmtrd0VRPT0ifQ.mM1hFQOyKNlNM2KBpwSYSnwVGsCO-1t6BvoG1boJZ_VLaxow-kEc9iUsPIsRH3r72GPN3WTrEAh1JgrUHteibHLX0p0Hd_vvIyzG7lc8qcJnwDsCkoy5dAQwASZ3UcBjUZwR4hNZg9429D5lSE446hiOdlOFDXNu3mEID9a9mJf3o9Xwy-j041QzKTMDL9LejWjrVY03fQdrfOO5yL6I4GPFVPeMNPy0j-4yVFoFbl8FpLC7xmB9KZsTXOOs67yOdkz0SOgtP9Y3zPkalBaPTZfoWeNRHtj1T8RFtteuDUOJJzQxlTGyAGaqlCxwosbjPEHzvH1GGd8isIIqvzRzaT48Dy9UWYS7Mlb5jTXK_c1uVH2nAo2RZ-LG90NXRf70USG-ETx6jaWsRoN0XUQO4H57jJa1ZThWC92N7d42NQoox2VvE7dNu79NIKLPJirEv2RXuHUgLa3q72YklD_mA8g_TZOnM5Km6OdZdQe0wiaymPdd9K6MIqQ-fCeK_Q4zsKHnJ24kwdu95qu8wrFFuAf8aOrJ4vP-JNz0lbjkbMsjDH-Uld9MXRsrKEvNEuHDjnZMS41cvf2OIN1Wb0eD6Kqz-L9g9XfF4jBIE29BgxOzyi9UitqsnDtizbWUs2QjkBY8hbXRAoVZYS6rKcJsuSoHfxg4HihDUdYlSQLhzAs</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>19674</con:value></con:property><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2Njg1MDc5NjIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJlYTI0NDllOC05YmI1LTQwZTQtYTI1YS01ZTMxM2I1ZDNiNWIiLCJzaWQiOiI1MzdjODVjMy0wMTM1LTQ0NzUtOTJhZi0xZjYzZWUzOTk5MGYiLCJwaG9uZSI6Ijc5MDk3NzUzMzkzIiwic3NvX2lkIjoiSnN0bzgxdGZ1bWhycEJGQVRTVnN6VFNnZE9DVk8remFwZ1ZEd0phTXpoMFRQM3VlRjZteUhxUG8wWmozQ00xTmdsdFlwYVR5d3FJLzRabDJlRElxVGhqd0tZWEJwdEZEaFRGT3graEVvUTdCV0xkUE9Xc2VoSDJZY253MWxLVjNqK096QVd0djFTQnBsd0doRUVOcWVva2VXTG9qcW5WdStoeCtHL1h3MERSczdML1pwVXFHc3k4Rkc5bG9pdHMyWkpYVWpydnZza0tmOWRLS1RBQkUzOVgrSWc3Y01vbWJTVER1eGlHZjFydGtKci96V3drUDdBQVFoNHJxUFo5VzdnZzhUQVJIQy9hTnY4Z2JMVGVJS2c2d3l5dFVYcG96YysxeThsOU1mQTNBdGZRVnI2VkhaK1Y2Tm9XcnhRRGNPMWw2ekVjcnNidGxPNkRIUkZGY1VBPT0iLCJlbWFpbCI6ImF6YXBvdjkzQHlhbmRleC5ydSIsImZpcnN0X25hbWUiOiJcdTA0MTJcdTA0MzBcdTA0NDFcdTA0MzhcdTA0M2JcdTA0MzhcdTA0NDFcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQyNy4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzMFx1MDQ0MFx1MDQ0Mlx1MDQzOFx1MDQzZFx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIxOTc0LTEwLTI5In0.Fp-5bN185lijyjkylKAX4tVzwdUw1n6eCoGorwabUhEoEaL_2F7OT3lEgW-_gVEtZT1UNmg1TzWILQ9yAYApK3lSkaTx0IFaJ3yGGb0Cza3SjMLT-fLPGu3459NiOq48C2U2XC9WmDntPhBpN9po0LWZEO-M_mYHpJi2zpuXh9hxG09s_D1C_XP0PuSiFhPeMRITHGzWp6UV2O4xFc7hkG_NZ8yXUr0JjDFiIiGcRrQMxM4IsnPMz9_CgMxKM64n2j2NW0zvf2nz6_OMcz7lY3KZz_2rqHe4ifmzT6jy_nnIrq_zijfxYC0SyqIPadVSgVHEVRnYH7jpcJtJ_VT9hGhc6jgaCwQr8_aSDKJW1WXwZKJwceKjley-JIjR0gJA386TrCqqZ_fDyzxoLFOi8-9h-Kam7AYUd7QEWA0-VV5euy4_jMVTP_HIYKwpd3-kEafLfBljAEpsuDmhtyYmfDyk3aBBIcSQlPgEZ4d-IksRqaOr1ImyLGiVdhs0oNx131MVH5eP1vyb7ngqXiOEq6TaOW0zfBM17v_XSQ_8_dH_Zfyta0-z0VMgu_dOxGHd9kmX21-7w55f3LxMbhOyLmRcln2BLef9eCsCORIH29HEm6OXBtfr3h-RYXfEhErWJ7PzL-pU1wlA5qqO11Aw-m8i8xLr04PBf078TjvfDiA</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7749520870003181</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1974-10-29</con:value></con:property><con:property><con:name>startTime</con:name><con:value>2022-11-14T14:00:22</con:value></con:property><con:property><con:name>endTime</con:name><con:value>2022-11-14T14:01:22</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391878071798</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="396280ef-b690-4ddf-b005-7f5518d39a4f" name="postArchiveAppointmentsList v3" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="d66aae06-98a0-4bd1-b873-3c87008b5952" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="237458_ОС. Получение данных с исключением 3 записей, BM" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="6db70a8a-4a9e-49b5-8b2d-88d0e067776c"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="985f4c85-3fc1-4480-a33a-d3c4abfed9c9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="dcc90824-936d-4e32-960c-f87ff695c1e7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="824df944-97b8-44bd-b358-596fcd42a566"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента, генерация pageSize" id="c3673cc8-912b-4a5a-8220-afb745540e80"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="6dff3b2d-2d59-4833-80ef-0fdbccf52f76"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="30">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="0614e600-69b3-43b3-b09a-cd1756e81ceb"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="jdbc" name="Проверить записи в БД ЕМИАС.ИНФО" id="8352bb43-dc42-4017-9dd8-be1436291afc"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>select count(*) from f_deleted_archive_appointment where oms_number = '${#TestCase#omsNumber}'</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Обработка количества записей" id="c827950b-a163-43a8-88dc-6b214b7ae436"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Количество записей = 0</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT = '0'</con:expression><con:targetStep>Добавить случаные записи в таблицу ЕМИАС.ИНФО</con:targetStep></con:condition><con:condition><con:name>Количество записей 3&lt;=x&lt;=5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT >= 3 and //*:COUNT &lt;= 5</con:expression><con:targetStep>postArchiveAppointmentList</con:targetStep></con:condition><con:condition><con:name>Количество записей x&lt;2 or x>5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT &lt; 3 or  //*:COUNT > 5</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Добавить случаные записи в таблицу ЕМИАС.ИНФО" id="53fb0cf8-2bb0-4b2a-86bf-e64a31f9c2e9"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.text.SimpleDateFormat

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

//Выбор 3 случайных записей и добавление в таблицу f_deleted_archive_appointment
appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
sizeAppointment = appointments.size()
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S").format(Calendar.getInstance().getTime())
testRunner.TestCase.setPropertyValue("timeStamp", timeStamp)
appArray = []
notBmArray = [ ]
count=0

for (j = 0; j<sizeAppointment; j++){
	if (appointments[j].type != "BM"){
		notBmArray<<appointments[j].id
	}
}
	log.info notBmArray
for (int i = 0; notBmArray.size()>=3 ? i<3 : i<notBmArray.size(); i++){
	n = Math.abs(new Random().nextInt() % (notBmArray.size()))
	if (notBmArray.size()<=3) { n=i }
	if (notBmArray[n] != "BM"){
		appArray<<notBmArray[n]
		values = "VALUES((select max(id)+1 from f_deleted_archive_appointment), "+notBmArray[n]+", "+omsNumber+", '"+birthDate+"', '"+timeStamp+"')"
		sql.execute('INSERT INTO f_deleted_archive_appointment ' + columns + ' ' + values)
		notBmArray.remove(n)
		count+=1
	}
}
strArray = appArray.toString().replace("[", "").replace("]","")
testRunner.TestCase.setPropertyValue("appointments", strArray)
log.info count
]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="4013db26-5082-48c9-98a8-db493e2fcf30"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="d2d6ec89-8770-4af4-a0eb-7dcc6cb3250f"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 4
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="a5e60e42-5e7f-440e-b1a7-9dc73aaa2e3c"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить записи из БД" id="82b180b5-1754-475e-91b0-3cfa2fbac534"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.ArrayList
//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "
str = testRunner.testCase.getPropertyValue("appointments").split(",")
size = str.size()
appointmentArray = [ ]
for (j = 0; j&lt;size; j++){
	appointmentArray&lt;&lt;str[j].toBigInteger()
}
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

for (i = 0; i&lt;appointmentArray.size(); i++){
	query="delete from f_deleted_archive_appointment where appointment_id = "+appointmentArray[i] +" and  delete_date = "+" '$timeStamp' "
	log.info query
	sql.execute(query)
}


</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>21342799</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7790689773000533</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2013-09-26</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>10</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-07-19 15:35:39.217</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391880703998, 391872492723, 391882573598</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-01-19</con:value></con:property></con:properties></con:testCase><con:testCase id="0ecb14e5-904c-42bf-9b28-8d5a0b87d10b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="233375_ОС. Получение данных с исключением 3 записей, RECEPTION" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="5ec99e03-6c38-45c4-9e44-e4a6f938925b"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="36342282-f9ca-43fd-a388-86524ba4af86"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'RECEPTION' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="13b276c5-6291-4ca9-a9aa-e556aa708c5d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="e8153f31-0f0b-4f71-bd2f-1e6b5675cee5"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента, генерация pageSize" id="40d726ea-6043-42ad-bee9-13b9cd22bcb0"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 31) + 20
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="d85ec7f3-ac57-42c6-9bf5-2b6bd1ed992e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="0dd1517c-2e21-4359-8b0f-3a3de24854f3"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="jdbc" name="Проверить записи в БД ЕМИАС.ИНФО" id="b0f1f24d-9834-4b06-8cf1-e99fdbfb302d"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>select count(*) from f_deleted_archive_appointment where oms_number = '${#TestCase#omsNumber}'</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Обработка количества записей" id="2a8324a6-eff1-44a3-a4e4-84994232ca1d"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Количество записей = 0</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT = '0'</con:expression><con:targetStep>Добавить случаные записи в таблицу ЕМИАС.ИНФО</con:targetStep></con:condition><con:condition><con:name>Количество записей 3&lt;=x&lt;=5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT >= 3 and //*:COUNT &lt;= 5</con:expression><con:targetStep>postArchiveAppointmentList</con:targetStep></con:condition><con:condition><con:name>Количество записей x&lt;2 or x>5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT &lt; 3 or  //*:COUNT > 5</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Добавить случаные записи в таблицу ЕМИАС.ИНФО" id="075ff35f-255a-47a0-82d1-0d4eb2516c73"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.text.SimpleDateFormat

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

//Выбор 3 случайных записей и добавление в таблицу f_deleted_archive_appointment
appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
sizeAppointment = appointments.size()
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S").format(Calendar.getInstance().getTime())
testRunner.TestCase.setPropertyValue("timeStamp", timeStamp)
appArray = []
notReceptionArray = [ ]
count=0

for (j = 0; j<sizeAppointment; j++){
	if (appointments[j].type != "RECEPTION"){
		notReceptionArray<<appointments[j].id
	}
}
	log.info notReceptionArray
for (int i = 0; notReceptionArray.size()>=3 ? i<3 : i<notReceptionArray.size(); i++){
	n = Math.abs(new Random().nextInt() % (notReceptionArray.size()))
	if (notReceptionArray.size()<=3) { n=i }
	if (notReceptionArray[n] != "RECEPTION"){
		appArray<<notReceptionArray[n]
		values = "VALUES((select max(id)+1 from f_deleted_archive_appointment), "+notReceptionArray[n]+", "+omsNumber+", '"+birthDate+"', '"+timeStamp+"')"
		sql.execute('INSERT INTO f_deleted_archive_appointment ' + columns + ' ' + values)
		notReceptionArray.remove(n)
		count+=1
	}
}
strArray = appArray.toString().replace("[", "").replace("]","")
testRunner.TestCase.setPropertyValue("appointments", strArray)
log.info count
]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="73ab80df-3847-4785-9c6a-80082c3902c3"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="458545e6-5e57-45bd-a6d4-d83023e344cb"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 50
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="abc4243c-960e-45b2-aaa6-9564d95329ea"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить записи из БД" id="838568fc-e4a8-4f04-abbe-1b04b35658be"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.ArrayList
//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "
str = testRunner.testCase.getPropertyValue("appointments").split(",")
size = str.size()
appointmentArray = [ ]
for (j = 0; j&lt;size; j++){
	appointmentArray&lt;&lt;str[j].toBigInteger()
}
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

for (i = 0; i&lt;appointmentArray.size(); i++){
	query="delete from f_deleted_archive_appointment where appointment_id = "+appointmentArray[i] +" and  delete_date = "+" '$timeStamp' "
	log.info query
	sql.execute(query)
}


</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>18977801</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700005061655202</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2002-12-15</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>38</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-04-07 10:59:01.203</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2021-01-11</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2023-01-11</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391894369298, 391893407848, 391893885498</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="acfcc735-c6e5-4d2b-8def-9896314e67cb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213988_ОС. Получение данных с исключением 3 записей, LDP" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="ccc1ebf4-62c5-4585-aa33-37cf7ae456be"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="5ab205bc-2260-4b57-abeb-296ad41d8fa6"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'LDP' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="168e31a7-7853-460e-820e-902d803a94be"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="4584b970-1f2e-477c-a4e0-c1a6699fb02c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента, генерация pageSize" id="ca676d96-b898-40e4-867c-741e4d89e51e"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 31) + 20
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="3f6fa5d6-bede-4bbc-994c-0b55e01e20ec"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="75a918f4-ec90-4cca-b506-a98442190b50"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="jdbc" name="Проверить записи в БД ЕМИАС.ИНФО" id="3ced890f-cfe1-4ced-8da0-d7b62c228e70"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>select count(*) from f_deleted_archive_appointment where oms_number = '${#TestCase#omsNumber}'</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Обработка количества записей" id="2b338a6f-97ac-4877-9baa-15f5cdd46c98"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Количество записей = 0</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT = '0'</con:expression><con:targetStep>Добавить случаные записи в таблицу ЕМИАС.ИНФО</con:targetStep></con:condition><con:condition><con:name>Количество записей 3&lt;=x&lt;=5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT >= 3 and //*:COUNT &lt;= 5</con:expression><con:targetStep>postArchiveAppointmentList</con:targetStep></con:condition><con:condition><con:name>Количество записей x&lt;2 or x>5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT &lt; 3 or  //*:COUNT > 5</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Добавить случаные записи в таблицу ЕМИАС.ИНФО" id="5fec0446-0353-4910-8548-dd78d4198948"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.text.SimpleDateFormat

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

//Выбор 3 случайных записей и добавление в таблицу f_deleted_archive_appointment
appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
sizeAppointment = appointments.size()
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S").format(Calendar.getInstance().getTime())
testRunner.TestCase.setPropertyValue("timeStamp", timeStamp)
appArray = []
notLdpArray = [ ]
count=0

for (j = 0; j<sizeAppointment; j++){
	if (appointments[j].type != "LDP"){
		notLdpArray<<appointments[j].id
	}
}
	log.info notLdpArray
for (int i = 0; notLdpArray.size()>=3 ? i<3 : i<notLdpArray.size(); i++){
	n = Math.abs(new Random().nextInt() % (notLdpArray.size()))
	if (notLdpArray.size()<=3) { n=i }
	if (notLdpArray[n] != "BM"){
		appArray<<notLdpArray[n]
		values = "VALUES((select max(id)+1 from f_deleted_archive_appointment), "+notLdpArray[n]+", "+omsNumber+", '"+birthDate+"', '"+timeStamp+"')"
		sql.execute('INSERT INTO f_deleted_archive_appointment ' + columns + ' ' + values)
		notLdpArray.remove(n)
		count+=1
	}
}
strArray = appArray.toString().replace("[", "").replace("]","")
testRunner.TestCase.setPropertyValue("appointments", strArray)
log.info count
]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="85de346c-f10b-43c4-bbf1-6098ba9400bc"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="ba717982-90ab-4786-b0f2-a2fae2f76804"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": ${#TestCase#pageSize}
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="36a457bf-f53b-4446-8765-83d32e4659ca"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить записи из БД" id="863f9663-2877-44b9-9794-79243f103041"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.ArrayList
//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "
str = testRunner.testCase.getPropertyValue("appointments").split(",")
size = str.size()
appointmentArray = [ ]
for (j = 0; j&lt;size; j++){
	appointmentArray&lt;&lt;str[j].toBigInteger()
}
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

for (i = 0; i&lt;appointmentArray.size(); i++){
	query="delete from f_deleted_archive_appointment where appointment_id = "+appointmentArray[i] +" and  delete_date = "+" '$timeStamp' "
	log.info query
	sql.execute(query)
}


</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>22148259</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700008107274303</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2003-03-27</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>28</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-04-07 11:05:02.54</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2021-01-11</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2023-01-11</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391874063023, 391874056873, 378258542148</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="84883ae2-93f4-46c6-b4ff-ecd4ddb43581" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение данных с исключением 7 записей, BM" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="2bc1444e-989c-420e-8195-3b05ceb50a3a" disabled="true"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="2d20718d-e80b-4e24-9ea9-946c197b5018" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="b237a20c-fdd0-4a9c-b429-8ee0976f2d79" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="5c8620da-0ddd-42c5-9e0d-0a721cdb40a7" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента, генерация pageSize" id="3a8c8d57-7223-4778-82b7-3c19e879e3f1" disabled="true"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="999bf23f-35a8-4730-96f4-f2a46f1999e8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="${#TestCase#pageNumber}" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="c2cf85b0-155e-4bcf-bf0d-f9aad1cd953d"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount&lt;=7</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="jdbc" name="Проверить записи в БД ЕМИАС.ИНФО" id="b51d7b16-6ba2-48dd-8adf-8d413b9da9c5"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>select count(*) from f_deleted_archive_appointment where oms_number = '${#TestCase#omsNumber}'</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Обработка количества записей" id="ade8ae62-d690-42da-9e83-aac35b8e7f2d"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Количество записей = 0</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT = '0'</con:expression><con:targetStep>Добавить случаные записи в таблицу ЕМИАС.ИНФО</con:targetStep></con:condition><con:condition><con:name>Количество записей 3&lt;=x&lt;=5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT >= 3 and //*:COUNT &lt;= 5</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>Количество записей x&lt;2 or x>5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT &lt; 3 or  //*:COUNT > 5</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Добавить случаные записи в таблицу ЕМИАС.ИНФО" id="ac2cbf13-1015-44a5-b412-7963cc02858f"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.text.SimpleDateFormat

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

//Выбор 3 случайных записей и добавление в таблицу f_deleted_archive_appointment
appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
sizeAppointment = appointments.size()
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S").format(Calendar.getInstance().getTime())
testRunner.TestCase.setPropertyValue("timeStamp", timeStamp)
appArray = []
notBmArray = [ ]
count=0

for (j = 0; j<sizeAppointment; j++){
	if (appointments[j].type != "BM"){
		notBmArray<<appointments[j].id
	}
}
	log.info notBmArray
for (int i = 0;  i<7; i++){
	n = Math.abs(new Random().nextInt() % (notBmArray.size()))
		appArray<<notBmArray[n]
		values = "VALUES((select max(id)+1 from f_deleted_archive_appointment), "+notBmArray[n]+", "+omsNumber+", '"+birthDate+"', '"+timeStamp+"')"
		sql.execute('INSERT INTO f_deleted_archive_appointment ' + columns + ' ' + values)
		notBmArray.remove(n)
		count+=1
}
strArray = appArray.toString().replace("[", "").replace("]","")
testRunner.TestCase.setPropertyValue("appointments", strArray)
log.info count
]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="2d3a8511-2296-4ec1-8131-9b1df64455cb"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="063dc5b6-ab49-40c5-807d-4b67b9585adb"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="ce4cb24c-56a8-41e8-b379-4346d958a6b5"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")
testRunner.testCase.setPropertyValue("pageSize", "25")
testRunner.testCase.setPropertyValue("pageNumber", "0")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

//Формирование для первой запрашиваемой страницы
suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}
log.info "suppMap1" + suppMap

//Формирование для второй запрашиваемой страницы
testRunner.testCase.setPropertyValue("pageNumber", "1")
testRunner.runTestStepByName("getArchivedAppointments")
getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)
appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
suppAppointmentsSize = appointments.size()
InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
log.info pageNumber
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

log.info "suppMap2" + suppMap

//Проверка ответа от ЕМИАС.ИНФО
infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap
testRunner.testCase.setPropertyValue("pageNumber", "0")
testRunner.runTestStepByName("getArchivedAppointments")
payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount
assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить записи из БД" id="81a37c12-934e-448f-b364-a58b0ddd2c9f"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.ArrayList
//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "
str = testRunner.testCase.getPropertyValue("appointments").split(",")
size = str.size()
appointmentArray = [ ]
for (j = 0; j&lt;size; j++){
	appointmentArray&lt;&lt;str[j].toBigInteger()
}
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

for (i = 0; i&lt;appointmentArray.size(); i++){
	query="delete from f_deleted_archive_appointment where appointment_id = "+appointmentArray[i] +" and  delete_date = "+" '$timeStamp' "
	log.info query
	sql.execute(query)
}


</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>16443631</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7747040882000879</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1959-12-17</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-04-07 11:06:07.659</con:value></con:property><con:property><con:name>appointments</con:name><con:value>353836307898, 386487565023, 372504766148, 379276868373, 386480691373, 386481722523, 381779426373</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-07-23</con:value></con:property><con:property><con:name>pageNumber</con:name><con:value>0</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>25</con:value></con:property></con:properties></con:testCase><con:testCase id="5cb6daaf-11fb-45c1-9f97-2fd2d39043f4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="237458_ОС. Получение данных без исключения" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="5538996d-e63b-480c-8bc2-9e5282660a2c"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="4782ccfb-bbf1-4a2a-895c-39c65b2c2eb4"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="bc8bf8a2-859e-4a56-9bdf-ae5a99afb1ff"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="8da0a37f-5b17-4d8e-b43a-b13a95769de0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента" id="9785f932-59bf-44f9-be46-56c7d0b24be9"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="23f0eef5-475a-48b9-824b-b7e3bf0dbb50"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="ac0f1e50-8f96-46cc-b2fe-51cbc2c4d17d"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="97533a48-0547-45c6-9533-ccbb60648495"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="b27068c6-0845-4eb1-b817-7c154fc1ea27"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>19854194</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700004024730257</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1957-02-23</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>6</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-01-23 10:50:45.324</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391858035098, 391857999223, 391858028948</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="d636e859-5d61-4e01-a0bb-39209720c52d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213993_4_ОС. Размер страницы > 25 (Изменение размера на 25)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="768ad06e-2bd8-4c07-9b1e-aa93177b98e0"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="b3baff52-2ebe-4bdb-9e54-d62aac731095"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="ca676179-8153-49b7-ba1e-36bc00bc2188"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="f8442655-9864-4340-b670-520f63113a5a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента" id="49404f8e-271e-462f-b3b8-51cd7f55a2a4"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="f09df6ff-abeb-4e40-b714-5dd4ec0717fa"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="050136bc-02da-4d64-915c-ca25eb0a1c5a"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="251cbebe-81ee-48fe-84b8-70dedad502eb"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": ${=Math.abs(new Random().nextInt() % 25) + 26}
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="36e0eca9-0493-497f-a8a6-862d1b626521"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>16467186</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700005061030299</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1999-02-03</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>2</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-01-23 10:50:45.324</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391858035098, 391857999223, 391858028948</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="57f7ea76-e5dd-4caf-a9ca-7fbbf4436c95" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213993_5_ОС. Размер страницы = 0 (Изменение размера на 25)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="dee56d31-04dc-43d6-8a71-335b1f639fe1"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="a1ec4952-6121-4283-bab8-ffe37d07af3c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="fe46b601-a308-449d-9cb7-ee67d0112d98"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="6982150c-c145-4736-8a39-5e2143470cf1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента" id="adc2669b-b905-4312-9d64-05697b1865c8"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="1c543d43-f801-49b3-88e5-2ec2c4daaf4a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="1a315cea-2b43-4c88-81ee-c8a6d1054049"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="85818f85-6ad3-4160-bf05-a2da9ca84e9a"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 0
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="b19b0711-1790-4cc2-a3f5-bafd0870edd6"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>10575483</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7750200831000958</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1997-09-18</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>21</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-01-23 10:50:45.324</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391858035098, 391857999223, 391858028948</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="c403988f-dc14-4af7-ad29-90048ee407b9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213993_7_ОС. Номер страницы &lt; 0 (Изменение номера на 0)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="45a5bbb3-b4ee-4e27-a897-e3b34a5649f7"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="64ffa805-9b03-41b6-872d-4808550bcb64"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="5c0fe292-1c3a-4eeb-8316-c0c947dd8306"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="16866df5-4c36-4577-9873-0e16ee634ab9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента" id="ca879975-7c54-47d8-86e7-c51bb4c46046"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="540c962c-09f3-4062-9c77-c3b87300c256"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="f28b59b5-c89f-42c0-864e-8b5707932244"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="fefb82d4-de0e-41f6-a7ae-b521a70f752c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": ${=-Math.abs(new Random().nextInt() % 100) + 1},
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="b67a1953-b748-44a5-b1ec-17631172a957"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>10575483</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7750200831000958</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1997-09-18</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>16</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-01-23 10:50:45.324</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391858035098, 391857999223, 391858028948</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="8323de96-0c7b-488b-b74f-19500440812d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213993_8_ОС. Размер страницы &lt; 0 (Изменение размера на 25)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="a8a4c723-a94c-4452-bab3-c5877b4278a5"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="6d521f8f-9ac6-414a-9287-f0b3ac7cdbe8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="d9a1529c-b0a2-477e-be40-9c670752b15d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="003e9f00-4091-4149-9e70-08b04d70f48f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента" id="8ea7536d-7ab0-41eb-aa92-7c5144a459dd"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="6344c590-a096-4ead-98e3-da5219403e82"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="d42fbe23-29b7-49ee-ab9f-377643e74d2f"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="681935da-ed0a-44bd-9d6d-8fa01243d916"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": ${=-Math.abs(new Random().nextInt() % 100) + 1}
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="3e4e6b61-3e5b-45ae-8625-f3cfc6833a26"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>19854194</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700004024730257</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1957-02-23</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>1</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-01-23 10:50:45.324</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391858035098, 391857999223, 391858028948</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="53cfb9f5-55d1-4b91-8cfb-388997b916ef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213994_ОС. Пустой Payload" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="7750a129-5269-4aa5-b6e6-c71280cb51e2"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="e10bba62-8394-4ce7-8cf7-ce974da56f7b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="79ae2ea6-2478-49fb-9058-aa18db1c4578"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="9642166d-1d84-466f-b14b-b9b6cc4976f1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента, генерация pageSize" id="b861bedf-882f-4051-9fdb-ab38649106e3"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
import java.time.LocalDate
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageNumber = Math.abs(new Random().nextInt() % 100) + 70
testRunner.testCase.setPropertyValue( "pageNumber",pageNumber.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="8ca0ba38-fda6-4c1d-be89-97bd6d0f1fc9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="${#TestCase#pageNumber}" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="e263d1e3-203e-4a5b-bde4-8f3d9ac25e89"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="f5f2bf8d-f085-403f-bb64-812e74f92fff"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="EI-Token" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": ${#TestCase#pageNumber},
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="f806e18c-e8b7-4a77-8cb7-08d04bbcd2db"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i<suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j<infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap<>(suppMap);
Map infoSortMap = new TreeMap<>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload
pagN = testRunner.testCase.getPropertyValue("pageNumber").toInteger()

assert payload.pageNumber == pagN
assert payload.pageTotal == 0
assert payload.pageSize == 0
assert payload.morePagesAvailable == false
assert payload.totalItemsCount == 0

assert suppMap.size() == infoMap.size()
assert suppMap.size() == 0 && infoMap.size() == 0
assert suppSortMap.toString() == infoSortMap.toString()
]]></script></con:config></con:testStep><con:setupScript/><con:properties><con:property><con:name>patientId</con:name><con:value>10581395</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7769950868000821</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1940-10-31</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2020-12-27</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2022-12-27</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-10-27</con:value></con:property><con:property><con:name>pageNumber</con:name><con:value>167</con:value></con:property></con:properties></con:testCase><con:testCase id="8bdb1b5c-af53-4035-a4ea-a936bb244807" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213992_АС1. Пациент не найден (SA_PATIENT_NOT_FOUND)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать текущую дату и дату 2 года назад" id="dfb4d1f2-81d9-4a45-8aeb-a188b690320e"><con:settings/><con:config><script>import java.time.LocalDate
//Нахождение дат для запроса к оркестратору
today = LocalDate.now()
twoYearsAgo = today.minusYears(2)
testRunner.testCase.setPropertyValue("dateTo", today.toString())
testRunner.testCase.setPropertyValue("dateFrom", twoYearsAgo.toString())</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="54a1d5f1-4c3c-4331-99b0-c1e6836d1fd9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM
(SELECT * FROM 
(select PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
from PATIENT
where not exists (
    select * 
    from TIME_PERIOD
    where TIME_PERIOD.PERSON_INSURANCE_CODE = PATIENT.PATIENT_ID AND START_TIME > TIMESTAMP '${#TestCase#dateFrom} 00:00:00.000000'))
WHERE rownum&lt;101 AND PATIENT_ID/10000000 &lt; 10 AND  PATIENT_ID/10000000 > 0 AND ((OMS_NEW_ASSURANCE_NUMBER IS NOT NULL) OR (OMS_REGION_ASSURANCE_SERIES IS NOT NULL AND OMS_REGION_ASSURANCE_NUMBER IS NOT NULL) 
	OR (OMS_ASSURANCE_SERIES IS NOT NULL AND OMS_ASSURANCE_NUMBER IS NOT NULL)) ORDER BY dbms_random.value)
WHERE rownum=1
</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента, генерация pageSize" id="920d0e21-1073-4892-84d5-88805ba4f75a"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
import java.time.LocalDate
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 47) + 2
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="cf52cded-2795-470a-815e-04f7543a3228"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="43fde03b-f64d-4b94-8c97-ff42ce07356e"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="33f3479e-5491-495c-a022-a1cb39444b61"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}123",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": ${#TestCase#pageSize}
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74001288-d99a-4fe6-9089-35c22651ed74" name="Значение code = SA_PATIENT_NOT_FOUND"><con:configuration><path>$.error.code</path><content>SA_PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="502a4633-5a2b-4a47-8b1e-ced542cc6244" name="Значение description = Пациент с указанным ОМС не найден"><con:configuration><path>$.error.description</path><content>Пациент с указанным ОМС не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48bb447c-4baa-4b64-96f7-2d445994ad5a" name="Значение type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:setupScript/><con:properties><con:property><con:name>patientId</con:name><con:value>30000007472572</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700006153580350</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1950-03-08</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>46</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2021-04-07</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2023-04-07</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="92ecf1b7-80b2-4713-9d03-cac1e983bb90" name="Сохранить токены из глобалных свойств в свойства проекта"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="57020bc5-8f82-45cc-8881-524e2b28a9a6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Сохранить" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Сохранить" id="e660c179-6b0e-4e62-8ad6-8fc97c32d83e"><con:settings/><con:config><script>def sudirToken =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "sudirToken" )
def accessToken =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "X-Access-JWT" )
log.info sudirToken
log.info accessToken
testRunner.testCase.testSuite.project.setPropertyValue("sudirToken", sudirToken)
testRunner.testCase.testSuite.project.setPropertyValue("X-Access-JWT", accessToken)
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="9fac9c79-b79e-4bab-9054-53902acd0bff" name="Post appointmentsByIds"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ac4d32af-67b6-40df-a5fc-1d7cacf1b340" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Интеграционный сценарий без поиска пациента" searchProperties="true"><con:settings/><con:testStep type="request" id="2dfd9796-32f0-4fc3-a4d0-b451a66aa4e5" name="getArchivedAppointments" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="81de263a-082f-4e86-85fe-d5302329caf2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/" xmlns:v51="http://api.service.soap.emias.lanit.ru/core/v5/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>EIM</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="${#TestCase#pageNumber}" pageSize="25"/>\r
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3cb4de8c-adf8-40a2-b016-020cbd725d08" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getArchivedAppointments"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить интеграционный сценарий" id="fbea8413-11de-4269-8a0c-a517575e3264"><con:settings/><con:config><script><![CDATA[import groovy.xml.XmlSlurper
import groovy.json.JsonSlurper

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkOptionalParameter(String paramName, def expValue, def currentValue,boolean bFormat=false, boolean stringValue=true){
	nullValue = stringValue ? "" : null 
	if(expValue == nullValue){
		checkParameter(paramName, null, currentValue)
	}
	else{
		if(bFormat){
			expValue=expValue.toBoolean()
		}
		checkParameter(paramName, expValue, currentValue)
	}
}

def compareLists(List list1, List list2){
        List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором -"+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков одинаковые"
        if(errors) testRunner.fail("При сравнении списков были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
    }
    
allSarAppointments=[]
elemOnPage=[]
sarAppointments=[]
ids=[]
getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointmentsParsedResponse = new XmlSlurper().parseText(getArchivedAppointmentsResponse)
sarResult=getArchivedAppointmentsParsedResponse.Body.getArchivedAppointmentsResponse.result
pageTotal= sarResult.@pageTotal.toInteger()

def tCase = testRunner.testCase.testSuite.testCases["Интеграционный сценарий без поиска пациента"]
def tStep = tCase.testSteps["getArchivedAppointments"]
def tStep2 = tCase.testSteps["Post appointmentsByIds"]

for( int i = 0; i<=pageTotal; i++){
	testRunner.TestCase.setPropertyValue("pageNumber", i.toString())
	tStep.run(testRunner, context)
	sarResponse= context.expand('${getArchivedAppointments#Response}')
	sarParsedResponse= new XmlSlurper().parseText(sarResponse)
	sarResult=sarParsedResponse.Body.getArchivedAppointmentsResponse.result
	pageSize=sarResult.appointment.size()
	elemOnPage << pageSize
	n=pageSize-1
	if( n >= 0){
		sarAppointments << sarResult.appointment[n]
		ids <<  sarResult.appointment[n].id.toLong()
	}
	allSarAppointments << sarResult
}


filter = ids.toString().replace("[","").replace("]","")
testRunner.TestCase.setPropertyValue("filter",filter)

tStep2.run(testRunner, context)
def postAppointmentsByIdsResponse = context.expand('${Post appointmentsByIds#Response}')
def postAppointmentsByIdsParsedResponse = new JsonSlurper().parseText(postAppointmentsByIdsResponse)
infoAppointments=postAppointmentsByIdsParsedResponse.appointmentList
appIdInfo=infoAppointments.id
log.info ids
log.info appIdInfo

compareLists(appIdInfo, ids)
if (compareLists(appIdInfo, ids)){
	
for(int i=0; i<sarAppointments.size(); i++){
	sarApp=sarAppointments[i]
	infoAppointments.each{
		if(sarApp.id.toLong() == it.id){
			log.info "проверяю маппинг для appointmeте с id ="+sarApp.id
			checkOptionalParameter("number",sarApp.number.toString(),it.number )
			checkOptionalParameter("liveQueueTicketId",sarApp.liveQueueTicketId.toLong(),it.liveQueueTicketId )
			checkOptionalParameter("liveQueueTicketNumber",sarApp.liveQueueTicketNumber.toString(),it.liveQueueTicketNumber )
			checkParameter("lpuId",sarApp.lpuId.toLong(),it.lpuId)
			checkOptionalParameter("typeLpu",sarApp.typeLpu.toString(),it.typeLpu )
			checkOptionalParameter("nameLpu",sarApp.nameLpu.toString(),it.nameLpu )
			checkParameter("lpuAddress",sarApp.lpuAddress.toString(),it.lpuAddress)
			checkParameter("startTime",sarApp.startTime.toString(),it.startTime.toString())
			checkParameter("endTime",sarApp.endTime.toString(),it.endTime.toString())
			checkParameter("type",sarApp.type.toString(),it.type)
			checkOptionalParameter("enableCancel",sarApp.enableCancel.toString(),it.enableCancel, true )
			checkOptionalParameter("enableShift",sarApp.enableShift.toString(),it.enableShift, true )
			checkParameter("availableResourceId",sarApp.availableResourceId.toLong(),it.availableResourceId)
			checkParameter("complexResourceId",sarApp.complexResourceId.toLong(),it.complexResourceId)
			checkOptionalParameter("roomId",sarApp.roomId.toLong(),it.roomId )
			checkParameter("roomNumber",sarApp.roomNumber.toString(),it.roomNumber)
			checkOptionalParameter("addressPointId",sarApp.addressPointId.toLong(),it.addressPointId )
			if(sarApp.toDoctor.toString() != ""){
				checkParameter("toLdp",null ,it.toLdp)
				checkParameter("toBM",null ,it.toBM)
				checkParameter("toDoctor.specialityId",sarApp.toDoctor.specialityId.toLong(),it.toDoctor.specialityId)
				checkParameter("toDoctor.specialityName",sarApp.toDoctor.specialityName.toString(),it.toDoctor.specialityName)
				checkOptionalParameter("toDoctor.doctorFio",sarApp.toDoctor.doctorFio.toString(),it.toDoctor.doctorFio)
				checkParameter("toDoctor.receptionTypeId",sarApp.toDoctor.receptionTypeId.toLong(),it.toDoctor.receptionTypeId)
			}
			if(sarApp.toLdp.toString() != ""){
				checkParameter("toDoctor",null ,it.toDoctor)
				checkParameter("toBM",null ,it.toBM)
				checkParameter("toLdp.specialityId",sarApp.toLdp.specialityId.toLong(),it.toLdp.specialityId)
				checkParameter("toLdp.ldpTypeName",sarApp.toLdp.ldpTypeName.toString(),it.toLdp.ldpTypeName)
				checkOptionalParameter("toLdp.countAssignmentProcedures",sarApp.toLdp.countAssignmentProcedures.toInteger(),it.toLdp.countAssignmentProcedures)
			}		
			if(sarApp.toBM.toString() != ""){
				checkParameter("toDoctor",null ,it.toDoctor)
				checkParameter("toLdp",null ,it.toLdp)
				checkParameter("toBM.id",sarApp.toBM.id.toLong(),it.toBM.id)
				checkParameter("toBM.name",sarApp.toBM.name.toString(),it.toBM.name)
			}			
			checkOptionalParameter("statusId",sarApp.statusId.toInteger(),it.statusId )
			if(sarApp.cancelInfo.toString() != ""){
					checkOptionalParameter("cancelInfo.cancelReasonId",sarApp.cancelInfo.cancelReasonId.toLong(),it.cancelInfo.cancelReasonId)
					checkParameter("cancelInfo.cancelReasonDesc",sarApp.cancelInfo.cancelReasonDesc.toString(),it.cancelInfo.cancelReasonDesc)
					cancelTime= it.cancelInfo.cancelTime ? it.cancelInfo.cancelTime.toString() : null 
					checkOptionalParameter("cancelInfo.cancelTime",sarApp.cancelInfo.cancelTime.toString(),cancelTime)
			}
			checkOptionalParameter("receptionFactId",sarApp.receptionFactId.toLong(),it.receptionFactId )
			if(sarApp.referral.toString() != ""){
				checkParameter("referral.referralId",sarApp.referral.referralId.toLong(),it.referral.referralId)
				checkParameter("referral.startTime",sarApp.referral.startTime.toString(),it.referral.startTime.toString())
				checkParameter("referral.endTime",sarApp.referral.endTime.toString(),it.referral.endTime.toString())
				checkOptionalParameter("referral.availableResourceId",sarApp.referral.availableResourceId.toLong(),it.referral.availableResourceId)
				checkOptionalParameter("referral.lpuId",sarApp.referral.lpuId.toLong(),it.referral.lpuId)
			}
			checkOptionalParameter("eno",sarApp.eno.toString(),it.eno)
		}
	}
}

}
]]></script></con:config></con:testStep><con:testStep type="restrequest" name="Post appointmentsByIds" id="4b43d1da-7b9e-4038-ab53-163f63b0ad35"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/archiveAppointment/appointmentsByIds" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post appointmentsByIds" id="7feb5647-8a0d-4119-9059-10204a30aae7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#omsNumber}",
  "birthDate": "${#TestCase#birthDate}",
  "appointmentId": [
    ${#TestCase#filter}
  ]
}</con:request><con:originalUri>http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>Mock-saOrchestrator</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value/></con:property><con:property><con:name>omsNumber</con:name><con:value>7791889720000557</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2011-08-29</con:value></con:property><con:property><con:name>pageNumber</con:name><con:value>0</con:value></con:property><con:property><con:name>filter</con:name><con:value>391872550123</con:value></con:property></con:properties></con:testCase><con:testCase id="d2db6811-affe-4f68-ac2d-946cb04d485b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="У пациента нет в оркестраторе записей(мок)_ID388112" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Post appointmentsByIds" id="c7ac41d6-91e7-4057-be65-c59838f87bea"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/archiveAppointment/appointmentsByIds" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post appointmentsByIds" id="7feb5647-8a0d-4119-9059-10204a30aae7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7791889720000557",
  "birthDate": "2011-08-29",
  "appointmentId": [
    391927704348
  ]
}</con:request><con:originalUri>http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/${#TestCase#tcId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Mock-saOrchestrator</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить ответ" id="cad1089a-c030-4288-be3f-c00e694f6fae"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def response = context.expand('${Post appointmentsByIds#Response}')

def httpResponseHeaders = testRunner.testCase.getTestStepByName("Post appointmentsByIds").testRequest.response.responseHeaders
def httpStatus = httpResponseHeaders["#status#"]
def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

if(response!="") testRunner.fail("ответ метода Post appointmentsByIds не соответствует ожидаемому. Ожидаемый - пустой, фактический: "+response)
if(httpStatusCode !="204") testRunner.fail("статус код ответа  метода Post appointmentsByIds не соответствует ожидаемому. Ожидаемый =204, фактический: "+httpStatusCode)</script></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>388112</con:value></con:property></con:properties></con:testCase><con:testCase id="74d7e979-80db-4e91-a789-c97975faeae1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение данных с исключением 3 записей, BM" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="34a9e4d1-bdd8-406c-b7f0-a6ee23265572"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="571d0dc7-c4f0-4b4d-ba5a-9b2ba6e51a72"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE )
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="5e4df391-6c23-4a16-beed-d7ff31ee1e28"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="4d407959-ae29-49a1-8604-c883c702fcb4"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента, генерация pageSize" id="0779d958-d2d9-46d7-8ecf-74a2ffda8579"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="19abf562-b667-4456-a94a-21253b14a61a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="fb226d3f-f6b3-49fc-8007-83a8657c7466"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="jdbc" name="Проверить записи в БД ЕМИАС.ИНФО" id="54673842-1bdb-493e-b2f7-a81deb484757"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>select count(*) from f_deleted_archive_appointment where oms_number = '${#TestCase#omsNumber}'</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Обработка количества записей" id="8e9685de-e7a7-4213-b149-86ea0b5bd6ea"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Количество записей = 0</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT = '0'</con:expression><con:targetStep>Добавить случаные записи в таблицу ЕМИАС.ИНФО</con:targetStep></con:condition><con:condition><con:name>Количество записей 3&lt;=x&lt;=5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT >= 3 and //*:COUNT &lt;= 5</con:expression><con:targetStep>postArchiveAppointmentList</con:targetStep></con:condition><con:condition><con:name>Количество записей x&lt;2 or x>5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT &lt; 3 or  //*:COUNT > 5</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Добавить случаные записи в таблицу ЕМИАС.ИНФО" id="048bcc21-5268-4dcb-a1ea-348ac5fa8425"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.text.SimpleDateFormat

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

//Выбор 3 случайных записей и добавление в таблицу f_deleted_archive_appointment
appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
sizeAppointment = appointments.size()
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S").format(Calendar.getInstance().getTime())
testRunner.TestCase.setPropertyValue("timeStamp", timeStamp)
appArray = []
notBmArray = [ ]
count=0

for (j = 0; j<sizeAppointment; j++){
	if (appointments[j].type != "BM"){
		notBmArray<<appointments[j].id
	}
}
	log.info notBmArray
for (int i = 0; notBmArray.size()>=3 ? i<3 : i<notBmArray.size(); i++){
	n = Math.abs(new Random().nextInt() % (notBmArray.size()))
	if (notBmArray.size()<=3) { n=i }
	if (notBmArray[n] != "BM"){
		appArray<<notBmArray[n]
		values = "VALUES((select max(id)+1 from f_deleted_archive_appointment), "+notBmArray[n]+", "+omsNumber+", '"+birthDate+"', '"+timeStamp+"')"
		sql.execute('INSERT INTO f_deleted_archive_appointment ' + columns + ' ' + values)
		notBmArray.remove(n)
		count+=1
	}
}
strArray = appArray.toString().replace("[", "").replace("]","")
testRunner.TestCase.setPropertyValue("appointments", strArray)
log.info count
]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="706b3534-9d74-4709-ba78-0ae9907f3874"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="8d2ae50d-6964-4ce1-9f17-5e8c11627d55"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 4
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="00eb5b38-6d0a-445d-9c6b-31de05343084"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить записи из БД" id="630e2192-5e12-489a-8168-da0f101a0357"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.ArrayList
//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "
str = testRunner.testCase.getPropertyValue("appointments").split(",")
size = str.size()
appointmentArray = [ ]
for (j = 0; j&lt;size; j++){
	appointmentArray&lt;&lt;str[j].toBigInteger()
}
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

for (i = 0; i&lt;appointmentArray.size(); i++){
	query="delete from f_deleted_archive_appointment where appointment_id = "+appointmentArray[i] +" and  delete_date = "+" '$timeStamp' "
	log.info query
	sql.execute(query)
}


</script></con:config></con:testStep><con:testStep type="restrequest" name="Post appointmentsByIds" id="7eca22cf-a223-40a0-a72e-34703228b5df"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/archiveAppointment/appointmentsByIds" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post appointmentsByIds" id="7feb5647-8a0d-4119-9059-10204a30aae7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://application-emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "appointmentId": [
    391927704348
  ]
}</con:request><con:originalUri>http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>Mock-saOrchestrator</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>10166510</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1939-10-23</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>10</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-07-19 15:35:39.217</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391880703998, 391872492723, 391882573598</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-07-22</con:value></con:property></con:properties></con:testCase><con:testCase id="326cb4a1-354a-4d09-9c1c-5f7a5eaa1cb3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AC0. SERVER_ERROR(мок)_ID388302" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Post appointmentsByIds" id="8a8d0c4c-6699-412c-af95-b9c8fdf12e49"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/archiveAppointment/appointmentsByIds" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post appointmentsByIds" id="7feb5647-8a0d-4119-9059-10204a30aae7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7791889720000557",
  "birthDate": "2011-08-29",
  "appointmentId": [
    391927704348
  ]
}</con:request><con:originalUri>http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1c7d04a1-03cf-42c8-b620-c8ef571ef104" name="Valid HTTP Status Codes"><con:configuration><codes>500</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a582c6b-9964-4aef-adc7-3fae05426d82" name="Структура ошибки полностью соответствует ожидаемому"><con:configuration><path>$</path><content>{"error":{"code":"SERVER_ERROR","description":"Ошибка выполнения метода","type":"TECHNICAL","origin":"UNDERLYING_SERVICE_ERROR"}}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fed44b92-3ba0-4a2f-ae14-d2cc0595a276" name="error.code=SERVER_ERROR"><con:configuration><path>$.error.code</path><content>SERVER_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fed44b92-3ba0-4a2f-ae14-d2cc0595a276" name="error.description=Ошибка выполнения метода"><con:configuration><path>$.error.description</path><content>Ошибка выполнения метода</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fed44b92-3ba0-4a2f-ae14-d2cc0595a276" name="error.type=TECHNICAL"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fed44b92-3ba0-4a2f-ae14-d2cc0595a276" name="error.origin=UNDERLYING_SERVICE_ERROR"><con:configuration><path>$.error.origin</path><content>UNDERLYING_SERVICE_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/${#TestCase#tcId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Mock-saOrchestrator</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>388302</con:value></con:property></con:properties></con:testCase><con:testCase id="bb4e911a-cd62-47c5-8465-251729423b71" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Фильтр. в ответе оркестратора 1 страница - нет совпадений по фильтру_ID388441" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Post appointmentsByIds" id="9a7a34d4-7e90-4a4f-9319-742fcc8bf7ad"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/archiveAppointment/appointmentsByIds" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post appointmentsByIds" id="7feb5647-8a0d-4119-9059-10204a30aae7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7791889720000557",
  "birthDate": "2011-08-29",
  "appointmentId": [
    9,10,111,112
  ]
}</con:request><con:originalUri>http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/${#TestCase#tcId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Mock-saOrchestrator</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить ответ" id="7d2bbb01-23a9-4168-80bf-f279822d25f2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def response = context.expand('${Post appointmentsByIds#Response}')

def httpResponseHeaders = testRunner.testCase.getTestStepByName("Post appointmentsByIds").testRequest.response.responseHeaders
def httpStatus = httpResponseHeaders["#status#"]
def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

if(response!="") testRunner.fail("ответ метода Post appointmentsByIds не соответствует ожидаемому. Ожидаемый - пустой, фактический: "+response)
if(httpStatusCode !="204") testRunner.fail("статус код ответа  метода Post appointmentsByIds не соответствует ожидаемому. Ожидаемый =204, фактический: "+httpStatusCode)</script></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>388441</con:value></con:property></con:properties></con:testCase><con:testCase id="9eb629d5-37ca-455d-a832-e7e466cf2749" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Фильтр. в ответе оркестратора 1 страница - есть совпадения по всем appointmentId_ID388442" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Post appointmentsByIds" id="b752061a-f33f-45a7-822f-f70a98168079"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/archiveAppointment/appointmentsByIds" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post appointmentsByIds" id="7feb5647-8a0d-4119-9059-10204a30aae7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7791889720000557",
  "birthDate": "2011-08-29",
  "appointmentId": [
    ${#TestCase#appointmentsId}
  ]
}</con:request><con:originalUri>http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/${#TestCase#tcId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Mock-saOrchestrator</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить ответ" id="f40fe8e3-0100-4680-9948-6f50fc71323b"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

def compareLists(List list1, List list2){
        List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором -"+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков одинаковые"
        if(errors) fail("При сравнении списков были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
    }
    
def stringToIntegerList(String stringList){
   def list=stringList.split(',').collect{it as int}
   return list
  }
appointmentsId=testRunner.testCase.getPropertyValue("appointmentsId")
expAppointmentsList=stringToIntegerList(appointmentsId)

def postAppointmentsByIdsResponse = context.expand('${Post appointmentsByIds#Response}')
def postAppointmentsByIdsParsedResponse = new JsonSlurper().parseText(postAppointmentsByIdsResponse)
infoAppointments=postAppointmentsByIdsParsedResponse.appointmentList.id
log.info infoAppointments

def httpResponseHeaders = testRunner.testCase.getTestStepByName("Post appointmentsByIds").testRequest.response.responseHeaders
def httpStatus = httpResponseHeaders["#status#"]
def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]


if(httpStatusCode !="200") testRunner.fail("статус код ответа  метода Post appointmentsByIds не соответствует ожидаемому. Ожидаемый =204, фактический: "+httpStatusCode)

compareLists(expAppointmentsList,infoAppointments )]]></script></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>388442</con:value></con:property><con:property><con:name>appointmentsId</con:name><con:value>1,2,3,4,6,5,7,8,9,10</con:value></con:property></con:properties></con:testCase><con:testCase id="d23c996f-ba2a-4f37-8781-a1a8ad38dea2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Фильтр. в ответе оркестратора 1 страница - есть совпадения по части appointmentId_ID388443" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Post appointmentsByIds" id="bb49dc97-bcca-4a7d-8b3f-721b97486200"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/archiveAppointment/appointmentsByIds" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post appointmentsByIds" id="7feb5647-8a0d-4119-9059-10204a30aae7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7791889720000557",
  "birthDate": "2011-08-29",
  "appointmentId": [
    ${#TestCase#appointmentsId}
  ]
}</con:request><con:originalUri>http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/${#TestCase#tcId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Mock-saOrchestrator</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить ответ" id="3b5c34f0-f889-4094-9a75-1698759bfac0"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

def compareLists(List list1, List list2){
        List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором -"+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков одинаковые"
        if(errors) fail("При сравнении списков были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
    }
    
def stringToIntegerList(String stringList){
   def list=stringList.split(',').collect{it as int}
   return list
  }
appointmentsId=testRunner.testCase.getPropertyValue("appointmentsId")
expAppointmentsList=stringToIntegerList(appointmentsId)

def postAppointmentsByIdsResponse = context.expand('${Post appointmentsByIds#Response}')
def postAppointmentsByIdsParsedResponse = new JsonSlurper().parseText(postAppointmentsByIdsResponse)
infoAppointments=postAppointmentsByIdsParsedResponse.appointmentList.id
log.info infoAppointments

def httpResponseHeaders = testRunner.testCase.getTestStepByName("Post appointmentsByIds").testRequest.response.responseHeaders
def httpStatus = httpResponseHeaders["#status#"]
def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]


if(httpStatusCode !="200") testRunner.fail("статус код ответа  метода Post appointmentsByIds не соответствует ожидаемому. Ожидаемый =204, фактический: "+httpStatusCode)

compareLists(expAppointmentsList,infoAppointments )]]></script></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>388443</con:value></con:property><con:property><con:name>appointmentsId</con:name><con:value>10,2,5,7,8,3</con:value></con:property></con:properties></con:testCase><con:testCase id="7f81cdd1-3de7-41ee-8e89-df93aa359aad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Фильтр. в ответе оркестратора 2 страницы - есть совпадения на обеих страницах_ID388444" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Post appointmentsByIds" id="096c1165-dc44-4872-9d7f-2e1aaa7b3dcf"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/archiveAppointment/appointmentsByIds" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post appointmentsByIds" id="7feb5647-8a0d-4119-9059-10204a30aae7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7791889720000557",
  "birthDate": "2011-08-29",
  "appointmentId": [
   111,112
  ]
}</con:request><con:originalUri>http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/${#TestCase#tcId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Mock-saOrchestrator</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить ответ" id="46a77e79-87f0-41a6-bcc0-5b4f1635cef2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def response = context.expand('${Post appointmentsByIds#Response}')

def httpResponseHeaders = testRunner.testCase.getTestStepByName("Post appointmentsByIds").testRequest.response.responseHeaders
def httpStatus = httpResponseHeaders["#status#"]
def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

if(response!="") testRunner.fail("ответ метода Post appointmentsByIds не соответствует ожидаемому. Ожидаемый - пустой, фактический: "+response)
if(httpStatusCode !="204") testRunner.fail("статус код ответа  метода Post appointmentsByIds не соответствует ожидаемому. Ожидаемый =204, фактический: "+httpStatusCode)</script></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>388444</con:value></con:property></con:properties></con:testCase><con:testCase id="0c8f2e23-d3b0-41bd-a4ed-aaab560a5ab5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг всех типов. у appointment все параметры_ID388450" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Post appointmentsByIds" id="4596a051-13d5-4966-89a7-03b68702802a"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/archiveAppointment/appointmentsByIds" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post appointmentsByIds" id="7feb5647-8a0d-4119-9059-10204a30aae7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7791889720000557",
  "birthDate": "2011-08-29",
  "appointmentId": [
    ${#TestCase#appointmentsId}
  ]
}</con:request><con:originalUri>http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/${#TestCase#tcId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Mock-saOrchestrator</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить, что в ответе все нужные appointment" id="c7984699-688e-4aab-99d2-a5456ffeb7b2"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

def compareLists(List list1, List list2){
        List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором -"+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков одинаковые"
        if(errors) testRunner.fail("При сравнении списков были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
    }
    
def stringToIntegerList(String stringList){
   def list=stringList.split(',').collect{it as int}
   return list
  }
appointmentsId=testRunner.testCase.getPropertyValue("appointmentsId")
expAppointmentsList=stringToIntegerList(appointmentsId)

def postAppointmentsByIdsResponse = context.expand('${Post appointmentsByIds#Response}')
def postAppointmentsByIdsParsedResponse = new JsonSlurper().parseText(postAppointmentsByIdsResponse)
infoAppointments=postAppointmentsByIdsParsedResponse.appointmentList.id
log.info infoAppointments

def httpResponseHeaders = testRunner.testCase.getTestStepByName("Post appointmentsByIds").testRequest.response.responseHeaders
def httpStatus = httpResponseHeaders["#status#"]
def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]


if(httpStatusCode !="200") testRunner.fail("статус код ответа  метода Post appointmentsByIds не соответствует ожидаемому. Ожидаемый =204, фактический: "+httpStatusCode)

compareLists(expAppointmentsList,infoAppointments )]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг" id="6c1e7dbd-00da-4d13-98b1-9add8ed66108"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
import groovy.json.JsonSlurper
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

tcId=testRunner.testCase.getPropertyValue("tcId")
path=testRunner.testCase.testSuite.getPropertyValue("path")
fullPath="/"+tcId+path
mock=sql.firstRow("select response from template_response where \"path\"= '"+fullPath+"'").response

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkOptionalParameter(String paramName, def expValue, def currentValue,boolean bFormat=false, boolean stringValue=true){
	nullValue = stringValue ? "" : null 
	if(expValue == nullValue){
		checkParameter(paramName, null, currentValue)
	}
	else{
		if(bFormat){
			expValue=expValue.toBoolean()
		}
		checkParameter(paramName, expValue, currentValue)
	}
}

getArchivedAppointmentsResponse = context.expand(mock)
getArchivedAppointmentsParsedResponse = new XmlSlurper().parseText(getArchivedAppointmentsResponse)
sarResult=getArchivedAppointmentsParsedResponse.Body.getArchivedAppointmentsResponse.result
sarAppointments= sarResult.appointment
def postAppointmentsByIdsResponse = context.expand('${Post appointmentsByIds#Response}')
def postAppointmentsByIdsParsedResponse = new JsonSlurper().parseText(postAppointmentsByIdsResponse)
infoAppointments=postAppointmentsByIdsParsedResponse.appointmentList

for(int i=0; i&lt;sarAppointments.size(); i++){
	sarApp=sarAppointments[i]
	infoAppointments.each{
		if(sarApp.id.toLong() == it.id){
			log.info "проверяю маппинг для appointmeте с id ="+sarApp.id
			checkOptionalParameter("number",sarApp.number.toString(),it.number )
			checkOptionalParameter("liveQueueTicketId",sarApp.liveQueueTicketId.toLong(),it.liveQueueTicketId )
			checkOptionalParameter("liveQueueTicketNumber",sarApp.liveQueueTicketNumber.toString(),it.liveQueueTicketNumber )
			checkParameter("lpuId",sarApp.lpuId.toLong(),it.lpuId)
			checkOptionalParameter("typeLpu",sarApp.typeLpu.toString(),it.typeLpu )
			checkOptionalParameter("nameLpu",sarApp.nameLpu.toString(),it.nameLpu )
			checkParameter("lpuAddress",sarApp.lpuAddress.toString(),it.lpuAddress)
			checkParameter("startTime",sarApp.startTime.toString(),it.startTime.toString())
			checkParameter("endTime",sarApp.endTime.toString(),it.endTime.toString())
			checkParameter("type",sarApp.type.toString(),it.type)
			checkOptionalParameter("enableCancel",sarApp.enableCancel.toString(),it.enableCancel, true )
			checkOptionalParameter("enableShift",sarApp.enableShift.toString(),it.enableShift, true )
			checkParameter("availableResourceId",sarApp.availableResourceId.toLong(),it.availableResourceId)
			checkParameter("complexResourceId",sarApp.complexResourceId.toLong(),it.complexResourceId)
			checkOptionalParameter("roomId",sarApp.roomId.toLong(),it.roomId )
			checkParameter("roomNumber",sarApp.roomNumber.toString(),it.roomNumber)
			checkOptionalParameter("addressPointId",sarApp.addressPointId.toLong(),it.addressPointId )
			if(sarApp.toDoctor.toString() != ""){
				checkParameter("toLdp",null ,it.toLdp)
				checkParameter("toBM",null ,it.toBM)
				checkParameter("toDoctor.specialityId",sarApp.toDoctor.specialityId.toLong(),it.toDoctor.specialityId)
				checkParameter("toDoctor.specialityName",sarApp.toDoctor.specialityName.toString(),it.toDoctor.specialityName)
				checkOptionalParameter("toDoctor.doctorFio",sarApp.toDoctor.doctorFio.toString(),it.toDoctor.doctorFio)
				checkParameter("toDoctor.receptionTypeId",sarApp.toDoctor.receptionTypeId.toLong(),it.toDoctor.receptionTypeId)
			}
			if(sarApp.toLdp.toString() != ""){
				checkParameter("toDoctor",null ,it.toDoctor)
				checkParameter("toBM",null ,it.toBM)
				checkParameter("toLdp.specialityId",sarApp.toLdp.specialityId.toLong(),it.toLdp.specialityId)
				checkParameter("toLdp.ldpTypeName",sarApp.toLdp.ldpTypeName.toString(),it.toLdp.ldpTypeName)
				checkOptionalParameter("toLdp.countAssignmentProcedures",sarApp.toLdp.countAssignmentProcedures.toInteger(),it.toLdp.countAssignmentProcedures)
			}		
			if(sarApp.toBM.toString() != ""){
				checkParameter("toDoctor",null ,it.toDoctor)
				checkParameter("toLdp",null ,it.toLdp)
				checkParameter("toBM.id",sarApp.toBM.id.toLong(),it.toBM.id)
				checkParameter("toBM.name",sarApp.toBM.name.toString(),it.toBM.name)
			}			
			checkOptionalParameter("statusId",sarApp.statusId.toInteger(),it.statusId )
			if(sarApp.cancelInfo.toString() != ""){
					checkOptionalParameter("cancelInfo.cancelReasonId",sarApp.cancelInfo.cancelReasonId.toLong(),it.cancelInfo.cancelReasonId)
					checkParameter("cancelInfo.cancelReasonDesc",sarApp.cancelInfo.cancelReasonDesc.toString(),it.cancelInfo.cancelReasonDesc)
					cancelTime= it.cancelInfo.cancelTime ? it.cancelInfo.cancelTime.toString() : null 
					checkOptionalParameter("cancelInfo.cancelTime",sarApp.cancelInfo.cancelTime.toString(),cancelTime)
			}
			checkOptionalParameter("receptionFactId",sarApp.receptionFactId.toLong(),it.receptionFactId )
			if(sarApp.referral.toString() != ""){
				checkParameter("referral.referralId",sarApp.referral.referralId.toLong(),it.referral.referralId)
				checkParameter("referral.startTime",sarApp.referral.startTime.toString(),it.referral.startTime.toString())
				checkParameter("referral.endTime",sarApp.referral.endTime.toString(),it.referral.endTime.toString())
				checkOptionalParameter("referral.availableResourceId",sarApp.referral.availableResourceId.toLong(),it.referral.availableResourceId)
				checkOptionalParameter("referral.lpuId",sarApp.referral.lpuId.toLong(),it.referral.lpuId)
			}
			checkOptionalParameter("eno",sarApp.eno.toString(),it.eno)
		}
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>388450</con:value></con:property><con:property><con:name>appointmentsId</con:name><con:value>26,27,28</con:value></con:property></con:properties></con:testCase><con:testCase id="ba53fbfa-3f92-41f8-b408-e65151752c80" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг всех типов. у appointment только обязательные параметры_ID388449" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Post appointmentsByIds" id="466c88c7-6990-43dc-8ba0-7fc9f393c5a2"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/archiveAppointment/appointmentsByIds" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post appointmentsByIds" id="7feb5647-8a0d-4119-9059-10204a30aae7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7791889720000557",
  "birthDate": "2011-08-29",
  "appointmentId": [
    ${#TestCase#appointmentsId}
  ]
}</con:request><con:originalUri>http://application-emiasinfo1.emias.solit-clouds.ru/api/v2/archiveAppointment/appointmentsByIds</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/${#TestCase#tcId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Mock-saOrchestrator</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить, что в ответе все нужные appointment" id="e54ff083-fab9-496f-83c0-92ff160228ab"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

def compareLists(List list1, List list2){
        List logList=[]
        int errors=0
        if(list1.size() != list2.size()){
            String text="Списки имеют разное колличество элементов. в первом списке ="+list1.size()+", во втором -"+list2.size()
            logList << text
            errors=errors+1
        }
        else{
            String text="Списки имеют одинаковое колличество элементов равное "+list1.size()
            logList << text
        }
        list1.sort()
        list2.sort()
        if( list1 != list2){
            def dif1 = list1.toSet()-list2.toSet()
            def dif2 = list2.toSet()-list1.toSet()
            errors = errors + dif1.size() + dif2.size()
            if(dif1){
                String textDif="В списке 1 содержатся элементы, которых нет в списке 2. Количетсво таких элементов="+dif1.size()+", список этих элементов: "+dif1
                logList << textDif
            }
            if(dif2) {
                String textDif = "В списке 2 содержатся элементы, которых нет в списке 1. Количетсво таких элементов=" + dif2.size() + ", список этих элементов: " + dif2
                logList << textDif
            }
        }
        else logList << "Элементы списков одинаковые"
        if(errors) testRunner.fail("При сравнении списков были обнаружены несоответсвия. Их количество="+errors)
        logList.each{
            log.info(it)
        }
    }
    
def stringToIntegerList(String stringList){
   def list=stringList.split(',').collect{it as int}
   return list
  }
appointmentsId=testRunner.testCase.getPropertyValue("appointmentsId")
expAppointmentsList=stringToIntegerList(appointmentsId)

def postAppointmentsByIdsResponse = context.expand('${Post appointmentsByIds#Response}')
def postAppointmentsByIdsParsedResponse = new JsonSlurper().parseText(postAppointmentsByIdsResponse)
infoAppointments=postAppointmentsByIdsParsedResponse.appointmentList.id
log.info infoAppointments

def httpResponseHeaders = testRunner.testCase.getTestStepByName("Post appointmentsByIds").testRequest.response.responseHeaders
def httpStatus = httpResponseHeaders["#status#"]
def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]


if(httpStatusCode !="200") testRunner.fail("статус код ответа  метода Post appointmentsByIds не соответствует ожидаемому. Ожидаемый =204, фактический: "+httpStatusCode)

compareLists(expAppointmentsList,infoAppointments )]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг" id="ae6eb18a-b6b3-4235-8aaf-ecc6fa9042a3"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
import groovy.json.JsonSlurper
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

tcId=testRunner.testCase.getPropertyValue("tcId")
path=testRunner.testCase.testSuite.getPropertyValue("path")
fullPath="/"+tcId+path
mock=sql.firstRow("select response from template_response where \"path\"= '"+fullPath+"'").response

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkOptionalParameter(String paramName, def expValue, def currentValue,boolean bFormat=false, boolean stringValue=true){
	nullValue = stringValue ? "" : null 
	if(expValue == nullValue){
		checkParameter(paramName, null, currentValue)
	}
	else{
		if(bFormat){
			expValue=expValue.toBoolean()
		}
		checkParameter(paramName, expValue, currentValue)
	}
}

getArchivedAppointmentsResponse = context.expand(mock)
getArchivedAppointmentsParsedResponse = new XmlSlurper().parseText(getArchivedAppointmentsResponse)
sarResult=getArchivedAppointmentsParsedResponse.Body.getArchivedAppointmentsResponse.result
sarAppointments= sarResult.appointment
def postAppointmentsByIdsResponse = context.expand('${Post appointmentsByIds#Response}')
def postAppointmentsByIdsParsedResponse = new JsonSlurper().parseText(postAppointmentsByIdsResponse)
infoAppointments=postAppointmentsByIdsParsedResponse.appointmentList


for(int i=0; i&lt;sarAppointments.size(); i++){
	sarApp=sarAppointments[i]
	infoAppointments.each{
		if(sarApp.id.toLong() == it.id){
			log.info "проверяю маппинг для appointmeте с id ="+sarApp.id
			checkOptionalParameter("number",sarApp.number.toString(),it.number )
			checkOptionalParameter("liveQueueTicketId",sarApp.liveQueueTicketId.toLong(),it.liveQueueTicketId )
			checkOptionalParameter("liveQueueTicketNumber",sarApp.liveQueueTicketNumber.toString(),it.liveQueueTicketNumber )
			checkParameter("lpuId",sarApp.lpuId.toLong(),it.lpuId)
			checkOptionalParameter("typeLpu",sarApp.typeLpu.toString(),it.typeLpu )
			checkOptionalParameter("nameLpu",sarApp.nameLpu.toString(),it.nameLpu )
			checkParameter("lpuAddress",sarApp.lpuAddress.toString(),it.lpuAddress)
			checkParameter("startTime",sarApp.startTime.toString(),it.startTime.toString())
			checkParameter("endTime",sarApp.endTime.toString(),it.endTime.toString())
			checkParameter("type",sarApp.type.toString(),it.type)
			checkOptionalParameter("enableCancel",sarApp.enableCancel.toString(),it.enableCancel, true )
			checkOptionalParameter("enableShift",sarApp.enableShift.toString(),it.enableShift, true )
			checkParameter("availableResourceId",sarApp.availableResourceId.toLong(),it.availableResourceId)
			checkParameter("complexResourceId",sarApp.complexResourceId.toLong(),it.complexResourceId)
			checkOptionalParameter("roomId",sarApp.roomId.toLong(),it.roomId )
			checkParameter("roomNumber",sarApp.roomNumber.toString(),it.roomNumber)
			checkOptionalParameter("addressPointId",sarApp.addressPointId.toLong(),it.addressPointId )
			if(sarApp.toDoctor.toString() != ""){
				checkParameter("toLdp",null ,it.toLdp)
				checkParameter("toBM",null ,it.toBM)
				checkParameter("toDoctor.specialityId",sarApp.toDoctor.specialityId.toLong(),it.toDoctor.specialityId)
				checkParameter("toDoctor.specialityName",sarApp.toDoctor.specialityName.toString(),it.toDoctor.specialityName)
				checkOptionalParameter("toDoctor.doctorFio",sarApp.toDoctor.doctorFio.toString(),it.toDoctor.doctorFio)
				checkParameter("toDoctor.receptionTypeId",sarApp.toDoctor.receptionTypeId.toLong(),it.toDoctor.receptionTypeId)
			}
			if(sarApp.toLdp.toString() != ""){
				checkParameter("toDoctor",null ,it.toDoctor)
				checkParameter("toBM",null ,it.toBM)
				checkParameter("toLdp.specialityId",sarApp.toLdp.specialityId.toLong(),it.toLdp.specialityId)
				checkParameter("toLdp.ldpTypeName",sarApp.toLdp.ldpTypeName.toString(),it.toLdp.ldpTypeName)
				checkOptionalParameter("toLdp.countAssignmentProcedures",sarApp.toLdp.countAssignmentProcedures.toInteger(),it.toLdp.countAssignmentProcedures)
			}		
			if(sarApp.toBM.toString() != ""){
				checkParameter("toDoctor",null ,it.toDoctor)
				checkParameter("toLdp",null ,it.toLdp)
				checkParameter("toBM.id",sarApp.toBM.id.toLong(),it.toBM.id)
				checkParameter("toBM.name",sarApp.toBM.name.toString(),it.toBM.name)
			}			
			checkOptionalParameter("statusId",sarApp.statusId.toInteger(),it.statusId )
			if(sarApp.cancelInfo.toString() != ""){
					checkOptionalParameter("cancelInfo.cancelReasonId",sarApp.cancelInfo.cancelReasonId.toLong(),it.cancelInfo.cancelReasonId)
					checkParameter("cancelInfo.cancelReasonDesc",sarApp.cancelInfo.cancelReasonDesc.toString(),it.cancelInfo.cancelReasonDesc)
					cancelTime= it.cancelInfo.cancelTime ? it.cancelInfo.cancelTime.toString() : null 
					checkOptionalParameter("cancelInfo.cancelTime",sarApp.cancelInfo.cancelTime.toString(),cancelTime)
			}
			checkOptionalParameter("receptionFactId",sarApp.receptionFactId.toLong(),it.receptionFactId )
			if(sarApp.referral.toString() != ""){
				checkParameter("referral.referralId",sarApp.referral.referralId.toLong(),it.referral.referralId)
				checkParameter("referral.startTime",sarApp.referral.startTime.toString(),it.referral.startTime.toString())
				checkParameter("referral.endTime",sarApp.referral.endTime.toString(),it.referral.endTime.toString())
				checkOptionalParameter("referral.availableResourceId",sarApp.referral.availableResourceId.toLong(),it.referral.availableResourceId)
				checkOptionalParameter("referral.lpuId",sarApp.referral.lpuId.toLong(),it.referral.lpuId)
			}
			checkOptionalParameter("eno",sarApp.eno.toString(),it.eno)
		}
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tcId</con:name><con:value>388449</con:value></con:property><con:property><con:name>appointmentsId</con:name><con:value>26,27,28</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>path</con:name><con:value>/getArchivedAppointments</con:value></con:property></con:properties></con:testSuite><con:testSuite id="f5135ff8-ee11-47c8-b45c-f5695b428013" name="postArchiveAppointmentsList v4"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="4426f57d-eeb0-42c4-b426-fa201cd5978b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213988, 233374, 233375_ОС. Получение данных с исключением 3 записей" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать appointmentId записей с разными типами" id="7646dc33-db75-464d-a80b-21a6ecefd95e"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд моков
connection = testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response
getArchivedAppointmentsMock = new XmlSlurper().parseText(response)

appointments = getArchivedAppointmentsMock.Body.getArchivedAppointmentsResponse.result.appointment
appointmentCount = appointments.size()

def appointmentRECid
def appointmentBMid
def appointmentLDPid

// Записываем appointmentId с разными appointment.type
for(i=0; i&lt;appointmentCount; i++){
	if(appointments[i].type=="RECEPTION"){
		appointmentRECid = appointments.id[i]
		testRunner.testCase.setPropertyValue("appointmentRECid", appointmentRECid.toString())
		}
		if(appointments[i].type=="BM"){
		appointmentBMid = appointments.id[i]
		testRunner.testCase.setPropertyValue("appointmentBMid", appointmentBMid.toString())
		}
		if(appointments[i].type=="LDP"){
		appointmentLDPid = appointments.id[i]
		testRunner.testCase.setPropertyValue("appointmentLDPid", appointmentLDPid.toString())
		}
	}</script></con:config></con:testStep><con:testStep type="jdbc" name="Создать записи в f_deleted_archive_appointment" id="8df4ae19-ab29-45d3-ae15-004f252589a3"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>insert into f_deleted_archive_appointment (id, appointment_id, oms_number, birth_date, delete_date) values (nextval('f_deleted_archive_appointment_sequence'),'${#TestCase#appointmentRECid}', '${#TestCase#omsNumber}', '${#TestCase#birthDate}', '2024-01-27 12:26:25.818');
insert into f_deleted_archive_appointment (id, appointment_id, oms_number, birth_date, delete_date) values (nextval('f_deleted_archive_appointment_sequence'),'${#TestCase#appointmentBMid}', '${#TestCase#omsNumber}', '${#TestCase#birthDate}', '2024-02-27 12:26:25.818');
insert into f_deleted_archive_appointment (id, appointment_id, oms_number, birth_date, delete_date) values (nextval('f_deleted_archive_appointment_sequence'),'${#TestCase#appointmentLDPid}', '${#TestCase#omsNumber}', '${#TestCase#birthDate}', '2024-03-27 12:26:25.818');</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="2ae9da52-524c-4a6c-82bc-5c9ec4804bb4"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/233374" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a2feb98c-ff2f-4066-8bd8-2dd83858aa8a" name="Not Contains appointmentRECid"><con:configuration><token>${#TestCase#appointmentRECid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a2feb98c-ff2f-4066-8bd8-2dd83858aa8a" name="Not Contains appointmentBMid"><con:configuration><token>${#TestCase#appointmentBMid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a2feb98c-ff2f-4066-8bd8-2dd83858aa8a" name="Not Contains appointmentLDPid"><con:configuration><token>${#TestCase#appointmentLDPid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга (мок)" id="d3d08834-89b9-4fef-8d96-cf341aba5ebc"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
path = testRunner.testCase.getPropertyValue("path") // В переменной path записан путь до мока "/mock/305855/getDoctorsInfo"
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getArchivedAppointments = new XmlSlurper().parseText(response)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder(response)
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
log.info pageTotal
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="jdbc" name="Удалить записи в f_deleted_archive_appointment" id="42c4fe73-09ce-402a-85dc-3c1f8291a674"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>delete from f_deleted_archive_appointment where appointment_id='${#TestCase#appointmentRECid}';
delete from f_deleted_archive_appointment where appointment_id='${#TestCase#appointmentBMid}';
delete from f_deleted_archive_appointment where appointment_id='${#TestCase#appointmentLDPid}';</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>10</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391880703998, 391872492723, 391882573598</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-01-19</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/233374/getArchivedAppointments</con:value></con:property><con:property><con:name>appointmentRECid</con:name><con:value>391884015780</con:value></con:property><con:property><con:name>appointmentBMid</con:name><con:value>391877170833</con:value></con:property><con:property><con:name>appointmentLDPid</con:name><con:value>391884365300</con:value></con:property></con:properties></con:testCase><con:testCase id="4b601884-566c-4e28-9fc1-59f334e3c200" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="237458_ОС. Получение данных без исключения" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="9f8c28d7-3219-4090-8f68-5b002c2c947b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/233374" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка количества записей" id="60c63f26-1974-4cd4-8cf8-fab5c6eb1d45"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
path = testRunner.testCase.getPropertyValue("path") // В переменной path записан путь до мока "/mock/305855/getDoctorsInfo"
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getArchivedAppointments = new XmlSlurper().parseText(response)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

suppAppointmentsSize = appointments.size()

appointmentCountINFO = postArchiveAppointmentList.payload.appointmentList.size()

log.info appointmentCountINFO
log.info suppAppointmentsSize
assert appointmentCountINFO == suppAppointmentsSize

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга (мок)" id="6d60c833-e70e-4683-b5d0-3bf69c6841f9" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
path = testRunner.testCase.getPropertyValue("path") // В переменной path записан путь до мока "/mock/305855/getDoctorsInfo"
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getArchivedAppointments = new XmlSlurper().parseText(response)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointmentList
log.info appointments
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder(response)
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		toBmArray = [bmId, bmName]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	cancelInfo = appointments[i].cancelInfo != "" ? appointments[i].cancelInfo : null
	cancelInfoArray = [null]
	if (cancelInfo != null){
		cancelReasonId = cancelInfo.cancelReasonId
		cancelReasonDesc = cancelInfo.cancelReasonDesc
		cancelTime = cancelInfo.cancelTime
		}
//	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
//	if (reason == null){
//		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
//	}
//	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, cancelInfoArray]
	suppMap.put(id, appointment)
}
log.info suppMap

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].statusId
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpTypeId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBM
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoToBmArray = [infoBmId, infoBmName]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoCancelInfo = infoAppointments[j].cancelInfo
	infoCancelInfoArray = [null]
	if (infoCancelInfo != null){
		cancelReasonId = infoAppointments[j].cancelInfo.cancelReasonId
	log.info cancelReasonId
		cancelReasonDesc = infoAppointments[j].cancelInfo.cancelReasonDesc
		cancelTime = infoAppointments[j].cancelInfo.cancelTime
	}
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoCancelInfoArray]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount
log.info suppMap.size()
log.info infoMap.size()
assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>10</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391880703998, 391872492723, 391882573598</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-01-19</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/233374/getArchivedAppointments</con:value></con:property><con:property><con:name>appointmentRECid</con:name><con:value>391884015780</con:value></con:property><con:property><con:name>appointmentBMid</con:name><con:value>391877170833</con:value></con:property><con:property><con:name>appointmentLDPid</con:name><con:value>391884365300</con:value></con:property></con:properties></con:testCase><con:testCase id="2733b349-93d7-48de-83d5-9adb4c78e8a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение данных с исключением 3 записей, BM" searchProperties="true" disabled="true"><con:settings/><con:testStep type="request" name="getArchivedAppointments" id="c1d5ede5-68ac-460b-a2ae-a45349a490dc"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="3" pageSize="22">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Записать appointmentId записей с разными типами" id="ead82c3c-46ef-4847-b6a5-f0727646f14a"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд моков
connection = testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response
getArchivedAppointmentsMock = new XmlSlurper().parseText(response)

appointments = getArchivedAppointmentsMock.Body.getArchivedAppointmentsResponse.result.appointment
appointmentCount = appointments.size()

def appointmentRECid
def appointmentBMid
def appointmentLDPid

// Записываем appointmentId с разными appointment.type
for(i=0; i&lt;appointmentCount; i++){
	if(appointments[i].type=="RECEPTION"){
		appointmentRECid = appointments.id[i]
		testRunner.testCase.setPropertyValue("appointmentRECid", appointmentRECid.toString())
		}
		if(appointments[i].type=="BM"){
		appointmentBMid = appointments.id[i]
		testRunner.testCase.setPropertyValue("appointmentBMid", appointmentBMid.toString())
		}
		if(appointments[i].type=="LDP"){
		appointmentLDPid = appointments.id[i]
		testRunner.testCase.setPropertyValue("appointmentLDPid", appointmentLDPid.toString())
		}
	}</script></con:config></con:testStep><con:testStep type="jdbc" name="Создать записи в f_deleted_archive_appointment" id="c6724dd1-f8b7-40e0-beb2-02ea989d821f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>insert into f_deleted_archive_appointment (id, appointment_id, oms_number, birth_date, delete_date) values (nextval('f_deleted_archive_appointment_sequence'),'${#TestCase#appointmentRECid}', '${#TestCase#omsNumber}', '${#TestCase#birthDate}', '2024-01-27 12:26:25.818');
insert into f_deleted_archive_appointment (id, appointment_id, oms_number, birth_date, delete_date) values (nextval('f_deleted_archive_appointment_sequence'),'${#TestCase#appointmentBMid}', '${#TestCase#omsNumber}', '${#TestCase#birthDate}', '2024-02-27 12:26:25.818');
insert into f_deleted_archive_appointment (id, appointment_id, oms_number, birth_date, delete_date) values (nextval('f_deleted_archive_appointment_sequence'),'${#TestCase#appointmentLDPid}', '${#TestCase#omsNumber}', '${#TestCase#birthDate}', '2024-03-27 12:26:25.818');</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="8d80e266-dc26-470e-a0e6-12da0e6f011c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/233374" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a2feb98c-ff2f-4066-8bd8-2dd83858aa8a" name="Not Contains appointmentRECid"><con:configuration><token>${#TestCase#appointmentRECid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a2feb98c-ff2f-4066-8bd8-2dd83858aa8a" name="Not Contains appointmentBMid"><con:configuration><token>${#TestCase#appointmentBMid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a2feb98c-ff2f-4066-8bd8-2dd83858aa8a" name="Not Contains appointmentLDPid"><con:configuration><token>${#TestCase#appointmentLDPid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга (мок)" id="1e0e0007-18e7-4c01-a285-02c5213d61c7"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
path = testRunner.testCase.getPropertyValue("path") // В переменной path записан путь до мока "/mock/305855/getDoctorsInfo"
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getArchivedAppointments = new XmlSlurper().parseText(response)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="8b43983a-d2bd-4072-8dbf-efd365985cfe"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="jdbc" name="Удалить записи в f_deleted_archive_appointment" id="b2277039-d09c-41fd-a691-481eb24492f9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>delete from f_deleted_archive_appointment where appointment_id='${#TestCase#appointmentRECid}';
delete from f_deleted_archive_appointment where appointment_id='${#TestCase#appointmentBMid}';
delete from f_deleted_archive_appointment where appointment_id='${#TestCase#appointmentLDPid}';</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>10</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391880703998, 391872492723, 391882573598</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-01-19</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/233374/getArchivedAppointments</con:value></con:property><con:property><con:name>appointmentRECid</con:name><con:value>391884015780</con:value></con:property><con:property><con:name>appointmentBMid</con:name><con:value>391877170833</con:value></con:property><con:property><con:name>appointmentLDPid</con:name><con:value>391884365300</con:value></con:property></con:properties></con:testCase><con:testCase id="e5cbc1df-c81f-42bc-a04d-be9a20a46de9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение данных с исключением 3 записей, RECEPTION" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="a25f1244-de78-45b5-af8c-fac9ba5a6c11"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="3f5de741-6835-4080-97ba-eb92b773f397"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'RECEPTION' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="3c05a3f2-0f65-4ad0-b046-5ed8ac3d06f6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="7923d92e-5ab1-4ce5-ba59-8eb7e771c3f9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента, генерация pageSize" id="f4aedc31-90ce-4fb9-a786-430eeb6c6846"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 31) + 20
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="378daf78-62d7-49b4-aa18-af80cdae5060"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="60a204fb-013d-4f4d-8bc4-520ddd079291"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="jdbc" name="Проверить записи в БД ЕМИАС.ИНФО" id="dff965df-5437-43d1-abeb-7adc003141e0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>select count(*) from f_deleted_archive_appointment where oms_number = '${#TestCase#omsNumber}'</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Обработка количества записей" id="52fef287-549b-445b-95ba-869ef4814deb"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Количество записей = 0</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT = '0'</con:expression><con:targetStep>Добавить случаные записи в таблицу ЕМИАС.ИНФО</con:targetStep></con:condition><con:condition><con:name>Количество записей 3&lt;=x&lt;=5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT >= 3 and //*:COUNT &lt;= 5</con:expression><con:targetStep>postArchiveAppointmentList</con:targetStep></con:condition><con:condition><con:name>Количество записей x&lt;2 or x>5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT &lt; 3 or  //*:COUNT > 5</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Добавить случаные записи в таблицу ЕМИАС.ИНФО" id="a5110fb9-2f0b-4167-8f16-7673fb17fee2"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.text.SimpleDateFormat

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

//Выбор 3 случайных записей и добавление в таблицу f_deleted_archive_appointment
appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
sizeAppointment = appointments.size()
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S").format(Calendar.getInstance().getTime())
testRunner.TestCase.setPropertyValue("timeStamp", timeStamp)
appArray = []
notReceptionArray = [ ]
count=0

for (j = 0; j<sizeAppointment; j++){
	if (appointments[j].type != "RECEPTION"){
		notReceptionArray<<appointments[j].id
	}
}
	log.info notReceptionArray
for (int i = 0; notReceptionArray.size()>=3 ? i<3 : i<notReceptionArray.size(); i++){
	n = Math.abs(new Random().nextInt() % (notReceptionArray.size()))
	if (notReceptionArray.size()<=3) { n=i }
	if (notReceptionArray[n] != "RECEPTION"){
		appArray<<notReceptionArray[n]
		values = "VALUES((select max(id)+1 from f_deleted_archive_appointment), "+notReceptionArray[n]+", "+omsNumber+", '"+birthDate+"', '"+timeStamp+"')"
		sql.execute('INSERT INTO f_deleted_archive_appointment ' + columns + ' ' + values)
		notReceptionArray.remove(n)
		count+=1
	}
}
strArray = appArray.toString().replace("[", "").replace("]","")
testRunner.TestCase.setPropertyValue("appointments", strArray)
log.info count
]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="dc52191d-7a1e-49a5-865a-4e7815ff1b75"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="b01322b9-248f-4610-b5ad-f3842ce7f423"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 50
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="1d2728d0-2505-43fa-ad64-5284b0dd4442"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить записи из БД" id="8c5c5858-260c-42ea-91d5-7dcd2d569ef0"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.ArrayList
//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "
str = testRunner.testCase.getPropertyValue("appointments").split(",")
size = str.size()
appointmentArray = [ ]
for (j = 0; j&lt;size; j++){
	appointmentArray&lt;&lt;str[j].toBigInteger()
}
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

for (i = 0; i&lt;appointmentArray.size(); i++){
	query="delete from f_deleted_archive_appointment where appointment_id = "+appointmentArray[i] +" and  delete_date = "+" '$timeStamp' "
	log.info query
	sql.execute(query)
}


</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>18977801</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700005061655202</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2002-12-15</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>38</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-04-07 10:59:01.203</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2021-01-11</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2023-01-11</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391894369298, 391893407848, 391893885498</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="4a81997f-beae-4157-99e6-e27de1cb1959" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение данных с исключением 3 записей, LDP" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="e42364ad-adc6-42c0-9a36-420193518ede"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="b3fc7b76-30a5-44c8-aebb-1eac0f04ca7f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'LDP' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="0af2ba4a-f298-4938-96d4-ed60671a8e1d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="eba55137-25c0-43d9-b385-5197d66cd7b8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента, генерация pageSize" id="3da6baed-8da7-4e8a-8474-59c77d403a65"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 31) + 20
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="8d999ac2-d859-4e01-bb65-264624258e9c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="fd3a0744-0848-4b36-a13c-ca5920d3004f"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="jdbc" name="Проверить записи в БД ЕМИАС.ИНФО" id="e27f54f1-0c6f-47f6-aaed-04f571dfe809"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>select count(*) from f_deleted_archive_appointment where oms_number = '${#TestCase#omsNumber}'</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Обработка количества записей" id="cbd15eac-0d9d-46c0-a119-a698051caeb2"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Количество записей = 0</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT = '0'</con:expression><con:targetStep>Добавить случаные записи в таблицу ЕМИАС.ИНФО</con:targetStep></con:condition><con:condition><con:name>Количество записей 3&lt;=x&lt;=5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT >= 3 and //*:COUNT &lt;= 5</con:expression><con:targetStep>postArchiveAppointmentList</con:targetStep></con:condition><con:condition><con:name>Количество записей x&lt;2 or x>5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT &lt; 3 or  //*:COUNT > 5</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Добавить случаные записи в таблицу ЕМИАС.ИНФО" id="f3f750a8-6e7b-4fad-b669-f7a1d68bd351"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.text.SimpleDateFormat

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

//Выбор 3 случайных записей и добавление в таблицу f_deleted_archive_appointment
appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
sizeAppointment = appointments.size()
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S").format(Calendar.getInstance().getTime())
testRunner.TestCase.setPropertyValue("timeStamp", timeStamp)
appArray = []
notLdpArray = [ ]
count=0

for (j = 0; j<sizeAppointment; j++){
	if (appointments[j].type != "LDP"){
		notLdpArray<<appointments[j].id
	}
}
	log.info notLdpArray
for (int i = 0; notLdpArray.size()>=3 ? i<3 : i<notLdpArray.size(); i++){
	n = Math.abs(new Random().nextInt() % (notLdpArray.size()))
	if (notLdpArray.size()<=3) { n=i }
	if (notLdpArray[n] != "BM"){
		appArray<<notLdpArray[n]
		values = "VALUES((select max(id)+1 from f_deleted_archive_appointment), "+notLdpArray[n]+", "+omsNumber+", '"+birthDate+"', '"+timeStamp+"')"
		sql.execute('INSERT INTO f_deleted_archive_appointment ' + columns + ' ' + values)
		notLdpArray.remove(n)
		count+=1
	}
}
strArray = appArray.toString().replace("[", "").replace("]","")
testRunner.TestCase.setPropertyValue("appointments", strArray)
log.info count
]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="d3a2c1a9-aaf0-4243-b7df-4063b33d504f"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="0c6c91ae-6c89-4c8c-8e27-07067fcfecc0"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": ${#TestCase#pageSize}
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="7fc24bf6-ad52-4761-9cc5-0ab348fb6552"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить записи из БД" id="a3914f59-f68d-40f7-afa4-580576b17e5b"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.ArrayList
//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "
str = testRunner.testCase.getPropertyValue("appointments").split(",")
size = str.size()
appointmentArray = [ ]
for (j = 0; j&lt;size; j++){
	appointmentArray&lt;&lt;str[j].toBigInteger()
}
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

for (i = 0; i&lt;appointmentArray.size(); i++){
	query="delete from f_deleted_archive_appointment where appointment_id = "+appointmentArray[i] +" and  delete_date = "+" '$timeStamp' "
	log.info query
	sql.execute(query)
}


</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>22148259</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700008107274303</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2003-03-27</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>28</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-04-07 11:05:02.54</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2021-01-11</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2023-01-11</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391874063023, 391874056873, 378258542148</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="d3a09882-06e2-417a-ab68-5d3d3ce6dcc2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение данных с исключением 7 записей, BM" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="97e24bb7-b3cc-4237-8784-523b4a353a0b" disabled="true"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="081dcaf9-66f3-45b8-a2b4-2230ef6729c0" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="bace6a6e-e951-422d-ae20-94050e632ef3" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="99171762-9d03-4f0e-8a1d-da2fb5f16275" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента, генерация pageSize" id="759006e7-63aa-40ca-b7da-36a7c60d9dff" disabled="true"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="aa114c21-7d2a-463d-8b71-7db59e4a06b8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="${#TestCase#pageNumber}" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="c5b662cb-c4e5-4e1b-934e-0bf44f03eaf7"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount&lt;=7</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="jdbc" name="Проверить записи в БД ЕМИАС.ИНФО" id="2d633606-5694-43a5-8b52-4f6ab80df446"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>select count(*) from f_deleted_archive_appointment where oms_number = '${#TestCase#omsNumber}'</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Обработка количества записей" id="30b141d3-f944-48b1-838a-84225b279378"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>Количество записей = 0</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT = '0'</con:expression><con:targetStep>Добавить случаные записи в таблицу ЕМИАС.ИНФО</con:targetStep></con:condition><con:condition><con:name>Количество записей 3&lt;=x&lt;=5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT >= 3 and //*:COUNT &lt;= 5</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>Количество записей x&lt;2 or x>5</con:name><con:type>XPATH</con:type><con:expression>//*:COUNT &lt; 3 or  //*:COUNT > 5</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="Добавить случаные записи в таблицу ЕМИАС.ИНФО" id="bc1e1f3a-3fa8-404f-a0ee-9f7bbbcb0fc5"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.text.SimpleDateFormat

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

//Выбор 3 случайных записей и добавление в таблицу f_deleted_archive_appointment
appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
sizeAppointment = appointments.size()
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S").format(Calendar.getInstance().getTime())
testRunner.TestCase.setPropertyValue("timeStamp", timeStamp)
appArray = []
notBmArray = [ ]
count=0

for (j = 0; j<sizeAppointment; j++){
	if (appointments[j].type != "BM"){
		notBmArray<<appointments[j].id
	}
}
	log.info notBmArray
for (int i = 0;  i<7; i++){
	n = Math.abs(new Random().nextInt() % (notBmArray.size()))
		appArray<<notBmArray[n]
		values = "VALUES((select max(id)+1 from f_deleted_archive_appointment), "+notBmArray[n]+", "+omsNumber+", '"+birthDate+"', '"+timeStamp+"')"
		sql.execute('INSERT INTO f_deleted_archive_appointment ' + columns + ' ' + values)
		notBmArray.remove(n)
		count+=1
}
strArray = appArray.toString().replace("[", "").replace("]","")
testRunner.TestCase.setPropertyValue("appointments", strArray)
log.info count
]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="283e0032-4f67-4db2-aee3-fecdfa73b6f6"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="13e383d7-5041-4940-936c-2044c64ba917"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="e9570824-2889-4755-8320-c0bfdd8ece84"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")
testRunner.testCase.setPropertyValue("pageSize", "25")
testRunner.testCase.setPropertyValue("pageNumber", "0")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

//Формирование для первой запрашиваемой страницы
suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}
log.info "suppMap1" + suppMap

//Формирование для второй запрашиваемой страницы
testRunner.testCase.setPropertyValue("pageNumber", "1")
testRunner.runTestStepByName("getArchivedAppointments")
getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)
appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
suppAppointmentsSize = appointments.size()
InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
log.info pageNumber
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

log.info "suppMap2" + suppMap

//Проверка ответа от ЕМИАС.ИНФО
infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap
testRunner.testCase.setPropertyValue("pageNumber", "0")
testRunner.runTestStepByName("getArchivedAppointments")
payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount
assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="groovy" name="Удалить записи из БД" id="5baaaf8d-d853-4fed-b6ab-fc6acf2f2a8a"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.ArrayList
//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)
columns = "(id, appointment_id, oms_number, birth_date, delete_date) "
str = testRunner.testCase.getPropertyValue("appointments").split(",")
size = str.size()
appointmentArray = [ ]
for (j = 0; j&lt;size; j++){
	appointmentArray&lt;&lt;str[j].toBigInteger()
}
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

for (i = 0; i&lt;appointmentArray.size(); i++){
	query="delete from f_deleted_archive_appointment where appointment_id = "+appointmentArray[i] +" and  delete_date = "+" '$timeStamp' "
	log.info query
	sql.execute(query)
}


</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>16443631</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7747040882000879</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1959-12-17</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-04-07 11:06:07.659</con:value></con:property><con:property><con:name>appointments</con:name><con:value>353836307898, 386487565023, 372504766148, 379276868373, 386480691373, 386481722523, 381779426373</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-07-23</con:value></con:property><con:property><con:name>pageNumber</con:name><con:value>0</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>25</con:value></con:property></con:properties></con:testCase><con:testCase id="a0ada559-7c0e-4d03-9b76-1617f54706ca" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение данных без исключения" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="317ca636-4256-4474-a474-8100e257a06c"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="782dd1ee-5a1f-4697-8b37-27a660dc2a5e"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="13e9e225-a119-48cf-8ed8-adb3f5aacb89"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="3a05e8ac-b49d-4554-b450-33380aaef1c6"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента" id="a85114da-6d63-47e4-86a9-1cd89b5eb36b"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="5d763b7e-e242-455b-bd2d-f0837c9a3a09"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="08676617-ef09-4bab-8236-764f70b39567"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="ed76bb64-157a-49e0-93a8-6651e6536d3a"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="54a48d8e-33b6-4073-a9a2-52a1cf12354d"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>19854194</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700004024730257</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1957-02-23</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>6</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-01-23 10:50:45.324</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391858035098, 391857999223, 391858028948</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="a47df3e0-0138-43b2-981d-4b15c419a96b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Размер страницы > 25 (Изменение размера на 25)" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="df05f688-5966-4347-b51a-b92de0db00d8"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="68edb4e8-32d0-47bc-896a-6e70b3e04da6"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="fc1f7063-7a67-4730-a103-2e0a1257e1be"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="007aef42-fe14-43b2-9792-214d744e6b13"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента" id="036fc425-c88b-456d-bf04-7ad1a7549466"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="5881007f-c672-49fd-8991-d62fe6ad44a3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="eafeac6c-4359-43d8-8da7-0f487736aa76"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="bdbf39f4-d646-4a5a-8743-52d98b4de74c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": ${=Math.abs(new Random().nextInt() % 25) + 26}
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="67633301-e51b-461e-bff7-a3f2382c8fee"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>16467186</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700005061030299</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1999-02-03</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>2</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-01-23 10:50:45.324</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391858035098, 391857999223, 391858028948</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="6b6ffe70-a370-474c-afe2-15a03cc8e874" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Размер страницы = 0 (Изменение размера на 25)" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="ebc79fbc-2ee6-47fb-8c38-be45c1f1bad6"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="21719ee6-af3a-428e-af42-05d610f55ccf"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="03efd013-df94-4a47-bc35-61e9944631e7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="b9d0e6c9-b7eb-4cb5-a25f-46e091414444"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента" id="ed7dd3b8-d77b-4a56-a886-cad0ff91f434"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="8757471d-a263-449c-b230-729c73ffb9d8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="cf0d2f15-3f65-4f3c-9fa4-f4dae7e996a7"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="db0ecbf3-aa8e-4c36-8963-22184a4ca5ef"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 0
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="fd0f79d0-c5ba-4efe-8d9d-07423b1e5d49"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>10575483</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7750200831000958</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1997-09-18</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>21</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-01-23 10:50:45.324</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391858035098, 391857999223, 391858028948</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="ac7b6d70-83c2-4097-886b-577b0ced4bd9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Номер страницы &lt; 0 (Изменение номера на 0)" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="5c0d81fc-4289-4bcc-94f5-df13115e2711"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="30fcf44b-4eba-49df-8d2d-e8adb508b883"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="57241e0b-c030-47c5-99b1-ee2c7176b8e9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="bc06183a-330a-4c04-930f-d4a1550d1a24"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента" id="1740d083-e8db-44a3-a0d8-6c5e789c2c10"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="e01a8cc5-0ca4-47ad-b05e-1fb3d8afa197"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="f6baef0a-417d-4535-9eca-84536f7453ec"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="2a0675a0-2963-44ac-ad95-8ad2311f5c28"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": ${=-Math.abs(new Random().nextInt() % 100) + 1},
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="c9e3e452-6330-45a4-8c00-219455aed011"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>10575483</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7750200831000958</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1997-09-18</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>16</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-01-23 10:50:45.324</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391858035098, 391857999223, 391858028948</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="27d7e8f2-a305-4704-9c87-c903321d87ce" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Размер страницы &lt; 0 (Изменение размера на 25)" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="2238443b-f200-4942-b71d-e4b7aeddca55"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="48fc67fb-b91f-46d6-9d16-5dd054064a43"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="91431991-b29d-484c-937f-ef756a6ff65d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="aa3a5557-75a2-406a-9900-4165013e0c00"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента" id="04038830-e04f-46a0-9924-3cef67c5680b"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageSize = Math.abs(new Random().nextInt() % 25) +1
testRunner.testCase.setPropertyValue( "pageSize",pageSize.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="cd83b72e-3dd9-4e25-8706-f6e27b62a1d4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="6b6af7b5-87a0-439f-bdd4-9adc58dc18f0"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition><con:condition><con:name>totalItemsCount = 0</con:name><con:type>XPATH</con:type><con:expression>//*:result/@*:totalItemsCount=0</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="cc3795cf-93cc-4086-aae7-c0f0427a8323"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": ${=-Math.abs(new Random().nextInt() % 100) + 1}
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="fd15bfe6-c67d-40e8-92d5-f75967c9f404"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>19854194</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700004024730257</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1957-02-23</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>1</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-01-23 10:50:45.324</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391858035098, 391857999223, 391858028948</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-10-07</con:value></con:property></con:properties></con:testCase><con:testCase id="f91ecdad-e0b0-4878-af8f-52f42e264cda" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Пустой Payload" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Записать дату 6 месяцев назад" id="0ba3ea84-f679-488f-ae7a-f45b0d3da08f"><con:settings/><con:config><script>import java.time.LocalDate
sixMonthsAgo = LocalDate.now().minusMonths(6).toString()
testRunner.testCase.setPropertyValue("sixMonthsAgo",sixMonthsAgo)</script></con:config></con:testStep><con:testStep type="jdbc" name="Получить случайный ID пациента с записями" id="768de064-8652-4779-8458-334479dea791"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT * FROM 
(SELECT * 
FROM
(SELECT PERSON_INSURANCE_CODE FROM TIME_PERIOD 
WHERE PERIOD_TYPE = 'BM' AND START_TIME > TIMESTAMP '${#TestCase#sixMonthsAgo} 00:00:00.000000' AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE)
WHERE PERSON_INSURANCE_CODE/10000000 &lt; 10 AND  PERSON_INSURANCE_CODE/10000000 > 0)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="613ff48a-62d9-4044-a58e-4cb840fd8aac" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="eb79713a-4887-4158-a607-9372ff1248fa"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить случайный ID пациента с записями</con:sourceStep><con:sourcePath>//*:PERSON_INSURANCE_CODE</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить oms и birthDate пациента" id="71763d4a-2dfe-466e-9705-1d4c7c4fae93"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_ID, OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, OMS_TEMP_ASSURANCE_NUMBER, BIRTH_DATE
FROM PATIENT WHERE PATIENT_ID = ${#TestCase#patientId}
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="JDBC Status" id="e6588f75-7ff7-4eb1-84e6-844b9ffda739" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС и birthDate пациента, генерация pageSize" id="47310480-0aa3-4263-987c-fe83705d4db0"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
import java.time.LocalDate
def PatientOmsResponse = context.expand('${Получить oms и birthDate пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
BIRTH_DATE =  PatientOms.ResultSet.Row.BIRTH_DATE.toString().split(" ")[0]

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
log.info BIRTH_DATE

testRunner.testCase.setPropertyValue( "birthDate",BIRTH_DATE)

pageNumber = Math.abs(new Random().nextInt() % 100) + 70
testRunner.testCase.setPropertyValue( "pageNumber",pageNumber.toString())

if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "omsNumber",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="request" name="getArchivedAppointments" id="2b99a323-7d95-4bde-8ed0-425e06212501"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="${#TestCase#pageNumber}" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="Обработка ошибок" id="461d0b05-d380-48ae-82b6-f596c844ec66"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>read timed out</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "Read timed out"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>UNDERLYING_SERVICE_ERROR</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "UNDERLYING_SERVICE_ERROR"</con:expression><con:targetStep>getArchivedAppointments</con:targetStep></con:condition><con:condition><con:name>PATIENT_NOT_FOUND</con:name><con:type>XPATH</con:type><con:expression>//*:Text = "PATIENT_NOT_FOUND"</con:expression><con:targetStep>Получить случайный ID пациента с записями</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="bdf25325-3f2d-4ee3-aee0-b067d53b664d"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="EI-Token" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": ${#TestCase#pageNumber},
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="cc60c261-d67b-4711-bfe2-247bf04fba03"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i<suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j<infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap<>(suppMap);
Map infoSortMap = new TreeMap<>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload
pagN = testRunner.testCase.getPropertyValue("pageNumber").toInteger()

assert payload.pageNumber == pagN
assert payload.pageTotal == 0
assert payload.pageSize == 0
assert payload.morePagesAvailable == false
assert payload.totalItemsCount == 0

assert suppMap.size() == infoMap.size()
assert suppMap.size() == 0 && infoMap.size() == 0
assert suppSortMap.toString() == infoSortMap.toString()
]]></script></con:config></con:testStep><con:setupScript/><con:properties><con:property><con:name>patientId</con:name><con:value>17557793</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700006045660966</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1966-09-16</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2020-12-27</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2022-12-27</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-11-03</con:value></con:property><con:property><con:name>pageNumber</con:name><con:value>149</con:value></con:property></con:properties></con:testCase><con:testCase id="023bb4a2-3084-4372-93a7-a3d1ecc421c6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="273615_АС2. SUDIR_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="archiveAppointment/list" id="147c1615-c0e2-423f-bff4-89d3799c980d"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="archiveAppointment/list" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"omsNumber": "123",
	"birthDate": "2021-03-03",
	  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
 }</con:request><con:originalUri>http://application-emiasinfo2.emias.solit-clouds.ru/api/v4/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a103d44-6b7b-4e02-b4dc-52bc1933721e" name="Valid HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="41354" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b3d2f800-ba01-480e-8cf1-4c63ad8ba5f4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="412467_АС2. ACCESS_DENIED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="archiveAppointment/list" id="eb99e45a-a2e9-4c99-9a08-eb7ad99eb667"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="archiveAppointment/list" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"omsNumber": "123",
	"birthDate": "2021-03-03",
	  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
 }</con:request><con:originalUri>http://application-emiasinfo2.emias.solit-clouds.ru/api/v4/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a103d44-6b7b-4e02-b4dc-52bc1933721e" name="Valid HTTP Status Code = 403"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.code = ACCESS_DENIED"><con:configuration><path>$.error.code</path><content>ACCESS_DENIED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.description = Доступ к запрошенной медкарте отсутствует"><con:configuration><path>$.error.description</path><content>Доступ к запрошенной медкарте отсутствует</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="68ca9835-f49a-4211-ab1f-5f9abb51b8bf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213989_Отсутствие обязательного поля ОМС" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="archiveAppointment/list" id="35992e37-eb44-4c73-975e-b23482d0da35"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="archiveAppointment/list" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{

	"birthDate": "2021-03-03",
	  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
 }</con:request><con:originalUri>http://application-emiasinfo2.emias.solit-clouds.ru/api/v4/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a103d44-6b7b-4e02-b4dc-52bc1933721e" name="Valid HTTP Status Code = 401"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.code = BAD_REQUEST"><con:configuration><path>$.error.code</path><content>BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.description = Некорректные входные данные"><con:configuration><path>$.error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="41354" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cb89b3bb-c844-4168-ab68-a2b59cfed8b4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213990_Отсутствие обязательного поля &quot;дата рождения&quot;" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="archiveAppointment/list" id="a746c881-b4e5-4fa3-9f10-165ca1a48da8"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="archiveAppointment/list" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"omsNumber": "123",
	  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
 }</con:request><con:originalUri>http://application-emiasinfo2.emias.solit-clouds.ru/api/v4/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a103d44-6b7b-4e02-b4dc-52bc1933721e" name="Valid HTTP Status Code = 401"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.code = BAD_REQUEST"><con:configuration><path>$.error.code</path><content>BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.description = Некорректные входные данные"><con:configuration><path>$.error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="41354" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cf769edf-bf6d-4952-8548-e4278da9c3c6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213991_Отсутствие обязательного параметра &quot;пагинация&quot;" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="archiveAppointment/list" id="53b19a3c-e3c5-45af-870e-e6beb57fc47b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="archiveAppointment/list" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"omsNumber": "123",
	"birthDate": "2021-02-03"

 }</con:request><con:originalUri>http://application-emiasinfo2.emias.solit-clouds.ru/api/v4/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a103d44-6b7b-4e02-b4dc-52bc1933721e" name="Valid HTTP Status Code = 401"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.code = BAD_REQUEST"><con:configuration><path>$.error.code</path><content>BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.description = Некорректные входные данные"><con:configuration><path>$.error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="41354" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fdf13bca-423d-4798-a71f-a6c47cbf45e8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="389352_Проверка маппинга (интеграционный)" searchProperties="true"><con:settings/><con:testStep type="request" name="getArchivedAppointments" id="caca2227-c1b9-4774-a3d8-646edcfaf78e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="jdbc" name="Проверить записи в БД ЕМИАС.ИНФО" id="88cebbff-922d-45ba-8a77-b8a1b0f5b305"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>select count(*) from f_deleted_archive_appointment where oms_number = '${#TestCase#omsNumber}'</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="63f05340-8cbe-42d7-86b5-e94aebbeb53e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="8d013512-9533-45f0-a97a-9b67dfaacc12"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>10</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-07-19 15:35:39.217</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391880703998, 391872492723, 391882573598</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-01-19</con:value></con:property></con:properties></con:testCase><con:testCase id="692b1481-bc53-469f-8a68-73fab69ea95e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213993_Проверка пагинации" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="pageSize = 25, pageNumber = 0" id="5a8e27e7-74b5-4435-ba44-ff2f91f04d63"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 25, pageNumber = 0" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 0"><con:configuration><path>$.payload.pageNumber</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 25"><con:configuration><path>$.payload.pageSize</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 25"><con:configuration><path>$.payload.appointmentList</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = 1, pageNumber = 0" id="89e33d3a-68d2-4068-86a4-9625aef5afea"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 1, pageNumber = 0" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 1
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 0"><con:configuration><path>$.payload.pageNumber</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 1"><con:configuration><path>$.payload.pageSize</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 1"><con:configuration><path>$.payload.appointmentList</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = 26, pageNumber = 0" id="4dc929aa-cdd2-4162-bd50-927f96ecaaa1"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 26, pageNumber = 0" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 26
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 0"><con:configuration><path>$.payload.pageNumber</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 25"><con:configuration><path>$.payload.pageSize</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 25"><con:configuration><path>$.payload.appointmentList</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = 0, pageNumber = 0" id="43447c07-9e17-4462-8d82-1474cebcf2ed"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 0, pageNumber = 0" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 0
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 0"><con:configuration><path>$.payload.pageNumber</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 25"><con:configuration><path>$.payload.pageSize</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 25"><con:configuration><path>$.payload.appointmentList</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = 1, pageNumber = 1" id="ed5d64bf-3822-42ee-b70e-7286587b7af7"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 1, pageNumber = 1" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 1,
    "pageSize": 1
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 1"><con:configuration><path>$.payload.pageNumber</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 1"><con:configuration><path>$.payload.pageSize</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 1"><con:configuration><path>$.payload.appointmentList</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = 1, pageNumber = -1" id="a54e35a1-1390-4599-85fb-bdf5c97d0564"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 1, pageNumber = -1" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": -1,
    "pageSize": 1
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 0"><con:configuration><path>$.payload.pageNumber</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 1"><con:configuration><path>$.payload.pageSize</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 1"><con:configuration><path>$.payload.appointmentList</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = -1, pageNumber = 1" id="432dfda4-6cc0-4857-8ff5-3136f7d143a4"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = -1, pageNumber = 1" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 1,
    "pageSize": -1
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 1"><con:configuration><path>$.payload.pageNumber</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 25"><con:configuration><path>$.payload.pageSize</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 25"><con:configuration><path>$.payload.appointmentList</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:setupScript/><con:properties><con:property><con:name>patientId</con:name><con:value>10581395</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2020-12-27</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2022-12-27</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-10-27</con:value></con:property><con:property><con:name>pageNumber</con:name><con:value>167</con:value></con:property></con:properties></con:testCase><con:testCase id="036cefcf-e305-4e06-9dce-f38219630f4f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213994_У пациента нет архивных записей" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="f3021889-2872-4316-ac97-92ce90bbcb44"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/213994" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="297ba7c9-0472-4603-b294-cb02d61bd9c0" name="payload.appointmentList = 0"><con:configuration><path>$.payload.appointmentList</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7793989731000790</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2010-06-18</con:value></con:property></con:properties></con:testCase><con:testCase id="a0d4f689-f7f6-4dfe-8c57-96bb83200454" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213992_АС1. Пациент не найден (SA_PATIENT_NOT_FOUND)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="07cb7e25-21a9-40e5-acf2-a48082265db9"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/213992" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74001288-d99a-4fe6-9089-35c22651ed74" name="Значение code = SA_PATIENT_NOT_FOUND"><con:configuration><path>$.error.code</path><content>SA_PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="502a4633-5a2b-4a47-8b1e-ced542cc6244" name="Значение description = Пациент с указанным ОМС не найден"><con:configuration><path>$.error.description</path><content>Пациент с указанным ОМС не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48bb447c-4baa-4b64-96f7-2d445994ad5a" name="Значение type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:setupScript/><con:properties><con:property><con:name>patientId</con:name><con:value>30000007472572</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>24</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2022-05-03</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2024-05-03</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="32b4d1f6-c224-4b85-90eb-ce3439c538ee" name="postArchiveAppointmentsList v5"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="df34ee35-c87f-4626-9556-ad4e2de13865" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213988, 233374, 233375_ОС. Получение данных с исключением 3 записей" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать appointmentId записей с разными типами" id="ec80669d-acd4-4dff-b7f6-f8179be29ad3"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд моков
connection = testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)
query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response
getArchivedAppointmentsMock = new XmlSlurper().parseText(response)

appointments = getArchivedAppointmentsMock.Body.getArchivedAppointmentsResponse.result.appointment
appointmentCount = appointments.size()

def appointmentRECid
def appointmentBMid
def appointmentLDPid

// Записываем appointmentId с разными appointment.type
for(i=0; i&lt;appointmentCount; i++){
	if(appointments[i].type=="RECEPTION"){
		appointmentRECid = appointments.id[i]
		testRunner.testCase.setPropertyValue("appointmentRECid", appointmentRECid.toString())
		}
		if(appointments[i].type=="BM"){
		appointmentBMid = appointments.id[i]
		testRunner.testCase.setPropertyValue("appointmentBMid", appointmentBMid.toString())
		}
		if(appointments[i].type=="LDP"){
		appointmentLDPid = appointments.id[i]
		testRunner.testCase.setPropertyValue("appointmentLDPid", appointmentLDPid.toString())
		}
	}</script></con:config></con:testStep><con:testStep type="jdbc" name="Создать записи в f_deleted_archive_appointment" id="14bb9050-b93f-4aa7-a14e-a8e542507731"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>insert into f_deleted_archive_appointment (id, appointment_id, oms_number, birth_date, delete_date) values (nextval('f_deleted_archive_appointment_sequence'),'${#TestCase#appointmentRECid}', '${#TestCase#omsNumber}', '${#TestCase#birthDate}', '2024-01-27 12:26:25.818');
insert into f_deleted_archive_appointment (id, appointment_id, oms_number, birth_date, delete_date) values (nextval('f_deleted_archive_appointment_sequence'),'${#TestCase#appointmentBMid}', '${#TestCase#omsNumber}', '${#TestCase#birthDate}', '2024-02-27 12:26:25.818');
insert into f_deleted_archive_appointment (id, appointment_id, oms_number, birth_date, delete_date) values (nextval('f_deleted_archive_appointment_sequence'),'${#TestCase#appointmentLDPid}', '${#TestCase#omsNumber}', '${#TestCase#birthDate}', '2024-03-27 12:26:25.818');</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="8c8b15b0-1baf-4a47-a6a0-41a59da7eb04"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/233374" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a2feb98c-ff2f-4066-8bd8-2dd83858aa8a" name="Not Contains appointmentRECid"><con:configuration><token>${#TestCase#appointmentRECid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a2feb98c-ff2f-4066-8bd8-2dd83858aa8a" name="Not Contains appointmentBMid"><con:configuration><token>${#TestCase#appointmentBMid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a2feb98c-ff2f-4066-8bd8-2dd83858aa8a" name="Not Contains appointmentLDPid"><con:configuration><token>${#TestCase#appointmentLDPid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга (мок)" id="d1421ab6-7c3c-4072-9d66-1e11e2764af5"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
path = testRunner.testCase.getPropertyValue("path") // В переменной path записан путь до мока "/mock/305855/getDoctorsInfo"
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getArchivedAppointments = new XmlSlurper().parseText(response)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
log.info appointments
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder(response)
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
log.info pageTotal
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		toBmArray = [bmId, bmName]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	cancelInfo = appointments[i].cancelInfo != "" ? appointments[i].cancelInfo : null
	cancelInfoArray = [null]
	if (cancelInfo != null){
		cancelReasonId = cancelInfo.cancelReasonId
		cancelReasonDesc = cancelInfo.cancelReasonDesc
		cancelTime = cancelInfo.cancelTime
		}
//	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
//	if (reason == null){
//		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
//	}
//	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, cancelInfoArray]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].id
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].statusId
	infoLpuName = infoAppointments[j].nameLpu.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpTypeId
		infoLdpTypeName = infoToLdp.ldpTypeName.trim()
		infoToLdpArray = [infoLdpId, infoLdpTypeName]
	}
	infoToBm = infoAppointments[j].toBM
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoToBmArray = [infoBmId, infoBmName]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoCancelInfo = infoAppointments[j].cancelInfo
	infoCancelInfoArray = [null]
	if (infoCancelInfo != null){
		cancelReasonId = infoAppointments[j].cancelInfo.cancelReasonId
	log.info cancelReasonId
		cancelReasonDesc = infoAppointments[j].cancelInfo.cancelReasonDesc
		cancelTime = infoAppointments[j].cancelInfo.cancelTime
	}
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoCancelInfoArray]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount
log.info suppMap.size()
log.info infoMap.size()
assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="jdbc" name="Удалить записи в f_deleted_archive_appointment" id="50dbdbfa-4ba4-4d6d-8838-9dccd94931ae"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>delete from f_deleted_archive_appointment where appointment_id='${#TestCase#appointmentRECid}';
delete from f_deleted_archive_appointment where appointment_id='${#TestCase#appointmentBMid}';
delete from f_deleted_archive_appointment where appointment_id='${#TestCase#appointmentLDPid}';</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>10</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391880703998, 391872492723, 391882573598</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-01-19</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/233374/getArchivedAppointments</con:value></con:property><con:property><con:name>appointmentRECid</con:name><con:value>391884015780</con:value></con:property><con:property><con:name>appointmentBMid</con:name><con:value>391877170833</con:value></con:property><con:property><con:name>appointmentLDPid</con:name><con:value>391884365300</con:value></con:property></con:properties></con:testCase><con:testCase id="60b3c651-e4c9-4304-b353-6448ac11b496" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="237458_ОС. Получение данных без исключения" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="67216834-28f6-47a4-9a72-56fa60f43065"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/233374" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка количества записей" id="7ad958c1-e3b1-49ac-a23b-07eede452c1e"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
path = testRunner.testCase.getPropertyValue("path") // В переменной path записан путь до мока "/mock/305855/getDoctorsInfo"
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getArchivedAppointments = new XmlSlurper().parseText(response)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

suppAppointmentsSize = appointments.size()

appointmentCountINFO = postArchiveAppointmentList.payload.appointmentList.size()

log.info appointmentCountINFO
log.info suppAppointmentsSize
assert appointmentCountINFO == suppAppointmentsSize

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга (мок) -" id="f0d85f56-1649-4d55-9431-3ae654ea718d" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
path = testRunner.testCase.getPropertyValue("path") // В переменной path записан путь до мока "/mock/305855/getDoctorsInfo"
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getArchivedAppointments = new XmlSlurper().parseText(response)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		bmSelf = false
		toBmArray = [bmId, bmName, bmSelf]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
	if (reason == null){
		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	}
	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, reason, date]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].appointmentId
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].status
	infoLpuName = infoAppointments[j].lpuName.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpId
		infoLdpName = infoToLdp.ldpName.trim()
		infoToLdpArray = [infoLdpId, infoLdpName]
	}
	infoToBm = infoAppointments[j].toBm
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoBmSelf = infoToBm.self
		infoToBmArray = [infoBmId, infoBmName, infoBmSelf]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoReason = infoAppointments[j].reason
	infoDate = infoAppointments[j].date
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoReason, infoDate]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга (мок)" id="64d2fa3a-c3ee-466e-afb9-4cda1eb1ff18" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
path = testRunner.testCase.getPropertyValue("path") // В переменной path записан путь до мока "/mock/305855/getDoctorsInfo"
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getArchivedAppointments = new XmlSlurper().parseText(response)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
log.info appointments
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder(response)
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
log.info pageTotal
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		toBmArray = [bmId, bmName]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	cancelInfo = appointments[i].cancelInfo != "" ? appointments[i].cancelInfo : null
	cancelInfoArray = [null]
	if (cancelInfo != null){
		cancelReasonId = cancelInfo.cancelReasonId
		cancelReasonDesc = cancelInfo.cancelReasonDesc
		cancelTime = cancelInfo.cancelTime
		}
//	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
//	if (reason == null){
//		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
//	}
//	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, cancelInfoArray]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].id
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].statusId
	infoLpuName = infoAppointments[j].nameLpu.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpTypeId
		infoLdpTypeName = infoToLdp.ldpTypeName.trim()
		infoToLdpArray = [infoLdpId, infoLdpTypeName]
	}
	infoToBm = infoAppointments[j].toBM
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoToBmArray = [infoBmId, infoBmName]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoCancelInfo = infoAppointments[j].cancelInfo
	infoCancelInfoArray = [null]
	if (infoCancelInfo != null){
		cancelReasonId = infoAppointments[j].cancelInfo.cancelReasonId
	log.info cancelReasonId
		cancelReasonDesc = infoAppointments[j].cancelInfo.cancelReasonDesc
		cancelTime = infoAppointments[j].cancelInfo.cancelTime
	}
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoCancelInfoArray]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount
log.info suppMap.size()
log.info infoMap.size()
assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:testStep type="jdbc" name="Проверить отсутствие записей в f_deleted_archive_appointment" id="3649fe8e-7e71-47ef-be02-f7b7aaf80f51"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>select * from f_deleted_archive_appointment where oms_number = '${#TestCase#omsNumber}'</con:query><con:assertion type="XPath Match" id="3d1102be-82d9-4226-bc32-7ce8b7832176" name="XPath Match"><con:configuration><path>//*:Results</path><content>&lt;Results>&#13;
  &lt;ResultSet fetchSize="0"/>&#13;
&lt;/Results></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>10</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391880703998, 391872492723, 391882573598</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-01-19</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/233374/getArchivedAppointments</con:value></con:property><con:property><con:name>appointmentRECid</con:name><con:value>391884015780</con:value></con:property><con:property><con:name>appointmentBMid</con:name><con:value>391877170833</con:value></con:property><con:property><con:name>appointmentLDPid</con:name><con:value>391884365300</con:value></con:property></con:properties></con:testCase><con:testCase id="94f1eb28-3a5c-4ffb-9230-c0d9ae506f7d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213994_У пациента нет архивных записей" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="ba6263b6-312b-4e2c-a295-f67e76803628"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/213994" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 204"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property></con:properties></con:testCase><con:testCase id="22594277-8717-4970-a43b-484bd0702a5d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213992_АС1. Пациент не найден (SA_PATIENT_NOT_FOUND)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="76ef0820-f871-4042-bb09-756a9ebd41b1"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/213992" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74001288-d99a-4fe6-9089-35c22651ed74" name="Значение code = SA_PATIENT_NOT_FOUND"><con:configuration><path>$.error.code</path><content>SA_PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="502a4633-5a2b-4a47-8b1e-ced542cc6244" name="Значение description = Пациент с указанным ОМС не найден"><con:configuration><path>$.error.description</path><content>Пациент с указанным ОМС не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48bb447c-4baa-4b64-96f7-2d445994ad5a" name="Значение type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:setupScript/><con:properties><con:property><con:name>patientId</con:name><con:value>30000007472572</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>24</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2022-05-03</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2024-05-03</con:value></con:property></con:properties></con:testCase><con:testCase id="752f1158-da08-47a1-92b8-68bacc5476de" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="273615_АС2. SUDIR_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="archiveAppointment/list" id="6478dcd4-fb81-4c89-bd28-6e5028c0b9c6"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="archiveAppointment/list" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"omsNumber": "123",
	"birthDate": "2021-03-03",
	  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
 }</con:request><con:originalUri>http://application-emiasinfo2.emias.solit-clouds.ru/api/v4/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a103d44-6b7b-4e02-b4dc-52bc1933721e" name="Valid HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="41354" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="689f0284-7019-4ad9-ab87-410f0895245a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="412467_АС2. ACCESS_DENIED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="archiveAppointment/list" id="b06f42b3-2aeb-42b6-8815-e435739559c7"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="archiveAppointment/list" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"omsNumber": "123",
	"birthDate": "2021-03-03",
	  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
 }</con:request><con:originalUri>http://application-emiasinfo2.emias.solit-clouds.ru/api/v4/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a103d44-6b7b-4e02-b4dc-52bc1933721e" name="Valid HTTP Status Code = 403"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.code = ACCESS_DENIED"><con:configuration><path>$.error.code</path><content>ACCESS_DENIED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.description = Доступ к запрошенной медкарте отсутствует"><con:configuration><path>$.error.description</path><content>Доступ к запрошенной медкарте отсутствует</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="338f55fc-3059-43d7-8f48-f8759ae62064" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213989_Отсутствие обязательного поля ОМС" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="archiveAppointment/list" id="9eb11deb-26a2-450f-9067-dbc01061c5eb"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="archiveAppointment/list" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{

	"birthDate": "2021-03-03",
	  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
 }</con:request><con:originalUri>http://application-emiasinfo2.emias.solit-clouds.ru/api/v4/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a103d44-6b7b-4e02-b4dc-52bc1933721e" name="Valid HTTP Status Code = 401"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.code = BAD_REQUEST"><con:configuration><path>$.error.code</path><content>BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.description = Некорректные входные данные"><con:configuration><path>$.error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="41354" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="35f6e4b7-8ab0-4f3f-8a14-16deeda7c277" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213990_Отсутствие обязательного поля &quot;дата рождения&quot;" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="archiveAppointment/list" id="65e09d8b-d73c-4976-a3d7-b8f3508febc8"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="archiveAppointment/list" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"omsNumber": "123",
	  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
 }</con:request><con:originalUri>http://application-emiasinfo2.emias.solit-clouds.ru/api/v4/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a103d44-6b7b-4e02-b4dc-52bc1933721e" name="Valid HTTP Status Code = 401"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.code = BAD_REQUEST"><con:configuration><path>$.error.code</path><content>BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.description = Некорректные входные данные"><con:configuration><path>$.error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="41354" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="78a95514-b923-4792-8491-d94244fbb063" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213991_Отсутствие обязательного параметра &quot;пагинация&quot;" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="archiveAppointment/list" id="c98539ce-09c5-4055-a22a-a4b74d62aee1"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="archiveAppointment/list" id="1c6af16c-e48f-47f8-8dc3-2a28d28c40a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"omsNumber": "123",
	"birthDate": "2021-02-03"

 }</con:request><con:originalUri>http://application-emiasinfo2.emias.solit-clouds.ru/api/v4/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a103d44-6b7b-4e02-b4dc-52bc1933721e" name="Valid HTTP Status Code = 401"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.code = BAD_REQUEST"><con:configuration><path>$.error.code</path><content>BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.description = Некорректные входные данные"><con:configuration><path>$.error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dafe97a9-c210-42e6-aa4b-d9a33458d663" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="41354" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ddbbacd7-7083-4da2-b247-24a16d906e03" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="389352_Проверка маппинга (интеграционный)" searchProperties="true"><con:settings/><con:testStep type="request" name="getArchivedAppointments" id="094bf004-18e7-4fc0-ad5f-7dd4f92d9a94"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getArchivedAppointments</con:operation><con:request name="getArchivedAppointments" id="24ec012a-d1f2-4f14-9ffa-01a7b5b1e05a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
  <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>${#TestCase#omsNumber}</omsNumber>\r
         <birthDate>${#TestCase#birthDate}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
         <pagingOptions pageNumber="0" pageSize="25">
         </pagingOptions>
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="875c3980-4fd0-43bc-8638-5d6db78f93ab"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="jdbc" name="Проверить записи в БД ЕМИАС.ИНФО" id="728737d1-fa66-438d-9c93-136044a5073c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>select count(*) from f_deleted_archive_appointment where oms_number = '${#TestCase#omsNumber}'</con:query><con:assertion type="JDBC Status" id="fbcf2d97-6f22-4b18-9a74-0d5ac8e27d7c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="postArchiveAppointmentList" id="5b1de4fa-5155-41c6-b049-9cd104329c69"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="b6e8ac06-52b1-4491-9240-bafdbbc0d6f8"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
def getArchivedAppointmentsResponse = context.expand('${getArchivedAppointments#Response}')
getArchivedAppointments = new XmlSlurper().parseText(getArchivedAppointmentsResponse)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")
timeStamp = testRunner.testCase.getPropertyValue("timeStamp")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getArchivedAppointments#Response')
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' AND delete_date = '$timeStamp' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		toBmArray = [bmId, bmName]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	cancelInfo = appointments[i].cancelInfo != "" ? appointments[i].cancelInfo : null
	cancelInfoArray = [null]
	if (cancelInfo != null){
		cancelReasonId = cancelInfo.cancelReasonId
		cancelReasonDesc = cancelInfo.cancelReasonDesc
		cancelTime = cancelInfo.cancelTime
		}
//	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
//	if (reason == null){
//		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
//	}
//	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, cancelInfoArray]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].id
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].statusId
	infoLpuName = infoAppointments[j].nameLpu.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpTypeId
		infoLdpTypeName = infoToLdp.ldpTypeName.trim()
		infoToLdpArray = [infoLdpId, infoLdpTypeName]
	}
	infoToBm = infoAppointments[j].toBM
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoToBmArray = [infoBmId, infoBmName]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoCancelInfo = infoAppointments[j].cancelInfo
	infoCancelInfoArray = [null]
	if (infoCancelInfo != null){
		cancelReasonId = infoAppointments[j].cancelInfo.cancelReasonId
	log.info cancelReasonId
		cancelReasonDesc = infoAppointments[j].cancelInfo.cancelReasonDesc
		cancelTime = infoAppointments[j].cancelInfo.cancelTime
	}
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoCancelInfoArray]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount

assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>10</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-07-19 15:35:39.217</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391880703998, 391872492723, 391882573598</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-01-19</con:value></con:property></con:properties></con:testCase><con:testCase id="ea298656-695e-49c5-9c2c-40015e5f5356" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="412432_d_reception_type_tmk_code: archive_reception_type = false, is_deleted = false" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="2c49d2bd-e441-4941-80e7-e92716f07d5c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/412432" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Записать receptionTypeId" id="b24ab2a2-6b81-4c5e-9c4e-effe6ad4edd9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receptionTypeId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>postArchiveAppointmentList</con:sourceStep><con:sourcePath>$.payload.appointmentList[0].toDoctor.receptionTypeId</con:sourcePath><con:targetType>receptionTypeId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Подобрать идентификатор для d_reception_type_tmk_code" id="f6487989-4137-4a85-a83a-8bc5b6159f75"><con:settings/><con:config><script>import groovy.sql.Sql

//создать соединение с бд
def login = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbLogin")
def password = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbPassword")
def dbconstring = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbConnection")

sql = Sql.newInstance("jdbc:postgresql://" + dbconstring + "?user=" + login + "&amp;password=" + password, "org.postgresql.Driver")

// найти и записать несуществующий d_reception_type_tmk_code.id 
id=sql.firstRow("select max(id)+1 as id from d_reception_type_tmk_code").id
testRunner.testCase.setPropertyValue("id", id.toString())
</script></con:config></con:testStep><con:testStep type="jdbc" name="Создать запись в d_reception_type_tmk_code" id="ce9640e2-df08-464a-8fb9-f885e0f359d1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>INSERT INTO d_reception_type_tmk_code (id, code_reception_type, archived_reception_type, is_deleted)

VALUES(${#TestCase#id}, ${#TestCase#receptionTypeId}, false, false);</con:query><con:assertion type="XPath Match" id="7ff04591-aab7-43b1-9595-1c8b4c34cb04" name="XPath Match"><con:configuration><path>//*:UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Проверить isTmk" id="6f17466c-43b6-4d46-9d4a-99adea3646de"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверить isTmk" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/412432" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="70241b35-b1a5-4ba4-9b21-2b244af62b22" name="isTmk = true"><con:configuration><path>$.payload.appointmentList[0].isTmk</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Удалить запись в d_reception_type_tmk_code" id="0a4022ef-cd74-4b10-8c74-ec360b7d8ce4"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>delete from d_reception_type_tmk_code where code_reception_type = ${#TestCase#receptionTypeId}</con:query><con:assertion type="XPath Match" id="7ff04591-aab7-43b1-9595-1c8b4c34cb04" name="XPath Match"><con:configuration><path>//*:UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>6666</con:value></con:property><con:property><con:name>id</con:name><con:value>1246519364</con:value></con:property></con:properties></con:testCase><con:testCase id="d49c5dd8-e98b-499d-b393-b2936d8e7c0b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="412445_d_reception_type_tmk_code: archive_reception_type = true, is_deleted = false" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="0bdb18bc-9485-447c-8267-450a2915ef2e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/412432" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Записать receptionTypeId" id="da8f91a7-4f29-4706-9e3a-8ead23b80255"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receptionTypeId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>postArchiveAppointmentList</con:sourceStep><con:sourcePath>$.payload.appointmentList[0].toDoctor.receptionTypeId</con:sourcePath><con:targetType>receptionTypeId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Подобрать идентификатор для d_reception_type_tmk_code" id="12723eeb-921b-4c7d-b172-ca0365a4a563"><con:settings/><con:config><script>import groovy.sql.Sql

//создать соединение с бд
def login = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbLogin")
def password = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbPassword")
def dbconstring = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbConnection")

sql = Sql.newInstance("jdbc:postgresql://" + dbconstring + "?user=" + login + "&amp;password=" + password, "org.postgresql.Driver")

// найти и записать несуществующий d_reception_type_tmk_code.id 
id=sql.firstRow("select max(id)+1 as id from d_reception_type_tmk_code").id
testRunner.testCase.setPropertyValue("id", id.toString())
</script></con:config></con:testStep><con:testStep type="jdbc" name="Создать запись в d_reception_type_tmk_code" id="fdac77e5-b2c2-4414-ad47-837735494225"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>INSERT INTO d_reception_type_tmk_code (id, code_reception_type, archived_reception_type, is_deleted)

VALUES(${#TestCase#id}, ${#TestCase#receptionTypeId}, true, false);</con:query><con:assertion type="XPath Match" id="7ff04591-aab7-43b1-9595-1c8b4c34cb04" name="XPath Match"><con:configuration><path>//*:UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Проверить isTmk" id="21e30618-1f4b-4126-818d-6ed09652765a"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверить isTmk" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/412432" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="aa6008a4-84dc-4a35-84d8-e7ecafc17d0b" name="Not Contains isTmk"><con:configuration><token>isTmk</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Удалить запись в d_reception_type_tmk_code" id="2f14c3a9-5294-4c6a-8bf4-702cd4bc7313"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>delete from d_reception_type_tmk_code where code_reception_type = ${#TestCase#receptionTypeId}</con:query><con:assertion type="XPath Match" id="7ff04591-aab7-43b1-9595-1c8b4c34cb04" name="XPath Match"><con:configuration><path>//*:UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>6666</con:value></con:property><con:property><con:name>id</con:name><con:value>1246519364</con:value></con:property></con:properties></con:testCase><con:testCase id="a6cfcf33-adbb-49df-a052-5f464317c71d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="412446_d_reception_type_tmk_code: archive_reception_type = false, is_deleted = true" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="5d144605-2320-4064-8ce2-41b87cdd7636"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/412432" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Записать receptionTypeId" id="1fe55e47-df00-41e1-94b7-cf364132c2d9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receptionTypeId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>postArchiveAppointmentList</con:sourceStep><con:sourcePath>$.payload.appointmentList[0].toDoctor.receptionTypeId</con:sourcePath><con:targetType>receptionTypeId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Подобрать идентификатор для d_reception_type_tmk_code" id="3baaa8bf-e7c4-475d-b5f9-7590f43d93f4"><con:settings/><con:config><script>import groovy.sql.Sql

//создать соединение с бд
def login = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbLogin")
def password = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbPassword")
def dbconstring = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbConnection")

sql = Sql.newInstance("jdbc:postgresql://" + dbconstring + "?user=" + login + "&amp;password=" + password, "org.postgresql.Driver")

// найти и записать несуществующий d_reception_type_tmk_code.id 
id=sql.firstRow("select max(id)+1 as id from d_reception_type_tmk_code").id
testRunner.testCase.setPropertyValue("id", id.toString())
</script></con:config></con:testStep><con:testStep type="jdbc" name="Создать запись в d_reception_type_tmk_code" id="2123e291-3cee-4e3b-a5da-b8043d7c14ee"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>INSERT INTO d_reception_type_tmk_code (id, code_reception_type, archived_reception_type, is_deleted)

VALUES(${#TestCase#id}, ${#TestCase#receptionTypeId}, false, true);</con:query><con:assertion type="XPath Match" id="7ff04591-aab7-43b1-9595-1c8b4c34cb04" name="XPath Match"><con:configuration><path>//*:UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Проверить isTmk" id="51c9c6ce-f088-47dc-92b4-c93b423b6d42"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверить isTmk" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/412432" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="c239ad96-9b54-4182-83cb-a9ca90a9ef03" name="Not Contains isTmk"><con:configuration><token>isTmk</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Удалить запись в d_reception_type_tmk_code" id="6d34a600-7505-4d8b-9c16-f5e72ad20984"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>delete from d_reception_type_tmk_code where code_reception_type = ${#TestCase#receptionTypeId}</con:query><con:assertion type="XPath Match" id="7ff04591-aab7-43b1-9595-1c8b4c34cb04" name="XPath Match"><con:configuration><path>//*:UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>6666</con:value></con:property><con:property><con:name>id</con:name><con:value>1246519364</con:value></con:property></con:properties></con:testCase><con:testCase id="d8baa071-d850-4338-a789-7ee1b1de414c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="412447_d_reception_type_tmk_code: archive_reception_type = true, is_deleted = true" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="bf61a3db-2a70-4e3a-899a-1a1204892acb"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/412432" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Записать receptionTypeId" id="908426ff-13a7-4d5f-8d9d-702ffde61d3c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>receptionTypeId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>postArchiveAppointmentList</con:sourceStep><con:sourcePath>$.payload.appointmentList[0].toDoctor.receptionTypeId</con:sourcePath><con:targetType>receptionTypeId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Подобрать идентификатор для d_reception_type_tmk_code" id="d0777e39-41cf-4aae-9f5b-97d2d9b190c1"><con:settings/><con:config><script>import groovy.sql.Sql

//создать соединение с бд
def login = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbLogin")
def password = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbPassword")
def dbconstring = testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoDbConnection")

sql = Sql.newInstance("jdbc:postgresql://" + dbconstring + "?user=" + login + "&amp;password=" + password, "org.postgresql.Driver")

// найти и записать несуществующий d_reception_type_tmk_code.id 
id=sql.firstRow("select max(id)+1 as id from d_reception_type_tmk_code").id
testRunner.testCase.setPropertyValue("id", id.toString())
</script></con:config></con:testStep><con:testStep type="jdbc" name="Создать запись в d_reception_type_tmk_code" id="10fb1613-16a5-4546-98f9-65759ae8a4e0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>INSERT INTO d_reception_type_tmk_code (id, code_reception_type, archived_reception_type, is_deleted)

VALUES(${#TestCase#id}, ${#TestCase#receptionTypeId}, true, true);</con:query><con:assertion type="XPath Match" id="7ff04591-aab7-43b1-9595-1c8b4c34cb04" name="XPath Match"><con:configuration><path>//*:UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Проверить isTmk" id="a32e80ed-7777-4cc8-8b37-02c539110093"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверить isTmk" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/412432" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="10fa7880-d0a0-4bdc-849e-5fbc1225208d" name="Not Contains isTmk"><con:configuration><token>isTmk</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Удалить запись в d_reception_type_tmk_code" id="4b716b6d-1c8a-4ece-84c6-a1c3cd9fbe61"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoFullDbConnection}</con:connectionString><con:query>delete from d_reception_type_tmk_code where code_reception_type = ${#TestCase#receptionTypeId}</con:query><con:assertion type="XPath Match" id="7ff04591-aab7-43b1-9595-1c8b4c34cb04" name="XPath Match"><con:configuration><path>//*:UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>6666</con:value></con:property><con:property><con:name>id</con:name><con:value>1246519364</con:value></con:property></con:properties></con:testCase><con:testCase id="82eba3ad-bbc4-4d42-949e-9dd392df42d5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="412856_отсутствие isTmk в блоках toBM, toLdp" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="d400de81-406a-4438-afbb-a6465f912c1d"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/412856" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="c46db3b6-3896-404b-9efc-70527d3cd865" name="Not Contains isTmk"><con:configuration><token>isTmk</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>10</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-07-19 15:35:39.217</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391880703998, 391872492723, 391882573598</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-01-19</con:value></con:property></con:properties></con:testCase><con:testCase id="2119a4e7-c56e-42b7-96ae-43bff2ab01f8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="389352_Проверка маппинга (в ответе все необязательные параметры) (мок)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postArchiveAppointmentList" id="a886d20c-2eba-4645-8995-c4f18ca8dae7"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postArchiveAppointmentList" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-saOrchestrator" value="${#Project#mockUrl}/mock/389352" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга (мок)" id="0605497a-11cc-4742-8ad4-6ac19a4ca02a"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter
import java.util.Collections

//JSON Slurper
def postArchiveAppointmentListResponse = context.expand('${postArchiveAppointmentList#Response}')
def postArchiveAppointmentList = new JsonSlurper().parseText(postArchiveAppointmentListResponse)

//XML Slurper
path = testRunner.testCase.getPropertyValue("path") // В переменной path записан путь до мока "/mock/305855/getDoctorsInfo"
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getArchivedAppointments = new XmlSlurper().parseText(response)

appointments = getArchivedAppointments.Body.getArchivedAppointmentsResponse.result.appointment
log.info appointments
omsNumber = testRunner.testCase.getPropertyValue("omsNumber")
birthDate = testRunner.testCase.getPropertyValue("birthDate")

//Проверка pageNumber, pageTotal, morePagesAvailable, totalItemsCount
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder(response)
pageNumber = InIs.getNodeValue("//*:result/@*:pageNumber").toInteger()
pageTotal = InIs.getNodeValue("//*:result/@*:pageTotal").toInteger()
log.info pageTotal
pageSize = InIs.getNodeValue("//*:result/@*:pageSize").toInteger()
morePagesAvailable = InIs.getNodeValue("//*:result/@*:morePagesAvailable").toBoolean()
totalItemsCount = InIs.getNodeValue("//*:result/@*:totalItemsCount").toInteger()

//Подключение к БД
emiasInfoFullDbConnection = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoFullDbConnection")
emiasInfoDBDriver = testRunner.testCase.testSuite.Project.getPropertyValue("emiasInfoDBDriver")
sql = Sql.newInstance(emiasInfoFullDbConnection, emiasInfoDBDriver)

suppAppointmentsSize = appointments.size()
suppMap = [:]
n = 0
for (i = 0; i&lt;suppAppointmentsSize; i++){
	appointment = []
	n += 1
	id = appointments[i].id.toBigInteger()
	request = sql.rows("SELECT * FROM f_deleted_archive_appointment WHERE appointment_id = $id AND oms_number = $omsNumber AND birth_date = '$birthDate' ")
	if(request){
		continue
	}
	type = appointments[i].type
	availableResourceId = appointments[i].availableResourceId
	complexResourceId = appointments[i].complexResourceId
	roomNumber = appointments[i].roomNumber
	startTime = appointments[i].startTime
	endTime = appointments[i].endTime
	status = appointments[i].statusId
	lpuName = appointments[i].nameLpu != "" ? appointments[i].nameLpu.toString().trim() : null
	lpuAddress = appointments[i].lpuAddress
	toDoctor = appointments[i].toDoctor != "" ? appointments[i].toDoctor : null
	toDoctorArray = [null]
	if (toDoctor != null){
		specialityId = toDoctor.specialityId
		specialityName = toDoctor.specialityName
		doctorFIO = toDoctor.doctorFio
		receptionTypeId =toDoctor.receptionTypeId
		toDoctorArray = [specialityId, specialityName, doctorFIO, receptionTypeId]
	}
	toLdp = appointments[i].toLdp != "" ? appointments[i].toLdp : null
	toLdpArray = [null]
	if (toLdp != null){
		ldpId = toLdp.ldpTypeId
		ldpName = toLdp.ldpTypeName
		toLdpArray = [ldpId, ldpName]
	}
	toBm = appointments[i].toBM != "" ? appointments[i].toBM : null
	toBmArray = [null]
	if (toBm != null){
		bmId = toBm.id
		bmName = toBm.name
		toBmArray = [bmId, bmName]
	}
	referral = appointments[i].referral != "" ? appointments[i].referral : null
	referralArray = [null]
	if (referral != null){
		referralId = referral.referralId
		referralStartTime = referral.startTime
		referralEndTime = referral.endTime
		referralArray = [referralId, referralStartTime, referralEndTime]
	}
	cancelInfo = appointments[i].cancelInfo != "" ? appointments[i].cancelInfo : null
	cancelInfoArray = [null]
	if (cancelInfo != null){
		cancelReasonId = cancelInfo.cancelReasonId
		cancelReasonDesc = cancelInfo.cancelReasonDesc
		cancelTime = cancelInfo.cancelTime
		}
//	reason = appointments[i].cancelInfo.cancelReasonDesc != "" ? appointments[i].cancelInfo.cancelReasonDesc : null
//	if (reason == null){
//		reason = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
//	}
//	date = appointments[i].cancelInfo.cancelTime != "" ? appointments[i].cancelInfo.cancelTime : null
	appointment = [id, type, availableResourceId, complexResourceId, roomNumber, startTime, endTime, status, lpuName, lpuAddress, toDoctorArray, toLdpArray, toBmArray, referralArray, cancelInfoArray]
	suppMap.put(id, appointment)
}

infoAppointments = postArchiveAppointmentList.payload.appointmentList
infoAppointmentsSize = infoAppointments.size()
infoMap = [:]
n = 0
for (j = 0; j&lt;infoAppointmentsSize; j++){
	n += 1
	infoAppointmentId = infoAppointments[j].id
	infoType = infoAppointments[j].type
	infoAvailableResourceId = infoAppointments[j].availableResourceId
	infoComplexResourceId = infoAppointments[j].complexResourceId
	infoRoomNumber = infoAppointments[j].roomNumber
	infoStartTime = infoAppointments[j].startTime
	infoEndTime = infoAppointments[j].endTime
	infoStatus = infoAppointments[j].statusId
	infoLpuName = infoAppointments[j].nameLpu.trim()
	infoLpuAddress = infoAppointments[j].lpuAddress
	infoToDoctor = infoAppointments[j].toDoctor
	infoToDoctorArray = [null]
	if (infoToDoctor != null){
		infoSpecialityId = infoToDoctor.specialityId
		infoSpecialityName = infoToDoctor.specialityName
		infoDoctorFIO = infoToDoctor.doctorFio
		infoReceptionTypeId = infoToDoctor.receptionTypeId
		infoToDoctorArray = [infoSpecialityId, infoSpecialityName, infoDoctorFIO, infoReceptionTypeId]
	}
	infoToLdp = infoAppointments[j].toLdp
	infoToLdpArray = [null]
	if (infoToLdp != null){
		infoLdpId = infoToLdp.ldpTypeId
		infoLdpTypeName = infoToLdp.ldpTypeName.trim()
		infoToLdpArray = [infoLdpId, infoLdpTypeName]
	}
	infoToBm = infoAppointments[j].toBM
	infoToBmArray = [null]
	if (infoToBm != null){
		infoBmId = infoToBm.id
		infoBmName = infoToBm.name
		infoToBmArray = [infoBmId, infoBmName]
	}
	infoReferral = infoAppointments[j].referral
	infoReferralArray = [null]
	if (infoReferral != null){
		infoReferralId = infoReferral.referralId
		infoReferralStartTime = infoReferral.startTime
		infoReferralEndTime = infoReferral.endTime
		infoReferralArray = [infoReferralId, infoReferralStartTime, infoReferralEndTime]
	}
	infoCancelInfo = infoAppointments[j].cancelInfo
	infoCancelInfoArray = [null]
	if (infoCancelInfo != null){
		cancelReasonId = infoAppointments[j].cancelInfo.cancelReasonId
	log.info cancelReasonId
		cancelReasonDesc = infoAppointments[j].cancelInfo.cancelReasonDesc
		cancelTime = infoAppointments[j].cancelInfo.cancelTime
	}
	infoAppointment = [infoAppointmentId, infoType, infoAvailableResourceId, infoComplexResourceId, infoRoomNumber, infoStartTime, infoEndTime, infoStatus, infoLpuName, infoLpuAddress, infoToDoctorArray, infoToLdpArray, infoToBmArray, infoReferralArray, infoCancelInfoArray]
	infoMap.put(infoAppointmentId, infoAppointment)
}

Map suppSortMap = new TreeMap&lt;>(suppMap);
Map infoSortMap = new TreeMap&lt;>(infoMap);
log.info suppSortMap
log.info infoSortMap


payload = postArchiveAppointmentList.payload

assert pageNumber == payload.pageNumber
assert pageTotal == payload.pageTotal
assert payload.pageSize == infoMap.size()
assert morePagesAvailable == payload.morePagesAvailable
assert totalItemsCount == payload.totalItemsCount
log.info suppMap.size()
log.info infoMap.size()
assert suppMap.size() == infoMap.size()
assert suppSortMap.toString() == infoSortMap.toString()
</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>25517322</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>10</con:value></con:property><con:property><con:name>timeStamp</con:name><con:value>2023-07-19 15:35:39.217</con:value></con:property><con:property><con:name>appointments</con:name><con:value>391880703998, 391872492723, 391882573598</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-01-19</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/389352/getArchivedAppointments</con:value></con:property></con:properties></con:testCase><con:testCase id="4885c6cc-d4c2-4bdb-a3f0-7b41f64124fd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213993_Проверка пагинации" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="pageSize = 25, pageNumber = 0" id="d5a5a7ec-7d5d-420d-80db-671e9f9709f4"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 25, pageNumber = 0" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 25
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 0"><con:configuration><path>$.payload.pageNumber</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 25"><con:configuration><path>$.payload.pageSize</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 25"><con:configuration><path>$.payload.appointmentList</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = 1, pageNumber = 0" id="db52ea65-2083-4793-8bbc-b5cf0c6ba715"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 1, pageNumber = 0" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 1
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 0"><con:configuration><path>$.payload.pageNumber</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 1"><con:configuration><path>$.payload.pageSize</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 1"><con:configuration><path>$.payload.appointmentList</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = 26, pageNumber = 0" id="d376e655-d8c4-4e1e-8f08-216ce845448a"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 26, pageNumber = 0" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 26
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 0"><con:configuration><path>$.payload.pageNumber</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 25"><con:configuration><path>$.payload.pageSize</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 25"><con:configuration><path>$.payload.appointmentList</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = 0, pageNumber = 0" id="6fa4ba9d-f412-413e-86e4-7f092ff55bfd"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 0, pageNumber = 0" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 0
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 0"><con:configuration><path>$.payload.pageNumber</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 25"><con:configuration><path>$.payload.pageSize</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 25"><con:configuration><path>$.payload.appointmentList</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = 1, pageNumber = 1" id="fd6e3c6c-53e1-46bb-8c4b-5a66ba7323e5"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 1, pageNumber = 1" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 1,
    "pageSize": 1
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 1"><con:configuration><path>$.payload.pageNumber</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 1"><con:configuration><path>$.payload.pageSize</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 1"><con:configuration><path>$.payload.appointmentList</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = 1, pageNumber = -1" id="027549f4-0d4e-4689-9e93-5010a47e5930"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = 1, pageNumber = -1" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": -1,
    "pageSize": 1
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 0"><con:configuration><path>$.payload.pageNumber</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 1"><con:configuration><path>$.payload.pageSize</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 1"><con:configuration><path>$.payload.appointmentList</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="pageSize = -1, pageNumber = 1" id="3f50a705-ca29-405f-8a47-e63675fe488c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v5/archiveAppointment/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pageSize = -1, pageNumber = 1" id="db89b1ff-6342-439a-b9bf-25d9e25abbeb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "${#TestCase#birthDate}",
  "omsNumber": "${#TestCase#omsNumber}",
  "pagingOptions": {
    "pageNumber": 1,
    "pageSize": -1
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/archiveAppointment/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d2112408-f2fa-4dcd-9a43-03e8dba17762" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageNumber = 1"><con:configuration><path>$.payload.pageNumber</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b3e8f7-dc63-4182-a059-e0feb5393d8d" name="pageSize = 25"><con:configuration><path>$.payload.pageSize</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="60d86a8f-12ee-4d08-bb2b-d7f70f10c72d" name="appointmentList Count = 25"><con:configuration><path>$.payload.appointmentList</path><content>25</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="EI-Token" value="${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:setupScript/><con:properties><con:property><con:name>patientId</con:name><con:value>10581395</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-04-09</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2020-12-27</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2022-12-27</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2023-10-27</con:value></con:property><con:property><con:name>pageNumber</con:name><con:value>167</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>lkDbConnection</con:name><con:value/></con:property><con:property><con:name>lkDbLogin</con:name><con:value/></con:property><con:property><con:name>lkDbPassword</con:name><con:value/></con:property><con:property><con:name>lkFullDbConnection</con:name><con:value/></con:property><con:property><con:name>lkEndpoint</con:name><con:value>https://lkservice.test.emias.mos.ru</con:value></con:property><con:property><con:name>lkDBDriver</con:name><con:value/></con:property><con:property><con:name>emiasInfoEndpoint</con:name><con:value>http://application-emiasinfo2.emias.solit-clouds.ru</con:value></con:property><con:property><con:name>emiasInfoDbConnection</con:name><con:value>172.17.5.11:29103/emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoDbLogin</con:name><con:value>emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoDbPassword</con:name><con:value>emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoFullDbConnection</con:name><con:value>jdbc:postgresql://172.17.5.11:29103/emiasinfoapp?user=emiasinfoapp&amp;password=emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoDBDriver</con:name><con:value>org.postgresql.Driver</con:value></con:property><con:property><con:name>suppDbConnection</con:name><con:value>@//10.2.172.242:1521/emiasdb</con:value></con:property><con:property><con:name>suppDbLogin</con:name><con:value>EMIAS_CLUSTER</con:value></con:property><con:property><con:name>suppDbPassword</con:name><con:value>EMIAS_CLUSTER</con:value></con:property><con:property><con:name>suppFullDbConnection</con:name><con:value> jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:value></con:property><con:property><con:name>suppDBDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>saOrchestratorEndpoint</con:name><con:value>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:value></con:property><con:property><con:name>saOrchestratorDbConnection</con:name><con:value/></con:property><con:property><con:name>saOrchestratorDbLogin</con:name><con:value/></con:property><con:property><con:name>saOrchestratorDbPassword</con:name><con:value/></con:property><con:property><con:name>saOrchestratorFullDbConnection</con:name><con:value/></con:property><con:property><con:name>sudirToken</con:name><con:value>uN2IFsXsyGeZloVUrJx1zCsISVoO5Xfq--rcT8515M4</con:value></con:property><con:property><con:name>X-Access-JWT</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2ODk3NzcxNDMsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJjMzdlYWU5ZC1hOTJhLTRmOTMtODlhYy05MjI4NjU3MjM2YWEiLCJzaWQiOiJhZjNmMjU3MS1hZGM1LTRlOWMtOTUzYi0wNjczNTIyODE3NmIiLCJwaG9uZSI6Ijc5MjY1MjA5MjA3Iiwic3NvX2lkIjoiWDhGbzNZU2F1WjBicjFIdkFWZ0dubzBhV1V4RE1RbDRGWFBNT2VsQjR1OHBFRncwTUsyZ0Z0ejZtRE0wdEg3Z3hlNEl2V05TcysrblJ5eDBXeFJqMDRLYWh0QkJWVmZ4TVl0OURuTERRMC92YnZRS0l1NFhlcHJsTVBWeXp0Y1RaVjRNSlViQ1dhR0VueDQzR3oyQUZVT3lxUmJlQm43TnJCTzdPb0lxTnRhUGI4bHNlcHdpNnhseWtQcU1YZ1dRYk1wc2p3N2JHeTFsQkEyV1BZQ2hLcDZ0d243QVo3NXBxdXNRY2NhVkxBYjI2WnVEVWdpMFRWVExabW5BTHU3Rld3N1NWVGpYRGJrQy9UZFU5cHFJK0s1a2xodlBxRE9aRmpVaW5mR29xV2gxd2FISjE0SkhURVBQNHl2M3RBU1BscW9SSW00c1R6T1V6b1F0dmJtdzJBPT0iLCJlbWFpbCI6IiIsImZpcnN0X25hbWUiOiJcdTA0MmZcdTA0M2RcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzOFx1MDQ0NVx1MDQzMFx1MDQzOVx1MDQzYlx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIxOTgyLTA0LTA5In0.uos-7zP04IlM9GqDUe6KVJYjppKa97T9BWA2K89tPSK136fwVPAkKUQ1ih3IF_4ijmM3Ha-7QIuAbr0T_blFr63y0kqYc4QPqEas19xUgFMU3XTvDv7LW3yjDZhuY3D35ulhk5n3BoslwboIt_2YiHiMtOld5VkI-ZkyA6mG6d2CTZY6QEPor8V3_zDFfz1QFYHh0NiwCCL3-6n9vi8FNDFpMdxQXmai2vt9tQOHU3ctkwg6QwjuZyhSqodaGL767yLTdi183uAOf0qMk5dCUwjt9tC_tGC9JY9nRrgczSxN8ZnSxPX-tWqqbo3wJJuYFEtIcpyADj4zcQ_VKUoBiJAVRyMkANFqvyzESOnQIK4H4ccnTyeZILU7dSaWohCoJ0_m1W_fQH3qTnPcbTwAG4-Yk43QBWASa30AbR0amfDhKAPVzDObCysnXC0Ukckjt6trjZ3mLuxdCjXKrq5omGrvgELEbTHHyzA9Y03AWE28hlLxt-U__FyOGcfnjMcIJHlRI_b74i_M4hWI6TU_AJysRc4l7r5recokrXXLQrquLtWgKr7TCxmfyavNqF5xaowQ2GRnvQf1IttCpB9twjWgBxOt7UKmmI1WorWoIHXPzVpC_db_plntZEB-qViOqvX2GGtHr5kSfj9FwuihzFWj3cBWjgz2IJJRlfW5glw</con:value></con:property><con:property><con:name>mockUrl</con:name><con:value>http://application-mock.emias.solit-clouds.ru</con:value></con:property><con:property><con:name>mockDbFullConnection</con:name><con:value>jdbc:postgresql://172.17.5.13:29107/emias_info_mock?user=emias_info&amp;password=emias_info</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>