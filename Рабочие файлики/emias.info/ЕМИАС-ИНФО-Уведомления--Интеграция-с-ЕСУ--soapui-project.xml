<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="a5b0a303-bd51-45ba-8bed-536045076cdb" activeEnvironment="Default" name="ЕМИАС.ИНФО Уведомления. Интеграция с ЕСУ" resourceRoot="" soapui-version="5.7.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="8b611ec2-60c1-4d06-a7bb-84c71c3c45d9" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://notification-emiasinfo1.emias.solit-clouds.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://notification-emiasinfo1.emias.solit-clouds.ru</con:endpoint></con:endpoints><con:resource name="Env" path="/actuator/env" id="5abb8c8e-5df0-4e38-81d1-fd89473c8f44"><con:settings/><con:parameters/><con:method name="Env 1" id="c75998b3-0d43-4413-95b8-797552945504" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/vnd.spring-boot.actuator.v3+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:env="http://notification-emiasinfo1.emias.solit-clouds.ru/actuator/env">env:Response</con:element></con:representation><con:request name="get env" id="59502cb4-33db-4b01-bc7c-415e0f716f5f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://notification-emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:originalUri>http://notification-emiasinfo1.emias.solit-clouds.ru/actuator/env</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="2e5c8f74-b98e-4fb9-90d2-aebe6e9a994d" name="А_ЕСУ-01 - Получение сообщения о записи"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2017765b-d68e-4b69-a5b0-a3d6222f9a4a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Найти несуществующего пациента" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Найти несуществующего пациента" id="eacd3727-cb6d-4e3c-8f05-3b06a64affe0"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
patientId=sql.firstRow("SELECT coalesce(max(patient_id)+100, 1) as id FROM f_user").id
testRunner.testCase.testSuite.setPropertyValue("nonExistentPatientId", patientId.toString())</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="58a258c9-61eb-4cd4-aa83-e8c12a54f29b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверить наличие пациента со всеми девайсами" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить пациента с девайсами со всеми настройками old" id="f8a14c80-e31c-48a9-90f5-ebcd7a7a31f1" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
//в этом кейсе создадутся все минмально необходимые левайсы с настройками для проверки А_ЕСУ_01 шаг 8
// и  А_ВА_02

// функция, проверяющая настройки девайса, обновляет, создает или удаляет их, если требуется для девайса и его комбинации параметровв
def checkSettings(def guid, def apps, Boolean newDevice=true){
	settingsExist=false
	if(!newDevice){
		query="select * from f_device_settings where device_guid='"+guid+"'"
		result=sql.firstRow(query)
		settingsExist = result ? true : false
	}
	needApp= apps.app ==null ? false : true
	others=false 
	if(needApp && !apps.app && !apps.appRem) others=true
	options=[settingsExist,needApp]
	settingsQuery=""
	// подобрать запрос в бд относительно наличию у девайса настроек и необходимому значению device_settings.appointment
	switch(options){
		case {it ==[true, true]}:
			settingsQuery="update f_device_settings set appointment=  "+apps.app+",appointment_reminder="+apps.appRem+", referral="+others+", pr_news="+others+",  hospital_assignment="+others+
					" where device_guid='"+guid+"'"
			break;
		case {it == [true, false]}:
			settingsQuery="delete from f_device_settings where device_guid='"+guid+"'"
			break;
		case {it ==[false, false]}:
			break;
		case {it == [false, true]}:
			settingsQuery="INSERT INTO f_device_settings "+
					"(device_guid, appointment, appointment_reminder, referral, pr_news, hospital_assignment) "+
					"VALUES('"+guid+"', "+apps.app+", "+apps.appRem+", "+others+", "+others+", "+others+")"
			break;
	}
	sql.execute(settingsQuery)
}

// функция, проверяющая есть ли девайс с нужной комбинацией параметров. если нет - досоздает. также вызывает функцию  checkSettings
def checkDevice(long userId, def a, def d, def v, def apps, int i){
			log.info "проверяю девайс номер "+i+"с параметрами a="+a+" d="+d+" v="+v+" apps="+apps
			voipCondition= v != null ? "="+v : "is null"
			appCondition= apps.app != null ? "="+apps.app : "is null"
			appRemCondition= apps.appRem != null ? "="+apps.appRem : "is null"
			deviceQuery="select fud.device_guid from f_user_device fud "+
							"left join f_device_settings fds on fds.device_guid =fud.device_guid "+
							"where fud.user_id ="+userId+" and fud.authentication ="+a+
							" and fud.deleted ="+d+" and fud.voip  "+voipCondition+" and fds.appointment "+appCondition+" and fds.appointment_reminder "+appRemCondition
//			log.info deviceQuery
			device=sql.firstRow(deviceQuery)
//			log.info "device result "+device
			guid=""
			newDevice=false
//			log.info device
			if(device){
				guid=device.device_guid
			}
			else{
//				log.info deviceQuery
				guid= java.util.UUID.randomUUID()
				cloud= java.util.UUID.randomUUID()
				devQuery="INSERT INTO f_device (device_guid, app_version, platform, device_cloud_id, cloud_token_delete) VALUES('"+guid+"', '1.3.2', 'ANDROID','"+cloud+"', NULL)"
				userDevQuery="INSERT INTO f_user_device (id, device_guid, user_id, authentication, deleted, deleted_date, esia_authentication, main_policy, voip) VALUES(nextval('f_user_device_sequence'), '"+guid+"', "+userId+", "+a.toString()+", "+d.toString()+", NULL, NULL, NULL, "+v.toString()+")"
//				log.info "device devQuery "+devQuery
//				log.info "device userDevQuery "+userDevQuery
				sql.execute(devQuery)
				sql.execute(userDevQuery)
				newDevice=true
			}
			log.info guid
			checkSettings(guid, apps, newDevice)
			testRunner.testCase.testSuite.setPropertyValue("deviceGuid"+i, guid.toString())
}

// проверить, что пациент с идентификатором в сьюте есть в бд
patientId =testRunner.testCase.testSuite.getPropertyValue("patientId")
oms =testRunner.testCase.testSuite.getPropertyValue("oms")
user=sql.firstRow("select * from f_user where patient_id="+patientId)
//log.info user
userId=0
if( !user){
	query="INSERT INTO f_user VALUES(nextval('f_user_sequence'), "+patientId+", '"+oms+"', '2012-06-07') RETURNING id "
	userId=sql.firstRow(query).id 
}
else{
//	log.info("пациент есть")
	userId=user.id
}
//log.info userId
testRunner.testCase.testSuite.setPropertyValue("userId", userId.toString())

//для каждого важного параметра в f_user_device собрать возможные значения
auth=[true, false]
deleted=[true, false]
voip=[true, false, null]
// в массиве собраны те комбинации параметров f_user_device, для которых должна быть отправка 
specialDevSettings=[
							[auth:true, del:false, voip:null ],
							[auth:true, del:false, voip:false],
							[auth:false, del:false, voip:null],
							[auth:false, del:false, voip:false]
							]
// в массиве собраны значения f_device_settings.appointment и appointment_reminder, с которыми должна создаться запись в f_device_settings для девайса из списка выше (соответствие по индексу)
specialAppointmentValue=[ 
									[ [app:true,appRem:true] , [app:false,appRem:false],  [app:null ,appRem:null] ],
									[ [app:false,appRem: true], [app:true,appRem:false] ],
									[ [app:true,appRem:true] , [app:false,appRem:false],  [app:null ,appRem:null] ],
									[ [app:false,appRem: true], [app:true,appRem:false] ]
									]
allDeviseParamCombinations=[]
// собрать все комбинации параметров в f_user_device
auth.each{ a ->
	deleted.each{ d ->
		voip.each{ v ->
			devParams=[auth:a, del:d, voip:v ]
			allDeviseParamCombinations << devParams
		}
	}
}

i=1
//список индексов девайсов, по которым должна будет осуществиться отправка уведомлений
devicesToSend=[]
deviceTaskDontSend=[]
//список индексов девайсов, по которым должна будет осуществиться отправка silent уведомлений
devicesToSendSilents=[]
deviceTaskDontSendSilent=[]
//для каждой комбинации основных параметров создать девайс с соответствующими настройками
allDeviseParamCombinations.eachWithIndex{it, index1 ->
	checked=false
// если комбинация параметров  есть в списке specialDevSettings определить для них особые значения настроек и создать/обновить данные
	specialDevSettings.eachWithIndex{spec, index->
		if(spec == it){
//			log.info it.toString()+" == "+spec.toString()+" index "+index
			apps=specialAppointmentValue[index]
//			log.info apps
			for(k=0; k<apps.size(); k++){
				log.info "значения appointment "+apps[k]
				checkDevice(userId,  it.auth,  it.del,  it.voip,  apps[k],  i)
				if( it.auth== true && it.del==false && it.voip != true ){
					if(apps[k].app != false) devicesToSend << i
					else  deviceTaskDontSend << i
				}
				//записать индекс девайса, по которому создаться таска но не отправится
				
				//собрать  индексы девайсов, для которых создадутся только silent уведомления
				if( it.del==false && it.voip != true ){
					if(apps[k].appRem != false)devicesToSendSilents << i
					else deviceTaskDontSendSilent << i
				}
				i +=1
			}
		}
	}
	// если комбинация параметров не найдена в specialDevSettings, то проверить девайс и наличие f_device_settings.appointment=true 
	if(!checked){
//			log.info( it.toString()+" уникальный. index "+index1)
			checkDevice(userId,  it.auth,  it.del,  it.voip,   [app:true,appRem:true],  i)
			checked=true
			i+=1
	}
}
devicesCount=i-1
testRunner.testCase.testSuite.setPropertyValue("devicesToSend", devicesToSend.toString().replace('[','').replace(']',''))
testRunner.testCase.testSuite.setPropertyValue("deviceTaskDontSend", deviceTaskDontSend.toString().replace('[','').replace(']',''))
testRunner.testCase.testSuite.setPropertyValue("devicesToSendSilents", devicesToSendSilents.toString().replace('[','').replace(']',''))
testRunner.testCase.testSuite.setPropertyValue("deviceTaskDontSendSilent", deviceTaskDontSendSilent.toString().replace('[','').replace(']',''))
testRunner.testCase.testSuite.setPropertyValue("devicesCount", devicesCount.toString())]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить пациента с девайсами со всеми настройками" id="3d81926b-730d-4087-9fb4-591c12142603"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
//в этом кейсе создадутся все минмально необходимые левайсы с настройками для проверки А_ЕСУ_01 шаг 8
// и  А_ВА_02

// функция, проверяющая настройки девайса, обновляет, создает или удаляет их, если требуется для девайса и его комбинации параметровв
def checkSettings(def guid, def apps, Boolean newDevice=true){
	settingsExist=false
	if(!newDevice){
		query="select * from f_device_settings where device_guid='"+guid+"'"
		result=sql.firstRow(query)
		settingsExist = result ? true : false
	}
	needApp= apps.app ==null ? false : true
	others=false 
	if(needApp && !apps.app && !apps.appRem) others=true
	options=[settingsExist,needApp]
	settingsQuery=""
	// подобрать запрос в бд относительно наличию у девайса настроек и необходимому значению device_settings.appointment
	switch(options){
		case {it ==[true, true]}:
			settingsQuery="update f_device_settings set appointment=  "+apps.app+",appointment_reminder="+apps.appRem+", referral="+others+", pr_news="+others+",  hospital_assignment="+others+
					" where device_guid='"+guid+"'"
			break;
		case {it == [true, false]}:
			settingsQuery="delete from f_device_settings where device_guid='"+guid+"'"
			break;
		case {it ==[false, false]}:
			break;
		case {it == [false, true]}:
			settingsQuery="INSERT INTO f_device_settings "+
					"(device_guid, appointment, appointment_reminder, referral, pr_news, hospital_assignment) "+
					"VALUES('"+guid+"', "+apps.app+", "+apps.appRem+", "+others+", "+others+", "+others+")"
			break;
	}
	sql.execute(settingsQuery)
}

// функция, проверяющая есть ли девайс с нужной комбинацией параметров. если нет - досоздает. также вызывает функцию  checkSettings
def checkDevice(long userId, def a, def d, def v, def apps, int i){
			log.info "проверяю девайс номер "+i+"с параметрами a="+a+" d="+d+" v="+v+" apps="+apps
			voipCondition= v != null ? "="+v : "is null"
			appCondition= apps.app != null ? "="+apps.app : "is null"
			appRemCondition= apps.appRem != null ? "="+apps.appRem : "is null"
			deviceQuery="select fud.device_guid from f_user_device fud "+
							"left join f_device_settings fds on fds.device_guid =fud.device_guid "+
							"where fud.user_id ="+userId+" and fud.authentication ="+a+
							" and fud.deleted ="+d+" and fud.voip  "+voipCondition+" and fds.appointment "+appCondition+" and fds.appointment_reminder "+appRemCondition
//			log.info deviceQuery
			device=sql.firstRow(deviceQuery)
//			log.info "device result "+device
			guid=""
			newDevice=false
//			log.info device
			if(device){
				guid=device.device_guid
			}
			else{
//				log.info deviceQuery
				guid= java.util.UUID.randomUUID()
				cloud= java.util.UUID.randomUUID()
				devQuery="INSERT INTO f_device (device_guid, app_version, platform, device_cloud_id, cloud_token_delete) VALUES('"+guid+"', '1.3.2', 'ANDROID','"+cloud+"', NULL)"
				userDevQuery="INSERT INTO f_user_device (id, device_guid, user_id, authentication, deleted, deleted_date, esia_authentication, main_policy, voip) VALUES(nextval('f_user_device_sequence'), '"+guid+"', "+userId+", "+a.toString()+", "+d.toString()+", NULL, NULL, NULL, "+v.toString()+")"
//				log.info "device devQuery "+devQuery
//				log.info "device userDevQuery "+userDevQuery
				sql.execute(devQuery)
				sql.execute(userDevQuery)
				newDevice=true
			}
			log.info guid
			checkSettings(guid, apps, newDevice)
			testRunner.testCase.testSuite.setPropertyValue("deviceGuid"+i, guid.toString())
}

// проверить, что пациент с идентификатором в сьюте есть в бд
patientId =testRunner.testCase.testSuite.getPropertyValue("patientId")
oms =testRunner.testCase.testSuite.getPropertyValue("oms")
user=sql.firstRow("select * from f_user where patient_id="+patientId)
//log.info user
userId=0
if( !user){
	query="INSERT INTO f_user VALUES(nextval('f_user_sequence'), "+patientId+", '"+oms+"', '2012-06-07') RETURNING id "
	userId=sql.firstRow(query).id 
}
else{
//	log.info("пациент есть")
	userId=user.id
}
//log.info userId
testRunner.testCase.testSuite.setPropertyValue("userId", userId.toString())

//для каждого важного параметра в f_user_device собрать возможные значения
auth=[true, false]
deleted=[true, false]
voip=[true, false, null]
// в массиве собраны те комбинации параметров f_user_device, для которых должна быть отправка 
specialDevSettings=[
							[auth:true, del:false, voip:null ],
							[auth:true, del:false, voip:false],
							[auth:false, del:false, voip:null],
							[auth:false, del:false, voip:false]
							]
// в массиве собраны значения f_device_settings.appointment и appointment_reminder, с которыми должна создаться запись в f_device_settings для девайса из списка выше (соответствие по индексу)
specialAppointmentValue=[ 
									[ [app:true,appRem:true] , [app:false,appRem:false],  [app:null ,appRem:null] ],
									[ [app:false,appRem: true], [app:true,appRem:false] ],
									[ [app:true,appRem:true] , [app:false,appRem:false],  [app:null ,appRem:null] ],
									[ [app:false,appRem: true], [app:true,appRem:false] ]
									]
allDeviseParamCombinations=[]
// собрать все комбинации параметров в f_user_device
auth.each{ a ->
	deleted.each{ d ->
		voip.each{ v ->
			devParams=[auth:a, del:d, voip:v ]
			allDeviseParamCombinations << devParams
		}
	}
}

i=1
//список индексов девайсов, по которым должна будет осуществиться отправка уведомлений
devicesToSend=[]
deviceTaskDontSend=[]
//список индексов девайсов, по которым должна будет осуществиться отправка silent уведомлений
devicesToSendSilents=[]
deviceTaskDontSendSilent=[]
//для каждой комбинации основных параметров создать девайс с соответствующими настройками
allDeviseParamCombinations.eachWithIndex{it, index1 ->
// если комбинация параметров  есть в списке specialDevSettings определить для них особые значения настроек и создать/обновить данные
	if(specialDevSettings.contains(it)){
		log.info "Это спец девайс"
		index=specialDevSettings.indexOf(it)
		apps=specialAppointmentValue[index]
		for(k=0; k<apps.size(); k++){
			log.info "значения appointment "+apps[k]
			checkDevice(userId,  it.auth,  it.del,  it.voip,  apps[k],  i)
			//собрать  индексы девайсов, для которых создадутся обычные уведомления
			if( it.auth== true && it.del==false && it.voip != true ){
				if(apps[k].app != false) devicesToSend << i
				else  deviceTaskDontSend << i
			}
			//собрать  индексы девайсов, для которых создадутся silent уведомления
			if( it.del==false && it.voip != true ){
				if(apps[k].appRem != false)devicesToSendSilents << i
				else deviceTaskDontSendSilent << i
			}
			i +=1
		}
	}
	else{
		log.info "Это обычный девайс"
		checkDevice(userId,  it.auth,  it.del,  it.voip,   [app:true,appRem:true],  i)
		i+=1
	}
}

devicesCount=i-1
testRunner.testCase.testSuite.setPropertyValue("devicesToSend", devicesToSend.toString().replace('[','').replace(']',''))
testRunner.testCase.testSuite.setPropertyValue("deviceTaskDontSend", deviceTaskDontSend.toString().replace('[','').replace(']',''))
testRunner.testCase.testSuite.setPropertyValue("devicesToSendSilents", devicesToSendSilents.toString().replace('[','').replace(']',''))
testRunner.testCase.testSuite.setPropertyValue("deviceTaskDontSendSilent", deviceTaskDontSendSilent.toString().replace('[','').replace(']',''))
testRunner.testCase.testSuite.setPropertyValue("devicesCount", devicesCount.toString())]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cf3e03c4-ec91-473f-ad09-82161b4a48d3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получить параметр отвечающий за доступность сайлентов" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="get env" id="d2e02233-27a0-43e1-bfa3-721bd6effa33"><con:settings/><con:config service="http://notification-emiasinfo1.emias.solit-clouds.ru" resourcePath="/actuator/env" methodName="Env 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get env" id="59502cb4-33db-4b01-bc7c-415e0f716f5f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoNotificationsEndpoint}</con:endpoint><con:request/><con:originalUri>http://notification-emiasinfo1.emias.solit-clouds.ru/actuator/env</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Найти параметр и записать в свойства" id="e3928eaf-f099-486b-8702-60f6825c3075"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import java.util.ArrayList

def envResponse = context.expand('${get env#Response}')
def  env =  new JsonSlurper().parseText( envResponse)

value= env.propertySources.findAll {it.name == 'systemEnvironment'}[0].properties.'app.esu.appointment.silent.enable'.value

testRunner.testCase.testSuite.setPropertyValue("silentEnable", value.toString())</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="58a69491-43cb-4da6-8c02-a70010d08fd1" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>d</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>get env</con:sourceStep><con:sourcePath>$.propertySources[?(@.name=='systemEnvironment')].properties['app.esu.appointment.silent.enable'].value</con:sourcePath><con:targetType>silentEnable</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7d0d5070-8106-4f1f-8001-92b775c73be1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверить наличие пациента без девайсов" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить наличие пациента без девайсов" id="2eff969d-102c-4243-9e4e-4c0ef07b6fd6"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def createUser(String patientId, String oms){
	query="INSERT INTO f_user VALUES(nextval('f_user_sequence'), "+patientId+", '"+oms+"', '2012-06-07') RETURNING id "
	userId=sql.firstRow(query).id 
	return userId
}
	
// проверить, что пациент с идентификатором в сьюте есть в бд
pPropertyName="patientWithoutDevices"
omsParamName="oms2"
patientId =testRunner.testCase.testSuite.getPropertyValue(pPropertyName)
oms =testRunner.testCase.testSuite.getPropertyValue(omsParamName)
user=sql.firstRow("select * from f_user where patient_id="+patientId)
//log.info user
userId=0
if( !user){
	userId=createUser( patientId, oms)
}
else{
//	log.info("пациент есть")
 	noDevices=false
 	while(!noDevices){
		userId=user.id
		devices=sql.rows("SELECT * FROM f_user_device WHERE user_id ="+userId)
		if(devices == null ) noDevices=true
		else{
			patientId = patientId.toLong()+1
			user=sql.firstRow("select * from f_user where patient_id="+patientId)
			if(!user){
				noDevices=true
				oms=oms.toLong()+1
				testRunner.testCase.testSuite.setPropertyValue(pPropertyName, patientId.toString())
				testRunner.testCase.testSuite.setPropertyValue(omsParamName, oms.toString())
				userId=createUser(patientId.toString(), oms.toString())
			}
 		}	
 	}
}
testRunner.testCase.testSuite.setPropertyValue("userWithoutDevices", userId.toString())</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cc3e924a-ca48-4e68-b048-532d6ec102a3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание записи на очный визит ко врачу(не передан receptionTypeId))" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="19b65aca-a490-4fd5-bcf4-66c2a6654ecf"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="885530ee-67f6-4379-bb5a-111a86030749"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="34b77943-518c-4864-b338-af1e5e188141"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="d9673c10-e49f-4e79-af04-096d824ead48"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="9ebd392b-0e27-4ac4-a8b5-c8931934324d"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="3ab00b3d-3d24-48ed-a3c9-374afc64456a"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="70a80738-3075-4959-96fc-82b3cff2f952"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="56d4f296-cbce-4b36-9364-2f6917348cb1"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="53d6f315-d48c-4baf-b7e3-61a6179a9e1b"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value/></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-07 16:15:19</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>07.05.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073122</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688213000</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>460</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-05-07 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="13d6632e-b8cb-4134-a588-f1c85ead9f52" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание запись на ТМК ко врачу" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="23d87473-c879-4453-8a6e-63999a5e7f87"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="064235db-2ad4-472f-964f-2e6fecf174f7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="44212b52-c121-4465-9afe-ccb45d8e2ef9"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
receptionTypeId=sql.firstRow("SELECT code_reception_type as id FROM d_reception_type_tmk_code WHERE archived_reception_type = false and is_deleted = false  order by id asc").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())
testRunner.testCase.setPropertyValue("receptionTypeId", receptionTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="d71d9ee0-fdd5-455d-b204-abacb9e8a1c4"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="d23a881a-9355-40a8-9024-61a4e729569b"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="1ff84403-8436-4238-be03-4365c896fc58"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="a8095d85-0bcf-4afa-bfa5-539192a841b5"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",true,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="d170847c-1c31-40a9-a9e7-0096f40d9b6b"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="8668f65a-c304-435a-9d90-00e997743135"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>isTmk</con:name><con:value>true</con:value></con:property><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>1626</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:13:40</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073121</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212999</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>461</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="9078b7ef-ffd7-4ce9-8c05-a35376000125" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание запись на ТМК ко врачу. У врача нет отчества" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="f0d22907-ec9f-4cab-9804-f560f1b70474"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="e355101a-2b1e-4299-83a4-0a1294dc3bfc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="d79000d7-29a2-40d5-8933-2e93cc357d3b"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
receptionTypeId=sql.firstRow("SELECT code_reception_type as id FROM d_reception_type_tmk_code WHERE archived_reception_type = false and is_deleted = false  order by id asc").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())
testRunner.testCase.setPropertyValue("receptionTypeId", receptionTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="7e2f83f7-218f-4ede-ba6f-8f46562eb63a"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "<middleName/>" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="fb3f9dee-d4fc-458a-8334-abfa99939bdd"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="bf57a79d-f972-41b8-90ab-1379c4ca35a0"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="a92cea66-b05b-43ed-aa59-5cc35ccc229e"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name.trim())
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",true,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="a0955a67-1e21-42af-9386-4fb8f3c9948a"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="474efe4b-618e-4f99-ac13-77531947595f"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>isTmk</con:name><con:value>true</con:value></con:property><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value/></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>1626</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:13:48</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073120</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212998</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>462</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор</con:value></con:property></con:properties></con:testCase><con:testCase id="6b2f43b5-9b90-4020-9123-dc0c99e48a99" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание запись на ТМК ко врачу. передан архивный receptionTypeId" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="b74caebd-3de0-425f-9fa0-1405e96020b4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="f955031d-1d41-4e0e-a978-2548a42c9a08"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="418d6c38-d836-42ab-bb3e-75a3a1640860"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
receptionTypeId=sql.firstRow("SELECT code_reception_type as id FROM d_reception_type_tmk_code WHERE archived_reception_type = true and is_deleted = false  order by id asc").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())
testRunner.testCase.setPropertyValue("receptionTypeId", receptionTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="4a5fb27c-a4b1-46d3-ae38-923fd05082ea"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="f1fbe689-44a4-4207-ba92-893d91ab63f5"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="4db2b4d5-497f-44d7-a7ed-f7dabe1a9a12"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="e6db40c2-ff6f-4b92-833c-71f50d324a49"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="85d2b580-fff1-4337-bea0-84fe568aaab5"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="67127de1-a4d1-4300-9fa3-94940efebe83"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>1600</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:13:56</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073119</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212997</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>463</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="2cc2c0d8-b936-4524-8f4d-c24db9f82358" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание запись на ТМК ко врачу. передан удаленный receptionTypeId" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="a954dd6a-ef4e-4fb4-afba-0fd59f8f0812"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="80d2cd00-8440-4600-a2ab-b6ed0949b6d7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="dc3bc1b3-495e-4a65-9292-fd6e6295be7e"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
receptionTypeId=sql.firstRow("SELECT code_reception_type as id FROM d_reception_type_tmk_code WHERE archived_reception_type = false and is_deleted = true order by id asc").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())
//testRunner.testCase.setPropertyValue("receptionTypeId", receptionTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="e333a9fa-51de-4573-b2e4-4c53fdbe141c"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="1622fc0a-ba2d-4482-8c13-84ea21ff91e7"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="0acdae63-1735-4d7e-93fb-7bfb68dbd06d"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="5d4a8e75-c4ca-4ae9-b516-8921ef3a3aa1"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="cfe6ad5f-d170-4b67-ac0b-0154b1527286"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="fe0db168-248b-41c5-8a51-e027960bf3d1"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>4</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:14:04</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073118</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212996</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>464</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="01e374f1-b1e7-49ca-b550-7743973fdb3b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение записи на очный визит ко врачу(не передан receptionTypeId))" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="da02933e-6328-4599-9db1-46be08755f46"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="549629be-461d-4a6e-984b-f54090748b99"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="b8b47a84-fa47-4629-a7d9-d87974816ab6"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="07824a57-7859-4a86-9a22-3f98614a7664"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="f2421111-c15f-45cf-89cd-9af1a020a76e"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="ab423b0b-1001-4f9e-a221-f12facaa14be"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="5776d6ba-8a42-44aa-9953-3742df3d2136"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="9142afa6-43e2-47a1-a5c0-7a651c93954a"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="af102652-01cc-4bd0-b744-d26cf1c55c97"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CHANGE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value/></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:14:13</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073117</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212995</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>465</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="346bd914-fa3c-42ec-89b0-b9048a38f328" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение записи на ТМК ко врачу" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="36a67215-71c8-4e1c-9edc-df4a138a5d74"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="0e49a88d-0fbb-48d3-9318-ef79602361da"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="f56f140a-97df-4dfb-a658-874e12b2b875"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
receptionTypeId=sql.firstRow("SELECT code_reception_type as id FROM d_reception_type_tmk_code WHERE archived_reception_type = false and is_deleted = false  order by code_reception_type asc").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())
testRunner.testCase.setPropertyValue("receptionTypeId", receptionTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="02b1167a-f92a-4c4d-8fcb-e38fe0500836"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="784451b4-f6a7-4ef4-9ca8-3503fd5be968"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="6e69afb2-4b03-45e3-83e4-230d3c247838"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="23cb8ad0-914a-40b4-b5a4-3c926434fe0c"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",true,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="778092dd-7ee0-4150-8048-a5bf9f1d46d9"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="6902d6e7-5d0d-4dea-81f2-b8d3dd95cdf0"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>isTmk</con:name><con:value>true</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>1626</con:value></con:property><con:property><con:name>status</con:name><con:value>CHANGE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:14:21</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073116</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212994</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>466</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="ae7c167a-aee8-4ff7-8095-5fc52b03b36a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение записи на ТМК ко врачу. передан архивный receptionTypeId" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="34e79a70-7775-49a6-bb8b-acd5490f3c5a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="7e0130e2-e99f-4f79-8294-b22168360ff3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="3c92f766-b818-43d6-890d-c455d4849183"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
receptionTypeId=sql.firstRow("SELECT code_reception_type as id FROM d_reception_type_tmk_code WHERE archived_reception_type = true and is_deleted = false  order by id asc").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())
testRunner.testCase.setPropertyValue("receptionTypeId", receptionTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="cb114dd5-f801-40f0-91bb-f2bd964d1605"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="3595b7b4-9163-494b-aa02-333cd2da7007"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="87c853bf-ee5f-422a-a901-9a5e89334993"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="2ffac6b7-9d93-4c34-a373-c02f1e741574"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="e50dbf6c-a4cb-4267-80b9-539e0cac47b8"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="59d359fb-e52b-4ae8-b0d7-eaf84fe2fc21"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>status</con:name><con:value>CHANGE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>1600</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:14:29</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073115</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212993</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>467</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="511283cc-58bf-43b0-8248-6b8d85ca26fc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение записи на ТМК ко врачу. передан удаленный receptionTypeId" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="bdde884a-2675-48af-9689-896904a42201"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="cac8ae50-19b5-4706-9188-41ac10a892b5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="464e33ae-8855-4c96-9813-66c947633f2e"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
receptionTypeId=sql.firstRow("SELECT code_reception_type as id FROM d_reception_type_tmk_code WHERE archived_reception_type = false and is_deleted = true order by id asc").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())
//testRunner.testCase.setPropertyValue("receptionTypeId", receptionTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="1556d3de-e87e-41e8-a926-3a9d4dcdb288"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="473d595b-9cd3-4695-acd1-3f7e2c33a56d"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="987bc25f-eae6-4cef-8b9c-79298c725720"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="bf4db926-69ee-49b2-b4e6-b6143baca797"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="11f09239-f202-41c6-a99c-45b07b758efd"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="05b5dd2b-fca2-4925-aa74-cedf2b95d71f"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>status</con:name><con:value>CHANGE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>4</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:14:37</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073114</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212992</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>468</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="c051c8fe-ac2f-4892-a92e-067331446e7d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отмена записи на очный визит ко врачу(не передан receptionTypeId))" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="188f1670-921b-4cfb-a7b0-1617c2df2297"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="64912f0f-f07f-4336-affb-0f2c2d450eac"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="d9f239e4-34c9-4f13-9cf5-d37a61d01b19"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="c6a8a15e-0120-4eb8-af4d-373c1f4f056e"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="4593a9c3-2f59-44ff-b1a9-0a0a5a4a55c8"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="845ceaee-26e7-4d82-a414-dfe58fdccce7"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="3f28ad4c-9c24-4640-bd23-54c243a70e9a"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="2b846630-e91e-44ac-b395-ceb13f92f1a7"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="db58ad3d-5b15-4a78-9f64-c9e3c17150e1"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CANCEL</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value/></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:14:45</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073113</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212991</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>469</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="5706d9af-8dc2-4c22-bcf4-71509644b56a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отмена записи на ТМК ко врачу" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="8a1333e3-6017-461d-882e-de19a3e9ca6c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="956099ca-98c8-4b0d-be1e-1fd801e54fcf"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="bf18d9f7-e8b6-474f-8821-075b111b6ea0"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
receptionTypeId=sql.firstRow("SELECT code_reception_type as id FROM d_reception_type_tmk_code WHERE archived_reception_type = false and is_deleted = false  order by code_reception_type asc").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())
testRunner.testCase.setPropertyValue("receptionTypeId", receptionTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="5fa61c44-d5d4-4f1a-84ee-c885c1447d5f"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="998e5406-3910-4e2c-bd94-e871bda781b0"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="aff8b970-4426-43d6-aa95-285c43a6ac06"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="fd8641a5-1ad1-4a72-adf1-622610c3420e"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",true,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="6845a89d-223f-41ff-ae2d-d19673bcabbb"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="407fe65e-5cb8-4938-9cc5-c20057a8179d"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>isTmk</con:name><con:value>true</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>1626</con:value></con:property><con:property><con:name>status</con:name><con:value>CANCEL</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:14:53</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073112</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212990</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>470</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="10035e36-621a-4f53-9a19-1dd0f1870462" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отмена записи на ТМК ко врачу. передан архивный receptionTypeId" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="f7d0e62b-7ee8-4a8d-9d42-ebaec1304e42"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="7dd49627-486f-4b54-8abd-9685b5776b30"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="4b4ab76e-57fc-46d0-9263-7e2cc82b79b9"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
receptionTypeId=sql.firstRow("SELECT code_reception_type as id FROM d_reception_type_tmk_code WHERE archived_reception_type = true and is_deleted = false  order by id asc").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())
testRunner.testCase.setPropertyValue("receptionTypeId", receptionTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="297c7d45-92b3-44fe-bf60-b9b601ce1246"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="a660c48b-e54f-4307-a876-65b1a27213cc"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="10f536ba-d908-460c-bd10-ea7b54bd0159"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="513b0147-a148-408b-8cbf-b587c5141e50"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="ab93cfaa-ca34-4c4c-a0ec-66d5d0da190f"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="7cd55e32-09a2-4186-95a3-326a66bc7555"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>status</con:name><con:value>CANCEL</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>1600</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:15:01</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073111</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212989</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>471</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="f9f33a24-d51d-4abe-b8ad-f789e65641a5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отмена записи на ТМК ко врачу. передан удаленный receptionTypeId" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="223b4a7e-3622-4344-8c0b-094b8942c1c9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="d667881e-e8f1-4f40-9051-668c6a4dbf01"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="ab05f1d1-51ee-4bdd-921d-5d26a4a8fab3"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
receptionTypeId=sql.firstRow("SELECT code_reception_type as id FROM d_reception_type_tmk_code WHERE archived_reception_type = false and is_deleted = true order by id asc").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())
//testRunner.testCase.setPropertyValue("receptionTypeId", receptionTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="7261a07c-4946-4408-9346-053a4316af57"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="85644516-9fd8-4782-97e5-a90ba0d078f1"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="64bb8f2a-e6e5-4a05-bd16-e9a195701318"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="29fd934d-ad98-44e5-a507-6c7c2c45643e"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="a42e0635-4140-4d35-b700-a1ac52f062c6"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="3dcb6d13-7c1a-4a04-b92e-c0e003a80ed6"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>status</con:name><con:value>CANCEL</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>4</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:15:09</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073110</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212988</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>472</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="02079e41-179e-4e4a-8a99-8383c362a5d8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание записи BM" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="225b2f16-5ac8-4360-aabb-95dc0dd41275"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="f5b12559-03bc-4930-b8e0-c1158ac6f42a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="43b40003-2fb0-407c-b106-e7f10daafcdf"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type == 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="b56a35fe-8a6c-45b9-b119-59304e8e875f"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <samplingType>
            <id>2</id>
            <name>"""+samplingType+"""</name>
    </samplingType>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="00f58621-1e5a-478b-a874-0e20746afdd8"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="50517aa1-6d81-46e1-97b7-24170de17936"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			log.info typePartDesc
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title, samplingType)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="eeccc892-261f-4c0d-bb3f-f3aa58f2ea38"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="10fd3d01-a1d3-41dd-b418-5252921428c9"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="a0c9223b-f28a-474d-9978-e8b7fdb7e067"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toBM</con:value></con:property><con:property><con:name>samplingType</con:name><con:value>Взятие крови</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Bm</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-22 11:36:02</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>22.05.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>-66</con:value></con:property><con:property><con:name>eventId</con:name><con:value>-1</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>200557</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-05-22 19:30:00.0</con:value></con:property></con:properties></con:testCase><con:testCase id="13a7e30b-6c32-48b5-a186-350785ae8ee7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение записи BM" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="6eb0bac5-6f2e-4792-8527-3e09592b147a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="ee528fda-d6b7-4255-b40e-964d5e9985a6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="bc8c7145-d2db-4627-85b1-bcb28453f293"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type == 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="c05ffbb8-a33f-46d5-9f44-4760135c7a2e"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <samplingType>
            <id>2</id>
            <name>"""+samplingType+"""</name>
    </samplingType>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="f409a040-a09b-4b3f-9087-5e9657221831"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="4656330f-66c5-4026-a5a8-ab96aca6190c"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			log.info typePartDesc
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title, samplingType)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="18399f3c-e374-444f-b199-b9826d39bd2e"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="9374cd34-955f-47b9-a341-74eb75b85961"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="2f43472e-01d6-43ed-8871-7bd2669aef1b"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CHANGE</con:value></con:property><con:property><con:name>type</con:name><con:value>toBM</con:value></con:property><con:property><con:name>samplingType</con:name><con:value>Взятие крови</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Bm</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-22 12:05:35</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>22.05.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>-70</con:value></con:property><con:property><con:name>eventId</con:name><con:value>-5</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>200564</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-05-22 19:30:00.0</con:value></con:property></con:properties></con:testCase><con:testCase id="1d9445a3-5420-4817-b7e7-71a265cd08f0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отмена записи BM" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="6199aaf4-7d02-4eca-9184-90fb4bca30d4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="e2512d5c-fd5f-473c-8973-944c238c0329"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="0bfe2d8a-b5a1-4884-8324-c795b1d8d7f5"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type == 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="e2d6678a-697c-415b-b792-e6bd3b48f281"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <samplingType>
            <id>2</id>
            <name>"""+samplingType+"""</name>
    </samplingType>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="a0a57801-852f-4937-bf99-f87aa5808349"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="4f0ec90a-aa4b-46e6-85a4-1b58ea1728e3"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			log.info typePartDesc
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title, samplingType)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="b8b71142-8e6e-40ab-90c3-11da706e73b1"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="49a30aa1-fae1-482c-aceb-2df136623b47"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="18b20972-776a-4703-89e8-2df0366cc60e"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CHANGE</con:value></con:property><con:property><con:name>type</con:name><con:value>toBM</con:value></con:property><con:property><con:name>samplingType</con:name><con:value>Взятие крови</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Bm</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:15:33</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073107</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212985</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>475</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property></con:properties></con:testCase><con:testCase id="17bb4650-a13b-40ef-973a-cc3381a6b5a3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание записи LDP" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="9b5dc788-d5f7-4cb5-b8bc-05e595a49636"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="bed818fd-a795-4d56-b606-ff974dbf2629"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="b8f0dc44-56ee-4916-aa17-648626e67b96"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type == 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="5f941b6d-d43a-401d-909d-9c743fa4e36f"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
ldpName= testRunner.testCase.getPropertyValue("ldpName")
ldpId= testRunner.testCase.getPropertyValue("ldpId")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <ldp>
            <id>"""+ldpId+"""</id>
            <name>"""+ldpName+"""</name>
            <examination>true</examination>
    </ldp>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="5e236476-26fe-4466-9d15-3dc64817cb67"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="66b9219f-b2f5-4c94-9e75-989c8adafcec"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			log.info typePartDesc
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title, samplingType)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="d2714d68-f557-4a12-8471-d07b6b3fd18a"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="19490c4d-5689-4352-93e3-79d70105a6ed"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="a7ef581c-59b0-4d0c-ae60-26d2e9a0f0ad"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toLdp</con:value></con:property><con:property><con:name>ldpName</con:name><con:value>ЭКГ</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Ldp</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:15:41</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073106</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212984</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>476</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>ldpId</con:name><con:value>2</con:value></con:property></con:properties></con:testCase><con:testCase id="cf9a94be-b0ea-447b-a157-a5b82022167d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Изменение записи LDP" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="dfa17c52-1b67-4bde-ae0c-9ec47ffea118"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="53996d70-bdc9-4fc7-a117-8da4fd85de13"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="90d163bf-ac15-4525-b45e-26803dc30fc8"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type == 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="7dc00bc1-2238-4fb7-8f7d-a2554977d682"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
ldpName= testRunner.testCase.getPropertyValue("ldpName")
ldpId= testRunner.testCase.getPropertyValue("ldpId")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <ldp>
            <id>"""+ldpId+"""</id>
            <name>"""+ldpName+"""</name>
            <examination>true</examination>
    </ldp>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="3b1b9c04-96f1-4e63-9a02-9652697e9d89"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="df1b8d9a-1b51-4abb-ad18-b967be17b87d"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			log.info typePartDesc
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title, samplingType)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="f0629b60-b9c2-4dec-a7dc-1ddeb8294d17"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="2b39f3c7-2cd6-44dc-bf08-bea1b3ddf79e"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="fee8a3a4-e752-4d14-9846-de871a2e6dd2"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CHANGE</con:value></con:property><con:property><con:name>type</con:name><con:value>toLdp</con:value></con:property><con:property><con:name>ldpName</con:name><con:value>ЭКГ</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Ldp</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-22 11:36:33</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>22.05.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>-67</con:value></con:property><con:property><con:name>eventId</con:name><con:value>-2</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>200558</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-05-22 19:30:00.0</con:value></con:property><con:property><con:name>ldpId</con:name><con:value>2</con:value></con:property></con:properties></con:testCase><con:testCase id="859622f2-c6ae-4eaf-9d5e-cdd9c5847cc6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отмена записи LDP" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="bcca6f7a-87b9-45f3-9f42-549cd0ec047e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="b841460e-e68a-4276-a582-7ec3cd031d09"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="a32aa5db-6bb8-4b65-8dc6-cd32b560a419"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type == 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="085d0563-8584-43d9-9b6e-b0efbf9883ae"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
ldpName= testRunner.testCase.getPropertyValue("ldpName")
ldpId= testRunner.testCase.getPropertyValue("ldpId")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <ldp>
            <id>"""+ldpId+"""</id>
            <name>"""+ldpName+"""</name>
            <examination>true</examination>
    </ldp>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="12e1064b-65a5-4dc5-8abe-8707a7431415"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="cd329ee0-f8bf-4227-8c23-484df6c0e087"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			log.info typePartDesc
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title, samplingType)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="531d8cc4-74f5-4fda-97b8-87332f742bff"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="97cdc238-eb9a-4d03-b3db-eaa40c2c218e"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="f1c7e4f7-9122-44b2-9dcc-8fbf09072034"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CANCEL</con:value></con:property><con:property><con:name>type</con:name><con:value>toLdp</con:value></con:property><con:property><con:name>ldpName</con:name><con:value>ЭКГ</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Ldp</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:15:57</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073104</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212982</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>478</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>ldpId</con:name><con:value>2</con:value></con:property></con:properties></con:testCase><con:testCase id="231b9fc5-68d5-4ac3-848c-b3d837f564c4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Привести лог уведомдения в json" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="7501955a-e4b4-4ae0-9326-b9d3af87656b"><con:settings/><con:config><script>import groovy.json.JsonSlurper

logMessage=testRunner.testCase.getPropertyValue("logMessage")
logMessage2=logMessage.replace('\\','').replace("}\"}}","}}}").replace("\"payload\":\"","\"payload\":")
event=new JsonSlurper().parseText(logMessage)
return event.event</script></con:config></con:testStep><con:properties><con:property><con:name>logMessage</con:name><con:value>{"event":"{\"access_token\":\"e34f670a-1886-4b31-a28a-dbec43a1f721\",\"event_id\":\"399d7cb4-5566-45c0-bcba-886681ed72af\",\"event_code\":\"EIM\",\"date_time\":1706605278992,\"to\":{\"device_guid\":\"b2dd5880-5747-486c-99bb-855f93497837\"},\"data\":{\"title\":\"Запись на прием к врачу\",\"body\":\"Запись изменена Врач-уролог, Шульц В.Е., ГБУЗ ГП 175 ДЗМ, каб. 211, 30.01.24 19:30\",\"type\":\"appointment\",\"notificationId\":13555,\"payload\":\"{\"type\":\"CHANGE\",\"startTime\":\"2024-01-30T19:30:00\",\"id\":-120,\"appointmentList\":\"Active\",\"oms\":\"1000000000009\"}\"}}"}</con:value></con:property></con:properties></con:testCase><con:testCase id="ce15ce25-f6f9-4138-b34d-84bb40424c59" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1. обработка сообщения по несуществующему пациенту" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Найти несуществующего пациента" id="dc109e4f-489f-4e5f-b618-d4bbcbc58445"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>2017765b-d68e-4b69-a5b0-a3d6222f9a4a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="3fee26a0-8af9-42d3-859f-9fd644bf8a63"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="000d9407-4f96-421d-9061-091d95b6a7b4"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("nonExistentPatientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="55787f56-cd10-4f8a-bc8d-8383046c8d37"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в f_notification" id="68d68bde-0c97-48e0-901b-9ef4c7f475dd"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 0){
	log.info("Количество записей в f_notification равно 0")
}
else testRunner.fail("Количество записей в f_notification не равно 0. фактическое ="+notifications.size()+"эти записи: "+notifications)
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в  f_notification_appointment" id="42196019-db2e-44e4-88ad-4cf84bbf0c29"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE appointment_id ="+appointmentId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 0){
	log.info("Количество записей в  f_notification_appointment равно 0")
}
else testRunner.fail("Количество записей в  f_notification_appointment не равно 0. фактическое ="+notificationAppointments.size()+"эти записи: "+notificationAppointments)</script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="b3b74d60-5549-4257-9564-6ff4467eecbe"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value/></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:16:03</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073103</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212981</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>37271</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="2bdfcd80-d046-48ed-8706-04d5a686629b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС2. обработка сообщения по пациенту без девайсов" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента без девайсов" id="c78d7183-1c92-4e22-ad16-0e70a57395d4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7d0d5070-8106-4f1f-8001-92b775c73be1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="91b9f2bd-b8be-4f63-b306-cb6868ed39b5"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="6d9d581b-4b91-43be-bbf5-279be228f72c"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientWithoutDevices")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="1c773edb-4cf3-4f1b-a0cb-5a0aabca926c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в f_notification" id="03d7a9bf-ad29-4a41-8389-414a85bf8975"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 0){
	log.info("Количество записей в f_notification равно 0")
}
else testRunner.fail("Количество записей в f_notification не равно 0. фактическое ="+notifications.size()+"эти записи: "+notifications)
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в  f_notification_appointment" id="0f9756a3-5e7f-4518-8e8b-5b8dc24ec8e9"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE appointment_id ="+appointmentId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 0){
	log.info("Количество записей в  f_notification_appointment равно 0")
}
else testRunner.fail("Количество записей в  f_notification_appointment не равно 0. фактическое ="+notificationAppointments.size()+"эти записи: "+notificationAppointments)</script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="be6a5174-48e2-482d-b277-fe2b41ec6ffd"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value/></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:16:10</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073103</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212981</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>37271</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="937e29a7-dc3e-4406-a815-1e9179013eb6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка шага4. Обработка сообщения по существующим appointmet и event" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="0154ed0c-1d82-4650-a697-1d5da1e4eb87"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="c6745950-4b54-4ebf-86b2-efb6abdbfa94"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select min(appointment_id) as id from f_notification_appointment ").id
eventId=sql.firstRow("select min(event_id) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="f4dfb90e-ceb2-4637-b9b2-bca669459806"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("nonExistentPatientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="8cfc70ce-6035-4a7a-bd32-573bf5e2b4be"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в f_notification" id="a2e48960-9f0d-492c-83b4-8fcf5df2935f"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 0){
	log.info("Количество записей в f_notification равно 0")
}
else testRunner.fail("Количество записей в f_notification не равно 0. фактическое ="+notifications.size()+"эти записи: "+notifications)
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в  f_notification_appointment" id="ce5fdc25-1461-464f-a480-17193845cab1" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE appointment_id ="+appointmentId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 0){
	log.info("Количество записей в  f_notification_appointment равно 0")
}
else testRunner.fail("Количество записей в  f_notification_appointment не равно 0. фактическое ="+notificationAppointments.size()+"эти записи: "+notificationAppointments)</script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="79cf1b90-6abb-4df3-8f02-bbc1d329f81c"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value/></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:16:16</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073104</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212982</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>37271</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="43642a55-5efd-4f0d-9476-60601af462e1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка шага 4. Обработка сообщения по существующим appointmentId и eventId, которые относятся к разным записям" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="fb66224f-7c0a-42ea-987d-49f6b74f4cff"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>9600e160-4ccf-4eba-aa6e-b52c77942926</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="6b6bfe7f-89e3-4773-9171-6a3bbd518586"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select min(appointment_id) as id from f_notification_appointment ").id
eventId=sql.firstRow("select min(event_id) as id from f_notification_appointment where appointment_id != "+appointmentId).id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="d2ab14e6-d854-4331-9218-a507637c4d02"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="f707a04c-2a0b-4e97-8938-dec197ba0ba5"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="d4e0db3a-53cb-4299-8a14-9e41eadfabde"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="3d58bb1c-db55-4f53-908c-11b5ccab6c1b"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="ab8e63b4-a312-4284-9d83-6cccdf0eccf3"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if(devicesToSendList.contains(i)){
		if(tasks.size() == 1){
			task=tasks[0]
			checkParameter("status","SEND",task.status)
			if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
		}
		else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
	}
	else if(deviceTaskDontSend == i){
		if(tasks.size() == 1){
			task=tasks[0]
			checkParameter("status","DONT_SEND",task.status)
			if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
		}
		else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
	}
	else{
		if(tasks.size() == 1){
			 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
		}
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="2144fe6e-a895-49c0-9c4d-19a601d712d1"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value/></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:16:24</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073104</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212983</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>479</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="e38d330e-0bb8-4ef9-b031-0b4c1772102c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка шага 4. Обработка сообщения по существующему appointmentId и новому eventId" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="c4a5d212-e925-4952-be40-dc4f468cb51e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="9d9ce015-e76f-4839-a382-959dc684cc66"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление о создании" id="b48998c1-0b0c-486b-8e87-a855ddfc6eb3"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status ="CREATE"
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="feee5e51-e094-4522-bcc1-da5e20a1280f"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="a5395de4-1e86-4654-85df-e03a892c5e28"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = "CREATE"
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления 2" id="3d7f4701-10ad-408c-971b-0d1013d08aac"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
testRunner.testCase.setPropertyValue("eventId", eventId.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление об изменении" id="cfba89eb-8e60-4beb-943f-c119e6bef07f"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = "CHANGE"
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <oms>"""+oms+"""</oms>
        <name12>Елизавета Сергеевна</name12>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification2" id="e5935f70-9340-42fa-a1d5-62e34b78d893"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status =status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="c69e30da-7f86-412a-8683-75f8a3746955"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="fe6b8a9b-cd52-47bc-8944-c2593dcd6c6c"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="a567fac3-5fa9-48db-8356-2adf84c67543"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CHANGE</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value/></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-02-19 19:16:39</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>19.02.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930073103</con:value></con:property><con:property><con:name>eventId</con:name><con:value>65688212980</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>481</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-02-19 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:testCase id="251fcc03-3576-4c9a-8a7c-f546e322c505" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="417806_Создание записи BM без ОМС" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="380c97d6-b13a-4ddf-bc9d-5f1b6e36600e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="f71df57c-af3b-45a0-af7f-4af5b8508e5d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="c040d807-1de7-4d46-9eda-b93a6a02735e"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type == 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="e5a36e4e-35d4-4e3a-90da-e51900294fe6"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <name12>Елизавета Сергеевна</name12>
        <phone>9160610800</phone>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <phone/>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <samplingType>
            <id>2</id>
            <name>"""+samplingType+"""</name>
    </samplingType>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="f8f2f564-557c-44fd-b13d-8f77e0576564"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="35886c17-0dfe-4808-89fe-4c21ba1550cc"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			log.info typePartDesc
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title, samplingType)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="f42c458b-b3d2-4396-8ca7-ff172ffcd340"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="5d1194b9-3c6d-4f69-9d72-6d43739e39ff"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="dc5c6b0d-f1af-4eb3-baae-47b6fa003706" disabled="true"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CREATE</con:value></con:property><con:property><con:name>type</con:name><con:value>toBM</con:value></con:property><con:property><con:name>samplingType</con:name><con:value>Взятие крови</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Bm</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-22 10:51:31</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>22.05.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>-65</con:value></con:property><con:property><con:name>eventId</con:name><con:value>0</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>200545</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-05-22 19:30:00.0</con:value></con:property></con:properties></con:testCase><con:testCase id="872b5f7b-a0b3-4cdd-8e31-9e8afa1c3dc2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="417807_Изменение записи LDP без ОМС" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="42ec5e99-8f80-40f3-8671-dd1aa5dd756e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="f25b302b-8435-4200-a418-e6b101ddb3e7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="425a3abb-dad0-4047-b80e-f47ac235f8f0"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type == 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="c0c74c48-3b9f-4571-bab2-1294ac52b388"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
ldpName= testRunner.testCase.getPropertyValue("ldpName")
ldpId= testRunner.testCase.getPropertyValue("ldpId")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <name12>Елизавета Сергеевна</name12>
        <phone>9035065055</phone>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <referralId>172680354215</referralId>
        <protocolId>8e6df004-bb1e-4a13-bb00-44e3e347f69b</protocolId>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <ldp>
            <id>"""+ldpId+"""</id>
            <name>"""+ldpName+"""</name>
            <examination>true</examination>
    </ldp>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="e79fdee0-706f-49ef-a155-dc0597fca7cd"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="172dbc1e-62e7-4cf5-b3fb-48943ab692e3"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			log.info typePartDesc
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
samplingType= testRunner.testCase.getPropertyValue("samplingType")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title, samplingType)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="00028618-e4e7-4c4d-9422-3eeb00e507bb"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="bfecda3f-2566-4706-ae5b-44b143336048"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="59919039-be0b-4595-a09e-09e7cc3afc67" disabled="true"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>status</con:name><con:value>CHANGE</con:value></con:property><con:property><con:name>type</con:name><con:value>toLdp</con:value></con:property><con:property><con:name>ldpName</con:name><con:value>ЭКГ</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Ldp</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-22 11:50:14</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>22.05.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>-68</con:value></con:property><con:property><con:name>eventId</con:name><con:value>-3</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>200562</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-05-22 19:30:00.0</con:value></con:property><con:property><con:name>ldpId</con:name><con:value>2</con:value></con:property></con:properties></con:testCase><con:testCase id="1cc7c393-f89f-40af-b7fd-a66fc8988cdc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="417810_Отмена записи ко врачу без ОМС" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Run Проверить наличие пациента со всеми девайсами" id="85e3523c-2d5b-49eb-a852-e5bc39b1e894"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>58a258c9-61eb-4cd4-aa83-e8c12a54f29b</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Run Получить параметр отвечающий за доступность сайлентов" id="89c69eae-dce5-4263-b254-c888624aa9c9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cf3e03c4-ec91-473f-ad09-82161b4a48d3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для уведомления" id="2b8e481c-ccc6-4032-8440-af38b98997f4"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=sql.firstRow("select coalesce(min(appointment_id)-1, 400000) as id from f_notification_appointment ").id
eventId=sql.firstRow("select coalesce(min(event_id)-1, 400000) as id from f_notification_appointment  ").id
notificationTypeId=sql.firstRow("SELECT * FROM d_notification_type WHERE title = 'appointment'").id
receptionTypeId=sql.firstRow("SELECT code_reception_type as id FROM d_reception_type_tmk_code WHERE archived_reception_type = true and is_deleted = false  order by code_reception_type asc").id
testRunner.testCase.setPropertyValue("appointmentId", appointmentId.toString())
testRunner.testCase.setPropertyValue("eventId", eventId.toString())
testRunner.testCase.setPropertyValue("notificationTypeId", notificationTypeId.toString())
testRunner.testCase.setPropertyValue("receptionTypeId", receptionTypeId.toString())

type = testRunner.testCase.getPropertyValue("type")
if( type = 'toDoctor'){
	lastName= testRunner.testCase.getPropertyValue("lastName")
	firstName= testRunner.testCase.getPropertyValue("firstName")[0].toUpperCase()+"."
	middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : testRunner.testCase.getPropertyValue("middleName")[0].toUpperCase()+"."
	middleNameForFullName=testRunner.testCase.getPropertyValue("middleName") == "" ? "" : " "+testRunner.testCase.getPropertyValue("middleName")
	shortName=lastName+" "+firstName+middleName
	fullName=lastName+" "+testRunner.testCase.getPropertyValue("firstName")+middleNameForFullName
//	log.info fullName
	testRunner.testCase.setPropertyValue("doctorShortName", shortName)
	testRunner.testCase.setPropertyValue("doctorFullName", fullName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="5a174475-5224-4209-94ad-046166272f3b"><con:settings/><con:config><script><![CDATA[// записать текущую дату и время в нужном формате
def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.util.Date
import java.text.SimpleDateFormat
log.info "Отправка сообщения по записи ко врачу"

def date = new Date()
def currentDateTimeForMessage = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss+03:00").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDate=new SimpleDateFormat("yyyy-MM-dd").format(date)
startDate=new SimpleDateFormat("dd.MM.yy").format(date)
startTime = testRunner.testCase.getPropertyValue("startTime")
endTime = testRunner.testCase.getPropertyValue("endTime")
start=currentDate.toString()+"T"+startTime+":00+03:00"
end=currentDate.toString()+"T"+endTime+":00+03:00"
startDateForDescriptin=startDate.toString()+" "+startTime
startDateForAppointment=currentDate.toString()+" "+startTime+":00.0"
log.info startDateForDescriptin
//log.info currentDate
//log.info currentDateTimeForMessage
//log.info currentDateTimeForDB
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("startDateForDescriptin", startDateForDescriptin.toString())
testRunner.testCase.setPropertyValue("startDateForAppointment", startDateForAppointment.toString())

// сформировать сообщение
eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
status = testRunner.testCase.getPropertyValue("status")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
specialityName= testRunner.testCase.getPropertyValue("specialityName")
lastName= testRunner.testCase.getPropertyValue("lastName")
firstName= testRunner.testCase.getPropertyValue("firstName")
lpuFullName= testRunner.testCase.getPropertyValue("lpuFullName")
lpuShortName= testRunner.testCase.getPropertyValue("lpuShortName")
middleName= testRunner.testCase.getPropertyValue("middleName") == "" ? "" : "<middleName>"+testRunner.testCase.getPropertyValue("middleName")+"</middleName>"
receptionTypeId=testRunner.testCase.getPropertyValue("receptionTypeId") == "" ? "" : "<receptionTypeId>"+testRunner.testCase.getPropertyValue("receptionTypeId")+"</receptionTypeId>"
number = testRunner.testCase.getPropertyValue("number")	
address = testRunner.testCase.getPropertyValue("address")	

message="""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:esuAppointment xmlns:ns2="http://emias.mos.ru/selfAppointment/selfAppointmentService/v1/">
    <event>
        <id>"""+eventId+"""</id>
        <type>"""+status+"""</type>
        <time>"""+currentDateTimeForDB+"""+03:00</time>
        <system>EIM</system>
    </event>
    <patient>
       <id>"""+patientId+"""</id>
        <name12>Елизавета Сергеевна</name12>
        <phone>9266131434</phone>
    </patient>
    <appointment>
          <id>"""+appointmentId+"""</id>
        <startTime>"""+currentDate+"""T19:30:00+03:00</startTime>
        <endTime>"""+currentDate+"""T20:00:00+03:00</endTime>
        <number>С20230724-244</number>
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>
    </appointment>
    <availableResource>
        <id>20583826989</id>
        <name> Шульц В. Е.</name>
    </availableResource>
    <complexResource>
        <id>241290613</id>
        <number>"""+number+"""</number>
        <address>"""+address+"""</address>
        <roomId>14441650</roomId>
    </complexResource>
    <lpu>
        <id>204</id>
        <shortName>"""+lpuShortName+"""</shortName>
        <fullName>"""+lpuFullName+"""</fullName>
        <mainLpuId>204</mainLpuId>
    </lpu>
    <doctor>
        <lastName>"""+lastName+"""</lastName>
        <firstName>"""+firstName+"""</firstName>
        """+middleName+"""
        <speciality>
            <id>2</id>
            <name>"""+specialityName+"""</name>
        </speciality>"""+receptionTypeId+"""
    </doctor>
</ns2:esuAppointment>
"""
//return message
sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka2(topicName,message)


]]></script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="52393538-9e60-4fbc-8748-89dd79a33275"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="a73dc36d-7fdb-4373-9c08-da513f1af93b"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	type = testRunner.testCase.getPropertyValue("type")
	lpuShortName = isTmk ? "" : testRunner.testCase.getPropertyValue("lpuShortName")	+", "
	number = testRunner.testCase.getPropertyValue("number")	
	start = testRunner.testCase.getPropertyValue("startDateForDescriptin")	
	cabinet = isTmk ? "" : 	"каб. "+number+", "
	firstDescPart=""
	switch(status){
		case "CREATE":
			firstDescPart = isTmk ? "Вы записаны на онлайн-консультацию: " : "Вы записаны "
			break
		case "CHANGE":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию изменена: " : "Запись изменена "
			break
		case "CANCEL":
			firstDescPart = isTmk ? "Запись на онлайн-консультацию отменена: " : "Запись отменена "
			break			
	}
	typePartDesc=""
	switch(type){
		case "toDoctor":
			specialityName = testRunner.testCase.getPropertyValue("specialityName")
			doctorShortName=testRunner.testCase.getPropertyValue("doctorShortName")
			typePartDesc= specialityName+", "+doctorShortName
			break
		case "toBM":
			typePartDesc= testRunner.testCase.getPropertyValue("samplingType")
			break
		case "toLdp":
			typePartDesc= testRunner.testCase.getPropertyValue("ldpName")
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
	expectedDesc=firstDescPart+typePartDesc+", "+lpuShortName+cabinet+start		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title, String samplingType=null){
	type = testRunner.testCase.getPropertyValue("type")
	status = testRunner.testCase.getPropertyValue("status")
	isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()
	switch(type){
		case "toDoctor":
			if(isTmk){
				switch(status){
					case "CREATE":
						checkParameter("notification.title","Запись на онлайн консультацию",title)
						break
					case "CHANGE":
						checkParameter("notification.title","Изменение записи на онлайн-консультацию к врачу",title)
						break
					case "CANCEL":
						checkParameter("notification.title","Отмена записи на онлайн-консультацию с врачом",title)
						break					
				}
			}
			else{
				checkParameter("notification.title","Запись на прием к врачу",title)
			}
			break
		case "toBM":
			checkParameter("notification.title","Запись на "+samplingType,title)
			break
		case "toLdp":
			checkParameter("notification.title","Запись на исследование/процедуру",title)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id="+notificationTypeId+" and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записи в  f_notification_appointment" id="00f4da0b-2b24-45cd-bea5-3ccc6b9306b9"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkTypeDependentParameters(String type, def appointment){
	switch(type){
		case "toDoctor":
			checkParameter("specialityName", testRunner.testCase.getPropertyValue("specialityName"), appointment.speciality_name)
			checkParameter("doctorShortName", testRunner.testCase.getPropertyValue("doctorShortName"), appointment.doctor_short_name)
			checkParameter("doctorFullName", testRunner.testCase.getPropertyValue("doctorFullName"), appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", null, appointment.sampling_type)
			break
		case "toBM":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", null, appointment.ldp_name)
			checkParameter("samplingType", testRunner.testCase.getPropertyValue("samplingType"), appointment.sampling_type)
			break
		case "toLdp":
			checkParameter("specialityName", null, appointment.speciality_name)
			checkParameter("doctorShortName", null, appointment.doctor_short_name)
			checkParameter("doctorFullName", null, appointment.doctor_full_name)
			checkParameter("ldpName", testRunner.testCase.getPropertyValue("ldpName"), appointment.ldp_name)
			checkParameter("samplingType",null, appointment.sampling_type)
			break
		default:
		testRunner.fail(" В своствах кейса некорректный type='"+type+"'. должен быть один из: toDoctor, toBM, toLdp")
		break
	}	
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventId = testRunner.testCase.getPropertyValue("eventId").toLong()
status = testRunner.testCase.getPropertyValue("status")
startDate = testRunner.testCase.getPropertyValue("startDateForAppointment")
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
type = testRunner.testCase.getPropertyValue("type")
lpuShortName = testRunner.testCase.getPropertyValue("lpuShortName")
lpuFullName = testRunner.testCase.getPropertyValue("lpuFullName")
address = testRunner.testCase.getPropertyValue("address")
number = testRunner.testCase.getPropertyValue("number")
//isTmk = testRunner.testCase.getPropertyValue("isTmk").toBoolean()

query="SELECT * FROM  f_notification_appointment WHERE notification_id ="+notificationId
notificationAppointments=sql.rows(query)
if(notificationAppointments.size() == 1){
	na=notificationAppointments[0]
	log.info("Найдена запись в f_notification_appointment с notification_id ="+notificationId)
	checkParameter("appointmentId",appointmentId,na.appointment_id )
	checkParameter("status",status,na.status )
	checkParameter("startDate",startDate,na.start_date.toString() )
	checkParameter("lpuShortName",lpuShortName,na.lpu_short_name )
	checkParameter("lpuFullName",lpuFullName,na.lpu_full_name )
	checkParameter("address",address,na.lpu_address )
	checkParameter("cabinetNumber",number,na.cabinet_number )
	checkParameter("isTmk",null,na.is_tmk )
	checkTypeDependentParameters(type, na)
}
else testRunner.fail("Количество записей в f_notification_appointment не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="eba2b54a-5ade-4d25-81d5-48becefa1027"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}
//i=1
def defineDevicesTaskStatuses(int i){
	silentEnable = testRunner.testCase.testSuite.getPropertyValue("silentEnable").toBoolean()
	devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	deviceTaskDontSend = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSend")
	devicesToSendSilents = testRunner.testCase.testSuite.getPropertyValue("devicesToSendSilents")
	deviceTaskDontSendSilent = testRunner.testCase.testSuite.getPropertyValue("deviceTaskDontSendSilent")
	
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	deviceTaskDontSendList=deviceTaskDontSend.split(',').collect{it as int}
	devicesToSendSilentsList=devicesToSendSilents.split(',').collect{it as int}
	deviceTaskDontSendSilentList=deviceTaskDontSendSilent.split(',').collect{it as int}
	status = testRunner.testCase.getPropertyValue("status")
	taskStatuses=[]
	needTask=devicesToSendList.contains(i)
	silentTask=devicesToSendSilentsList.contains(i)
	needDontSendTask=deviceTaskDontSendList.contains(i)
	dontSendSilent=deviceTaskDontSendSilentList.contains(i)
//	log.info "i "+i+" silentEnable "+silentEnable+" status "+status+" needTask "+needTask+" silentTask "+silentTask
	if(status=='CREATE'  ){ 
		if(needTask) taskStatuses << 'SEND'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
	}
	else{
		if(needTask) taskStatuses << 'SEND'
		if(silentTask && silentEnable) taskStatuses << 'SEND_SILENT'
		if(needDontSendTask) taskStatuses << 'DONT_SEND'
		if(dontSendSilent && silentEnable) taskStatuses << 'DONT_SEND_SILENT'
	}
	return taskStatuses
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate


for(i=1; i <=devicesCount; i++ ){
	statuses=defineDevicesTaskStatuses(i)
//	log.info statuses
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	if( statuses.size()==tasks.size()){
//		log.info "i "+i+" statuses "+statuses+" tasks.status "+tasks.status
		if(tasks.size()>0){
			checkParameter("статусы задач",statuses.sort(),tasks.status.sort())
			tasks.send_date.each{
					if( it < sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
			}
		}
	}
	else testRunner.fail("Количество записей в f_notification_task не равно "+statuses.size()+". фактическое ="+tasks.size())
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Сформировать запрос в кибану и ОР контента сообщения" id="c3b36da3-7aea-4492-926a-8f7ae8ae9b2e" disabled="true"><con:settings/><con:config><script>sendRequestPath = testRunner.testCase.testSuite.project.getPropertyValue("sendRequestPath")
oms = testRunner.testCase.testSuite.getPropertyValue("oms")
notificationId = testRunner.testCase.getPropertyValue("notificationId")
kibanaFilter=oms+" AND "+sendRequestPath+" AND "+notificationId
log.info "filter: "+kibanaFilter</script></con:config></con:testStep><con:properties><con:property><con:name>isTmk</con:name><con:value>false</con:value></con:property><con:property><con:name>receptionTypeId</con:name><con:value>1213</con:value></con:property><con:property><con:name>status</con:name><con:value>CANCEL</con:value></con:property><con:property><con:name>type</con:name><con:value>toDoctor</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Шульц</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Виктор</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Евгеньевич</con:value></con:property><con:property><con:name>specialityId</con:name><con:value/></con:property><con:property><con:name>specialityName</con:name><con:value>Врач-уролог</con:value></con:property><con:property><con:name>topic</con:name><con:value>topicAppointment2Doctor</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-22 12:19:39</con:value></con:property><con:property><con:name>startDateForDescriptin</con:name><con:value>22.05.24 19:30</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>-72</con:value></con:property><con:property><con:name>eventId</con:name><con:value>-7</con:value></con:property><con:property><con:name>lpuShortName</con:name><con:value>ГБУЗ ГП 175 ДЗМ</con:value></con:property><con:property><con:name>lpuFullName</con:name><con:value>Государственное бюджетное учреждение здравоохранения города Москвы "Городская поликлиника № 175 Департамента здравоохранения города Москвы"</con:value></con:property><con:property><con:name>address</con:name><con:value>город Москва, улица Челябинская, дом 16, корпус 2</con:value></con:property><con:property><con:name>number</con:name><con:value>211</con:value></con:property><con:property><con:name>notificationTypeId</con:name><con:value>1</con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Шульц В.Е.</con:value></con:property><con:property><con:name>startTime</con:name><con:value>19:30</con:value></con:property><con:property><con:name>endTime</con:name><con:value>19:45</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>200569</con:value></con:property><con:property><con:name>startDateForAppointment</con:name><con:value>2024-05-22 19:30:00.0</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>Шульц Виктор Евгеньевич</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>patientId</con:name><con:value>120307</con:value></con:property><con:property><con:name>oms</con:name><con:value>120300000007</con:value></con:property><con:property><con:name>deviceGuid1</con:name><con:value>2bbdd0a3-8275-4e14-bdc7-b4742f6ae8eb</con:value></con:property><con:property><con:name>deviceGuid2</con:name><con:value>db5315d8-271a-4e91-8e19-f7f87822b40f</con:value></con:property><con:property><con:name>deviceGuid3</con:name><con:value>93851e5c-931e-4e76-8d08-00758a221c12</con:value></con:property><con:property><con:name>deviceGuid4</con:name><con:value>83182a69-e564-4b22-a245-dc239bc885aa</con:value></con:property><con:property><con:name>deviceGuid5</con:name><con:value>87900b37-83b5-4a9f-a46e-38cd614a132b</con:value></con:property><con:property><con:name>deviceGuid6</con:name><con:value>358260c7-e881-4e79-985b-af13516c8186</con:value></con:property><con:property><con:name>deviceGuid7</con:name><con:value>7be37099-ba46-4dff-8d17-153c7e0b82a3</con:value></con:property><con:property><con:name>deviceGuid8</con:name><con:value>ae278dbc-2be3-4c76-b6fc-5b520a1ab93d</con:value></con:property><con:property><con:name>deviceGuid9</con:name><con:value>8010a7e7-0400-4846-a2a5-38f82e67239e</con:value></con:property><con:property><con:name>deviceGuid10</con:name><con:value>2fb20547-218e-4332-b499-27ea87b67384</con:value></con:property><con:property><con:name>deviceGuid11</con:name><con:value>59a760d6-6f54-44b1-bae8-3b687385db51</con:value></con:property><con:property><con:name>deviceGuid12</con:name><con:value>3fbfb8e6-77c3-4689-a4b2-fa8231ac561e</con:value></con:property><con:property><con:name>deviceGuid13</con:name><con:value>f4725ba4-c4db-4ab2-bbef-58a6b4e69aee</con:value></con:property><con:property><con:name>deviceGuid14</con:name><con:value>3b8cf744-2369-46bc-b369-26368925a03c</con:value></con:property><con:property><con:name>deviceGuid15</con:name><con:value>2cb348b2-f0aa-44a4-91b4-94f8957b0c59</con:value></con:property><con:property><con:name>deviceGuid16</con:name><con:value>6ae9342d-e992-48fb-8bed-5521b34ea246</con:value></con:property><con:property><con:name>deviceGuid17</con:name><con:value>f05bce94-b73c-4fc7-959b-c1427cb635d8</con:value></con:property><con:property><con:name>devicesToSend</con:name><con:value>6, 7, 9</con:value></con:property><con:property><con:name>devicesCount</con:name><con:value>18</con:value></con:property><con:property><con:name>devicesToSendSilents</con:name><con:value>5, 7, 9, 14, 16, 18</con:value></con:property><con:property><con:name>deviceTaskDontSend</con:name><con:value>5, 8</con:value></con:property><con:property><con:name>deviceTaskDontSendSilent</con:name><con:value>6, 8, 15, 17</con:value></con:property><con:property><con:name>nonExistentPatientId</con:name><con:value>30000000506324</con:value></con:property><con:property><con:name>oms2</con:name><con:value>120500000004</con:value></con:property><con:property><con:name>patientWithoutDevices</con:name><con:value>120504</con:value></con:property><con:property><con:name>silentEnable</con:name><con:value>true</con:value></con:property><con:property><con:name>userId</con:name><con:value>15026</con:value></con:property><con:property><con:name>userWithoutDevices</con:name><con:value>41</con:value></con:property><con:property><con:name>deviceGuid18</con:name><con:value>e723b41b-b96f-473a-b25e-25dde975f909</con:value></con:property><con:property><con:name>deviceGuid19</con:name><con:value>176393f0-b18a-4f34-a65c-2902734efea7</con:value></con:property><con:property><con:name>deviceGuid20</con:name><con:value>b2601db3-48ca-47b5-a78a-c42325e1b717</con:value></con:property><con:property><con:name>deviceGuid21</con:name><con:value>f25c315a-dc00-4a51-9ed1-de4a4ef382c7</con:value></con:property><con:property><con:name>deviceGuid22</con:name><con:value>176393f0-b18a-4f34-a65c-2902734efea7</con:value></con:property></con:properties></con:testSuite><con:testSuite id="9c5b026c-4005-4983-89a6-f62b836ea4f7" name="А_ЕСУ_05 - Получение сообщения об изменении статуса ТМК"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="04bedc67-05e1-48fc-8a2c-fa182e502310" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка отправки в зависимости от признаков authentication, deleted, esia_authentication, main_policy" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Проверить наличие пациента со всеми девайсами" id="4acbcf66-2ca4-4224-b470-a7d92001541d"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

// проверить, что пациент с идентификатором в сьюте есть в бд
patientId =testRunner.testCase.testSuite.getPropertyValue("patientId")
oms =testRunner.testCase.testSuite.getPropertyValue("oms")
user=sql.firstRow("select * from f_user where patient_id="+patientId)
log.info user
id=0
if( !user){
	query="INSERT INTO f_user VALUES(nextval('f_user_sequence'), "+patientId+", '"+oms+"', '2012-06-07') RETURNING id "
	id=sql.firstRow(query).id 
}
else{
	log.info("пациент есть")
	id=user.id
}
log.info id
userId=testRunner.testCase.testSuite.setPropertyValue("userId", id.toString())

//формируем нужные комбинации authentication, deleted, esia_authentication, main_policy
all=[
		[a:true, d:false, e:true, m:true],
		[a:false, d:false, e:true, m:true],
		[a:true, d:true, e:true, m:true],
		[a:true, d:false, e:true, m:false],
		[a:true, d:false, e:true, m:null],
		[a:true, d:false, e:false, m:true],
		[a:true, d:false, e:null, m:true]
	]
	
devicesToSendEsia = []
devicesToSendWithoutEsia = []
for(i=0; i&lt;all.size(); i++){
	auth = all[i].a
	del = all[i].d
	esia = all[i].e
	main = all[i].m
	query="SELECT device_guid FROM f_user_device WHERE user_id =$id " +
	"AND authentication = $auth " +
	"AND deleted = $del " +
	"AND esia_authentication = $esia " +
	"AND main_policy =$main "
	device = sql.firstRow(query)
	guid=""
	if (device){
		log.info "Девайс номер "+ i + " есть в бд"
		guid=device.device_guid
	}
	else{
		log.info "Девайс номер "+ i + " отсутствует в бд"
		guid= java.util.UUID.randomUUID()
		cloud= java.util.UUID.randomUUID()
		devQuery="INSERT INTO f_device (device_guid, app_version, platform, device_cloud_id, cloud_token_delete) VALUES('$guid', '1.10.0', 'ANDROID', '$cloud', NULL)"
		userDevQuery="INSERT INTO f_user_device (id, device_guid, user_id, authentication, deleted, deleted_date, esia_authentication, main_policy, voip) VALUES(nextval('f_user_device_sequence'), '$guid', $id, $auth, $del, NULL, $esia, $main, NULL)"
		sql.execute(devQuery)
		sql.execute(userDevQuery)
	}
	testRunner.testCase.setPropertyValue("deviceGuid" + i, guid.toString())
	//записать номера устройств для которых пройдет отправка при tmkNeedEsiaAuthentication = true
	if (i == 0 || i == 3 || i == 4){
		devicesToSendEsia&lt;&lt; i
	}
	if (i == 0 || i == 5 || i == 6){
		devicesToSendWithoutEsia&lt;&lt; i
	}
}

testRunner.testCase.setPropertyValue("devicesToSendEsia", devicesToSendEsia.toString().replace('[','').replace(']',''))
testRunner.testCase.setPropertyValue("devicesToSendWithoutEsia", devicesToSendWithoutEsia.toString().replace('[','').replace(']',''))
log.info devicesToSendEsia
log.info devicesToSendWithoutEsia</script></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="a44eaee6-d65c-4aa8-b60a-dcd9044702b1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="33f63719-e2d9-46d5-9fb2-0112e0ab02e4"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.util.Date

log.info "Отправка сообщения об изменении статуса ТМК"
def date = new Date()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(date)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(date)
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": "doctorLoginToRoom",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": 1
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)
sleep(10000)</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="6d38a41d-2c51-4f7b-b2c1-090b1d5015a0"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	log.info("Найдена одна запись в f_notification")
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="e54316a4-17b7-4a7b-8d2a-819bdaeda3d8"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
query="SELECT * FROM  f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)
if(notificationTelemedicine.size() == 1){
	nt=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationAppointments.size())</script></con:config></con:testStep><con:testStep type="restrequest" name="Получить значение tmkNeedEsiaAuthentication" id="b1c5acde-ff64-41c2-93e1-2d593a34ab19"><con:settings/><con:config service="http://notification-emiasinfo1.emias.solit-clouds.ru" resourcePath="/actuator/env" methodName="Env 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получить значение tmkNeedEsiaAuthentication" id="adada609-6fe3-4216-9457-de14bb47a415" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://notification-emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:originalUri>http://notification-emiasinfo1.emias.solit-clouds.ru/actuator/env</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3a00793-d8d1-45c1-8059-4dc293d3fcf3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="0384cc26-26d4-44bf-908f-69920410f150"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
def envResponse = context.expand('${Получить значение tmkNeedEsiaAuthentication#Response}')
def slurperJson = new JsonSlurper()
def env = slurperJson.parseText(envResponse)
def tmkNeedEsiaAuthentication = ""
env.propertySources.each{
	if(it.name=="systemEnvironment"){
		it.properties.each{ et ->
			if(et.getKey() == "app.esiaAuthentication.tmkNeedEsiaAuthentication"){
				tmkNeedEsiaAuthentication = et.value.value.toBoolean()
			}
		}
	}
}

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSendEsia = testRunner.testCase.getPropertyValue("devicesToSendEsia")
devicesToSendWithoutEsia = testRunner.testCase.getPropertyValue("devicesToSendWithoutEsia")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendEsiaList=devicesToSendEsia.split(',').collect{it as int}
devicesToSendWithoutEsiaList=devicesToSendWithoutEsia.split(',').collect{it as int}

for(i=0; i &lt;devicesCount; i++ ){
	deviceGuid=testRunner.testCase.getPropertyValue("deviceGuid"+i)
	tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	log.info "Проверяю notification task для девайса "+deviceGuid
	log.info i
	if(tmkNeedEsiaAuthentication == true){
		if(devicesToSendEsiaList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	else{
		if(devicesToSendWithoutEsiaList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="1a2855c7-533a-4984-99b8-3edd4549e041"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>device1</con:name><con:value>1a0e59f3-245a-4812-8724-fdfd5a3833aa</con:value></con:property><con:property><con:name>device2</con:name><con:value>4ecb0c08-1acc-4a27-97a0-ebf80c1e43dc</con:value></con:property><con:property><con:name>device3</con:name><con:value>4ecb0c08-1acc-4a27-97a0-ebf80c1e43dc</con:value></con:property><con:property><con:name>device4</con:name><con:value>4ecb0c08-1acc-4a27-97a0-ebf80c1e43dc</con:value></con:property><con:property><con:name>device5</con:name><con:value>4ecb0c08-1acc-4a27-97a0-ebf80c1e43dc</con:value></con:property><con:property><con:name>device6</con:name><con:value>4ecb0c08-1acc-4a27-97a0-ebf80c1e43dc</con:value></con:property><con:property><con:name>device7</con:name><con:value>4ecb0c08-1acc-4a27-97a0-ebf80c1e43dc</con:value></con:property><con:property><con:name>devicesToSendEsia</con:name><con:value>0, 3, 4</con:value></con:property><con:property><con:name>devicesToSendWithoutEsia</con:name><con:value>0, 5, 6</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:08:03.229</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:08:03</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1102</con:value></con:property><con:property><con:name>devicesCount</con:name><con:value>7</con:value></con:property><con:property><con:name>deviceGuid1</con:name><con:value>2818ec2f-ba37-42fc-a9ec-346af318a45e</con:value></con:property><con:property><con:name>deviceGuid2</con:name><con:value>e5ce6b68-6a71-4f81-805f-628ff9ea88e8</con:value></con:property><con:property><con:name>deviceGuid3</con:name><con:value>687234ff-a741-4b4b-878c-ad0faee794a6</con:value></con:property><con:property><con:name>deviceGuid4</con:name><con:value>f04db025-6463-4221-b948-b31083094165</con:value></con:property><con:property><con:name>deviceGuid5</con:name><con:value>680b4f5a-6612-40f1-9793-665bbad526ef</con:value></con:property><con:property><con:name>deviceGuid6</con:name><con:value>d9e4e7e1-012b-4cf9-9260-1ca4f7b8b684</con:value></con:property><con:property><con:name>deviceGuid7</con:name><con:value>d9e4e7e1-012b-4cf9-9260-1ca4f7b8b684</con:value></con:property><con:property><con:name>deviceGuid0</con:name><con:value>73c07c66-d9b8-4430-bf29-16db93fdcf92</con:value></con:property><con:property><con:name>deviceGuid0</con:name><con:value>302f194e-24c2-49f8-92fd-bb4dcc836dc5</con:value></con:property><con:property><con:name>deviceGuid1</con:name><con:value>498158a0-8246-40bb-aac3-b2c05c4d9a76</con:value></con:property><con:property><con:name>deviceGuid2</con:name><con:value>ed1ab2a5-7b33-4546-aacb-360abbf62351</con:value></con:property><con:property><con:name>deviceGuid3</con:name><con:value>f17c3a47-feea-4a6c-ad60-f90d4e2ad8dd</con:value></con:property><con:property><con:name>deviceGuid4</con:name><con:value>aa201036-fb79-4f75-80ff-28aa2765e0b3</con:value></con:property><con:property><con:name>deviceGuid5</con:name><con:value>c5ba52b9-8dc3-4ffe-abbd-a0d7c2d4f3bc</con:value></con:property><con:property><con:name>deviceGuid6</con:name><con:value>c6369aa7-ad00-4664-9906-e07426c9bda3</con:value></con:property></con:properties></con:testCase><con:testCase id="6c68b3f3-2d4f-4a94-904b-0d8cc2553fde" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверить наличие пациента со всеми девайсами" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить пациента с девайсами со всеми настройками" id="a195dbd1-df86-4835-99ff-c959b872d432"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

// проверить, что пациент с идентификатором в сьюте есть в бд
patientId =testRunner.testCase.testSuite.getPropertyValue("patientId")
oms =testRunner.testCase.testSuite.getPropertyValue("oms")
user=sql.firstRow("select * from f_user where patient_id="+patientId)
log.info user
id=0
if( !user){
	query="INSERT INTO f_user VALUES(nextval('f_user_sequence'), "+patientId+", '"+oms+"', '2012-06-07') RETURNING id "
	id=sql.firstRow(query).id 
}
else{
	log.info("пациент есть")
	id=user.id
}
log.info id
testRunner.testCase.testSuite.setPropertyValue("userId", id.toString())
// собрать все комбинации параметров и посчитать кол-во необходимых девайсов
voip=[true, false, null]
platform=["ANDROID", "HUAWEI", "APPLE"]
devicesCount=voip.size()*platform.size()
log.info devicesCount
testRunner.testCase.testSuite.setPropertyValue("devicesCount", devicesCount.toString())
i=1
devicesToSend=[]
devicesToSendVoip=[]
voip.each{ v ->
	platform.each{ p->
		log.info "проверяю девайс номер "+i
		log.info p
		log.info v
		voipCondition= v != null ? "="+v : "is null"
		device=sql.firstRow("SELECT fud.device_guid FROM f_user_device fud JOIN f_device fd ON fd.device_guid=fud.device_guid WHERE fud.user_id="+id+" AND fud.authentication=true AND fud.deleted=false AND fud.voip "+voipCondition+ " AND fd.platform = '"+p+"'")
		guid=""
		if(device){
			guid=device.device_guid
		}
		else{
			guid= java.util.UUID.randomUUID()
			cloud= java.util.UUID.randomUUID()
			devQuery="INSERT INTO f_device (device_guid, app_version, platform, device_cloud_id, cloud_token_delete) VALUES('"+guid+"', '1.10.1', '"+p+"', '"+cloud+"', NULL)"
			//log.info devQuery
			userDevQuery="INSERT INTO f_user_device (id, device_guid, user_id, authentication, deleted, deleted_date, esia_authentication, main_policy, voip) VALUES(nextval('f_user_device_sequence'), '"+guid+"', "+id+", true, false, NULL, true, true, "+v.toString()+")"
			//log.info userDevQuery
			sql.execute(devQuery)
			sql.execute(userDevQuery)
		}
		testRunner.testCase.testSuite.setPropertyValue("deviceGuid"+i, guid.toString())
		//добавить номера девасов, которые подходят под условие на отправку, в список
		if(v != true ) devicesToSend << i
		if(v == true) devicesToSendVoip << i
		if(v != true && p != "APPLE") devicesToSendVoip << i
		i+=1
	}
}

testRunner.testCase.testSuite.setPropertyValue("devicesToSend", devicesToSend.toString().replace('[','').replace(']',''))
testRunner.testCase.testSuite.setPropertyValue("devicesToSendVoip", devicesToSendVoip.toString().replace('[','').replace(']',''))
log.info devicesToSend
log.info devicesToSendVoip]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b40e86ac-0a49-42a2-9be6-4dd528f32fb5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создать запись в f_notification и f_notification_appointment с doctor_full_name" searchProperties="true" disabled="true"><con:settings/><con:testStep type="jdbc" name="Создать запись в f_notification" id="afa89d8b-44eb-4ce4-a23e-e6296f58a2f7"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>INSERT INTO f_notification (id, user_id, notification_type_id, title, description, create_date, deleted, viewed)
VALUES(nextval('f_notification_sequence'), ${#TestSuite#userId}, 1, 'Запись на онлайн консультацию_тест А_ЕСУ_05', 'Вы записаны на онлайн-консультацию: Врач-онколог, Телемед О.О., 18.03.24 19:50', '2024-03-18 14:35:11.338', false, false);
</con:query><con:assertion type="XPath Match" id="604b0706-2c8d-49eb-a95c-9a76b9e43481" name="Results/UpdateCount = 1"><con:configuration><path>//Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Найти notification_id созданной записи" id="5ebc1ddd-f0df-4ee4-8060-f8edb3161561"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>select id from f_notification
where user_id = ${#TestSuite#userId}
and title = 'Запись на онлайн консультацию_тест А_ЕСУ_05'
</con:query><con:assertion type="Simple Contains" id="1036e539-3b59-4c84-8c19-b13a143797ea" name="Contains F_NOTIFICATION.ID"><con:configuration><token>F_NOTIFICATION.ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать notificationId" id="f17b62a6-a5e4-4590-9ac7-59e4dbcdd0b4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>notificationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти notification_id созданной записи</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION.ID</con:sourcePath><con:targetType>notificationId</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Создать запись в f_notification_appointment" id="929e18b0-0aa5-4471-ade4-b5bd75e8f837"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>INSERT INTO f_notification_appointment (id, notification_id, appointment_id, status, start_date, speciality_name, doctor_short_name, doctor_full_name, lpu_short_name, lpu_full_name, lpu_address, cabinet_number, event_id)
VALUES(nextval('f_notification_appointment_sequence'), ${#TestSuite#notificationId}, (select max(appointment_id)+1 from f_notification_appointment), 'CREATE', '2024-03-28 14:40:00.000', 'Окулист', 'Кравченко Д.А.', 'Дмитрий Антонович Кравченко', 'ДЗМ', 'ДЗМ фул', 'Москва, ул.Победы, д.1', 'Коморка №1', (select max(event_id)+1 from f_notification_appointment));
</con:query><con:assertion type="XPath Match" id="604b0706-2c8d-49eb-a95c-9a76b9e43481" name="Results/UpdateCount = 1"><con:configuration><path>//Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Найти appointment созданной записи" id="145e913f-fc05-46fe-a60b-dd01bbdbcfa6"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>select * from f_notification_appointment
where notification_id = ${#TestSuite#notificationId}
</con:query><con:assertion type="Simple Contains" id="1036e539-3b59-4c84-8c19-b13a143797ea" name="Contains F_NOTIFICATION_APPOINTMENT.ID"><con:configuration><token>F_NOTIFICATION_APPOINTMENT.ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать appointmentId, doctor_full_name, doctor_short_name, speciality_name" id="03b073c0-b31b-4fbf-a6b2-128e6e1df2ed"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>appointmentId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти appointment созданной записи</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION_APPOINTMENT.APPOINTMENT_ID</con:sourcePath><con:targetType>appointmentId</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти appointment созданной записи</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION_APPOINTMENT.SPECIALITY_NAME</con:sourcePath><con:targetType>specialityName</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>doctorFullName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти appointment созданной записи</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION_APPOINTMENT.DOCTOR_FULL_NAME</con:sourcePath><con:targetType>doctorFullName</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>doctorShortName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти appointment созданной записи</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION_APPOINTMENT.DOCTOR_SHORT_NAME</con:sourcePath><con:targetType>doctorShortName</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f02e6427-0d03-4747-98a7-77dc89f6d7af" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создать запись в f_notification и f_notification_appointment без doctor_full_name" searchProperties="true" disabled="true"><con:settings/><con:testStep type="jdbc" name="Создать запись в f_notification" id="8ddb67d7-32e9-49e7-8f3b-27599f8b13ec"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>INSERT INTO f_notification (id, user_id, notification_type_id, title, description, create_date, deleted, viewed)
VALUES(nextval('f_notification_sequence'), ${#TestSuite#userId}, 1, 'Запись на онлайн консультацию_тест А_ЕСУ_05', 'Вы записаны на онлайн-консультацию: Врач-онколог, Телемед О.О., 18.03.24 19:50', '2024-03-18 14:35:11.338', false, false);
</con:query><con:assertion type="XPath Match" id="604b0706-2c8d-49eb-a95c-9a76b9e43481" name="Results/UpdateCount = 1"><con:configuration><path>//Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Найти notification_id созданной записи" id="7df8ad87-f65a-410d-8bf4-c0024ef463ef"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>select id from f_notification
where user_id = ${#TestSuite#userId}
and title = 'Запись на онлайн консультацию_тест А_ЕСУ_05'
</con:query><con:assertion type="Simple Contains" id="1036e539-3b59-4c84-8c19-b13a143797ea" name="Contains F_NOTIFICATION.ID"><con:configuration><token>F_NOTIFICATION.ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать notificationId" id="23892000-1efa-400a-bcb2-336989d699d1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>notificationId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти notification_id созданной записи</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION.ID</con:sourcePath><con:targetType>notificationId</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Создать запись в f_notification_appointment" id="391c3d04-5799-4675-8673-e9a25c5b2ce6"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>INSERT INTO f_notification_appointment (id, notification_id, appointment_id, status, start_date, speciality_name, doctor_short_name, lpu_short_name, lpu_full_name, lpu_address, cabinet_number, event_id)
VALUES(nextval('f_notification_appointment_sequence'), ${#TestSuite#notificationId}, (select max(appointment_id)+1 from f_notification_appointment), 'CREATE', '2024-03-28 14:40:00.000', 'Окулист', 'Кравченко Д.А.', 'ДЗМ', 'ДЗМ фул', 'Москва, ул.Победы, д.1', 'Коморка №1', (select max(event_id)+1 from f_notification_appointment));
</con:query><con:assertion type="XPath Match" id="604b0706-2c8d-49eb-a95c-9a76b9e43481" name="Results/UpdateCount = 1"><con:configuration><path>//Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Найти appointment созданной записи" id="7f6e0926-70a7-4e3d-bd08-1639bbf1e0fd"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>select * from f_notification_appointment
where notification_id = ${#TestSuite#notificationId}
</con:query><con:assertion type="Simple Contains" id="1036e539-3b59-4c84-8c19-b13a143797ea" name="Contains F_NOTIFICATION_APPOINTMENT.ID"><con:configuration><token>F_NOTIFICATION_APPOINTMENT.ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать appointmentId, doctor_full_name, doctor_short_name, speciality_name" id="fbb323cb-47b1-49d4-92fe-569368cf3d08"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>appointmentId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти appointment созданной записи</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION_APPOINTMENT.APPOINTMENT_ID</con:sourcePath><con:targetType>appointmentId</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти appointment созданной записи</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION_APPOINTMENT.SPECIALITY_NAME</con:sourcePath><con:targetType>specialityName</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>doctorFullName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти appointment созданной записи</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION_APPOINTMENT.DOCTOR_FULL_NAME</con:sourcePath><con:targetType>doctorFullName</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>doctorShortName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти appointment созданной записи</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION_APPOINTMENT.DOCTOR_SHORT_NAME</con:sourcePath><con:targetType>doctorShortName</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ee2df34e-48f4-49b0-b10e-a379b3d09a8f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Удалить записи f_notification, f_notification_appointment" searchProperties="true" disabled="true"><con:settings/><con:testStep type="jdbc" name="Удалить записи в f_notification f_notification_appointment" id="ca7cad56-005e-4a43-bdc7-3312a2d06b30"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>delete from f_notification_appointment
where notification_id = ${#TestSuite#notificationId};
delete from f_notification where id = ${#TestSuite#notificationId};</con:query><con:assertion type="XPath Match" id="604b0706-2c8d-49eb-a95c-9a76b9e43481" name="Results/UpdateCount = 1"><con:configuration><path>//Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="191886ae-8da0-4a93-b77d-fc25d0207b63" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="386405_Отправить сообщение с eventType=doctorLoginToRoom" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить пациента с девайсами со всеми настройками" id="21ee5a5a-954d-4be1-86b6-5f20a727ae23"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="14eeb28f-a665-4d21-8934-48744efd42a3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="c4d6704e-3fbb-4799-a1fe-c9657b4fcc4f"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="c543bce1-724c-41f5-80df-d5651bd1e70c"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="32038a0c-cd5e-4496-a07f-bb11894e39bf"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="e3e5c8ab-2b7e-4259-b7fb-0534626291e0"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="13371ef5-6979-4d1e-99d5-110a26591951"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>doctorLoginToRoom</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:07:08.129</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:08:15</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1103</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:07</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:07</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:07:08.129</con:value></con:property></con:properties></con:testCase><con:testCase id="8573f9f3-7701-4720-8d89-67a8ae505054" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388366_Отправить сообщение с eventType=doctorStartCall (получен doctor_full_name)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="23458649-bc0d-4bed-a497-92b0f6f6806a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="9298743d-74d3-461b-abae-eb93d3e01a0f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="10e38f53-e8f8-42fd-9f8a-95b28b00f1cc"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="04fe0924-0065-47f4-8838-0a8d6252a798"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.testSuite.getPropertyValue("specialityName")
	doctorShortName = testRunner.testCase.testSuite.getPropertyValue("doctorShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.testSuite.getPropertyValue("specialityName")
	doctorFullName = testRunner.testCase.testSuite.getPropertyValue("doctorFullName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = doctorFullName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="bd7d029f-663a-443b-9914-c636aeb15fb8"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="03c21b88-c1f5-4b8c-af33-36292c79cf9c"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="d4d12683-8de2-4767-9244-61f335f65707"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>doctorStartCall</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-05-29 08:51:27.841</con:value></con:property><con:property><con:name>specName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>docShortName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-29 08:52:34</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>3811</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>08:51</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>29.05.2024 в 08:51</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-05-29T08:51:27.841</con:value></con:property></con:properties></con:testCase><con:testCase id="c437ebf8-d419-4104-8197-318c411ff02b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="418789_Отправить сообщение с eventType=doctorStartCall (не получен doctor_full_name)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="97d7f244-52f9-4a89-a471-0d4fa26ff3ba"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="82c9864a-947e-4719-8ab3-e60fb9759d6d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>f02e6427-0d03-4747-98a7-77dc89f6d7af</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="2ff56ffc-46bb-4691-b7ef-f1b997740f98"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="ed138353-8792-48b2-b322-493ac3a0054e"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.testSuite.getPropertyValue("specialityName")
	doctorShortName = testRunner.testCase.testSuite.getPropertyValue("doctorShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.testSuite.getPropertyValue("specialityName")
	doctorFullName = testRunner.testCase.testSuite.getPropertyValue("doctorFullName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="f45bfac1-84b5-4d7c-bffe-c6992d9749ae"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="eef66de7-851a-4b2a-9cad-049bd416f643"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="8f0c8d88-cf60-4a62-b7e4-0f49673dd06c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>doctorStartCall</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-05-29 08:51:43.650</con:value></con:property><con:property><con:name>specName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>docShortName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-29 08:52:50</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>3812</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>08:51</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>29.05.2024 в 08:51</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-05-29T08:51:43.650</con:value></con:property></con:properties></con:testCase><con:testCase id="09f04008-59d7-4361-8895-5f81f7a6010a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388367_Отправить сообщение с eventType=patientRejectCall" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="cb08ddd6-aa42-4d81-9f84-dbb1cca543c5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="210761e2-5b7d-4cf2-b397-fee7461195d4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="d0354ecf-abed-4626-902c-0530c414ff86"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="ae5984fa-3745-4767-b8c0-9f02a3dfb45f"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="04572228-35f5-4e4f-83d5-b4e441ab769b"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="7218fe41-7c28-496d-a648-58077c67c048"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="c59fd955-d85c-4883-ba94-62300fc60d44"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>patientRejectCall</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930191001</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-05-28 18:05:35.749</con:value></con:property><con:property><con:name>specName</con:name><con:value>Окулист</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Кравченко Д.А.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-28 18:06:42</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>3803</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>18:05</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>28.05.2024 в 18:05</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-05-28T18:05:35.749</con:value></con:property></con:properties></con:testCase><con:testCase id="29014f93-b262-4845-823d-a1e89595384b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388368_Отправить сообщение с eventType=patientDidNotAnswer только с обязательными параметрами" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="dac61d95-fa61-4481-a7d0-2a0392ea6473"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="d56fd75c-52fc-4ca3-8c3e-2b0e0dff0f0c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="39eff80d-26fc-402b-8fa1-20b37949400d"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="1edff19e-14f2-45f7-8b3d-ccfa84e16566"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="f6baea29-2f0e-4202-9331-0e772d834d13"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter)
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="683b4274-0d36-4c8b-aa4c-966738451239"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="8c77442b-dbe9-4a6b-a574-543fd4267487"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>patientDidNotAnswer</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:09:31.595</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:10:38</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1115</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:09</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:09</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:06</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:09:31.595</con:value></con:property></con:properties></con:testCase><con:testCase id="1ec89394-ae3e-488b-9292-a54f221282e4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388372_Отправить сообщение с eventType=patientDidNotAnswer и unaccessCallCounter=1" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="b93f4516-aae7-4971-b3b6-ec0a322959ae"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="90678482-2f90-4f01-beee-ea61daee63a6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="3ffcb6a2-b26d-4b96-a3c2-a9668559086c"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="e8d0e4cf-72f3-40b3-83d1-8ba5f3433bf9"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="cbc2fbd4-dd04-43df-a5b0-fac9fcd2695d"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="3c6afadb-2d99-4fff-a1f9-13297b031e4b"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="10d57dd7-fd56-4b2e-b460-af4aa6fd6c06"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>patientDidNotAnswer</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:07:43.267</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:08:50</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1106</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:07</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:07</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:07:43.267</con:value></con:property></con:properties></con:testCase><con:testCase id="3dfc525a-18f6-4585-b20f-e10304bfaf59" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388372_Отправить сообщение с eventType=patientDidNotAnswer и unaccessCallCounter=2" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="56a128f4-45f5-4c41-a68e-e637795a9769"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="8fea7716-bf33-420c-8983-b91f592449d0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="1acd67d3-6381-495d-bd45-cf9a7823d90e"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="44182efb-0f4e-4f28-8409-49cdd28e0483"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="98e138be-2aa4-4e7c-a245-2cb447eb5989"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="16949bc5-b704-47b2-8260-ae510faf0a81"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="28c7d156-7767-4682-9d41-e5f5c8e83ebb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>patientDidNotAnswer</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:07:55.050</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:09:02</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1107</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:07</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:07</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:07:55.050</con:value></con:property></con:properties></con:testCase><con:testCase id="38fa3cdb-f918-402c-9d28-9c512c226ed8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388372_Отправить сообщение с eventType=patientDidNotAnswer и unaccessCallCounter=3" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="f7f89079-f0da-4a0d-a5c1-dfaa73e1781e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="5f5d06c1-9a4d-4b69-bd9e-9277ba3a56bd"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="e3e86962-efd5-4ff3-8c3b-8098b1c017b5"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="b9fdb424-26e8-4619-9f8a-aba58abdd591"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="e08bc1dc-60a4-4864-8883-e2b3ef7e9ca9"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="3bbdee9c-79d1-4d3a-ba68-91ff5ce48954"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="e3a3d72c-5392-4cae-8770-5492eb7e01b7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>patientDidNotAnswer</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:08:07.012</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:09:14</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1108</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:08</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:08</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>4</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:08:07.012</con:value></con:property></con:properties></con:testCase><con:testCase id="80a67d3a-ee86-486d-b304-e3062aad67a9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388372_Отправить сообщение с eventType=patientDidNotAnswer и unaccessCallCounter=4" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="cf84deaf-1db7-472b-bb9e-da89cf71a401"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="a2c442a0-947c-47d9-acf4-b3d4c7346b81"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="bac64bff-6307-4662-9bfc-c73a7da39880"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="dcbced09-33de-4d78-8399-5ea7a576e6df"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="2c5dfab3-90d6-48d8-a820-450532619ef4"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="80caf722-9fcf-4569-84f0-c41d8aaeb2cc"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="5efc1d6e-a86e-4649-bb5d-cc2241dcb811"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>patientDidNotAnswer</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:08:19.152</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:09:26</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1109</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:08</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:08</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>4</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:08:19.152</con:value></con:property></con:properties></con:testCase><con:testCase id="cfaca4aa-ef1e-49ab-b7a8-55ccc761f3ec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388372_Отправить сообщение с eventType=patientDidNotAnswer и unaccessCallCounter=5" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="e0abd54e-212f-4266-8442-2bc872a868eb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="fb54d552-49e0-4abb-bcb0-5590d15bc386"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="c1987910-99b3-4d7b-9ad1-13f1bba4dc7d"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="e020a5d0-8cb3-43eb-a1e1-8ab33f3a35ec"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="b7440433-dfef-4417-931b-3a0b27c8e58c"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="c93bf299-2988-4857-b6ca-5b4810ad531d"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="bdee2327-4525-4b2b-9c94-4250491cbc7f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>patientDidNotAnswer</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:08:30.833</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:09:37</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1110</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:08</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:08</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>5</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:08:30.833</con:value></con:property></con:properties></con:testCase><con:testCase id="3866a73c-63c1-4edc-ad36-49349a28d7a5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388372_Отправить сообщение с eventType=patientDidNotAnswer и unaccessCallCounter=12" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="ae5bd224-0a3d-4f33-9311-b6e84c7ab329"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="e8e084b4-9d74-4f18-a78b-92180a0baf81"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="168b3dae-a59e-469e-9c83-965ee7c72509"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="346e1517-151f-46ef-9d4c-07ef167a3adc"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="008ac24b-d16e-46f4-8074-94f6a686b130"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="ff772284-751b-4f12-afb3-ad026c7d3917"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="97a27720-5e05-40af-a997-d1451ec93ff6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>patientDidNotAnswer</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:08:42.353</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:09:49</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1111</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:08</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:08</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>12</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:08:42.353</con:value></con:property></con:properties></con:testCase><con:testCase id="ba1311f5-0bf6-427b-9b9e-d602f437579b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388372_Отправить сообщение с eventType=patientDidNotAnswer и unaccessCallCounter=13" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="f11b0cf3-ba79-4b94-b860-a57ceeb76c41"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="4259af7b-1c2e-4f4c-8472-5bc14120d2e0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="17e5b678-0f0e-4ba7-a253-d833b7acaab7"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="ef574eba-2c06-42fe-9bc8-78edd82fdb46"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="56a404d8-cea5-4559-9833-0dbef236a673"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="eb915fd5-cf8c-4a34-be6c-b81bf2305125"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="65816f51-fbd5-4e0c-836d-acf1b1601ec7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>patientDidNotAnswer</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:08:54.744</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:10:01</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1112</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:08</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:08</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>13</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:08:54.744</con:value></con:property></con:properties></con:testCase><con:testCase id="c12c04e2-2ba0-4993-a6f2-5d5fa79da849" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388372_Отправить сообщение с eventType=patientDidNotAnswer и unaccessCallCounter=14" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="37baeae5-387c-4d62-a789-8b7d7b3616ce"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="f6b99da4-4ea4-42bf-9a3d-ab7b54d79af4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="425802e4-a008-4d27-bdac-640b7e780ce1"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="8af98b31-143a-4de8-adc8-4227f45558d2"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="2f6e6191-45b9-4a33-858b-7f2808abd1b3"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="bef4d4ab-3dde-4b35-8bc5-9475419e0c13"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="9c059417-2a94-4ddd-b702-3338e5aa91e4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>patientDidNotAnswer</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:09:06.640</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:10:13</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1113</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:09</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:09</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>14</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:09:06.640</con:value></con:property></con:properties></con:testCase><con:testCase id="db5a9f00-0dd4-449e-b5f6-b3dc23bc14fe" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388372_Отправить сообщение с eventType=patientDidNotAnswer и unaccessCallCounter=22" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="95711b62-dd97-44a6-b83f-479ba940bf51"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="c7e61f01-c467-45c0-bd9f-0b42f505c606"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="8acb7bfd-42eb-4b38-9c71-c8f1df761564"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="adf0d072-a7cc-4c7e-9777-e02730989f8d"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="26bc6160-2733-4765-b425-057b49d0912c"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="e3f41d56-e23d-4245-be4e-05cf26a40360"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="0c256326-5045-465a-8ea8-b623af9c4203"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>patientDidNotAnswer</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:09:18.700</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:10:25</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1114</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:09</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:09</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>22</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:09:18.700</con:value></con:property></con:properties></con:testCase><con:testCase id="5f43d554-f981-4168-9647-9f157df2744c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388365_Отправить сообщение с eventType=conferenceSuccesfullyFinished" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="c4ab75b2-a570-4b95-b126-6c53180c9692"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="078b54b8-8622-40ee-a63b-88484d55e4a1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="366f19aa-03fc-4467-a815-d28967ecd2eb"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="delay" name="Подождать" id="0c9df083-cc1f-4455-add5-ca728df3e14b"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="a2356542-421a-4f00-ad70-28f68b20e3c1"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + " " + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="975f4e20-5c60-4b04-b80c-44a3c1efec15"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="45adaca3-08d9-4089-a529-204bd397563b"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="8ad9af96-eeda-4548-b6ca-0ed05758f64a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>conferenceSuccesfullyFinished</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:42:05.767</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:43:12</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1121</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:42</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:42</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:42:05.767</con:value></con:property></con:properties></con:testCase><con:testCase id="df716b5d-3862-43a6-a7ee-7f418ade5b4a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="388378_Отправить сообщение с eventType=callInProgress" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="2ba08758-08c6-42de-b613-47329089f5e7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись в f_notification и f_notification_appointment" id="c5ff1929-4abf-4d19-98c2-1db1569a23d0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b40e86ac-0a49-42a2-9be6-4dd528f32fb5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="d924995c-7cb5-42f5-81aa-57c812362a6f"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="4b55e153-5067-48cb-84a3-a91c67beed87"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="4d8a6c97-4664-48b1-b4a8-4a2970f5ec20"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="77c48a5a-4bfb-4917-a45f-f46845b9b99d"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="1" id="d6ed55ac-c45f-440e-9db6-f04bf9bd72ea" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")


Date dateMinus = LocalDateTime.now().plusSeconds(-600).toDate()
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
sql = Sql.newInstance(connection)
//def date = new Date()
//def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
log.info createDate
String result = createDate.substring(0, createDate.length() - 3)
log.info result
//createdDate=Date.parse("yyyy-MM-dd hh:mm:ss.SSS", createDate)

createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", result)
log.info createdDateParsed

int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Удалить созданные записи" id="4721392d-09d9-4dda-b89c-3c19f5995337"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ee2df34e-48f4-49b0-b10e-a379b3d09a8f</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>callInProgress</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:09:59.511</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:11:06</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1117</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:09</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:09</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:09:59.511</con:value></con:property></con:properties></con:testCase><con:testCase id="fa43645d-d1ad-4d98-9035-09c8c9f1065f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отправить сообщение с eventType=doctorStartCall (с поиском записи)" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="03e0cd66-258c-42ca-beae-0b12e366756e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6c68b3f3-2d4f-4a94-904b-0d8cc2553fde</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="jdbc" name="Найти appointmentId, doctor_short_name, speciality_name" id="884b99ea-447e-4192-bb2d-cced176e116c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>select fna.appointment_id, fna.speciality_name, fna.doctor_short_name from f_notification_appointment fna
join f_notification fn on fn.id = fna.notification_id
join f_user fu on fu.id = fn.user_id
where fu.patient_id = ${#TestSuite#patientId} 
and fna.status = 'CREATE'
and fna.doctor_short_name is not NULL
LIMIT 1</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать appointmentId, doctor_short_name, speciality_name" id="c537feaf-5937-4c30-b7dd-3bb0ed2b5e63"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>appointmentId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти appointmentId, doctor_short_name, speciality_name</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION_APPOINTMENT.APPOINTMENT_ID</con:sourcePath><con:targetType>appointmentId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>specialityName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти appointmentId, doctor_short_name, speciality_name</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION_APPOINTMENT.SPECIALITY_NAME</con:sourcePath><con:targetType>specName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>doctor_short_name</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти appointmentId, doctor_short_name, speciality_name</con:sourceStep><con:sourcePath>//*:F_NOTIFICATION_APPOINTMENT.DOCTOR_SHORT_NAME</con:sourcePath><con:targetType>docShortName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Отправить сообщение в топик" id="fd477f21-aa36-4bc3-82cf-1e7478d77aaf"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.util.Date
import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "Отправка сообщения об изменении статуса ТМК"

def date = new Date()
log.info date
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
testRunner.testCase.setPropertyValue("currentDateTimeForDB", currentDateTimeForDB.toString())

Date dateMinus = LocalDateTime.now().plusSeconds(-67).toDate()
def currentDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(dateMinus)
def eventDateTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(dateMinus)
def timePatientRejectCall = new SimpleDateFormat("HH:mm").format(dateMinus)
def timePatientDidNotAnswer = new SimpleDateFormat("dd.MM.yyyy' в 'HH:mm").format(dateMinus)
testRunner.testCase.setPropertyValue("eventDateTime", eventDateTime.toString())
testRunner.testCase.setPropertyValue("currentDateTime", currentDateTime.toString())
testRunner.testCase.setPropertyValue("timePatientRejectCall", timePatientRejectCall.toString())
testRunner.testCase.setPropertyValue("timePatientDidNotAnswer", timePatientDidNotAnswer.toString())

patientId = testRunner.testCase.testSuite.getPropertyValue("patientId")
appointmentId = testRunner.testCase.getPropertyValue("appointmentId")
callCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")
userId= testRunner.testCase.testSuite.getPropertyValue("userId")
deviceGuid = java.util.UUID.randomUUID()

message="""{
    "patientId": """+patientId+""",
    "deviceId": \""""+deviceGuid+"""\",
    "productType": "emiasInfo",
    "appointmentId": """+appointmentId+""",
    "participantURL": "/7d47420b-5dee-4cfe-bbf1-349fd9776370?participantUuid\u003d1436b14f-479d-432a-8c7f-b3301168b260",
    "eventType": \""""+eventType+"""\",
    "eventDateTime": \""""+eventDateTime+"""\",
    "unsuccessCallCounter": """+callCounter+"""
}"""

mainScripts.kafka().sendMessageToKafka2("topicTmkNotify",message)

sleep(10000)


query="SELECT create_date FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
createDate=notifications[0].create_date.toString()
String createdDate = createDate.substring(0, createDate.length() - 3)
createdDateParsed = Date.parse("yyyy-MM-dd HH:mm:ss.SSS", createdDate)
log.info createdDateParsed
int longTime = (createdDateParsed.getTime() - dateMinus.getTime())/1000
int hours = (longTime / 3600)*60;
int minutes = longTime / 3600*60 + (longTime / 3600) / 60
int seconds = longTime % 60;
String timeCallInProgress = String.format("%02d:%02d", minutes, seconds)
log.info timeCallInProgress
testRunner.testCase.setPropertyValue("timeCallInProgress", timeCallInProgress.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification" id="70434c1e-0da3-45ff-afc8-00b9a7b7af7c"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое = "+expValue.toString()+", фактическое ="+currentValue.toString())
}

def checkDescription( String description){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	doctorShortName = testRunner.testCase.getPropertyValue("docShortName")
	timePatientRejectCall = testRunner.testCase.getPropertyValue("timePatientRejectCall")
	timePatientDidNotAnswer = testRunner.testCase.getPropertyValue("timePatientDidNotAnswer")
	timeCallInProgress = testRunner.testCase.getPropertyValue("timeCallInProgress")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	countResult = callCounter ? (callCounter.endsWith("2") || callCounter.endsWith("3") || callCounter.endsWith("4")) &amp;&amp; !List.of("12", "13", "14").contains(callCounter) ? "раза" : "раз" : null
	desc=""
	switch(eventType){
		case "doctorLoginToRoom":
			desc = "Врач в сети: "+ specialityName +" "+ doctorShortName + " на связи, консультация скоро начнется. Войдите в приложение или ожидайте звонок."
			break
		case "doctorStartCall":
			desc = doctorShortName
			break
		case "patientRejectCall":
			desc = "Вы отклонили вызов от "+ specialityName + " " + doctorShortName + " сегодня в " + timePatientRejectCall
			break
		case "patientDidNotAnswer":
			desc = callCounter=="1" || !callCounter ? "Сегодня в "+ timePatientRejectCall + " звонил " + specialityName + " " + doctorShortName : "Вам звонил (" + callCounter  + ") " + countResult + " " + specialityName + " " + doctorShortName + " Последний " + timePatientDidNotAnswer
			break
		case "conferenceSuccesfullyFinished":
			desc = specialityName + doctorShortName + " провел онлайн-консультацию. Результат скоро появится в Медкарте."
			break
		case "callInProgress":
			desc = "Консультация идет " +timeCallInProgress
			break	
	}
	expectedDesc=desc
	checkParameter("notification.description",expectedDesc,description)
}

def checkTitle( String title){
	eventType = testRunner.testCase.getPropertyValue("eventType")
	specialityName = testRunner.testCase.getPropertyValue("specName")
	callCounter = testRunner.testCase.getPropertyValue("callCounter")
	expTitle=""
	switch(eventType){
		case "doctorLoginToRoom":
			expTitle = "Онлайн-консультация скоро начнется"
			break
		case "doctorStartCall":
			expTitle = specialityName
			break
		case "patientRejectCall":
			expTitle = "Вызов от "+ specialityName + " отклонен"
			break
		case "patientDidNotAnswer":
			expTitle = callCounter=="1" || !callCounter ? "Пропущен вызов от " + specialityName: "Пропущены вызовы (" + callCounter  + ") от " + specialityName
			break
		case "conferenceSuccesfullyFinished":
			expTitle = "Онлайн-консультация состоялась"
			break
		case "callInProgress":
			expTitle = "Онлайн-консультация"
			break	
	}
	expectedTitle=expTitle
	log.info title
	checkParameter("notification.title",expectedTitle,title)
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.getPropertyValue("currentDateTimeForDB")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=7 and  create_date > '"+currentDateTimeForDB+"'"
log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	checkTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_telemedicine" id="ca4ca707-5286-42e3-be82-25bf7b8106a4"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

appointmentId = testRunner.testCase.getPropertyValue("appointmentId").toLong()
eventDateTime = testRunner.testCase.getPropertyValue("currentDateTime").toString()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
unaccessCallCounter = testRunner.testCase.getPropertyValue("callCounter")
eventType = testRunner.testCase.getPropertyValue("eventType")

query="SELECT * FROM f_notification_telemedicine WHERE notification_id ="+notificationId
notificationTelemedicine=sql.rows(query)

if(notificationTelemedicine.size() == 1){
	date = (eventDateTime.endsWith("00")) ? notificationTelemedicine[0].event_date_time.toString()+"00" : (eventDateTime.endsWith("0")) ? notificationTelemedicine[0].event_date_time.toString()+"0": notificationTelemedicine[0].event_date_time.toString()
	tm=notificationTelemedicine[0]
	log.info("Найдена запись в f_notification_telemedicine с notification_id ="+notificationId)
	checkParameter("eventDateTime",eventDateTime,date)
	checkParameter("unaccessCallCounter",unaccessCallCounter,tm.unsuccess_call_counter.toString())
	checkParameter("eventType",eventType,tm.event_type.toString())
}
else testRunner.fail("Количество записей в f_notification_telemedicine не равно 1. фактическое ="+notificationTelemedicine.size())</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить создание в f_notification_task" id="887e1547-89cd-4462-9770-4ffc82a8b6c5"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
import java.util.ArrayList
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
notificationId = testRunner.testCase.getPropertyValue("notificationId").toLong()
devicesToSend = testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendVoip = testRunner.testCase.testSuite.getPropertyValue("devicesToSendVoip")
currentDateTimeForDB = testRunner.testCase.getPropertyValue("currentDateTimeForDB")
eventType=testRunner.testCase.getPropertyValue("eventType")

sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
log.info sendDate

devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendVoipList=devicesToSendVoip.split(',').collect{it as int}

for(i=1; i &lt;=devicesCount; i++ ){
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+(i))
	if(eventType != 'doctorStartCall'){	
	log.info "Проверяю status=SEND для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'")
		//tasks="select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND' and device_guid='"+deviceGuid+"'"
		log.info tasks
		if(devicesToSendList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
	if(eventType != 'doctorLoginToRoom' &amp;&amp; eventType != 'conferenceSuccesfullyFinished'){
		log.info "Проверяю status=SEND_VOIP для девайса "+deviceGuid
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and status = 'SEND_VOIP' and device_guid='"+deviceGuid+"'")
		log.info tasks
		if(devicesToSendVoipList.contains(i)){
			if(tasks.size() == 1){
				task=tasks[0]
				checkParameter("status","SEND_VOIP",task.status)
				if( task.send_date &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+task.send_date.toString())
			}
			else  testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size() == 1){
				 testRunner.fail("Для девайса, по которому не должно быть отправки VOIP уведомлений, найдены записи в f_notification_task. их количество="+tasks.size())
			}
		}
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>eventType</con:name><con:value>doctorStartCall</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930086888</con:value></con:property><con:property><con:name>currentDateTime</con:name><con:value>2024-03-05 12:07:20.175</con:value></con:property><con:property><con:name>specName</con:name><con:value>Врач-онколог</con:value></con:property><con:property><con:name>docShortName</con:name><con:value>Телемед О.О.</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-03-05 12:08:27</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>1104</con:value></con:property><con:property><con:name>timePatientRejectCall</con:name><con:value>12:07</con:value></con:property><con:property><con:name>timePatientDidNotAnswer</con:name><con:value>05.03.2024 в 12:07</con:value></con:property><con:property><con:name>timeCallInProgress</con:name><con:value>01:07</con:value></con:property><con:property><con:name>callCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>eventDateTime</con:name><con:value>2024-03-05T12:07:20.175</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>patientId</con:name><con:value>123010</con:value></con:property><con:property><con:name>oms</con:name><con:value>1000000000010</con:value></con:property><con:property><con:name>userId</con:name><con:value>52</con:value></con:property><con:property><con:name>devicesCount</con:name><con:value>9</con:value></con:property><con:property><con:name>deviceGuid1</con:name><con:value>302f194e-24c2-49f8-92fd-bb4dcc836dc5</con:value></con:property><con:property><con:name>deviceGuid2</con:name><con:value>8b3e0417-5461-4a3a-8222-359ba2716c32</con:value></con:property><con:property><con:name>deviceGuid3</con:name><con:value>7cb9bc5f-bbcf-4f8e-928d-201ab8cadc7a</con:value></con:property><con:property><con:name>deviceGuid4</con:name><con:value>98a529ee-fb5b-49f9-ac7c-8bf954adbc2d</con:value></con:property><con:property><con:name>deviceGuid5</con:name><con:value>56ba8635-b1fe-4e90-849e-d7942f8784b4</con:value></con:property><con:property><con:name>deviceGuid6</con:name><con:value>382645b4-00a6-4a0b-93cd-80e8016e8119</con:value></con:property><con:property><con:name>deviceGuid7</con:name><con:value>97057a63-2a88-40a5-95be-e1ab22395150</con:value></con:property><con:property><con:name>deviceGuid8</con:name><con:value>86a707bb-6146-47c1-a43c-bd2f0ab2bfe1</con:value></con:property><con:property><con:name>deviceGuid9</con:name><con:value>7da77eff-feff-48c7-b367-4566b243b58e</con:value></con:property><con:property><con:name>devicesToSend</con:name><con:value>4, 5, 6, 7, 8, 9</con:value></con:property><con:property><con:name>devicesToSendVoip</con:name><con:value>1, 2, 3, 4, 5, 7, 8</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>4161</con:value></con:property><con:property><con:name>specialityName</con:name><con:value>Окулист</con:value></con:property><con:property><con:name>doctorFullName</con:name><con:value>&lt;F_NOTIFICATION_APPOINTMENT.DOCTOR_FULL_NAME/></con:value></con:property><con:property><con:name>doctorShortName</con:name><con:value>Кравченко Д.А.</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391930191001</con:value></con:property></con:properties></con:testSuite><con:testSuite id="af933f7a-1fa7-40de-a7ad-593ee93f7e78" name="А_ЕСУ_03 - Получение сообщения о назначениях при госпитализации"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="55fd6d35-476f-43bb-b523-dd9c5ef51e44" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверить наличие пациента со всеми девайсами" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить пациента с девайсами со всеми настройками" id="8e5c0973-a1b1-4472-a7b3-1309287902a3"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
//в этом кейсе создадутся все минмально необходимые левайсы с настройками для проверки А_ЕСУ_07 шаг 4.2
// и  А_ВА_15

// функция, проверяющая есть ли девайс с нужной комбинацией параметров. если нет - досоздает. также вызывает функцию  checkSettings
def checkDevice(long userId, def a, def d, def v,  int i){
			log.info "проверяю девайс номер "+i+"с параметрами a="+a+" d="+d+" v="+v
			voipCondition= v != null ? "="+v : "is null"
			deviceQuery="select fud.device_guid from f_user_device fud "+
							"left join f_device_settings fds on fds.device_guid =fud.device_guid "+
							"where fud.user_id ="+userId+" and fud.authentication ="+a+
							" and fud.deleted ="+d+" and fud.voip  "+voipCondition
//			log.info deviceQuery
			device=sql.firstRow(deviceQuery)
//			log.info "device result "+device
			guid=""
			newDevice=false
//			log.info device
			if(device){
				guid=device.device_guid
			}
			else{
//				log.info deviceQuery
				guid= java.util.UUID.randomUUID()
				cloud= java.util.UUID.randomUUID()
				devQuery="INSERT INTO f_device (device_guid, app_version, platform, device_cloud_id, cloud_token_delete) VALUES('"+guid+"', '1.3.2', 'ANDROID','"+cloud+"', NULL)"
				userDevQuery="INSERT INTO f_user_device (id, device_guid, user_id, authentication, deleted, deleted_date, esia_authentication, main_policy, voip) VALUES(nextval('f_user_device_sequence'), '"+guid+"', "+userId+", "+a.toString()+", "+d.toString()+", NULL, NULL, NULL, "+v.toString()+")"
//				log.info "device devQuery "+devQuery
//				log.info "device userDevQuery "+userDevQuery
				sql.execute(devQuery)
				sql.execute(userDevQuery)
				newDevice=true
			}
			log.info guid
			testRunner.testCase.testSuite.setPropertyValue("deviceGuid"+i, guid.toString())
}

// проверить, что пациент с идентификатором в сьюте есть в бд
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
oms =testRunner.testCase.testSuite.getPropertyValue("oms")
user=sql.firstRow("select * from f_user where patient_id="+patientId)
//log.info user
userId=0
if( !user){
	query="INSERT INTO f_user VALUES(nextval('f_user_sequence'), "+patientId+", '"+oms+"', '2012-06-07') RETURNING id "
	userId=sql.firstRow(query).id 
}
else{
//	log.info("пациент есть")
	userId=user.id
}
//log.info userId
testRunner.testCase.testSuite.setPropertyValue("userId", userId.toString())

//для каждого важного параметра в f_user_device собрать возможные значения
auth=[true, false]
deleted=[true, false]
voip=[true, false, null]
// в массиве собраны те комбинации параметров f_user_device, для которых должна быть отправка 
specialDevSettings=[
							[auth:true, del:false, voip:null ],
							[auth:true, del:false, voip:false]
							]

allDeviseParamCombinations=[]
// собрать все комбинации параметров в f_user_device
auth.each{ a ->
	deleted.each{ d ->
		voip.each{ v ->
			devParams=[auth:a, del:d, voip:v ]
			allDeviseParamCombinations &lt;&lt; devParams
		}
	}
}

i=1
//список индексов девайсов, по которым должна будет осуществиться отправка уведомлений
devicesToSend=[]

//для каждой комбинации основных параметров создать девайс с соответствующими настройками
allDeviseParamCombinations.eachWithIndex{it, index1 ->
	checkDevice(userId,  it.auth,  it.del,  it.voip, i)
	// если комбинация параметров  есть в списке specialDevSettings определить для них особые значения настроек и создать/обновить данные
	specialDevSettings.each{ spec ->
		if (spec == it) devicesToSend &lt;&lt; i
	}
	i +=1
}

devicesCount=i-1
testRunner.testCase.testSuite.setPropertyValue("devicesToSend", devicesToSend.toString().replace('[','').replace(']',''))
testRunner.testCase.testSuite.setPropertyValue("devicesCount", devicesCount.toString())</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cee963d5-c137-4752-9dca-69174ffad0e0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отправка уведомления" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Отправить уведомление" id="c11445e6-f2df-4930-ad2a-5a097ce7a55c"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
tc = testRunner.testCase.testSuite.getPropertyValue("testCase")
log.info "Отправить сообщение по ТК \""+tc+"\""

def removeEmptyOptinalParams(String message, String paramName, String value){
	if(value == ""){
		toRemove= "\""+paramName+"\": ,"
		message=message.replace(toRemove,"")
	}
	return message
}
// сформировать сообщение
//eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate2")
eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime2")
eventType = testRunner.testCase.testSuite.getPropertyValue("eventType2")
emiasId = testRunner.testCase.testSuite.getPropertyValue("emiasId2")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId2")
phoneNum = testRunner.testCase.testSuite.getPropertyValue("phoneNum")
expertName = testRunner.testCase.testSuite.getPropertyValue("expertName2")
expertSpeciality = testRunner.testCase.testSuite.getPropertyValue("expertSpeciality2")
procedureName = testRunner.testCase.testSuite.getPropertyValue("procedureName2")
office = testRunner.testCase.testSuite.getPropertyValue("office2")
address = testRunner.testCase.testSuite.getPropertyValue("address2")
nameMO = testRunner.testCase.testSuite.getPropertyValue("nameMO2")

message="{ "+
    "\"appointmentId\": \""+appointmentId+"\","+
    "\"eventDate\": \""+eventDate+"\","+
    "\"eventTime\": \""+eventTime+"\","+
    "\"eventType\": \""+eventType+"\","+
    "\"emiasId\": "+emiasId+","+
    "\"patientId\": \""+patientId+"\","+
    "\"phoneNum\": "+phoneNum+","+
    "\"resource\": {"+
        "\"type\": \"expert\","+
        "\"expertName\": "+expertName+","+
        "\"expertSpeciality\": "+expertSpeciality+","+
        "\"procedureName\": "+procedureName+","+
        "\"office\": "+office+","+
        "\"address\": \""+address+"\","+
        "\"nameMO\": \""+nameMO+"\""+
   " }"+
"}"

message= removeEmptyOptinalParams( message,  "phoneNum",  phoneNum)
message= removeEmptyOptinalParams( message,  "emiasId",  emiasId)
message= removeEmptyOptinalParams( message,  "expertName",  expertName)
message= removeEmptyOptinalParams( message,  "expertSpeciality",  expertSpeciality)
message= removeEmptyOptinalParams( message,  "procedureName",  procedureName)
message= removeEmptyOptinalParams( message,  "office",  office)
//return message
//sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.testSuite.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka(topicName,message)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b44edb61-20fe-41d1-9302-90bd33806e1a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получить timestamp сообщения" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Получить timestamp" id="e265d64d-9796-4a1e-a64f-76153b0926e2"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import org.apache.kafka.clients.consumer. *
import java.sql.Timestamp
//import org.json.JSONObject;


def parsePath(Object node, String path){
	String[] arr = path.replace("[",".").replace("]","").split("\\.");
	Object obj=node
	for (int i = 0; i < arr.size(); i++) {
		def key = arr[i].isInteger()  ? Integer.parseInt(arr[i]) : arr[i]
		obj = obj.get(key);
	}
	return obj
}



def getKafkaLastMessageJson( String topicName, String parameter, String value, Long time=18000){
        String topic =testRunner.testCase.testSuite.getPropertyValue(topicName);
//        topic="KIS_appointment_changer.EMIASINFO_SOLIT_TEST_1"
        String bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

        Properties props = new Properties()
        props.put('zk.connect', '10.2.172.24:2181')
        props.put('bootstrap.servers',bootstrapServers)
        props.put('group.id', UUID.randomUUID().toString())
        props.put("enable.auto.commit", "false")
        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")
        props.put('key.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
        props.put('value.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
        def consumer = new KafkaConsumer(props)

        consumer.subscribe([topic])
        def messageToReturn = null;
        long t = System.currentTimeMillis();
        long end = t + time;
        while (System.currentTimeMillis()<end && messageToReturn == null)
        {
            log.info ( "while ")
            ConsumerRecords<String, String> records = consumer.poll(time)
            for (ConsumerRecord<String, String> record : records)
            {
                def rootNode
                try {
                    rootNode = new JsonSlurper().parseText(record.value())
                } catch(Exception e) {continue}
                String messageParamValue=parsePath(rootNode, parameter)
                if (messageParamValue == value ) {
                    log.info("Новое сообщение : "+record.value()+" время "+ new Timestamp(record.timestamp()));
                    messageToReturn= new Timestamp(record.timestamp())
                }
            }
        }
        consumer.close()
        log.info ( "close ")
        return messageToReturn
    }

appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")    
time=getKafkaLastMessageJson("topic","appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("messageTimestamp",time.toString())]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="da3daf82-aa83-4dc1-a40c-021c66c4e377" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Очистка созданных данных" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Очистить данные" id="7fda24dd-5228-4fc4-a488-15f94b30b398"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
notificationId = testRunner.testCase.testSuite.getPropertyValue("notificationId")
query1="delete from f_notification_task where notification_id="+notificationId
query2="delete from f_notification_hospital_appointment where notification_id="+notificationId
query3="delete from f_notification where id="+notificationId
//log.info query
sql.execute(query1)
sql.execute(query2)
sql.execute(query3)
tc = testRunner.testCase.testSuite.getPropertyValue("testCase")
log.info "Завершен  ТК \""+tc+"\""</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="66a4aa2b-b387-4c77-862b-417a50db584a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка создания записи в таблице f_notification" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="5cf6f3a5-9052-4522-95b1-048efbae4f2b"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.Date
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def getOptionalParameter(String propertyName){
	value =  testRunner.testCase.testSuite.getPropertyValue(propertyName)
	if(value == "" || value.toLowerCase() == "null")	return ""
	else return value.replace("\"","")
}

def getDescriptionSecondPart(){
	expertName = getOptionalParameter("expertName2")
	expertSpeciality = getOptionalParameter("expertSpeciality2")
	procedureName = getOptionalParameter("procedureName2")
	office =getOptionalParameter("office2")
	nameMO = testRunner.testCase.testSuite.getPropertyValue("nameMO2")
	eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate2")
	eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime2")
	desc=expertSpeciality+" "+expertName+" "+procedureName
	desc=desc.trim()
	if(expertSpeciality || expertName || procedureName) desc += ", "
	desc += nameMO+","
	if(office) desc += " "+office+","
	Date date = Date.parse( 'yyyy-MM-dd', eventDate )
	String newEventDate = date.format( 'dd.MM.yyyy' )
	desc += " "+newEventDate +" в "+eventTime
	return desc
}

def checkDescription( String description){
	eventType = testRunner.testCase.testSuite.getPropertyValue("eventType2")
	dbDescDependentPart=""
	switch(eventType){
		case "created":
			dbDescDependentPart="Вы записаны: "
			break
		case "edited":
			dbDescDependentPart="Запись изменена: "
			break
		case "cancelled":
			dbDescDependentPart="Запись отменена: "
			break
		default:
		testRunner.fail(" В своствах кейса некорректный eventType2='"+eventType+"'. должен быть один из: created, edited, cancelled")
		break
	}
	secondPartDesc=	getDescriptionSecondPart()
	expectedDesc= dbDescDependentPart + secondPartDesc		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title){
	eventType = testRunner.testCase.testSuite.getPropertyValue("eventType2")
	dbTitle=""
	switch(eventType){
		case "created":
			dbTitle="Запись на прием в КДО"
			break
		case "edited":
			dbTitle="Изменение записи на прием в КДО"
			break
		case "cancelled":
			dbTitle="Отмена записи на прием в КДО"
			break
		default:
		testRunner.fail(" В своствах кейса некорректный eventType2='"+eventType+"'. должен быть один из: created, edited, cancelled")
		break
	}
	checkParameter("notification.title",dbTitle,title)	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.testSuite.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=(select id from d_notification_type where title='hospitalAppointment') and  create_date > '"+currentDateTimeForDB+"'"
//log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	testRunner.testCase.testSuite.setPropertyValue("notificationId",notification.id.toString())
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else{ 
	testRunner.testCase.testSuite.setPropertyValue("notificationId","")
	testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
}
log.info "проверка создания записи в f_notification завершена"</script></con:config></con:testStep><con:properties><con:property><con:name>notificationId</con:name><con:value>200502</con:value></con:property></con:properties></con:testCase><con:testCase id="8e340f6b-95fa-430c-9d58-a6b471909f0a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка соответствия записи в БД notification в f_notification_hospital_appointment" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить" id="a9d2455a-19c4-44f8-918e-cb76f9986ebb"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def getOptionalParameter(String propertyName){
	value =  testRunner.testCase.testSuite.getPropertyValue(propertyName)
	if(value == "" || value.toLowerCase() == "null")	return "null"
	else return value.replace("\"","")
}

notificationId = testRunner.testCase.testSuite.getPropertyValue("notificationId")
if(notificationId != "null"){	
	query="select * from  f_notification_hospital_appointment where notification_id= "+notificationId
	appointments=sql.rows(query)
	if(appointments.size() == 1){
		//log.info appointment
		//	log.info "проскочили проверку howToChange "
		appointment=appointments[0]
		appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
		eventType = testRunner.testCase.testSuite.getPropertyValue("eventType2")
		eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate2")
		eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime2")
		expertName = getOptionalParameter("expertName2")
		expertSpeciality = getOptionalParameter("expertSpeciality2")
		procedureName = getOptionalParameter("procedureName2")
		office = getOptionalParameter("office2",)
		address = testRunner.testCase.testSuite.getPropertyValue("address2")
		nameMO = testRunner.testCase.testSuite.getPropertyValue("nameMO2")
		messageTimestamp = testRunner.testCase.testSuite.getPropertyValue("messageTimestamp")
		checkParameter("appointment_id",appointmentId, appointment.appointment_id)
		checkParameter("event_type",eventType, appointment.event_type.toString())
		checkParameter("event_date",eventDate, appointment.event_date.toString())
		checkParameter("event_time",eventTime, appointment.event_time.toString())
		checkParameter("resource_speciality",expertSpeciality, appointment.resource_speciality.toString())
		checkParameter("resource_name",expertName, appointment.resource_name.toString())
		checkParameter("resource_procedure",procedureName, appointment.resource_procedure.toString())
		checkParameter("resource_office",office, appointment.resource_office.toString())
		checkParameter("resource_address",address, appointment.resource_address.toString())
		checkParameter("resource_mo",nameMO, appointment.resource_mo.toString())
		checkParameter("message_datetime",messageTimestamp, appointment.message_datetime.toString())

	}
	else testRunner.fail("Количество записей в f_notification_hospital_appointment не равно 1. фактическое ="+appointments.size())
}
else{
	log.info "Не проверяю f_notification_hospital_appointment, т.к. не найдена запись в f_notification"
}
log.info "проверка создания записи в f_notification_hospital_appointment завершена"</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fc81b0f5-4acf-4f04-adbf-c848684f9d82" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка соответствия записи в БД notification в f_notification_task" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="7ca0e803-699b-422b-9bbf-bfcdb366a7fb"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "проверка создания записи в f_notification_task завершена"

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

notificationId = testRunner.testCase.testSuite.getPropertyValue("notificationId")
if(notificationId != "null"){	
	devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
	currentDateTimeForDB = testRunner.testCase.testSuite.getPropertyValue("currentDateTimeForDB")
	
	sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
	log.info sendDate
	
	devicesToSend=testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	
	for(i=1; i &lt;=devicesCount; i++ ){
	//	log.info statuses
		deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	//	log.info "Проверяю notification task для девайса "+deviceGuid
		if(devicesToSendList.contains(i)){
			if( tasks.size()==1){
				task=tasks[0]
				checkParameter("task status","SEND",task.status)
				task.send_date.each{
						if( it &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
				}
			}
			else testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size()>0) testRunner.fail("Количество записей в f_notification_task не равно 0. фактическое ="+tasks.size())
		}
	}
}
else{
	log.info "Не проверяю f_notification_task, т.к. не найдена запись в f_notification"
}
log.info "проверка создания записи в f_notification_task завершена"</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6973e8da-1a0a-409b-94af-700e9f4d3aec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Фильтры для кибаны" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="залогировать фильтры для кибаны" id="43852c17-28fd-4dad-ac67-d23e1ee2a760"><con:settings/><con:config><script>notificationId = testRunner.testCase.testSuite.getPropertyValue("notificationId")
log.info ("KIBANA start")
log.info("фильтр для поиска в кибана: \"events/send\" AND "+notificationId)
log.info("уведомления должны быть отправлены только по девайсам со следующими device_guid")
devicesToSend=testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendList.each{
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+it)
	log.info deviceGuid
}
log.info ("KIBANA end")</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b0b913ba-09d4-434b-a342-e28ca377bb27" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверить наличие пациента, у которого все девайсы не подходящие" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить пациента с девайсами со всеми настройками" id="ce4169c0-a64e-4cf2-b97c-bfd64c73b511"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
//в этом кейсе создадутся все минмально необходимые левайсы с настройками для проверки А_ЕСУ_07 шаг 4.2
// и  А_ВА_15

// функция, проверяющая есть ли девайс с нужной комбинацией параметров. если нет - досоздает. также вызывает функцию  checkSettings
def checkDevice(long userId, def a, def d, def v,  int i){
			log.info "проверяю девайс номер "+i+"с параметрами a="+a+" d="+d+" v="+v
			voipCondition= v != null ? "="+v : "is null"
			deviceQuery="select fud.device_guid from f_user_device fud "+
							"left join f_device_settings fds on fds.device_guid =fud.device_guid "+
							"where fud.user_id ="+userId+" and fud.authentication ="+a+
							" and fud.deleted ="+d+" and fud.voip  "+voipCondition
//			log.info deviceQuery
			device=sql.firstRow(deviceQuery)
//			log.info "device result "+device
			guid=""
			newDevice=false
//			log.info device
			if(device){
				guid=device.device_guid
			}
			else{
//				log.info deviceQuery
				guid= java.util.UUID.randomUUID()
				cloud= java.util.UUID.randomUUID()
				devQuery="INSERT INTO f_device (device_guid, app_version, platform, device_cloud_id, cloud_token_delete) VALUES('"+guid+"', '1.3.2', 'ANDROID','"+cloud+"', NULL)"
				userDevQuery="INSERT INTO f_user_device (id, device_guid, user_id, authentication, deleted, deleted_date, esia_authentication, main_policy, voip) VALUES(nextval('f_user_device_sequence'), '"+guid+"', "+userId+", "+a.toString()+", "+d.toString()+", NULL, NULL, NULL, "+v.toString()+")"
//				log.info "device devQuery "+devQuery
//				log.info "device userDevQuery "+userDevQuery
				sql.execute(devQuery)
				sql.execute(userDevQuery)
				newDevice=true
			}
			log.info guid
			testRunner.testCase.testSuite.setPropertyValue("deviceGuid"+i, guid.toString())
}

// проверить, что пациент с идентификатором в сьюте есть в бд
patientId =testRunner.testCase.testSuite.getPropertyValue("patientBadDevices")
oms =testRunner.testCase.testSuite.getPropertyValue("oms2")
user=sql.firstRow("select * from f_user where patient_id="+patientId)
//log.info user
userId=0
if( !user){
	query="INSERT INTO f_user VALUES(nextval('f_user_sequence'), "+patientId+", '"+oms+"', '2012-06-07') RETURNING id "
	userId=sql.firstRow(query).id 
}
else{
//	log.info("пациент есть")
	userId=user.id
}
//log.info userId
testRunner.testCase.testSuite.setPropertyValue("userId", userId.toString())

//для каждого важного параметра в f_user_device собрать возможные значения
auth=[true, false]
deleted=[true, false]
voip=[true, false, null]
// в массиве собраны те комбинации параметров f_user_device, для которых должна быть отправка 
specialDevSettings=[
							[auth:true, del:false, voip:null ],
							[auth:true, del:false, voip:false]
							]

allDeviseParamCombinations=[]
// собрать все комбинации параметров в f_user_device
auth.each{ a ->
	deleted.each{ d ->
		voip.each{ v ->
			devParams=[auth:a, del:d, voip:v ]
			allDeviseParamCombinations &lt;&lt; devParams
		}
	}
}

i=1
specialDevSettings.each{
	allDeviseParamCombinations.remove(it)
}


//для каждой комбинации основных параметров создать девайс с соответствующими настройками
allDeviseParamCombinations.eachWithIndex{it, index1 ->
	checkDevice(userId,  it.auth,  it.del,  it.voip, i)
	i +=1
}

devicesCount=i-1

testRunner.testCase.testSuite.setPropertyValue("devicesCount", devicesCount.toString())</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a2bc6c93-820e-460f-9207-425a7a906433" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка отсутствия записи в таблице f_notification" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="2d308b6c-af0a-4775-aa03-cbd1e4e2cc50"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.Date
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.testSuite.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=(select id from d_notification_type where title='hospitalAppointment') and  create_date > '"+currentDateTimeForDB+"'"
//log.info query
notifications=sql.rows(query)
if(notifications.size() > 0){
testRunner.fail("Количество записей в f_notification не равно 0. фактическое ="+notifications.size())
}
log.info "проверка создания записи в f_notification завершена"</script></con:config></con:testStep><con:properties><con:property><con:name>notificationId</con:name><con:value>200502</con:value></con:property></con:properties></con:testCase><con:testCase id="97c1eb16-a325-4047-a6ed-653c1f3288dd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверить наличие пациента без девайсов" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="удалить все девайсы пациента" id="7e03298e-8528-4954-a680-f2797f0c4883"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

// проверить, что пациент с идентификатором в сьюте есть в бд
patientId =testRunner.testCase.testSuite.getPropertyValue("patientNoDevices")
oms =testRunner.testCase.testSuite.getPropertyValue("oms3")
user=sql.firstRow("select * from f_user where patient_id="+patientId)
//log.info user
userId=0
if( !user){
	query="INSERT INTO f_user VALUES(nextval('f_user_sequence'), "+patientId+", '"+oms+"', '2012-06-07') RETURNING id "
	userId=sql.firstRow(query).id 
}
else{
//	log.info("пациент есть")
	userId=user.id
}
//log.info userId
testRunner.testCase.testSuite.setPropertyValue("userId", userId.toString())

deviceQuery="select * from f_user_device where user_id="+userId
devices=sql.rows(deviceQuery)
if(devices) sql.execute("delete from f_user_device where user_id="+userId)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="31390c40-cf32-496c-9590-ed0f437179d7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Открой кибану, чтоб в параллель смотреть логи" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:testCase id="2b300f1b-e103-43c0-9fc6-84c18d9e8f6c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=created, в БД notification нет записи с appointmentId из уведомления. Заполнены все параметры" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="1c3ac138-fc96-41ff-88c8-399f14c31b35"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="af6e11e6-8e71-40ef-9506-cfb7280c22b5"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="4a2f55bf-af05-4f67-a966-c17d602dd241"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="4f245f5c-a274-4c94-ae85-0f247cf31430"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="3c49ed1e-1152-4806-ac36-06add7888828"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="4356d5bb-775e-457b-9e97-eddef0e0dc20"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="319d5942-ba48-486e-af8f-187f99b0cd78"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="7bf7bf05-b766-4961-8aa6-e1855b7304fe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="e76ae84a-4a1c-4c49-bdd2-baffd9c32be2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="82fecdda-478b-43ee-a51e-6f26d8c18fe2"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="92663c9c-8104-48ce-bc0e-6a00aecaabeb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=created. Заполнены только обязательные параметры(значения необяз.=null)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="be84389a-5eb3-4b6d-bfd1-317ac087678f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="0d11f2cc-749d-4bd3-b3ec-3ab0d7735d79"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","null")
testRunner.testCase.testSuite.setPropertyValue("expertName2","null")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","null")
testRunner.testCase.testSuite.setPropertyValue("office2","null")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="3cd9d592-14ed-4724-8d45-508f3400fb5a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="053adca3-3f9c-4d83-9f52-9a63bce064f5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="3401a608-1f0f-4201-9328-38da658e6e62"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="51e6e92f-40b1-4d56-b6d2-f9941fa0de4a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="c5e1abd4-99ab-4bf7-9d8e-d92a88ffbf98"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="08c5df35-be45-4721-87c0-55a082e5e2f4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="26141e88-6c75-4319-a9cc-32599555b95e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="80f1578b-f513-4a66-b830-4f2bb5592cb5"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="116d8f60-9049-47f7-9aba-b04d94b8ad50" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=created. Заполнены только обязательные параметры(значения необяз.=&quot;&quot;)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="c927372e-2f8c-4e30-8df3-794e13d0c14b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="0e343f0c-c72a-448f-bc34-3dbd5603c5df"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="44542080-e7bd-491f-a737-9666431e1b1f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="090324dd-bd30-4440-9196-71141c4dca3f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="29d013eb-9f89-4811-9b93-dbcc73e292ac"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="01f08fe9-9c5b-4014-9ca2-16a6f26426f3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="a5ca7a62-5221-4ff8-b9d1-3e7d27881922"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="ea56353b-c8ef-4e08-9ac9-dbe15a2af5f5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="d378eebc-c8b8-4446-8aa0-e33a83416845"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="64bbb5c2-b78b-40c7-a556-282a0b275916"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8428a74a-d531-4a9d-8233-77d923e46653" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=created. Заполнены только обязательные параметры(необяз. отсутствуют)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="45863730-d93a-4e5c-b43e-10143608a08b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="689323c6-be8a-400e-9bb6-a54d666d4bb0"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","")
testRunner.testCase.testSuite.setPropertyValue("expertName2","")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","")
testRunner.testCase.testSuite.setPropertyValue("office2","")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="3f52e243-6433-4a8f-9763-1f82e036627e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="349a7ba8-439d-4b49-8ae5-826aaff2123f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="3d6966e9-64eb-485c-afbc-f23485f6e8d3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="c9f39b4e-860f-4e85-a831-aa8150ec6154"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="b7ea7bac-c35d-4b10-baf4-4114bc6b7398"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="bf4c4209-0365-42c9-a4c1-c9acc1b7a28a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="c8299e3f-69cb-464f-8e24-d4b0fd081f62"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="7a3c7123-29d1-4a89-b20e-00e7d4900174"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f0404346-e6d6-4dbe-930f-df68116b7371" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited, в БД notification нет записи с appointmentId из уведомления. Заполнены все параметры" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="9ae46c35-00fe-4e97-b3ef-beb54c71d7f2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="fb65b6b7-c1ea-4d1e-bae9-8a0539561d5d"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="d199db6a-a030-4337-9b01-9e3a00ff98fe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="d891d4a7-9697-440b-820b-38832d863307"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="05db13ef-1c75-43a0-89fe-a6bae888414b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="6bd8d877-3048-4cff-b400-41cf423b9058"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="a8592eca-85a9-4311-ae27-bfda8d55c3dd"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="0ab96516-144f-4e98-b354-f2822944cd63"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="1c0828b0-67ef-401b-bd28-c460582d7b64"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="a745774e-d911-4ce4-a402-544aa314a7f5"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="389427da-70a3-41ae-a169-676df3756b31" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited. Заполнены только обязательные параметры(значения необяз.=null)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="b4b88eb2-4b03-4e51-9b3b-c8c40b8957ef"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="7521bdb7-9fcc-45bc-828c-d7e15826a30a"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","null")
testRunner.testCase.testSuite.setPropertyValue("expertName2","null")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","null")
testRunner.testCase.testSuite.setPropertyValue("office2","null")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="466e0b16-3a9b-4d70-b3e1-d03926c1cb7d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="06527c0f-754c-4467-a287-90ebb6bdad4a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="f8d2abc6-bec5-4f54-ac3f-0c9a2648e39f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="5004fa2f-42b6-4206-b3b4-8772109a782e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="527fc875-9175-4dec-b872-32dff5c049a7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="ac952bcd-9600-4f44-9597-a0c58c95c836"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="373553bf-13dc-4ee5-95c9-e6df5e9eb614"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="2a0100bc-7da3-4723-bc23-ab3b0c913815"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c5ec0577-5f56-49b2-9d04-333efd0472da" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited. Заполнены только обязательные параметры(значения необяз.=&quot;&quot;)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="0ae3abb2-84b1-45c4-b4f3-cb869fd80a8d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="1a2ac9dd-3a8c-4d33-9a7b-4a816e514ce1"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="0f64c28c-a709-4dfd-8ca0-969ce29fee65"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="060b0f64-8a78-4df1-8eb9-e6ce8e84c792"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="ae4849c8-1b5b-4214-9084-5dfdfb825587"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="a61c796e-e656-4c32-bffa-d9abdeb1c983"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="b974f8de-9e5e-431a-8558-ee6ffafb8ad1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="18d7a8b0-9969-4a63-939c-7620c0bd707f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="3e4eacc2-de42-4cf2-8d65-e8ef3a438ba9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="a05d37c0-59d2-4189-b6a0-599ba225b535"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="66a94650-13e6-4e53-9f66-a35041d7405a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited. Заполнены только обязательные параметры(необяз. отсутствуют)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="3ce121d4-b547-4b42-84f6-24583da5fdef"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="f09c1e46-a8ba-4d61-a1ed-b24e101006cc"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","")
testRunner.testCase.testSuite.setPropertyValue("expertName2","")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","")
testRunner.testCase.testSuite.setPropertyValue("office2","")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="003d82cf-5042-4f8f-9569-890f6f2b1c92"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="b30fd734-ced7-49df-baa3-295e20d19e0c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="4d32f1bf-29eb-4ddd-947c-4fd61515e182"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="bafdc86f-1065-421a-82ee-1a83dcb05b7c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="5bf247f9-9872-4c64-b495-d148d9dea308"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="934f0c7f-688f-4ba0-bd86-199ce03aeba9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="67f57416-91a7-4ee2-ad63-b24b70187360"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="97eed957-77bb-4fee-a756-259f4dc08b8d"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2562797a-ff7f-4980-9487-f16a50f0c3d3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled, в БД notification нет записи с appointmentId из уведомления. Заполнены все параметры" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="5953a01c-df08-46c2-84cb-0e0e084125f5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="b6037066-6b47-42e4-a371-604c6b6d4cbe"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="1097cc2a-640c-40d3-b58a-bea327ba6477"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="8cb91d5c-aa41-473a-bca3-772617ef1e4e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="61d2585c-db22-4c01-9fc9-fa4e1faa0189"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="a9e48efa-e9d6-4015-a685-e82d9f26e4d6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="88e6f18a-57b9-4693-80c3-08e4e095fa7f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="21d90fe6-ff4c-4271-b480-afec21458f22"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="d5cb2a2d-2f09-4f99-a97e-fc5cc87cbf47"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="bc40d271-a9e6-45ce-8ffe-1953ded6e941"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2e7487ca-47b4-495d-a870-9f77bdac0425" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled. Заполнены только обязательные параметры(значения необяз.=null)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="c42810e6-2e57-40da-936a-4c4ba5448a62"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="f9d94d6f-16cf-4242-99dd-ba0f5ffbb790"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","null")
testRunner.testCase.testSuite.setPropertyValue("expertName2","null")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","null")
testRunner.testCase.testSuite.setPropertyValue("office2","null")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="d3cc7e7b-96cc-4d47-9d1d-e41d831565c0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="6b267be1-9737-48ea-aaf8-87fb507e34fc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="51e21bf1-673d-4f42-ac28-2bc4a59e0843"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="067e9cf9-c02c-4eaa-a45c-9bb4ff7c83ad"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="0670d4f2-e1cf-4e73-8fee-feb5bd4dbabc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="95c7f8eb-dd15-4ba3-b2bd-698a3682256f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="8d2601cc-fa4d-4e1e-8ca8-3521f579f764"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="170d1e90-238f-4465-a53d-34d4504c2098"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="380917ee-db53-4dee-95b3-1300fe4a60dc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Несколько уведомлений по 1 пациенту. создание, изменение, отмена записи" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные в статусе created" id="02ec1f26-8a52-4c59-8c6b-704e42296589"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="7b8542d6-880c-4692-9c73-85ccd26f4a0a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="3e8664ee-a9cd-4a99-a911-575c6718dc4f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="2380ce5b-259a-41e4-bbbd-a0bdf7031868"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать notificationId" id="62f36f28-0902-4591-8871-0937fe1d2d0e"><con:settings/><con:config><script>notifications =  testRunner.testCase.testSuite.getPropertyValue("notificationId")

testRunner.testCase.testSuite.setPropertyValue("notifications",notifications)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="dacee0f0-9cb5-4f4c-afa8-6c1185861623"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="3660a20a-e0f2-404c-93b6-943410368b2c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="042a5e3d-d5c1-419d-8811-cede0cfc4865"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="9cab317a-c5e9-4203-9131-e404181a8f69"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные в статусе edited" id="ed467a6d-f543-449e-8537-5f5557b4c349"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
//appointmentId=UUID.randomUUID().toString()
//testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление 2" id="de46f2f8-b4f6-4c8a-bd7f-ffed319f9dbd"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения 2" id="83a9d636-14c8-4461-b509-a6daebdaecf4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification 2" id="d1eca4f8-c3b9-446b-b12a-105086125d18"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать notificationId 2" id="1a30301e-3891-4038-93e9-a15e245797ca"><con:settings/><con:config><script>notificationId =  testRunner.testCase.testSuite.getPropertyValue("notificationId")
notifications =  testRunner.testCase.testSuite.getPropertyValue("notifications")
notifications += "," + notificationId

testRunner.testCase.testSuite.setPropertyValue("notifications",notifications)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment 2" id="81f01505-224d-49ec-90c4-a16305e84251"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task 2" id="2747d983-a08b-4f20-86a2-2d0ada62c75d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid 2" id="5b08e027-7598-482c-8b10-e2207ab8843d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане 2" id="3c86f74a-ab31-439c-9f96-f013a149d3e3"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные в статусе cancelled" id="4d99566d-353e-471a-a7a9-e679c1003361"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
//appointmentId=UUID.randomUUID().toString()
//testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление 3" id="b48f3f6c-a2c1-4452-8dbd-b04b656a8764"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения 3" id="60ffec5a-61fb-49da-88ce-d09d723f69bb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification 3" id="eba20b22-f556-4f6f-a591-f426f48afca9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать notificationId 3" id="5102d0e5-b17a-46f0-908b-8b7c313b228a"><con:settings/><con:config><script>notificationId =  testRunner.testCase.testSuite.getPropertyValue("notificationId")
notifications =  testRunner.testCase.testSuite.getPropertyValue("notifications")
notifications += "," + notificationId

testRunner.testCase.testSuite.setPropertyValue("notifications",notifications)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment 3" id="d1f07136-e13b-4ce7-8d38-b3f9d86fb2b4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task 3" id="cf231d23-2cb7-444e-a7a2-f8b397332ccd"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid 3" id="437ef8c5-60f4-4c8f-ab10-be760915065c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане 3" id="ea41df99-59df-4e68-bd7b-719c7740fc16"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Очистить данные в БД" id="735d8eef-6cdd-4f4d-8a5b-92f323bf0515"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
notifications = testRunner.testCase.testSuite.getPropertyValue("notifications")
query1="delete from f_notification_task where notification_id in ("+notifications+")"
query2="delete from f_notification_hospital_appointment where notification_id in ("+notifications+")"
query3="delete from f_notification where id in ("+notifications+")"
//log.info query
sql.execute(query1)
sql.execute(query2)
sql.execute(query3)
tc = testRunner.testCase.testSuite.getPropertyValue("testCase")
log.info "Завершен  ТК \""+tc+"\""</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ca6b6042-ee68-434f-a484-133b4144fa87" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled. Заполнены только обязательные параметры(значения необяз.=&quot;&quot;)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="5cfe0d70-3118-4f38-9ffb-613cee553514"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="fe523718-9006-48fe-95f4-ab9e036e17f3"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="41254853-2c87-4c88-b63b-4112d3d4e03f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="f6f5fd09-4fb8-4652-88dd-ae595e05c3e6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="57c63113-9f94-4cc3-a9aa-2ebe550c9c45"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="dd92dcbe-a7f6-40a5-a068-c3ca0b5964c7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="f9525770-711d-401a-8dc6-1f5d5f677cdd"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="f5000496-f6c5-4751-9388-40e64de011a6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="d2eae876-5370-4f80-a8ab-56044727d304"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="b5529f13-1714-475a-bce1-23fbac405817"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="58e3f754-4880-4435-8dd5-7a96fd0fed2c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled. Заполнены только обязательные параметры(необяз. отсутствуют)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="3adea5ef-03ed-4073-bc5d-5244082663d2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="392bddc3-15cc-4948-abbf-0aff1ef14732"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","")
testRunner.testCase.testSuite.setPropertyValue("expertName2","")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","")
testRunner.testCase.testSuite.setPropertyValue("office2","")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="076f08bb-e6d1-4914-8190-08254f158784"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="475c7733-d8b3-499d-b9ac-0f738b1806da"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="39863bc7-69d8-4c83-9db3-c226eb03c56e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>66a4aa2b-b387-4c77-862b-417a50db584a</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="2ca57462-567f-4d83-903a-bc1231c3ae45"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8e340f6b-95fa-430c-9d58-a6b471909f0a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="21934540-5fde-4630-945c-0dfccfee0daf"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fc81b0f5-4acf-4f04-adbf-c848684f9d82</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="31d836fc-27e3-4177-97dd-bedebddaa2e9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>da3daf82-aa83-4dc1-a40c-021c66c4e377</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="01b6b62f-13c2-4b92-a01c-384b12c258f0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6973e8da-1a0a-409b-94af-700e9f4d3aec</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="51aa8ddc-9fb3-41db-85dc-4210e3da2e04"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d89e5dea-2150-4491-bc81-5e2c9b42a3d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления по пациенту, у которого только неподходящие для создания уведомления девайсы" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Создать неподходящие данные для пациента" id="ebf635f4-4e4d-40d1-a1e8-a93169cab37e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b0b913ba-09d4-434b-a342-e28ca377bb27</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="65ff181c-7423-4e48-8892-0d2188842966"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientBadDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="14df1bf0-d13b-4b15-a567-b0960827eaef"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="96028963-72ee-4fc7-8d6d-abe64445d8a8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить отсутствие записи в таблице f_notification" id="ebbf24f9-8fa7-4ba1-b8e2-010cdcf53733"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a2bc6c93-820e-460f-9207-425a7a906433</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="залогировать запрос кибаны" id="ea33918c-a6be-47aa-a680-75e53aeba012"><con:settings/><con:config><script>oms =testRunner.testCase.testSuite.getPropertyValue("oms2")
log.info ("KIBANA start")
log.info("фильтр для поиска в кибана: \"events/send\" AND hospitalAppointment AND "+oms)
log.info("по этому фильтру не должно быть логов")
log.info ("KIBANA end")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="f1df1dc1-84c5-4b50-8612-fdaafc4660ab"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="068d99ba-ca3d-4d14-a005-f95eb6d9bf68" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления по пациенту без девайса" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить пациента без девайсов" id="467f4b50-734b-47f2-a9bd-7311a0cd5a07"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>97c1eb16-a325-4047-a6ed-653c1f3288dd</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="a2d164a5-c5a8-47d5-bb56-dcfa38272a44"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientBadDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="84cfd296-1108-4a40-94f2-5a49bdbda94f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="6ed64f93-56c7-496c-8a4d-550a80e21977"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить отсутствие записи в таблице f_notification" id="745e50b4-1cae-444c-b59e-cfc2786338c2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a2bc6c93-820e-460f-9207-425a7a906433</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="залогировать запрос кибаны" id="ad027e64-73e7-4958-a966-e65f50e863a9"><con:settings/><con:config><script>oms =testRunner.testCase.testSuite.getPropertyValue("oms2")
log.info ("KIBANA start")
log.info("фильтр для поиска в кибана: \"events/send\" AND hospitalAppointment AND "+oms)
log.info("по этому фильтру не должно быть логов")
log.info ("KIBANA end")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="9fa02fab-0b56-419f-ac2a-33fa9e06c6b6"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b2de0be0-2c2b-4f51-8c38-496a3c5f1aee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с некорректным eventType" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="f31cf9a0-2808-4418-944d-9ecca88f75c0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>55fd6d35-476f-43bb-b523-dd9c5ef51e44</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="67bd3a8f-af17-4612-bcd4-260d32625816"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","create")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="c593402b-680d-460f-991a-43c2f8635b2b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>cee963d5-c137-4752-9dca-69174ffad0e0</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="439a9a2f-7538-419f-ba94-1907c6ea89df"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b44edb61-20fe-41d1-9302-90bd33806e1a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить отсутствие записи в таблице f_notification" id="538a5f0f-d720-4043-ae29-db7349e4f23b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a2bc6c93-820e-460f-9207-425a7a906433</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="залогировать запрос кибаны" id="0801e833-26d9-4650-8598-8270a6f77c15"><con:settings/><con:config><script>oms =testRunner.testCase.testSuite.getPropertyValue("oms")
log.info ("KIBANA start")
log.info("фильтр для поиска в кибана: \"events/send\" AND hospitalAppointment AND "+oms)
log.info("по этому фильтру не должно быть логов")
log.info ("KIBANA end")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="cc382338-a8b8-4422-a70e-0351400f52c0"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>KIS_appointment_changer</con:value></con:property><con:property><con:name>appointmentId1</con:name><con:value>890809809809</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>3ef05d99-a9d9-471f-a19d-7e207b49454f</con:value></con:property><con:property><con:name>patientId1</con:name><con:value>54628b9d-d4af-458c-82b2-33536288b484</con:value></con:property><con:property><con:name>patientId2</con:name><con:value>5aff02c7-8cb7-4f09-a277-159c03a1d319</con:value></con:property><con:property><con:name>emiasId1</con:name><con:value>12300</con:value></con:property><con:property><con:name>emiasId2</con:name><con:value>"123011"</con:value></con:property><con:property><con:name>phoneNum</con:name><con:value>"00000000000"</con:value></con:property><con:property><con:name>type</con:name><con:value>device</con:value></con:property><con:property><con:name>eventType1</con:name><con:value>created</con:value></con:property><con:property><con:name>eventType2</con:name><con:value>create</con:value></con:property><con:property><con:name>eventDate1</con:name><con:value>1960-01-01</con:value></con:property><con:property><con:name>eventDate2</con:name><con:value>1960-01-02</con:value></con:property><con:property><con:name>eventTime1</con:name><con:value>23:15</con:value></con:property><con:property><con:name>eventTime2</con:name><con:value>23:20</con:value></con:property><con:property><con:name>expertSpeciality1</con:name><con:value>"Офтальмоуролог "</con:value></con:property><con:property><con:name>expertSpeciality2</con:name><con:value>"Офтальмоуролог"</con:value></con:property><con:property><con:name>expertName1</con:name><con:value>"Петров Е.В."</con:value></con:property><con:property><con:name>expertName2</con:name><con:value>"Анатолий Бердянский"</con:value></con:property><con:property><con:name>procedureName1</con:name><con:value>"анализ"</con:value></con:property><con:property><con:name>procedureName2</con:name><con:value>"узи"</con:value></con:property><con:property><con:name>office1</con:name><con:value>"кабинет 1"</con:value></con:property><con:property><con:name>office2</con:name><con:value>"кабинет 123"</con:value></con:property><con:property><con:name>address1</con:name><con:value>ул. Приозёрная, д. 24</con:value></con:property><con:property><con:name>address2</con:name><con:value>ул. Приозёрная, д. 24 к.1</con:value></con:property><con:property><con:name>nameMO1</con:name><con:value>ГБУЗ «ГКБ № 40 ДЗМ»</con:value></con:property><con:property><con:name>nameMO2</con:name><con:value>ГБУЗ «ГКБ № 40 к.2 ДЗМ»</con:value></con:property><con:property><con:name>testCase</con:name><con:value>Обработка уведомления с некорректным eventType</con:value></con:property><con:property><con:name>patientIdAllDevices</con:name><con:value>123011</con:value></con:property><con:property><con:name>oms</con:name><con:value>1000000000011</con:value></con:property><con:property><con:name>userId</con:name><con:value>16660</con:value></con:property><con:property><con:name>deviceGuid1</con:name><con:value>55045ad2-b0bc-4059-9943-d683c8934b31</con:value></con:property><con:property><con:name>deviceGuid2</con:name><con:value>7d317efc-17e3-41a8-9550-7d88590ee2ca</con:value></con:property><con:property><con:name>deviceGuid3</con:name><con:value>2527d2e8-1c58-42d3-93f8-8bb850986dc5</con:value></con:property><con:property><con:name>deviceGuid4</con:name><con:value>a94fd149-3ac4-48df-b3ef-ae7e4c6e70c4</con:value></con:property><con:property><con:name>deviceGuid5</con:name><con:value>903b3020-8777-4064-abed-3a6638c57b50</con:value></con:property><con:property><con:name>deviceGuid6</con:name><con:value>b00e116a-e455-4af9-b805-3466af58e64d</con:value></con:property><con:property><con:name>deviceGuid7</con:name><con:value>e31f0e2e-3aca-45fe-aa9a-e016d0cb2957</con:value></con:property><con:property><con:name>deviceGuid8</con:name><con:value>0dde3d26-fb92-46b1-acf7-da2e61f24d44</con:value></con:property><con:property><con:name>deviceGuid9</con:name><con:value>bb837424-9113-4e67-9890-df71c37be151</con:value></con:property><con:property><con:name>deviceGuid10</con:name><con:value>db90f9bb-e252-45bb-9f3b-cc4ff913abe9</con:value></con:property><con:property><con:name>deviceGuid11</con:name><con:value>0f66b4aa-c898-4955-a979-74ce0aa30486</con:value></con:property><con:property><con:name>deviceGuid12</con:name><con:value>758ca0dd-f246-4c48-944b-1bdfc250fa08</con:value></con:property><con:property><con:name>devicesToSend</con:name><con:value>5, 6</con:value></con:property><con:property><con:name>devicesCount</con:name><con:value>12</con:value></con:property><con:property><con:name>howToChange</con:name><con:value>all</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-27 13:25:52</con:value></con:property><con:property><con:name>notificationId</con:name><con:value/></con:property><con:property><con:name>messageTimestamp</con:name><con:value>2024-05-27 13:25:55.049</con:value></con:property><con:property><con:name>notifications</con:name><con:value>201442</con:value></con:property><con:property><con:name>patientBadDevices</con:name><con:value>123012</con:value></con:property><con:property><con:name>oms2</con:name><con:value>1000000000012</con:value></con:property><con:property><con:name>patientNoDevices</con:name><con:value>123013</con:value></con:property><con:property><con:name>oms3</con:name><con:value>1000000000013</con:value></con:property><con:property><con:name>patientDoestExist</con:name><con:value/></con:property><con:property><con:name>oms4</con:name><con:value>0009899890809</con:value></con:property></con:properties></con:testSuite><con:testSuite id="5059c23f-2fc3-4f45-b93f-1a32241adf01" name="А_ЕСУ_07 для модуля application - Получение сообщений о записи в стационары (запись в КДО)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b73c1913-54f6-4209-b4a3-5de208facf70" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отправка уведомления" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Отправить уведомление" id="d58b483d-1ac0-4c1f-a9b9-3a8f67f60a49"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
tc = testRunner.testCase.testSuite.getPropertyValue("testCase")
log.info "Отправить сообщение по ТК \""+tc+"\""

def removeEmptyOptinalParams(String message, String paramName, String value){
	if(value == ""){
		toRemove= "\""+paramName+"\": ,"
		message=message.replace(toRemove,"")
	}
	return message
}
// сформировать сообщение
//eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate2")
eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime2")
eventType = testRunner.testCase.testSuite.getPropertyValue("eventType2")
emiasId = testRunner.testCase.testSuite.getPropertyValue("emiasId2")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId2")
phoneNum = testRunner.testCase.testSuite.getPropertyValue("phoneNum")
expertName = testRunner.testCase.testSuite.getPropertyValue("expertName2")
expertSpeciality = testRunner.testCase.testSuite.getPropertyValue("expertSpeciality2")
procedureName = testRunner.testCase.testSuite.getPropertyValue("procedureName2")
office = testRunner.testCase.testSuite.getPropertyValue("office2")
address = testRunner.testCase.testSuite.getPropertyValue("address2")
nameMO = testRunner.testCase.testSuite.getPropertyValue("nameMO2")

message="{ "+
    "\"appointmentId\": \""+appointmentId+"\","+
    "\"eventDate\": \""+eventDate+"\","+
    "\"eventTime\": \""+eventTime+"\","+
    "\"eventType\": \""+eventType+"\","+
    "\"emiasId\": "+emiasId+","+
    "\"patientId\": \""+patientId+"\","+
    "\"phoneNum\": "+phoneNum+","+
    "\"resource\": {"+
        "\"type\": \"expert\","+
        "\"expertName\": "+expertName+","+
        "\"expertSpeciality\": "+expertSpeciality+","+
        "\"procedureName\": "+procedureName+","+
        "\"office\": "+office+","+
        "\"address\": \""+address+"\","+
        "\"nameMO\": \""+nameMO+"\""+
   " }"+
"}"

message= removeEmptyOptinalParams( message,  "phoneNum",  phoneNum)
message= removeEmptyOptinalParams( message,  "emiasId",  emiasId)
message= removeEmptyOptinalParams( message,  "expertName",  expertName)
message= removeEmptyOptinalParams( message,  "expertSpeciality",  expertSpeciality)
message= removeEmptyOptinalParams( message,  "procedureName",  procedureName)
message= removeEmptyOptinalParams( message,  "office",  office)
//return message
//sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.testSuite.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka(topicName,message)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b215c493-78d2-4992-b03e-3accb6f448ad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание записи в БД application в f_hospitalizations_appointment" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Создать запись" id="b652955f-8287-4219-acea-7fab17c86dd9"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()

eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate1")
eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime1")
eventType = testRunner.testCase.testSuite.getPropertyValue("eventType1")
emiasId = testRunner.testCase.testSuite.getPropertyValue("emiasId1").replace("\"","\'")
expertName = testRunner.testCase.testSuite.getPropertyValue("expertName1").replace("\"","\'")
expertSpeciality = testRunner.testCase.testSuite.getPropertyValue("expertSpeciality1").replace("\"","\'")
procedureName = testRunner.testCase.testSuite.getPropertyValue("procedureName1").replace("\"","\'")
office = testRunner.testCase.testSuite.getPropertyValue("office1").replace("\"","\'")
address = testRunner.testCase.testSuite.getPropertyValue("address1")
nameMO = testRunner.testCase.testSuite.getPropertyValue("nameMO1")

query="INSERT INTO f_hospitalizations_appointment "+
"(id, appointment_id, patient_id, event_type, event_date, event_time, resource_speciality, resource_name, resource_procedure, resource_office, resource_address, resource_mo) "+
"VALUES(nextval('f_hospitalizations_appointment_sequence'), '"+appointmentId+"', "+emiasId+", '"+eventType+"', '"+eventDate+"', '"+eventTime+"', "+expertSpeciality+", "+expertName+", "+procedureName+", "+office+", '"+address+"', '"+nameMO+"')"
sql.execute(query)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1c593a7d-ef8f-4fdc-9041-34f949b351d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка соответствия записи в БД application в f_hospitalizations_appointment" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить" id="5e827422-a948-4f3b-b5d8-e872a0a8c0b0"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def getOptionalParameter(String propertyName){
	value =  testRunner.testCase.testSuite.getPropertyValue(propertyName)
	if(value == "" || value.toLowerCase() == "null")	return "null"
	else return value.replace("\"","")
}

def getExpextedValue(String propertyName, String howToChange, Boolean optional=false ){
	value=""
	switch (howToChange) {
		case "all":
			value =optional ? getOptionalParameter(propertyName+"2") : testRunner.testCase.testSuite.getPropertyValue( propertyName+"2")
			return value
			break;
		case "nothing":
			value  =optional ? getOptionalParameter(propertyName+"1") : testRunner.testCase.testSuite.getPropertyValue( propertyName+"1")
			return value
			break;
		case "cancel":
			if(propertyName == "eventType" ) return "cancelled"
			else{
				value  =optional ? getOptionalParameter(propertyName+"1") : testRunner.testCase.testSuite.getPropertyValue( propertyName+"1")
				return value
			}
			break;
		default:
			log.info  "Получено недопустимое значение howToChange="+howToChange
			testRunner.fail()
			break;
	}
}

appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
howToChange = testRunner.testCase.testSuite.getPropertyValue("howToChange")
	
query="select * from  f_hospitalizations_appointment where appointment_id= '"+appointmentId+"' "
appointment=sql.firstRow(query)
//log.info appointment
if(howToChange == "no value"){
//	log.info "howToChange "+howToChange
	if(appointment) testRunner.fail("В бд найдена запись, хотя не должна была создасться. Данные записи  "+appointment)
}
else{
//	log.info "проскочили проверку howToChange "
	eventType = getExpextedValue("eventType", howToChange)
	eventDate = getExpextedValue("eventDate", howToChange)
	eventTime = getExpextedValue("eventTime", howToChange)
	emiasId = getExpextedValue("emiasId", howToChange, true)
	expertName = getExpextedValue("expertName", howToChange, true)
	expertSpeciality = getExpextedValue("expertSpeciality", howToChange, true)
	procedureName = getExpextedValue("procedureName", howToChange, true)
	office =getExpextedValue("office", howToChange, true)
	address = getExpextedValue("address", howToChange)
	nameMO = getExpextedValue("nameMO", howToChange)
	checkParameter("patient_id",emiasId, appointment.patient_id.toString())
	checkParameter("event_type",eventType, appointment.event_type.toString())
	checkParameter("event_date",eventDate, appointment.event_date.toString())
	checkParameter("event_time",eventTime, appointment.event_time.toString())
	checkParameter("resource_speciality",expertSpeciality, appointment.resource_speciality.toString())
	checkParameter("resource_name",expertName, appointment.resource_name.toString())
	checkParameter("resource_procedure",procedureName, appointment.resource_procedure.toString())
	checkParameter("resource_office",office, appointment.resource_office.toString())
	checkParameter("resource_address",address, appointment.resource_address.toString())
	checkParameter("resource_mo",nameMO, appointment.resource_mo.toString())
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fb99e8db-cb49-4550-8b7b-65334cc78f6d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Очистка созданных данных" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Очистить данные" id="787b3d52-10f2-4b8e-bdd1-73ae28b05fa8"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoFullDbConnection")
sql = Sql.newInstance(connection)
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
query="delete from  f_hospitalizations_appointment where appointment_id= '"+appointmentId+"' "
appointment=sql.execute(query)
tc = testRunner.testCase.testSuite.getPropertyValue("testCase")
log.info "Завершен  ТК \""+tc+"\""</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5634838d-2bf0-486f-820c-a56ac1aa8d74" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=created, в БД application нет записи с appointmentId из уведомления. _ID413063" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="c2424d3c-fea3-47ae-af6c-812d1618c6cc"><con:settings/><con:config><script>appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","all")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="c449184b-5b72-42f1-b656-2801fb5f23b2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="04157669-ccf0-4743-a43a-54d595fd5355"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="842abb0c-f3cf-410c-b171-5892baf23e13"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2af56303-a939-409f-b74f-585ddfce323a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=created, в БД application есть запись с appointmentId из уведомления_ID413066" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="e26451cd-1cf6-4a27-b0f3-4e66efce006c"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("eventType1","created")
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("emiasId1","\"12300\"")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality1","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Акулист\"")
testRunner.testCase.testSuite.setPropertyValue("expertName1","\"Виталий Третьяков\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName1","\"МРТ\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office1","\"смотровая\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","nothing")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись" id="7b7dd360-173c-4804-98bf-92a39689c29a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b215c493-78d2-4992-b03e-3accb6f448ad</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="defe209d-dd8a-45bd-9e44-098c3caff48d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="2883f9a6-9021-44d9-8613-f3873b9895f9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="0cc1a114-acd6-474c-9842-90fb057dff75"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0447bfe4-e8e6-4bcd-96d7-1be96dd40349" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited, в БД application нет записи с appointmentId из уведомления. Заполнены только обязательные параметры(значения=null) _ID413068" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="98767172-d8e5-4c52-9bbd-bbda547d8083"><con:settings/><con:config><script>appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","null")
testRunner.testCase.testSuite.setPropertyValue("expertName2","null")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","null")
testRunner.testCase.testSuite.setPropertyValue("office2","null")
testRunner.testCase.testSuite.setPropertyValue("howToChange","all")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="99bbf02f-e736-4a1e-9933-f90d2eb348b7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="c2b2c144-bbe3-41f6-8f86-0b07b0358553"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="27e8d451-ee56-4996-abd7-a9c3160a17a9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f9d4dd93-2037-4016-86cd-43889bb23b77" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг . Заполнены только обязательные параметры(значения=&quot;&quot;)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="c1193fda-1d00-444e-95d4-fcd7d3814b35"><con:settings/><con:config><script>appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","all")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="cb6a33d8-5828-4bff-a98e-76b3c8256404"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="77ab67f9-841e-4fab-bdd7-e7ab5af4a2b5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="a9c7811e-668e-4dea-9105-e8c641cd0e26"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3574f177-f8b1-4a9f-aae0-67a50d0f78f7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг . Заполнены только обязательные параметры(нет необязательных параметров)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="6ec86809-3af5-4341-bcce-9134c35809a4"><con:settings/><con:config><script>appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","")
testRunner.testCase.testSuite.setPropertyValue("expertName2","")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","")
testRunner.testCase.testSuite.setPropertyValue("office2","")
testRunner.testCase.testSuite.setPropertyValue("howToChange","all")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="903041ce-7dda-4108-a95c-54dd537a8567"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="72c80028-8d48-41ce-b705-c443f60a601c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="229f34ac-8094-4d73-acc4-974fde4b7a62"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9a84eaf6-1093-4f22-ba9e-2cdded39b4c8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг. Заполнены все параметры максимальными значениями" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="0579411c-0346-4040-9abc-d3eea57993ba"><con:settings/><con:config><script>appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"ОфтальмоурологОфтальмоурологОфтальмоурологОфтальмоурологОфтальмоурологОфтальмоурологОфтальмоуролог12\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский Офтальмоуролог Офтальмоуролог Офтальмоуролог Офтальмоуролог Офтальмоуролог 12345\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ УЗИ1\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 1 кабинет 1 кабинет 1 кабинет 1 кабинет 1 кабинет 1 кабинет 1 кабинет 1 кабинет 1 кабинет 12\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","all")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="717994ce-d7a4-4717-a4c8-25e0d0e4ee27"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="0b902705-e55c-469c-910c-f6c02c03607d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="4f5e92ce-0b11-4c16-be6d-fbae5394f654"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3b7470d4-f6a2-4545-8a24-52c6fcbd736c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited, в БД application у записи с appointmentId из уведомления event_type=created" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="84b9b5e7-cdcd-4262-a368-4052b2e657ec"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("eventType1","created")
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("emiasId1","\"12300\"")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality1","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Акулист\"")
testRunner.testCase.testSuite.setPropertyValue("expertName1","\"Виталий Третьяков\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName1","\"МРТ\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office1","\"смотровая\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","all")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись" id="d6130e29-8547-4e20-915d-6c3bc16321e4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b215c493-78d2-4992-b03e-3accb6f448ad</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="a95e90d0-8d97-492a-b425-10c667d8a206"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="f4826f78-4a99-476a-8692-77dece976723"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="48b48a41-f773-4da5-bf7a-cd4d03248230"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6178aad0-9845-4b3c-b240-8a1f7c1accf2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited, в БД application у записи с appointmentId из уведомления event_type=edited" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="a8a5d2b1-1b59-4081-a68b-fb6956582b55"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("eventType1","edited")
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("emiasId1","\"12300\"")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality1","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Акулист\"")
testRunner.testCase.testSuite.setPropertyValue("expertName1","\"Виталий Третьяков\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName1","\"МРТ\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office1","\"смотровая\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","all")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись" id="15b2bfc7-4bc8-437b-bf82-7f15b9c8de48"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b215c493-78d2-4992-b03e-3accb6f448ad</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="36f4bca0-8942-4346-9e30-5c9860d375ac"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="720cfb14-dad9-40af-ace3-8af0605ef644"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="ee29b708-e488-49a1-bc56-3445413cc6d4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7791dbaf-cc5a-4120-9307-3ba6524bb5b9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited, в БД application у записи с appointmentId из уведомления event_type=cancelled" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="14b8798a-8a90-47ec-bcce-8da88c17bbce"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("eventType1","cancelled")
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("emiasId1","\"12300\"")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality1","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Акулист\"")
testRunner.testCase.testSuite.setPropertyValue("expertName1","\"Виталий Третьяков\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName1","\"МРТ\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office1","\"смотровая\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","all")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись" id="4865f667-2790-40ce-af3c-ef3f67b73428"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b215c493-78d2-4992-b03e-3accb6f448ad</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="45424a19-f115-4fcf-8546-5df22a85e74e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="bbb8263a-f7a0-404d-bb15-0ba80c87ded4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="55cc67d5-802a-461a-930c-1b9de36f4ec7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="789178b7-3be8-41e0-a260-f7ea7f20f5e8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled, в БД application нет записи с appointmentId из уведомления" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="eeeb89ae-b03c-4f13-a6c8-a1167d255a63"><con:settings/><con:config><script>appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","no value")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="b5f88a81-69b3-452e-96ec-a4aaa22e85e3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="b6ae43e4-d229-48ba-96ef-a3269a5e428f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="18c8e082-6131-46f2-925c-234b6999bbb5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a8cdd046-a53b-420e-9de9-8f986fb091cb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled, в БД application у записи с appointmentId из уведомления event_type=created" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="eebd85c0-d741-4a82-92b3-152f08e3e032"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("eventType1","created")
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("emiasId1","\"12300\"")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality1","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Акулист\"")
testRunner.testCase.testSuite.setPropertyValue("expertName1","\"Виталий Третьяков\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName1","\"МРТ\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office1","\"смотровая\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","cancel")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись" id="47379af6-f947-48fb-9786-7f5c08bac06c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b215c493-78d2-4992-b03e-3accb6f448ad</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="d88a0ffd-caca-45e5-b2d4-422a360409da"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="7f47981e-16a2-46db-9a27-00a0d803f4fb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="bc9530aa-4c91-4f34-8fe6-22cc78a1ce85"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="67440b30-2902-443a-b501-0d1ea63a8ed7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled, в БД application у записи с appointmentId из уведомления event_type=edited" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="033a605d-78cc-4153-96d7-dc8cd8911300"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("eventType1","edited")
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("emiasId1","\"12300\"")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality1","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Акулист\"")
testRunner.testCase.testSuite.setPropertyValue("expertName1","\"Виталий Третьяков\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName1","\"МРТ\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office1","\"смотровая\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","cancel")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись" id="8cdb08ca-87a7-41d1-bd5c-092fe09257e3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b215c493-78d2-4992-b03e-3accb6f448ad</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="dcdf570d-a46b-497b-bb71-bca0465c8549"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="32fdd358-5909-4a4b-9941-2d142c583f88"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="49cd1071-a7c3-48a7-8a13-5460f4d95393"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4d2a9d7e-5dd0-4e9c-915c-d97b6e596206" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled, в БД application у записи с appointmentId из уведомления event_type=cancelled" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="410bd099-ecfc-440e-a760-eef61337616a"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("eventType1","cancelled")
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("emiasId1","\"12300\"")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality1","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Акулист\"")
testRunner.testCase.testSuite.setPropertyValue("expertName1","\"Виталий Третьяков\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName1","\"МРТ\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office1","\"смотровая\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","cancel")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись" id="0bbc50bb-9dc9-49fa-b71b-a8334ce3acd5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b215c493-78d2-4992-b03e-3accb6f448ad</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="b99baf48-7427-4b2f-a8b9-907ee7a285ea"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="2ac94d00-fc5f-4082-a33b-3d7c5de2165c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="460d9735-4514-4989-a1a9-edba6d84dd8d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="649fabc4-e5c3-4dbf-bcc1-ebcfa9b3c6fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления без emiasId, в БД application нет записи с appointmentId из уведомления" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="f16cbc1d-e044-4e8c-9f06-366b15abf51c"><con:settings/><con:config><script>appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","no value")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="89a7cb4a-8f40-48a1-8ae6-129549bbdefc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="b0be772e-fa7b-492c-abe6-3cc2c5180e5b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="217c3330-ad3e-48bd-b85d-5489c6592616"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d6d9d9c9-0590-40a2-81c3-295865fc8a1a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с emiasId = null,  в БД application есть запись с appointmentId из уведомления" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="4d532d79-dd74-4e18-9a41-f80cef84cadf"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("eventType1","created")
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("emiasId1","\"12300\"")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","null")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality1","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Акулист\"")
testRunner.testCase.testSuite.setPropertyValue("expertName1","\"Виталий Третьяков\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName1","\"МРТ\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office1","\"смотровая\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","nothing")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Создать запись" id="3a771149-68c5-491f-a772-d6144269a5f9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b215c493-78d2-4992-b03e-3accb6f448ad</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="7d247731-b941-45f2-84f9-560ee88de8fa"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="9832098b-9eab-483c-a249-bbcfca1692e7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="88b25af5-6b97-4b91-8ca6-1ba6632cde51"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8ee1710f-1b01-47d8-b6f8-c29638bd560b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с пустым emiasId, в БД application нет записи с appointmentId из уведомления" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="63b01848-6774-4788-90be-a2ee05e067e6"><con:settings/><con:config><script>appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","no value")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="ae522cf6-96ac-43b7-b9a2-4bee5724a0d9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="8f802c1b-b6c1-4cd5-b2a3-918e0a21acdb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="0e88b678-0acf-47ed-b651-d354fa7b01eb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fd9eb17e-0695-4c04-9e21-902328d020e0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с некорректным eventType, в БД application нет записи с appointmentId из уведомления" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="55daf30d-9999-44e4-baff-b351ca94a26f"><con:settings/><con:config><script>appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","create")
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\"12301\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("howToChange","no value")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="b84c14cf-d32c-46ff-83ad-1e493e211766"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b73c1913-54f6-4209-b4a3-5de208facf70</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в бд" id="e026bab9-e398-4994-baf1-2640ab3f2249"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1c593a7d-ef8f-4fdc-9041-34f949b351d1</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="d7997a6b-23bf-411d-b6f2-1fa9b3da77ff"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>fb99e8db-cb49-4550-8b7b-65334cc78f6d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>KIS_appointment_changer</con:value></con:property><con:property><con:name>appointmentId1</con:name><con:value>890809809809</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>07462871-8722-4d93-8069-1c700f25c687</con:value></con:property><con:property><con:name>patientId1</con:name><con:value>54628b9d-d4af-458c-82b2-33536288b484</con:value></con:property><con:property><con:name>patientId2</con:name><con:value>5aff02c7-8cb7-4f09-a277-159c03a1d319</con:value></con:property><con:property><con:name>emiasId1</con:name><con:value>"12300"</con:value></con:property><con:property><con:name>emiasId2</con:name><con:value>"12301"</con:value></con:property><con:property><con:name>phoneNum</con:name><con:value>"00000000000"</con:value></con:property><con:property><con:name>type</con:name><con:value>device</con:value></con:property><con:property><con:name>eventType1</con:name><con:value>created</con:value></con:property><con:property><con:name>eventType2</con:name><con:value>created</con:value></con:property><con:property><con:name>eventDate1</con:name><con:value>1960-01-01</con:value></con:property><con:property><con:name>eventDate2</con:name><con:value>1960-01-03</con:value></con:property><con:property><con:name>eventTime1</con:name><con:value>23:15</con:value></con:property><con:property><con:name>eventTime2</con:name><con:value>23:20</con:value></con:property><con:property><con:name>expertSpeciality1</con:name><con:value>"Офтальмоуролог"</con:value></con:property><con:property><con:name>expertSpeciality2</con:name><con:value>"Акулист"</con:value></con:property><con:property><con:name>expertName1</con:name><con:value>"Виталий Третьяков"</con:value></con:property><con:property><con:name>expertName2</con:name><con:value>"Анатолий Бердянский"</con:value></con:property><con:property><con:name>procedureName1</con:name><con:value>"МРТ"</con:value></con:property><con:property><con:name>procedureName2</con:name><con:value>"узи"</con:value></con:property><con:property><con:name>office1</con:name><con:value>"смотровая"</con:value></con:property><con:property><con:name>office2</con:name><con:value>"кабинет 123"</con:value></con:property><con:property><con:name>address1</con:name><con:value>ул. Приозёрная, д. 24</con:value></con:property><con:property><con:name>address2</con:name><con:value>ул. Приозёрная, д. 24 к.1</con:value></con:property><con:property><con:name>nameMO1</con:name><con:value>ГБУЗ «ГКБ № 40 ДЗМ»</con:value></con:property><con:property><con:name>nameMO2</con:name><con:value>ГБУЗ «ГКБ № 40 к.2 ДЗМ»</con:value></con:property><con:property><con:name>testCase</con:name><con:value>Обработка уведомления с eventType=created, в БД application есть запись с appointmentId из уведомления_ID413066</con:value></con:property><con:property><con:name>howToChange</con:name><con:value>nothing</con:value></con:property></con:properties></con:testSuite><con:testSuite id="a12e99da-080e-4b80-8a43-9afc079dc90d" name="А_ЕСУ_07 для модуля notification - Получение сообщений о записи в стационары (запись в КДО)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8b02303a-6777-41ea-82a5-b12e2458b742" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверить наличие пациента со всеми девайсами" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить пациента с девайсами со всеми настройками" id="3870bc31-4f3e-4b74-b28d-5a2cdab939ad"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
//в этом кейсе создадутся все минмально необходимые левайсы с настройками для проверки А_ЕСУ_07 шаг 4.2
// и  А_ВА_15

// функция, проверяющая есть ли девайс с нужной комбинацией параметров. если нет - досоздает. также вызывает функцию  checkSettings
def checkDevice(long userId, def a, def d, def v,  int i){
			log.info "проверяю девайс номер "+i+"с параметрами a="+a+" d="+d+" v="+v
			voipCondition= v != null ? "="+v : "is null"
			deviceQuery="select fud.device_guid from f_user_device fud "+
							"left join f_device_settings fds on fds.device_guid =fud.device_guid "+
							"where fud.user_id ="+userId+" and fud.authentication ="+a+
							" and fud.deleted ="+d+" and fud.voip  "+voipCondition
//			log.info deviceQuery
			device=sql.firstRow(deviceQuery)
//			log.info "device result "+device
			guid=""
			newDevice=false
//			log.info device
			if(device){
				guid=device.device_guid
			}
			else{
//				log.info deviceQuery
				guid= java.util.UUID.randomUUID()
				cloud= java.util.UUID.randomUUID()
				devQuery="INSERT INTO f_device (device_guid, app_version, platform, device_cloud_id, cloud_token_delete) VALUES('"+guid+"', '1.3.2', 'ANDROID','"+cloud+"', NULL)"
				userDevQuery="INSERT INTO f_user_device (id, device_guid, user_id, authentication, deleted, deleted_date, esia_authentication, main_policy, voip) VALUES(nextval('f_user_device_sequence'), '"+guid+"', "+userId+", "+a.toString()+", "+d.toString()+", NULL, NULL, NULL, "+v.toString()+")"
//				log.info "device devQuery "+devQuery
//				log.info "device userDevQuery "+userDevQuery
				sql.execute(devQuery)
				sql.execute(userDevQuery)
				newDevice=true
			}
			log.info guid
			testRunner.testCase.testSuite.setPropertyValue("deviceGuid"+i, guid.toString())
}

// проверить, что пациент с идентификатором в сьюте есть в бд
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
oms =testRunner.testCase.testSuite.getPropertyValue("oms")
user=sql.firstRow("select * from f_user where patient_id="+patientId)
//log.info user
userId=0
if( !user){
	query="INSERT INTO f_user VALUES(nextval('f_user_sequence'), "+patientId+", '"+oms+"', '2012-06-07') RETURNING id "
	userId=sql.firstRow(query).id 
}
else{
//	log.info("пациент есть")
	userId=user.id
}
//log.info userId
testRunner.testCase.testSuite.setPropertyValue("userId", userId.toString())

//для каждого важного параметра в f_user_device собрать возможные значения
auth=[true, false]
deleted=[true, false]
voip=[true, false, null]
// в массиве собраны те комбинации параметров f_user_device, для которых должна быть отправка 
specialDevSettings=[
							[auth:true, del:false, voip:null ],
							[auth:true, del:false, voip:false]
							]

allDeviseParamCombinations=[]
// собрать все комбинации параметров в f_user_device
auth.each{ a ->
	deleted.each{ d ->
		voip.each{ v ->
			devParams=[auth:a, del:d, voip:v ]
			allDeviseParamCombinations &lt;&lt; devParams
		}
	}
}

i=1
//список индексов девайсов, по которым должна будет осуществиться отправка уведомлений
devicesToSend=[]

//для каждой комбинации основных параметров создать девайс с соответствующими настройками
allDeviseParamCombinations.eachWithIndex{it, index1 ->
	checkDevice(userId,  it.auth,  it.del,  it.voip, i)
	// если комбинация параметров  есть в списке specialDevSettings определить для них особые значения настроек и создать/обновить данные
	specialDevSettings.each{ spec ->
		if (spec == it) devicesToSend &lt;&lt; i
	}
	i +=1
}

devicesCount=i-1
testRunner.testCase.testSuite.setPropertyValue("devicesToSend", devicesToSend.toString().replace('[','').replace(']',''))
testRunner.testCase.testSuite.setPropertyValue("devicesCount", devicesCount.toString())</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="18a624ac-aa00-46a2-966a-76108fb91ed9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отправка уведомления" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Отправить уведомление" id="f6746b97-2189-43ec-bb71-512450c5be34"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
tc = testRunner.testCase.testSuite.getPropertyValue("testCase")
log.info "Отправить сообщение по ТК \""+tc+"\""

def removeEmptyOptinalParams(String message, String paramName, String value){
	if(value == ""){
		toRemove= "\""+paramName+"\": ,"
		message=message.replace(toRemove,"")
	}
	return message
}
// сформировать сообщение
//eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate2")
eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime2")
eventType = testRunner.testCase.testSuite.getPropertyValue("eventType2")
emiasId = testRunner.testCase.testSuite.getPropertyValue("emiasId2")
patientId = testRunner.testCase.testSuite.getPropertyValue("patientId2")
phoneNum = testRunner.testCase.testSuite.getPropertyValue("phoneNum")
expertName = testRunner.testCase.testSuite.getPropertyValue("expertName2")
expertSpeciality = testRunner.testCase.testSuite.getPropertyValue("expertSpeciality2")
procedureName = testRunner.testCase.testSuite.getPropertyValue("procedureName2")
office = testRunner.testCase.testSuite.getPropertyValue("office2")
address = testRunner.testCase.testSuite.getPropertyValue("address2")
nameMO = testRunner.testCase.testSuite.getPropertyValue("nameMO2")

message="{ "+
    "\"appointmentId\": \""+appointmentId+"\","+
    "\"eventDate\": \""+eventDate+"\","+
    "\"eventTime\": \""+eventTime+"\","+
    "\"eventType\": \""+eventType+"\","+
    "\"emiasId\": "+emiasId+","+
    "\"patientId\": \""+patientId+"\","+
    "\"phoneNum\": "+phoneNum+","+
    "\"resource\": {"+
        "\"type\": \"expert\","+
        "\"expertName\": "+expertName+","+
        "\"expertSpeciality\": "+expertSpeciality+","+
        "\"procedureName\": "+procedureName+","+
        "\"office\": "+office+","+
        "\"address\": \""+address+"\","+
        "\"nameMO\": \""+nameMO+"\""+
   " }"+
"}"

message= removeEmptyOptinalParams( message,  "phoneNum",  phoneNum)
message= removeEmptyOptinalParams( message,  "emiasId",  emiasId)
message= removeEmptyOptinalParams( message,  "expertName",  expertName)
message= removeEmptyOptinalParams( message,  "expertSpeciality",  expertSpeciality)
message= removeEmptyOptinalParams( message,  "procedureName",  procedureName)
message= removeEmptyOptinalParams( message,  "office",  office)
//return message
//sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.testSuite.getPropertyValue("topic")
mainScripts.kafka().sendMessageToKafka(topicName,message)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получить timestamp сообщения" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Получить timestamp" id="d9349dcb-7057-454a-86b2-724d02a19cd2"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import org.apache.kafka.clients.consumer. *
import java.sql.Timestamp
//import org.json.JSONObject;


def parsePath(Object node, String path){
	String[] arr = path.replace("[",".").replace("]","").split("\\.");
	Object obj=node
	for (int i = 0; i < arr.size(); i++) {
		def key = arr[i].isInteger()  ? Integer.parseInt(arr[i]) : arr[i]
		obj = obj.get(key);
	}
	return obj
}



def getKafkaLastMessageJson( String topicName, String parameter, String value, Long time=18000){
        String topic =testRunner.testCase.testSuite.getPropertyValue(topicName);
//        topic="KIS_appointment_changer.EMIASINFO_SOLIT_TEST_1"
        String bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

        Properties props = new Properties()
        props.put('zk.connect', '10.2.172.24:2181')
        props.put('bootstrap.servers',bootstrapServers)
        props.put('group.id', UUID.randomUUID().toString())
        props.put("enable.auto.commit", "false")
        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")
        props.put('key.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
        props.put('value.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
        def consumer = new KafkaConsumer(props)

        consumer.subscribe([topic])
        def messageToReturn = null;
        long t = System.currentTimeMillis();
        long end = t + time;
        while (System.currentTimeMillis()<end && messageToReturn == null)
        {
            log.info ( "while ")
            ConsumerRecords<String, String> records = consumer.poll(time)
            for (ConsumerRecord<String, String> record : records)
            {
                def rootNode
                try {
                    rootNode = new JsonSlurper().parseText(record.value())
                } catch(Exception e) {continue}
                String messageParamValue=parsePath(rootNode, parameter)
                if (messageParamValue == value ) {
                    log.info("Новое сообщение : "+record.value()+" время "+ new Timestamp(record.timestamp()));
                    messageToReturn= new Timestamp(record.timestamp())
                }
            }
        }
        consumer.close()
        log.info ( "close ")
        return messageToReturn
    }

appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")    
time=getKafkaLastMessageJson("topic","appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("messageTimestamp",time.toString())]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a27b825d-c0ca-4935-ab53-13142bd0614a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Очистка созданных данных" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Очистить данные" id="135ce4c4-6157-48b0-8388-7af0c629f2a4"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
notificationId = testRunner.testCase.testSuite.getPropertyValue("notificationId")
query1="delete from f_notification_task where notification_id="+notificationId
query2="delete from f_notification_hospital_appointment where notification_id="+notificationId
query3="delete from f_notification where id="+notificationId
//log.info query
sql.execute(query1)
sql.execute(query2)
sql.execute(query3)
tc = testRunner.testCase.testSuite.getPropertyValue("testCase")
log.info "Завершен  ТК \""+tc+"\""</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e99d1657-36c1-41c3-b89c-5c404365e500" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка создания записи в таблице f_notification" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="1bda66cb-9147-40f1-bf40-cab37199b595"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.Date
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def getOptionalParameter(String propertyName){
	value =  testRunner.testCase.testSuite.getPropertyValue(propertyName)
	if(value == "" || value.toLowerCase() == "null")	return ""
	else return value.replace("\"","")
}

def getDescriptionSecondPart(){
	expertName = getOptionalParameter("expertName2")
	expertSpeciality = getOptionalParameter("expertSpeciality2")
	procedureName = getOptionalParameter("procedureName2")
	office =getOptionalParameter("office2")
	nameMO = testRunner.testCase.testSuite.getPropertyValue("nameMO2")
	eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate2")
	eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime2")
	desc=expertSpeciality+" "+expertName+" "+procedureName
	desc=desc.trim()
	if(expertSpeciality || expertName || procedureName) desc += ", "
	desc += nameMO+","
	if(office) desc += " "+office+","
	Date date = Date.parse( 'yyyy-MM-dd', eventDate )
	String newEventDate = date.format( 'dd.MM.yyyy' )
	desc += " "+newEventDate +" в "+eventTime
	return desc
}

def checkDescription( String description){
	eventType = testRunner.testCase.testSuite.getPropertyValue("eventType2")
	dbDescDependentPart=""
	switch(eventType){
		case "created":
			dbDescDependentPart="Вы записаны: "
			break
		case "edited":
			dbDescDependentPart="Запись изменена: "
			break
		case "cancelled":
			dbDescDependentPart="Запись отменена: "
			break
		default:
		testRunner.fail(" В своствах кейса некорректный eventType2='"+eventType+"'. должен быть один из: created, edited, cancelled")
		break
	}
	secondPartDesc=	getDescriptionSecondPart()
	expectedDesc= dbDescDependentPart + secondPartDesc		
	checkParameter("notification.description",expectedDesc,description)
}

def checkNotificationTitle(String title){
	eventType = testRunner.testCase.testSuite.getPropertyValue("eventType2")
	dbTitle=""
	switch(eventType){
		case "created":
			dbTitle="Запись на прием в КДО"
			break
		case "edited":
			dbTitle="Изменение записи на прием в КДО"
			break
		case "cancelled":
			dbTitle="Отмена записи на прием в КДО"
			break
		default:
		testRunner.fail(" В своствах кейса некорректный eventType2='"+eventType+"'. должен быть один из: created, edited, cancelled")
		break
	}
	checkParameter("notification.title",dbTitle,title)	
}


userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.testSuite.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=(select id from d_notification_type where title='hospitalAppointment') and  create_date > '"+currentDateTimeForDB+"'"
//log.info query
notifications=sql.rows(query)
if(notifications.size() == 1){
	notification=notifications[0]
	testRunner.testCase.testSuite.setPropertyValue("notificationId",notification.id.toString())
	checkNotificationTitle(notification.title)
	checkDescription(notification.description)
	checkParameter("notification.deleted",false,notification.deleted )
	checkParameter("notification.viewed",false,notification.viewed )
	testRunner.testCase.setPropertyValue("notificationId", notification.id.toString())
}
else{ 
	testRunner.testCase.testSuite.setPropertyValue("notificationId","")
	testRunner.fail("Количество записей в f_notification не равно 1. фактическое ="+notifications.size())
}
log.info "проверка создания записи в f_notification завершена"</script></con:config></con:testStep><con:properties><con:property><con:name>notificationId</con:name><con:value>200502</con:value></con:property></con:properties></con:testCase><con:testCase id="7f1ae3af-c2a2-479a-819d-e5fff2daa24e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка соответствия записи в БД notification в f_notification_hospital_appointment" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить" id="221aa9fd-942e-46d9-9dc1-88a1442b8c6e"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

def getOptionalParameter(String propertyName){
	value =  testRunner.testCase.testSuite.getPropertyValue(propertyName)
	if(value == "" || value.toLowerCase() == "null")	return "null"
	else return value.replace("\"","")
}

notificationId = testRunner.testCase.testSuite.getPropertyValue("notificationId")
if(notificationId != "null"){	
	query="select * from  f_notification_hospital_appointment where notification_id= "+notificationId
	appointments=sql.rows(query)
	if(appointments.size() == 1){
		//log.info appointment
		//	log.info "проскочили проверку howToChange "
		appointment=appointments[0]
		appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
		eventType = testRunner.testCase.testSuite.getPropertyValue("eventType2")
		eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate2")
		eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime2")
		expertName = getOptionalParameter("expertName2")
		expertSpeciality = getOptionalParameter("expertSpeciality2")
		procedureName = getOptionalParameter("procedureName2")
		office = getOptionalParameter("office2",)
		address = testRunner.testCase.testSuite.getPropertyValue("address2")
		nameMO = testRunner.testCase.testSuite.getPropertyValue("nameMO2")
		messageTimestamp = testRunner.testCase.testSuite.getPropertyValue("messageTimestamp")
		checkParameter("appointment_id",appointmentId, appointment.appointment_id)
		checkParameter("event_type",eventType, appointment.event_type.toString())
		checkParameter("event_date",eventDate, appointment.event_date.toString())
		checkParameter("event_time",eventTime, appointment.event_time.toString())
		checkParameter("resource_speciality",expertSpeciality, appointment.resource_speciality.toString())
		checkParameter("resource_name",expertName, appointment.resource_name.toString())
		checkParameter("resource_procedure",procedureName, appointment.resource_procedure.toString())
		checkParameter("resource_office",office, appointment.resource_office.toString())
		checkParameter("resource_address",address, appointment.resource_address.toString())
		checkParameter("resource_mo",nameMO, appointment.resource_mo.toString())
		checkParameter("message_datetime",messageTimestamp, appointment.message_datetime.toString())

	}
	else testRunner.fail("Количество записей в f_notification_hospital_appointment не равно 1. фактическое ="+appointments.size())
}
else{
	log.info "Не проверяю f_notification_hospital_appointment, т.к. не найдена запись в f_notification"
}
log.info "проверка создания записи в f_notification_hospital_appointment завершена"</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="46f9c32e-8a19-4512-b986-ecc3c14845ef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка соответствия записи в БД notification в f_notification_task" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить создание записей в f_notification_task" id="6e912cfb-4001-41f1-a4b6-f28c389ef159"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

log.info "проверка создания записи в f_notification_task завершена"

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

notificationId = testRunner.testCase.testSuite.getPropertyValue("notificationId")
if(notificationId != "null"){	
	devicesCount = testRunner.testCase.testSuite.getPropertyValue("devicesCount").toInteger()
	currentDateTimeForDB = testRunner.testCase.testSuite.getPropertyValue("currentDateTimeForDB")
	
	sendDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(currentDateTimeForDB)
	log.info sendDate
	
	devicesToSend=testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
	devicesToSendList=devicesToSend.split(',').collect{it as int}
	
	for(i=1; i &lt;=devicesCount; i++ ){
	//	log.info statuses
		deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+i)
		tasks=sql.rows("select * from f_notification_task where notification_id="+notificationId+" and device_guid='"+deviceGuid+"'")
	//	log.info "Проверяю notification task для девайса "+deviceGuid
		if(devicesToSendList.contains(i)){
			if( tasks.size()==1){
				task=tasks[0]
				checkParameter("task status","SEND",task.status)
				task.send_date.each{
						if( it &lt; sendDate) testRunner.fail("значение sendDate не соответствует ожидаемому. ожидаемое : больше "+currentDateTimeForDB+", фактическое ="+it.toString())
				}
			}
			else testRunner.fail("Количество записей в f_notification_task не равно 1. фактическое ="+tasks.size())
		}
		else{
			if(tasks.size()>0) testRunner.fail("Количество записей в f_notification_task не равно 0. фактическое ="+tasks.size())
		}
	}
}
else{
	log.info "Не проверяю f_notification_task, т.к. не найдена запись в f_notification"
}
log.info "проверка создания записи в f_notification_task завершена"</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Фильтры для кибаны" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="залогировать фильтры для кибаны" id="c10e54a5-fd8e-4821-9406-954559a6d31a"><con:settings/><con:config><script>notificationId = testRunner.testCase.testSuite.getPropertyValue("notificationId")
log.info ("KIBANA start")
log.info("фильтр для поиска в кибана: \"events/send\" AND "+notificationId)
log.info("уведомления должны быть отправлены только по девайсам со следующими device_guid")
devicesToSend=testRunner.testCase.testSuite.getPropertyValue("devicesToSend")
devicesToSendList=devicesToSend.split(',').collect{it as int}
devicesToSendList.each{
	deviceGuid=testRunner.testCase.testSuite.getPropertyValue("deviceGuid"+it)
	log.info deviceGuid
}
log.info ("KIBANA end")</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f7636735-39c2-42a5-8ed6-dac60d5010c3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверить наличие пациента, у которого все девайсы не подходящие" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить пациента с девайсами со всеми настройками" id="eea968b2-c4af-45a7-be9e-810d8a212761"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
//в этом кейсе создадутся все минмально необходимые левайсы с настройками для проверки А_ЕСУ_07 шаг 4.2
// и  А_ВА_15

// функция, проверяющая есть ли девайс с нужной комбинацией параметров. если нет - досоздает. также вызывает функцию  checkSettings
def checkDevice(long userId, def a, def d, def v,  int i){
			log.info "проверяю девайс номер "+i+"с параметрами a="+a+" d="+d+" v="+v
			voipCondition= v != null ? "="+v : "is null"
			deviceQuery="select fud.device_guid from f_user_device fud "+
							"left join f_device_settings fds on fds.device_guid =fud.device_guid "+
							"where fud.user_id ="+userId+" and fud.authentication ="+a+
							" and fud.deleted ="+d+" and fud.voip  "+voipCondition
//			log.info deviceQuery
			device=sql.firstRow(deviceQuery)
//			log.info "device result "+device
			guid=""
			newDevice=false
//			log.info device
			if(device){
				guid=device.device_guid
			}
			else{
//				log.info deviceQuery
				guid= java.util.UUID.randomUUID()
				cloud= java.util.UUID.randomUUID()
				devQuery="INSERT INTO f_device (device_guid, app_version, platform, device_cloud_id, cloud_token_delete) VALUES('"+guid+"', '1.3.2', 'ANDROID','"+cloud+"', NULL)"
				userDevQuery="INSERT INTO f_user_device (id, device_guid, user_id, authentication, deleted, deleted_date, esia_authentication, main_policy, voip) VALUES(nextval('f_user_device_sequence'), '"+guid+"', "+userId+", "+a.toString()+", "+d.toString()+", NULL, NULL, NULL, "+v.toString()+")"
//				log.info "device devQuery "+devQuery
//				log.info "device userDevQuery "+userDevQuery
				sql.execute(devQuery)
				sql.execute(userDevQuery)
				newDevice=true
			}
			log.info guid
			testRunner.testCase.testSuite.setPropertyValue("deviceGuid"+i, guid.toString())
}

// проверить, что пациент с идентификатором в сьюте есть в бд
patientId =testRunner.testCase.testSuite.getPropertyValue("patientBadDevices")
oms =testRunner.testCase.testSuite.getPropertyValue("oms2")
user=sql.firstRow("select * from f_user where patient_id="+patientId)
//log.info user
userId=0
if( !user){
	query="INSERT INTO f_user VALUES(nextval('f_user_sequence'), "+patientId+", '"+oms+"', '2012-06-07') RETURNING id "
	userId=sql.firstRow(query).id 
}
else{
//	log.info("пациент есть")
	userId=user.id
}
//log.info userId
testRunner.testCase.testSuite.setPropertyValue("userId", userId.toString())

//для каждого важного параметра в f_user_device собрать возможные значения
auth=[true, false]
deleted=[true, false]
voip=[true, false, null]
// в массиве собраны те комбинации параметров f_user_device, для которых должна быть отправка 
specialDevSettings=[
							[auth:true, del:false, voip:null ],
							[auth:true, del:false, voip:false]
							]

allDeviseParamCombinations=[]
// собрать все комбинации параметров в f_user_device
auth.each{ a ->
	deleted.each{ d ->
		voip.each{ v ->
			devParams=[auth:a, del:d, voip:v ]
			allDeviseParamCombinations &lt;&lt; devParams
		}
	}
}

i=1
specialDevSettings.each{
	allDeviseParamCombinations.remove(it)
}


//для каждой комбинации основных параметров создать девайс с соответствующими настройками
allDeviseParamCombinations.eachWithIndex{it, index1 ->
	checkDevice(userId,  it.auth,  it.del,  it.voip, i)
	i +=1
}

devicesCount=i-1

testRunner.testCase.testSuite.setPropertyValue("devicesCount", devicesCount.toString())</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="12e8bf99-6641-4202-a904-db36eed090bc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка отсутствия записи в таблице f_notification" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить создание записи в f_notification" id="dbbf5f6b-6ba3-4dd3-bae0-41c966453612"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.Date
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

userId = testRunner.testCase.testSuite.getPropertyValue("userId")
currentDateTimeForDB= testRunner.testCase.testSuite.getPropertyValue("currentDateTimeForDB")
notificationTypeId=testRunner.testCase.getPropertyValue("notificationTypeId")
query="SELECT * FROM f_notification WHERE user_id = "+userId+" AND notification_type_id=(select id from d_notification_type where title='hospitalAppointment') and  create_date > '"+currentDateTimeForDB+"'"
//log.info query
notifications=sql.rows(query)
if(notifications.size() > 0){
testRunner.fail("Количество записей в f_notification не равно 0. фактическое ="+notifications.size())
}
log.info "проверка создания записи в f_notification завершена"</script></con:config></con:testStep><con:properties><con:property><con:name>notificationId</con:name><con:value>200502</con:value></con:property></con:properties></con:testCase><con:testCase id="24e5e4ba-209e-45cd-8c21-cc0767a299f5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверить наличие пациента без девайсов" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="удалить все девайсы пациента" id="69f49384-5f61-4faa-bf6d-6074b64bdaf9"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

// проверить, что пациент с идентификатором в сьюте есть в бд
patientId =testRunner.testCase.testSuite.getPropertyValue("patientNoDevices")
oms =testRunner.testCase.testSuite.getPropertyValue("oms3")
user=sql.firstRow("select * from f_user where patient_id="+patientId)
//log.info user
userId=0
if( !user){
	query="INSERT INTO f_user VALUES(nextval('f_user_sequence'), "+patientId+", '"+oms+"', '2012-06-07') RETURNING id "
	userId=sql.firstRow(query).id 
}
else{
//	log.info("пациент есть")
	userId=user.id
}
//log.info userId
testRunner.testCase.testSuite.setPropertyValue("userId", userId.toString())

deviceQuery="select * from f_user_device where user_id="+userId
devices=sql.rows(deviceQuery)
if(devices) sql.execute("delete from f_user_device where user_id="+userId)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5ba24310-d20a-4b73-a9b1-ca0603d4c496" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Открой кибану, чтоб в параллель смотреть логи" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:testCase id="18121600-df09-4192-9b47-96a91f8abb6a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=created, в БД notification нет записи с appointmentId из уведомления. Заполнены все параметры" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="db5492fb-0316-4117-aaa6-4d7f89e674b3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="878717a3-dfc6-4b5f-93b5-b36a91010042"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="74d05901-537d-4436-99ee-df9a46ece850"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="9065c4df-8add-4175-99bf-a35cf64edb6e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="c8a10901-f263-4fdd-9e7a-027c2037054b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="3950de50-8ec1-4376-9324-860d103eeb75"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="327d6215-1f62-4725-a07c-06154a8006c8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="93ce9fe7-e225-426a-8676-d47ea2eed614"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="7ec61d8a-e9ed-4fb9-b26b-a4674cdb73e5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="c388e0cc-232e-4fe1-8085-0f11895e2f6c"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="bdafd899-0c93-47d5-9b00-03576ed2c525" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=created. Заполнены только обязательные параметры(значения необяз.=null)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="bb53c900-c856-4af8-97e5-95a6342c38e0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="b55d47e4-3fa2-438d-8cce-7a2158d40c3d"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","null")
testRunner.testCase.testSuite.setPropertyValue("expertName2","null")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","null")
testRunner.testCase.testSuite.setPropertyValue("office2","null")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="88755dde-e05c-4971-afac-9cae19024292"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="fd9fd32b-c1b9-4082-a3ae-2ef4126d2075"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="b0ad9a10-2970-4032-8767-8e817f42bd06"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="48e9fa41-3b3e-4976-9ba8-63d9c29e576d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="32117f36-548e-4dfb-b1e0-3620865ade4a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="96afec5e-cf81-44f8-b516-e75b5d72536d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="2531c52c-1e5e-4213-a60a-8ce154ea7e29"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="206d3127-1fce-4bad-ae5d-64cbfccfa922"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0050ff89-9dc1-4a91-90ce-19c8570f6c7e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=created. Заполнены только обязательные параметры(значения необяз.=&quot;&quot;)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="f570d904-06bf-4ea8-af62-b967824f70ce"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="b9e2f68e-6209-4dab-9fef-c25e39b830cb"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="fbed7640-2d5b-4fcd-b0cb-d665b3fe67d8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="b7dc6a88-e635-487f-9c41-4054cad541c0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="d852224a-70c7-4caa-a5ef-07efe2f25d88"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="6f70d2f3-1153-44fa-a0a5-49e1aa8c34e7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="a2c9c7e4-526d-45db-951e-f083625693da"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="86ed7acf-b404-4d05-a19e-fb0329ada865"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="8b3b2131-7ac6-4571-ab75-db8e130bb761"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="d38194e5-a08f-4f1f-868d-d83470e0a89c"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4dde55e3-3b34-485f-9863-0d0d8e384a16" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=created. Заполнены только обязательные параметры(необяз. отсутствуют)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="1cf1167b-e8d5-4d29-a0f8-a9d172803336"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="69ad5f86-14da-4a80-a7f2-05198bbfcd15"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","")
testRunner.testCase.testSuite.setPropertyValue("expertName2","")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","")
testRunner.testCase.testSuite.setPropertyValue("office2","")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="23dbf96f-c9ef-4ee0-b130-d49edf3e7e23"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="c1998300-b415-45b0-92ee-20bbbdcedcfb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="4c435383-5415-4eb9-9c04-07f435a25170"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="3e43735f-f4b9-4be2-a84e-b9a65461c308"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="e678dd19-172e-4891-a1a0-4738601b30ee"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="dfe2bcbc-7eda-4ec0-8b9d-1b1e7e67f981"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="76842691-cd43-4bec-8738-04b534e0f9e0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="f3d84565-91d9-4bf1-a3df-a37c8a63c5bc"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b1ac7ce3-225d-4ead-8e19-3d2b87c4d322" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited, в БД notification нет записи с appointmentId из уведомления. Заполнены все параметры" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="2c257395-0dff-4583-b6ca-708a9c791cbf"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="291c3eed-d7d7-4f59-af49-be62500c9d5e"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="71e3e7ad-678a-4e18-bbc7-33af988f9ae2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="906cb005-f292-4e6b-80d2-eac5305a81cc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="6217e81f-5979-4571-afb8-fdd03bbdb004"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="691a3c3e-9aec-4b5f-950d-2aaa51ccda73"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="cc6d7dbc-d061-4465-b915-11371f2896bd"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="7aa4781e-85cb-4d3d-951a-c2f06ec165e4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="328d2a0b-452f-4bb1-94d5-49fa177eb8b7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="65048775-4a9d-4281-8273-5a7a50bf2630"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="89b1f1d9-27b6-4c0c-9ef2-08bc23958756" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited. Заполнены только обязательные параметры(значения необяз.=null)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="a5d4f707-ab56-4b75-8b73-68dbc7481e80"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="57bda09f-8699-4cdb-9d50-f95b45c04a92"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","null")
testRunner.testCase.testSuite.setPropertyValue("expertName2","null")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","null")
testRunner.testCase.testSuite.setPropertyValue("office2","null")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="97d6dbe7-8bd5-45cc-89cb-3d187fdb8fd4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="372d4916-8b54-4d7c-801e-72c877916f6f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="5189ea6a-ddf6-47a4-ac09-575bfc16567e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="e4d6958b-2926-4a42-9193-d4bd207db558"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="ba224c54-14fc-4075-aa15-0b9e7e343e90"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="86a15a35-c9d5-4aef-9f7c-cd8798032348"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="46f945a2-7a42-4100-9633-fedc96152ca6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="e9729e14-09ad-467c-a731-b3497965d8b1"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0c679326-76f0-4ff0-8d1c-81feca842ab2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited. Заполнены только обязательные параметры(значения необяз.=&quot;&quot;)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="abef7a65-47c5-4bfc-9888-d8b75c732b0d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="b32346fb-9123-4a23-a494-5209fe0cbc30"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="44fa139e-6a20-4850-ac18-a2ec13d64869"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="4bbfc039-5f27-4348-a917-c28726d27223"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="bc54b13f-192b-443b-b6df-73bacf3d961e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="88337a61-bff0-4c05-b405-d45e22f28762"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="7957555b-19b4-4592-9370-348c8dd2828b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="e27df52b-3477-490b-a369-27e169d4332a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="b719d462-e551-465a-820e-7d9471a4ce38"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="a00dafe3-bf47-4bb3-a0c0-f35279998271"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1ae5844b-b67c-4a31-9abe-7efd80ed2653" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=edited. Заполнены только обязательные параметры(необяз. отсутствуют)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="1c259baa-4751-4256-89f6-865e0fe4a585"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="61c3da1c-b37d-4f3a-a50f-ab460d6fa020"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","")
testRunner.testCase.testSuite.setPropertyValue("expertName2","")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","")
testRunner.testCase.testSuite.setPropertyValue("office2","")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="f2100743-a306-4ecd-9fc7-066123bb3db3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="7207e4f6-b928-4ac4-9b0a-7cb5b48ba087"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="13892c5c-c400-4a7a-8a1f-2f2ba817429d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="c131fa99-e133-4bbf-a6a3-c7a3ae43ce36"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="da51a6ed-9fe3-4597-958a-ec82a60a00e8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="0307f486-673f-4e80-9be3-9b39ea4d5884"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="3cfd0a62-4275-4e4a-ad5c-bf66c8003758"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="367c50d2-86d3-47c4-a325-287f1ed0b968"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ffc0b266-2a0b-4e12-b2a8-f6d1fb529015" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled, в БД notification нет записи с appointmentId из уведомления. Заполнены все параметры" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="4a875cd6-192f-4e25-8530-d8e5cff9f63e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="89ebeae9-aaac-44e9-90e8-d4fae16865a2"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="fb9b2cf7-7b30-4632-8b1e-9a64f656ecd2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="ae6c639d-b4be-4ace-af6c-ce3fe150e18e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="f335b972-e225-4531-adb0-00c10e51985d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="2c0a0a36-defc-4c0c-bf80-ac9187f7a566"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="bf5cab0e-c16b-4de7-8e59-3df4fc26710f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="9d1a6687-13d1-4a82-90bf-d548aeb5f84f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="675e53c8-b185-4d45-9bb9-cfba38824342"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="4ddba714-7d4e-477e-a8df-7db72e75d29f"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ac668854-0486-4f37-b04b-5be950e7c2b1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled. Заполнены только обязательные параметры(значения необяз.=null)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="3e14365a-71f2-4ca6-867e-5f789e87b785"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="bda554ce-bc13-4ade-af7d-a61b0c7a5e8d"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","null")
testRunner.testCase.testSuite.setPropertyValue("expertName2","null")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","null")
testRunner.testCase.testSuite.setPropertyValue("office2","null")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="f3a1a21a-cf92-4bd7-b406-887d6ed88101"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="5cd22ef1-78e4-4f05-a4ea-df3740485e86"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="58754a27-388d-4a2d-b11b-368d5dd95e94"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="38a09bf4-4d28-47f2-9ab3-541fd3f1bdbd"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="69ba9a3e-fe13-4042-afc7-7c14e7ebd65b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="7f54d93e-4c83-4e3a-abd2-a342d596b507"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="7451ac0a-9184-4f40-8edd-66c9e07f3dab"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="1c1c424c-d725-4a33-9cb0-2ac4939444fe"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0335565e-09ca-4c53-8e6a-5bec355e324a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Несколько уведомлений по 1 пациенту. создание, изменение, отмена записи" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные в статусе created" id="cf281b41-993c-4ee4-a6ff-bb5bd4d3b70d"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="ae931804-3679-48aa-b064-5db37aa0be56"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="dad01dbb-fdb2-4726-b6f6-5cadeb934644"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="3786b399-606b-40d1-9693-95b55fa5149b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать notificationId" id="47d3d0dd-526c-46a4-a0ad-fc8dbe4a7e77"><con:settings/><con:config><script>notifications =  testRunner.testCase.testSuite.getPropertyValue("notificationId")

testRunner.testCase.testSuite.setPropertyValue("notifications",notifications)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="3b3751e8-b706-48ef-9611-32d6281049fc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="f811904e-06d9-411a-868e-390af7024b30"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="7ba81aae-8024-45aa-a64c-1e568d415564"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="28523448-da9b-4fc8-95e6-9e26ca794c86"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные в статусе edited" id="b3ea73e1-e489-4182-9707-5049bc54f4af"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
//appointmentId=UUID.randomUUID().toString()
//testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","edited")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление 2" id="cc9b4e5e-d5d8-42ce-8124-44b9ec12fb2a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения 2" id="313dccb7-8168-443c-8b7f-ac509b6efed4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification 2" id="ddcff0e6-7f66-439c-8ef0-ed2a2ce1d4c6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать notificationId 2" id="0ccd28f8-9a40-4464-add2-1cda93ca0485"><con:settings/><con:config><script>notificationId =  testRunner.testCase.testSuite.getPropertyValue("notificationId")
notifications =  testRunner.testCase.testSuite.getPropertyValue("notifications")
notifications += "," + notificationId

testRunner.testCase.testSuite.setPropertyValue("notifications",notifications)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment 2" id="34b2f6ed-c8f6-48a1-ad36-a5e24bc91aad"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task 2" id="33eb8d21-8ad0-44c6-a05c-a671e69d974e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid 2" id="87af6fa6-29a3-41c1-8c4f-2262efe12364"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане 2" id="a82d17c1-4879-46b1-a741-587889d5cca2"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные в статусе cancelled" id="aec41f29-4855-46e1-8cbd-cb401cd83f4a"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
//appointmentId=UUID.randomUUID().toString()
//testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление 3" id="c19681a6-38dd-466c-9ad7-d392e901597e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения 3" id="64bf0151-aaa8-4efb-a3ea-80e8df6b6e19"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification 3" id="83aacfc6-1cb7-4664-9390-62fc2c82391c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать notificationId 3" id="90faf0a8-583a-4bfc-8318-166b69fde4c9"><con:settings/><con:config><script>notificationId =  testRunner.testCase.testSuite.getPropertyValue("notificationId")
notifications =  testRunner.testCase.testSuite.getPropertyValue("notifications")
notifications += "," + notificationId

testRunner.testCase.testSuite.setPropertyValue("notifications",notifications)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment 3" id="15e80aaf-7973-4f40-a967-753c7457a80a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task 3" id="d42e16c6-feb0-4475-b4d7-2bbb5e56f1b4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid 3" id="0bcd6a84-d609-46e6-bf49-5b800d5a6107"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане 3" id="9b32893c-c436-49e7-96af-f828c722a516"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Очистить данные в БД" id="e57a7334-431d-4ce9-83c5-63d9490fffe5"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
notifications = testRunner.testCase.testSuite.getPropertyValue("notifications")
query1="delete from f_notification_task where notification_id in ("+notifications+")"
query2="delete from f_notification_hospital_appointment where notification_id in ("+notifications+")"
query3="delete from f_notification where id in ("+notifications+")"
//log.info query
sql.execute(query1)
sql.execute(query2)
sql.execute(query3)
tc = testRunner.testCase.testSuite.getPropertyValue("testCase")
log.info "Завершен  ТК \""+tc+"\""</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b81eccce-0a67-45bd-981c-64867b0ae6a9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled. Заполнены только обязательные параметры(значения необяз.=&quot;&quot;)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="eb07b80e-e3fc-43ac-99a7-f9c5ccd7b6f4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="296c547e-c2b5-4bc5-a9af-ceef1f6259b0"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="844cee8b-e003-4e79-aa69-d0d5f28ad564"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="a41fab13-2d3a-44ec-ba6e-58797b03a414"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="8470e65a-16ec-4179-842d-033f070ce406"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="b3986178-1069-43e6-9d97-2d4565c5f370"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="1ccba0d7-94d9-4aa7-acab-d596d10798f5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="8cc2b26f-4525-4b6c-9001-5154fcd77f9f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="e649b7ad-2bc9-44c2-a19c-3cb232204340"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="ca2d474b-50cf-4c4b-980d-4b1f7f6cd090"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0dfaa8d1-fdd2-4197-9754-fffe88ef6b8b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с eventType=cancelled. Заполнены только обязательные параметры(необяз. отсутствуют)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="b5d64a97-d7d3-451e-9c8c-4df300c65e56"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="c81adf11-85cb-4da0-b4ed-0c3434f43a6e"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","cancelled")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","")
testRunner.testCase.testSuite.setPropertyValue("expertName2","")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","")
testRunner.testCase.testSuite.setPropertyValue("office2","")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="9ad31cb0-3d48-490e-a53c-8e3b68875ad3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="12ee05fa-bc4b-4c5b-8766-812526eb1be4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification" id="68a2066b-2d20-4879-9d4a-fd8f7dcfe20f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>e99d1657-36c1-41c3-b89c-5c404365e500</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notification_hospital_appointment" id="d9eb2bed-ac3f-42b4-bb32-6c6590885859"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>7f1ae3af-c2a2-479a-819d-e5fff2daa24e</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить создание записи в f_notifictation_task" id="66ece20a-4485-4c54-a978-73e2a9cfdd6a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>46f9c32e-8a19-4512-b986-ecc3c14845ef</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить созданные данные" id="22e748c2-e611-4970-8455-513166745706"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a27b825d-c0ca-4935-ab53-13142bd0614a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Залогиоровать фильтры для кибаны и ожидаемые device_guid" id="53bbf770-0e94-40a2-b56d-1109a9581bd5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>6ccb7e3f-75c6-46b4-88e1-573ec5ca0ccf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="0dd7af84-d652-48a0-9c56-e4ee50be826b"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="03acc72a-52f7-4eab-b563-978eb528d517" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления по пациенту, у которого только неподходящие для создания уведомления девайсы" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Создать неподходящие данные для пациента" id="26abb57c-ff4b-4e5c-8263-408ded362dcd"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>f7636735-39c2-42a5-8ed6-dac60d5010c3</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="bcad70c4-8368-4900-afce-ea32ee0cb7ea"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientBadDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="3174316e-98be-440e-aa5d-380be9363109"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="fb5fd6d8-5f7a-4d40-94de-bebe1d7dbc91"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить отсутствие записи в таблице f_notification" id="71cf7464-1b66-47f1-9267-aa99036ef9cc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>12e8bf99-6641-4202-a904-db36eed090bc</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="залогировать запрос кибаны" id="a138e34a-1ca7-41db-b978-715ab96973f9"><con:settings/><con:config><script>oms =testRunner.testCase.testSuite.getPropertyValue("oms2")
log.info ("KIBANA start")
log.info("фильтр для поиска в кибана: \"events/send\" AND hospitalAppointment AND "+oms)
log.info("по этому фильтру не должно быть логов")
log.info ("KIBANA end")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="8458ed95-9426-4458-89ad-0cbef1919224"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0298c861-83bb-4b92-ac84-5fc0cde86659" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления по пациенту без девайса" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить пациента без девайсов" id="66a3e5cb-b8bc-4437-ba43-458eb228f4bf"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>24e5e4ba-209e-45cd-8c21-cc0767a299f5</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="4c5cd4f9-d03e-4dc6-a874-bd9dd4163b6b"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientBadDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","created")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="f837bfd9-1bfd-48ac-86a3-309df658698d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="f0797527-16fa-4bbc-a458-5cbda0254940"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить отсутствие записи в таблице f_notification" id="2e1697a0-6bb2-4ec7-824f-d81963c7da5f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>12e8bf99-6641-4202-a904-db36eed090bc</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="залогировать запрос кибаны" id="97e5bd33-85df-4b9f-a5cc-05461bd34aa2"><con:settings/><con:config><script>oms =testRunner.testCase.testSuite.getPropertyValue("oms2")
log.info ("KIBANA start")
log.info("фильтр для поиска в кибана: \"events/send\" AND hospitalAppointment AND "+oms)
log.info("по этому фильтру не должно быть логов")
log.info ("KIBANA end")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="0e51c78d-4082-4caf-9ba2-f86c7ea55482"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="bb266952-b5f2-47a0-af07-7eab8690aad4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обработка уведомления с некорректным eventType" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Проверить наличие пациента со всеми девайсами" id="72e59fbc-990f-4552-ad35-ae5d9425871e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>8b02303a-6777-41ea-82a5-b12e2458b742</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="80b7459f-e330-4ee3-8803-c5cb3c71eafe"><con:settings/><con:config><script>import java.util.Date
import java.text.SimpleDateFormat

def date = new Date()
def currentDateTimeForDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date)
patientId =testRunner.testCase.testSuite.getPropertyValue("patientIdAllDevices")
appointmentId=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType2","create")
testRunner.testCase.testSuite.setPropertyValue("currentDateTimeForDB",currentDateTimeForDB.toString())
testRunner.testCase.testSuite.setPropertyValue("emiasId2","\""+patientId+"\"")
testRunner.testCase.testSuite.setPropertyValue("phoneNum","\"00000000000\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality2","\"Офтальмоуролог\"")
testRunner.testCase.testSuite.setPropertyValue("expertName2","\"Анатолий Бердянский\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName2","\"узи\"")
testRunner.testCase.testSuite.setPropertyValue("office2","\"кабинет 123\"")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())
sleep(2000)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="2c279b0d-f444-4a9e-80af-ceef1087d70a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>18a624ac-aa00-46a2-966a-76108fb91ed9</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Получить timestamp сообщения" id="98e3a23a-0a2f-46bf-a52a-562cb2932a27"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1878f8a1-f6d5-46ea-8d5b-de8b8f6fb96a</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить отсутствие записи в таблице f_notification" id="31bf1325-3828-43c8-b5f0-1adedb9973fe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>12e8bf99-6641-4202-a904-db36eed090bc</con:targetTestCase><con:properties><con:property><con:name>notificationId</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="залогировать запрос кибаны" id="a9b7ae76-3b3f-4243-bd63-6dc004f80eda"><con:settings/><con:config><script>oms =testRunner.testCase.testSuite.getPropertyValue("oms")
log.info ("KIBANA start")
log.info("фильтр для поиска в кибана: \"events/send\" AND hospitalAppointment AND "+oms)
log.info("по этому фильтру не должно быть логов")
log.info ("KIBANA end")</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить логи в кибане" id="8a3d3695-8a60-41a6-b1b0-20573009beec"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>В кибане есть запись об отправке
 уведомления в ИСПК
В логах записан фильтр для кибаны, 
по нему есть уведомления с соответствующим
 контентом только для залогированных девайсов</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>KIS_appointment_changer</con:value></con:property><con:property><con:name>appointmentId1</con:name><con:value>890809809809</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>3ef05d99-a9d9-471f-a19d-7e207b49454f</con:value></con:property><con:property><con:name>patientId1</con:name><con:value>54628b9d-d4af-458c-82b2-33536288b484</con:value></con:property><con:property><con:name>patientId2</con:name><con:value>5aff02c7-8cb7-4f09-a277-159c03a1d319</con:value></con:property><con:property><con:name>emiasId1</con:name><con:value>12300</con:value></con:property><con:property><con:name>emiasId2</con:name><con:value>"123011"</con:value></con:property><con:property><con:name>phoneNum</con:name><con:value>"00000000000"</con:value></con:property><con:property><con:name>type</con:name><con:value>device</con:value></con:property><con:property><con:name>eventType1</con:name><con:value>created</con:value></con:property><con:property><con:name>eventType2</con:name><con:value>create</con:value></con:property><con:property><con:name>eventDate1</con:name><con:value>1960-01-01</con:value></con:property><con:property><con:name>eventDate2</con:name><con:value>1960-01-02</con:value></con:property><con:property><con:name>eventTime1</con:name><con:value>23:15</con:value></con:property><con:property><con:name>eventTime2</con:name><con:value>23:20</con:value></con:property><con:property><con:name>expertSpeciality1</con:name><con:value>"Офтальмоуролог "</con:value></con:property><con:property><con:name>expertSpeciality2</con:name><con:value>"Офтальмоуролог"</con:value></con:property><con:property><con:name>expertName1</con:name><con:value>"Петров Е.В."</con:value></con:property><con:property><con:name>expertName2</con:name><con:value>"Анатолий Бердянский"</con:value></con:property><con:property><con:name>procedureName1</con:name><con:value>"анализ"</con:value></con:property><con:property><con:name>procedureName2</con:name><con:value>"узи"</con:value></con:property><con:property><con:name>office1</con:name><con:value>"кабинет 1"</con:value></con:property><con:property><con:name>office2</con:name><con:value>"кабинет 123"</con:value></con:property><con:property><con:name>address1</con:name><con:value>ул. Приозёрная, д. 24</con:value></con:property><con:property><con:name>address2</con:name><con:value>ул. Приозёрная, д. 24 к.1</con:value></con:property><con:property><con:name>nameMO1</con:name><con:value>ГБУЗ «ГКБ № 40 ДЗМ»</con:value></con:property><con:property><con:name>nameMO2</con:name><con:value>ГБУЗ «ГКБ № 40 к.2 ДЗМ»</con:value></con:property><con:property><con:name>testCase</con:name><con:value>Обработка уведомления с некорректным eventType</con:value></con:property><con:property><con:name>patientIdAllDevices</con:name><con:value>123011</con:value></con:property><con:property><con:name>oms</con:name><con:value>1000000000011</con:value></con:property><con:property><con:name>userId</con:name><con:value>16660</con:value></con:property><con:property><con:name>deviceGuid1</con:name><con:value>55045ad2-b0bc-4059-9943-d683c8934b31</con:value></con:property><con:property><con:name>deviceGuid2</con:name><con:value>7d317efc-17e3-41a8-9550-7d88590ee2ca</con:value></con:property><con:property><con:name>deviceGuid3</con:name><con:value>2527d2e8-1c58-42d3-93f8-8bb850986dc5</con:value></con:property><con:property><con:name>deviceGuid4</con:name><con:value>a94fd149-3ac4-48df-b3ef-ae7e4c6e70c4</con:value></con:property><con:property><con:name>deviceGuid5</con:name><con:value>903b3020-8777-4064-abed-3a6638c57b50</con:value></con:property><con:property><con:name>deviceGuid6</con:name><con:value>b00e116a-e455-4af9-b805-3466af58e64d</con:value></con:property><con:property><con:name>deviceGuid7</con:name><con:value>e31f0e2e-3aca-45fe-aa9a-e016d0cb2957</con:value></con:property><con:property><con:name>deviceGuid8</con:name><con:value>0dde3d26-fb92-46b1-acf7-da2e61f24d44</con:value></con:property><con:property><con:name>deviceGuid9</con:name><con:value>bb837424-9113-4e67-9890-df71c37be151</con:value></con:property><con:property><con:name>deviceGuid10</con:name><con:value>db90f9bb-e252-45bb-9f3b-cc4ff913abe9</con:value></con:property><con:property><con:name>deviceGuid11</con:name><con:value>0f66b4aa-c898-4955-a979-74ce0aa30486</con:value></con:property><con:property><con:name>deviceGuid12</con:name><con:value>758ca0dd-f246-4c48-944b-1bdfc250fa08</con:value></con:property><con:property><con:name>devicesToSend</con:name><con:value>5, 6</con:value></con:property><con:property><con:name>devicesCount</con:name><con:value>12</con:value></con:property><con:property><con:name>howToChange</con:name><con:value>all</con:value></con:property><con:property><con:name>currentDateTimeForDB</con:name><con:value>2024-05-27 13:25:52</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>201450</con:value></con:property><con:property><con:name>messageTimestamp</con:name><con:value>2024-05-27 13:25:55.049</con:value></con:property><con:property><con:name>notifications</con:name><con:value>201442</con:value></con:property><con:property><con:name>patientBadDevices</con:name><con:value>123012</con:value></con:property><con:property><con:name>oms2</con:name><con:value>1000000000012</con:value></con:property><con:property><con:name>patientNoDevices</con:name><con:value>123013</con:value></con:property><con:property><con:name>oms3</con:name><con:value>1000000000013</con:value></con:property><con:property><con:name>patientDoestExist</con:name><con:value/></con:property><con:property><con:name>oms4</con:name><con:value>0009899890809</con:value></con:property></con:properties></con:testSuite><con:testSuite id="6f102363-b081-4f71-8102-b4b24ffb6f88" name="А_ЕСУ_08 - Получение сообщений о напоминании о записи в стационары (запись в КДО)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="701860e5-8c6c-44b6-a1dd-5939935ff53d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Отправка уведомления о записи в КДО" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Отправить уведомление" id="fc98e004-b4ee-4dd5-9ea0-f68d0117321c"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
tc = testRunner.testCase.testSuite.getPropertyValue("testCase")
log.info "Отправить сообщение по ТК \""+tc+"\""

// сформировать сообщение
//eventId = testRunner.testCase.getPropertyValue("eventId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate")
eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime")
eventType = testRunner.testCase.testSuite.getPropertyValue("eventType")
emiasId = testRunner.testCase.testSuite.getPropertyValue("emiasId")
patientIdKIS = testRunner.testCase.testSuite.getPropertyValue("patientIdKIS")
phoneNum = testRunner.testCase.testSuite.getPropertyValue("phoneNum")
expertName = testRunner.testCase.testSuite.getPropertyValue("expertName")
expertSpeciality = testRunner.testCase.testSuite.getPropertyValue("expertSpeciality")
procedureName = testRunner.testCase.testSuite.getPropertyValue("procedureName")
office = testRunner.testCase.testSuite.getPropertyValue("office")
address = testRunner.testCase.testSuite.getPropertyValue("address")
nameMO = testRunner.testCase.testSuite.getPropertyValue("nameMO")

message="""{
    "appointmentId": \""""+appointmentId+"""\",
    "eventDate": \""""+eventDate+"""\",
    "eventTime": \""""+eventTime+"""\",
    "eventType": \""""+eventType+"""\",
    "emiasId": \""""+emiasId+"""\",
    "patientId": \""""+patientIdKIS+"""\",
    "phoneNum": \""""+phoneNum+"""\",
    "resource": {
        "type": "expert",
        "expertName": """+expertName+""",
        "expertSpeciality": """+expertSpeciality+""",
        "procedureName": """+procedureName+""",
        "office": """+office+""",
        "address": """+address+""",
        "nameMO": """+nameMO+"""
    }
}
"""
//return message
//sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.testSuite.project.getPropertyValue("topicKIS_appointment_reminder")
mainScripts.kafka().sendMessageToKafka(topicName,message)


</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b3ef06ac-ccb6-45d5-a3ed-6097fb32a757" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка соответствия записи в БД notification в f_notification" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить" id="9390b16b-9c13-4920-b9a7-aff6481a0d8e"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import java.time.LocalDateTime

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

userId = testRunner.testCase.testSuite.getPropertyValue("userId") 


expertSpeciality = testRunner.testCase.testSuite.getPropertyValue("expertSpeciality").replace("\"","") 
expertName = testRunner.testCase.testSuite.getPropertyValue("expertName").replace("\"","") 
procedureName = testRunner.testCase.testSuite.getPropertyValue("procedureName").replace("\"","")
nameMo = testRunner.testCase.testSuite.getPropertyValue("nameMo").replace("\"","")
office = testRunner.testCase.testSuite.getPropertyValue("office").replace("\"","")
eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime")
title = testRunner.testCase.testSuite.getPropertyValue("title") 

eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate");
Date eventDateParse = Date.parse("yyyy-MM-dd", eventDate)
String eventDateDescriptionFormat = eventDateParse.format("dd.MM.YYYY")
testRunner.testCase.testSuite.setPropertyValue("eventDateDescriptionFormat", eventDateDescriptionFormat);

eventDateDescriptionFormat = testRunner.testCase.testSuite.getPropertyValue("eventDateDescriptionFormat")


String description = "Вы записаны: "+expertSpeciality+" "+expertName+" "+procedureName+", "+nameMo+", "+office+", "+eventDateDescriptionFormat+" в "+eventTime
log.info description

query="select * from f_notification where user_id= '"+userId+"' and notification_type_id = 8 order by create_date desc"
notification=sql.firstRow(query)

notificationId = notification.id
notificationId = testRunner.testCase.testSuite.setPropertyValue("notificationId", notificationId.toString()) 

checkParameter("title", title, notification.title.toString())
checkParameter("description", description, notification.description.toString())
</script></con:config></con:testStep><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name><con:value>08.05.2024</con:value></con:property></con:properties></con:testCase><con:testCase id="1077c545-cd4c-484b-9bb1-191e6e5bada6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка отсутствия записи в БД notification в f_notification" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить" id="d6bc6042-ab7e-445d-bf10-95b551c07421"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import java.time.LocalDateTime

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

userId = testRunner.testCase.testSuite.getPropertyValue("userId") 

eventDateEventTimeDBFormat = testRunner.testCase.testSuite.getPropertyValue("eventDateEventTimeDBFormat")

query="select * from f_notification where user_id= '"+userId+"' and notification_type_id = 8 and create_date > '"+eventDateEventTimeDBFormat+"' "

notification=sql.firstRow(query)

assert notification == null

</script></con:config></con:testStep><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name><con:value>08.05.2024</con:value></con:property></con:properties></con:testCase><con:testCase id="910a4c87-9ff5-478b-a619-0a6ac668e234" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка соответствия записи в БД notification в f_notification_hospital_appointment" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить" id="1f59891f-c1ee-45d9-8f05-f4cad7762b81"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

notificationId = testRunner.testCase.testSuite.getPropertyValue("notificationId")
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate")
eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime")
eventType = testRunner.testCase.testSuite.getPropertyValue("eventType")
emiasId = testRunner.testCase.testSuite.getPropertyValue("emiasId")
phoneNum = testRunner.testCase.testSuite.getPropertyValue("phoneNum")
expertName = testRunner.testCase.testSuite.getPropertyValue("expertName").replace("\"","")
expertSpeciality = testRunner.testCase.testSuite.getPropertyValue("expertSpeciality").replace("\"","")
procedureName = testRunner.testCase.testSuite.getPropertyValue("procedureName").replace("\"","")
office = testRunner.testCase.testSuite.getPropertyValue("office").replace("\"","")
address = testRunner.testCase.testSuite.getPropertyValue("address").replace("\"","")
nameMO = testRunner.testCase.testSuite.getPropertyValue("nameMO").replace("\"","")
timestamp = testRunner.testCase.testSuite.getPropertyValue("timestamp")

query="select * from f_notification_hospital_appointment where notification_id= '"+notificationId+"' "
appointment=sql.firstRow(query)
//log.info appointment

checkParameter("appointment_id", appointmentId, appointment.appointment_id.toString())
checkParameter("event_type", eventType, appointment.event_type.toString())
checkParameter("event_date", eventDate, appointment.event_date.toString())
checkParameter("event_time", eventTime, appointment.event_time.toString())
checkParameter("resource_speciality", expertSpeciality, appointment.resource_speciality.toString())
checkParameter("resource_name", expertName, appointment.resource_name.toString())
checkParameter("resource_procedure", procedureName, appointment.resource_procedure.toString())
checkParameter("resource_office", office, appointment.resource_office.toString())
checkParameter("resource_address", address, appointment.resource_address.toString())
checkParameter("resource_mo", nameMO, appointment.resource_mo.toString())
checkParameter("message_datetime", timestamp, appointment.message_datetime.toString())</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9e170c54-98b6-411e-acc2-dadc8b6b6591" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка отсутствия записи в БД notification в f_notification_hospital_appointment" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить" id="b9d7aaeb-36db-4d96-8e95-b13cef3da752"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import java.time.LocalDateTime

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")

query="select * from f_notification_hospital_appointment where appointment_id = '"+appointmentId+"' "
log.info query
notification=sql.firstRow(query)

assert notification == null

</script></con:config></con:testStep><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name><con:value>08.05.2024</con:value></con:property></con:properties></con:testCase><con:testCase id="f3530471-34f3-4c5b-b927-cea4eb11e99e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка соответствия записи в БД notification в f_notification_task" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Проверить" id="dbd1d111-274f-4660-8e80-c12ea0de69b9"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat
import java.time.LocalDateTime

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

def checkParameter(String paramName, def expValue, def currentValue){
	if(currentValue != expValue) testRunner.fail("значение "+paramName+" не соответствует ожидаемому. ожидаемое ="+expValue.toString()+", фактическое ="+currentValue.toString())
}

status = "SEND"

deviceGuid = testRunner.testCase.testSuite.getPropertyValue("deviceGuid") 
notificationId = testRunner.testCase.testSuite.getPropertyValue("notificationId") 

query="select * from f_notification_task where notification_id= '"+notificationId+"' "
notificationTask=sql.firstRow(query)

checkParameter("status", status, notificationTask.status.toString())
checkParameter("device_guid", deviceGuid, notificationTask.device_guid.toString())
checkParameter("send_date", sendDate, notificationTask.send_date.toString())</script></con:config></con:testStep><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name><con:value>08.05.2024</con:value></con:property></con:properties></con:testCase><con:testCase id="50118f67-70d7-4499-9c92-948b1a00c697" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Очистка созданных данных" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Очистить данные" id="35198769-f410-4d63-8b0b-b196359f3160"><con:settings/><con:config><script>import groovy.sql.Sql
connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)
notificationId = testRunner.testCase.testSuite.getPropertyValue("notificationId")
query="delete from  f_notification_task where notification_id= '"+notificationId+"'; delete from f_notification_hospital_appointment where notification_id= '"+notificationId+"'; delete from  f_notification where id= '"+notificationId+"'; "
delete=sql.execute(query)
tc = testRunner.testCase.testSuite.getPropertyValue("testCase")
log.info "Завершен  ТК \""+tc+"\""</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="85402761-c436-42bf-9e12-5f97124757b6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Найти пользователя, у которого 1 устройство" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Найти пользователя" id="23f9b634-802e-49e2-a6e6-a8f402579030"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

// Подобрать пользователя с 1 устройством
query="select fu.id, fu.patient_id, fu.oms_number, fud2.device_guid from (select fud.user_id, count(*) from f_user_device fud group by fud.user_id having count (*) = 1) as users join f_user_device fud2 on fud2.user_id = users.user_id join f_user fu on fu.id = fud2.user_id limit 1"
response=sql.firstRow(query)
log.info response

userId = response.id.toString()
patientId = response.patient_id.toString()
omsNumber = response.oms_number
deviceGuid = response.device_guid.toString()

testRunner.testCase.testSuite.setPropertyValue("userId",userId)
testRunner.testCase.testSuite.setPropertyValue("emiasId",patientId)
testRunner.testCase.testSuite.setPropertyValue("omsNumber",omsNumber)
testRunner.testCase.testSuite.setPropertyValue("deviceGuid",deviceGuid)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6b98495c-9d4e-4dd9-8167-e7e74b54562d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="413394_Получение сообщений о напоминании о записи в стационар (f_user_device: authentication = true, deleted = false, voip = false) (все необязательные параметры)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать в проперти проекта данные для сообщения" id="ec5c1f3b-f40d-42a3-a405-313a46c511b2"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("expertName","\"Двоеглазов Александр Дмитриевич\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality","\"Окулист\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName","\"МРТ\"")
testRunner.testCase.testSuite.setPropertyValue("nameMO","\"166 ДЗМ\"")
testRunner.testCase.testSuite.setPropertyValue("address","\"ул.Папанина, д.36\"")
testRunner.testCase.testSuite.setPropertyValue("office","\"Кабинет №19\"")</script></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="c45cf3c8-505e-4185-af7f-46ce50738b6b"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()
patientIdKIS=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("patientIdKIS",patientIdKIS)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType","remind")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())

// Записать eventDate и eventTime = текущее время + 1 минута
Date now = new Date()
Date nowPlusOneMin = LocalDateTime.now().plusMinutes(1).toDate()
sdfD = new SimpleDateFormat("yyyy-MM-dd")
def today = sdfD.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventDate", today.toString())
sdfT = new SimpleDateFormat("HH:mm")
def time = sdfT.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventTime", time.toString())

// Подобрать пользователя с устройством
query="select fu.id, fu.patient_id, fu.oms_number, fud.device_guid from f_user fu join f_user_device fud on fud.user_id = fu.id where fud.authentication = true and fud.deleted = false and fud.voip = false"
response=sql.firstRow(query)
log.info response

userId = response.id.toString()
patientId = response.patient_id.toString()
omsNumber = response.oms_number
deviceGuid = response.device_guid.toString()

testRunner.testCase.testSuite.setPropertyValue("userId",userId)
testRunner.testCase.testSuite.setPropertyValue("emiasId",patientId)
testRunner.testCase.testSuite.setPropertyValue("omsNumber",omsNumber)
testRunner.testCase.testSuite.setPropertyValue("deviceGuid",deviceGuid)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="08671566-9a26-4fbd-a286-28f0303c2751"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>701860e5-8c6c-44b6-a1dd-5939935ff53d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в f_notification" id="225b7fbd-8f24-4fa0-a04c-b7ed30ba739b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b3ef06ac-ccb6-45d5-a3ed-6097fb32a757</con:targetTestCase><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать timastamp сообщения" id="26575a88-4e2a-4189-a97f-22f71f820f45"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import org.apache.kafka.clients.consumer. *
import java.sql.Timestamp
//import org.json.JSONObject;


def parsePath(Object node, String path){
	String[] arr = path.replace("[",".").replace("]","").split("\\.");
	Object obj=node
	for (int i = 0; i < arr.size(); i++) {
		def key = arr[i].isInteger()  ? Integer.parseInt(arr[i]) : arr[i]
		obj = obj.get(key);
	}
	return obj
}

def getKafkaLastMessageJson( String topicName, String parameter, String value, Long time=18000){
        String topic =testRunner.testCase.testSuite.project.getPropertyValue(topicName);
        String bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

        Properties props = new Properties()
        props.put('zk.connect', '10.2.172.24:2181')
        props.put('bootstrap.servers',bootstrapServers)
        props.put('group.id', UUID.randomUUID().toString())
        props.put("enable.auto.commit", "false")
        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")
        props.put('key.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
        props.put('value.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
        def consumer = new KafkaConsumer(props)

        consumer.subscribe([topic])
        def messageToReturn = null;
        long t = System.currentTimeMillis();
        long end = t + time;
        while (System.currentTimeMillis()<end && messageToReturn == null)
        {
            log.info ( "while ")
            ConsumerRecords<String, String> records = consumer.poll(time)
            for (ConsumerRecord<String, String> record : records)
            {
                def rootNode
                try {
                    rootNode = new JsonSlurper().parseText(record.value())
                } catch(Exception e) {continue}
                String messageParamValue=parsePath(rootNode, parameter)
                if (messageParamValue == value ) {
                    log.info("Новое сообщение : "+record.value()+" время "+ new Timestamp(record.timestamp()));
                    messageToReturn= new Timestamp(record.timestamp())
                }
            }
        }
        consumer.close()
        log.info ( "close ")
        return messageToReturn
    }

appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")    
time=getKafkaLastMessageJson("topicKIS_appointment_reminder","appointmentId", appointmentId)
testRunner.testCase.testSuite.setPropertyValue("timestamp", time.toString())    
log.info time
]]></script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в f_notification_hospital_appointment" id="1bb24d9b-31ec-4fa8-99fa-57f112c12e7c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>910a4c87-9ff5-478b-a619-0a6ac668e234</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в f_notification_task" id="09c74158-d3ef-4586-8fb9-0fa056765926"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>f3530471-34f3-4c5b-b927-cea4eb11e99e</con:targetTestCase><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="42512cb0-e3f8-4c79-9838-9745403d3f1a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>50118f67-70d7-4499-9c92-948b1a00c697</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить отправку сообщения в ИСПК" id="6bb07dce-8663-4d1e-925e-abd739f30fd8"><con:description>Зайти в кибану, найти сообщение, отправленное в ИСПК по appointmentId</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>ok = true
Есть сообщение об отправке в ИСПК методом /app/events/send c request_body вида:

{"event":"{\"access_token\":\"***\",\"event_id\":\"2bb6a09d-14dc-4150-bce4-f8e2dd419022\",\"event_code\":\"EIM\",\"date_time\":1715148019133,\"to\":{\"device_guid\":\"d97cb979-e682-4d9a-9da2-2aa7eb1ce67d\"},\"data\":{\"title\":\"Напоминание о записи в КДО\",\"body\":\"Вы записаны: 333 ДЗМ 10.05.2024 в 10:40\",\"type\":\"hospitalAppointment\",\"notificationId\":198906,\"payload\":\"{\"oms\":\"963000000963\"}\"}}"}

где
device_guid = f_user_device.device_guid
data.title = f_notification.title
data.body = f_notification.description
data.type = hospitalAppointment
data.notificationId = f_notification.id
data.payload.oms = f_user.oms_number
data.payload.appointmentId = f_notification_hospital_appointment.appointmentId

</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="45b5a845-44b6-4e0f-ba14-bd124d0add3a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="413404_Получение сообщений о напоминании о записи в стационар (f_user_device: authentication = true, deleted = false, voip = Null) (в сообщении только обязательные параметры + emiasId)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать в проперти проекта данные для сообщения" id="50fb6b06-8d17-44ff-9598-2594f200c126"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("expertName",null)
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality",null)
testRunner.testCase.testSuite.setPropertyValue("procedureName",null)
testRunner.testCase.testSuite.setPropertyValue("nameMO","\"\"")
testRunner.testCase.testSuite.setPropertyValue("address","\"\"")
testRunner.testCase.testSuite.setPropertyValue("office",null)</script></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="9da84404-575b-48b3-abee-72202ec95d99"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()
patientIdKIS=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("patientIdKIS",patientIdKIS)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType","remind")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())

// Записать eventDate и eventTime = текущее время + 1 минута
Date now = new Date()
Date nowPlusOneMin = LocalDateTime.now().plusMinutes(1).toDate()
sdfD = new SimpleDateFormat("yyyy-MM-dd")
def today = sdfD.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventDate", today.toString())
sdfT = new SimpleDateFormat("HH:mm")
def time = sdfT.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventTime", time.toString())

// Подобрать пользователя с устройством
query="select fu.id, fu.patient_id, fu.oms_number, fud.device_guid from f_user fu join f_user_device fud on fud.user_id = fu.id where fud.authentication = true and fud.deleted = false and fud.voip is NULL"
response=sql.firstRow(query)
log.info response

userId = response.id.toString()
patientId = response.patient_id.toString()
omsNumber = response.oms_number
deviceGuid = response.device_guid.toString()

testRunner.testCase.testSuite.setPropertyValue("userId",userId)
testRunner.testCase.testSuite.setPropertyValue("emiasId",patientId)
testRunner.testCase.testSuite.setPropertyValue("omsNumber",omsNumber)
testRunner.testCase.testSuite.setPropertyValue("deviceGuid",deviceGuid)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="b3444fb7-c995-41c2-b15f-8aba070bc3d0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>701860e5-8c6c-44b6-a1dd-5939935ff53d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в f_notification" id="3a6f22f3-85d7-4186-9f8e-f0128d1355f7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b3ef06ac-ccb6-45d5-a3ed-6097fb32a757</con:targetTestCase><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать timastamp сообщения" id="d366c8b2-d9bb-45e1-99bb-74895a23e5d1"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import org.apache.kafka.clients.consumer. *
import java.sql.Timestamp
//import org.json.JSONObject;


def parsePath(Object node, String path){
	String[] arr = path.replace("[",".").replace("]","").split("\\.");
	Object obj=node
	for (int i = 0; i < arr.size(); i++) {
		def key = arr[i].isInteger()  ? Integer.parseInt(arr[i]) : arr[i]
		obj = obj.get(key);
	}
	return obj
}

def getKafkaLastMessageJson( String topicName, String parameter, String value, Long time=18000){
        String topic =testRunner.testCase.testSuite.project.getPropertyValue(topicName);
        String bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

        Properties props = new Properties()
        props.put('zk.connect', '10.2.172.24:2181')
        props.put('bootstrap.servers',bootstrapServers)
        props.put('group.id', UUID.randomUUID().toString())
        props.put("enable.auto.commit", "false")
        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")
        props.put('key.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
        props.put('value.deserializer', 'org.apache.kafka.common.serialization.StringDeserializer')
        def consumer = new KafkaConsumer(props)

        consumer.subscribe([topic])
        def messageToReturn = null;
        long t = System.currentTimeMillis();
        long end = t + time;
        while (System.currentTimeMillis()<end && messageToReturn == null)
        {
            log.info ( "while ")
            ConsumerRecords<String, String> records = consumer.poll(time)
            for (ConsumerRecord<String, String> record : records)
            {
                def rootNode
                try {
                    rootNode = new JsonSlurper().parseText(record.value())
                } catch(Exception e) {continue}
                String messageParamValue=parsePath(rootNode, parameter)
                if (messageParamValue == value ) {
                    log.info("Новое сообщение : "+record.value()+" время "+ new Timestamp(record.timestamp()));
                    messageToReturn= new Timestamp(record.timestamp())
                }
            }
        }
        consumer.close()
        log.info ( "close ")
        return messageToReturn
    }

appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")    
time=getKafkaLastMessageJson("topicKIS_appointment_reminder","appointmentId", appointmentId)
testRunner.testCase.testSuite.setPropertyValue("timestamp", time.toString())    
log.info time
]]></script></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в f_notification_hospital_appointment" id="d782fe07-b49c-4989-a45a-4e652ef3d5fb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>910a4c87-9ff5-478b-a619-0a6ac668e234</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить созданную запись в f_notification_task" id="cbf64c0e-16b2-4615-b3f6-4d40c78d7a0e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>f3530471-34f3-4c5b-b927-cea4eb11e99e</con:targetTestCase><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Очистить данные" id="d1ed1d20-1069-44bf-8ef5-dfa260cd881d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>50118f67-70d7-4499-9c92-948b1a00c697</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить отправку сообщения в ИСПК" id="adf08183-973b-4776-b1ff-a4e5f09aef7b"><con:description>Зайти в кибану, найти сообщение, отправленное в ИСПК по appointmentId</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>ok = true
Есть сообщение об отправке в ИСПК методом /app/events/send c request_body вида:

{"event":"{\"access_token\":\"***\",\"event_id\":\"2bb6a09d-14dc-4150-bce4-f8e2dd419022\",\"event_code\":\"EIM\",\"date_time\":1715148019133,\"to\":{\"device_guid\":\"d97cb979-e682-4d9a-9da2-2aa7eb1ce67d\"},\"data\":{\"title\":\"Напоминание о записи в КДО\",\"body\":\"Вы записаны: 333 ДЗМ 10.05.2024 в 10:40\",\"type\":\"hospitalAppointment\",\"notificationId\":198906,\"payload\":\"{\"oms\":\"963000000963\"}\"}}"}

где
device_guid = f_user_device.device_guid
data.title = f_notification.title
data.body = f_notification.description
data.type = hospitalAppointment
data.notificationId = f_notification.id
data.payload.oms = f_user.oms_number
data.payload.appointmentId = f_notification_hospital_appointment.appointmentId

</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b979c0a9-950b-4835-a59c-6c3920b735c4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="413405_eventDate + eventTime &lt; текущей даты и времени" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать в проперти сьюта текущую дату и время" id="7092f548-cc00-4239-a1e2-99d2ffc869b5"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime

Date eventDateEventTime = new Date()
sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS")
def eventDateEventTimeDBFormat = sdf.format(eventDateEventTime)
testRunner.testCase.testSuite.setPropertyValue("eventDateEventTimeDBFormat", eventDateEventTimeDBFormat);
log.info eventDateEventTimeDBFormat</script></con:config></con:testStep><con:testStep type="groovy" name="Записать в проперти проекта данные для сообщения" id="b04e1092-35a7-47a1-affc-be8a34e32b4c"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("expertName","\"Двоеглазов Александр Дмитриевич\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality","\"Окулист\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName","\"МРТ\"")
testRunner.testCase.testSuite.setPropertyValue("nameMO","\"166 ДЗМ\"")
testRunner.testCase.testSuite.setPropertyValue("address","\"ул.Папанина, д.36\"")
testRunner.testCase.testSuite.setPropertyValue("office","\"Кабинет №19\"")</script></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="0ccdc030-70a9-40df-9b1b-f8360353f1f2"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()
patientIdKIS=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("patientIdKIS",patientIdKIS)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType","remind")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())

// Записать eventDate и eventTime = текущее время - 1 минута
Date now = new Date()
Date nowPlusOneMin = LocalDateTime.now().plusMinutes(-1).toDate()
sdfD = new SimpleDateFormat("yyyy-MM-dd")
def today = sdfD.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventDate", today.toString())
sdfT = new SimpleDateFormat("HH:mm")
def time = sdfT.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventTime", time.toString())

// Подобрать пользователя с устройством
query="select fu.id, fu.patient_id, fu.oms_number, fud.device_guid from f_user fu join f_user_device fud on fud.user_id = fu.id where fud.authentication = true and fud.deleted = false and fud.voip is NULL"
response=sql.firstRow(query)
log.info response

userId = response.id.toString()
patientId = response.patient_id.toString()
omsNumber = response.oms_number
deviceGuid = response.device_guid.toString()

testRunner.testCase.testSuite.setPropertyValue("userId",userId)
testRunner.testCase.testSuite.setPropertyValue("emiasId",patientId)
testRunner.testCase.testSuite.setPropertyValue("omsNumber",omsNumber)
testRunner.testCase.testSuite.setPropertyValue("deviceGuid",deviceGuid)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="9f45b458-7858-446d-bbe1-14d96388d50a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>701860e5-8c6c-44b6-a1dd-5939935ff53d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить отсутствие записи в f_notification" id="11b06f17-fa28-4320-9142-19f0b10ab576"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1077c545-cd4c-484b-9bb1-191e6e5bada6</con:targetTestCase><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить отсутствие записи в f_notification_hospital_appointment" id="2ee3a176-7365-4198-a7e9-ae0b4e2c7175"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>9e170c54-98b6-411e-acc2-dadc8b6b6591</con:targetTestCase><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d666f09f-ae5f-4760-89ad-a80372f1b2ce" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="413406_eventDate + eventTime = текущей дате и времени" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Записать в проперти сьюта текущую дату и время" id="dd867922-2737-4aa6-bd0b-cffad466df30"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime

Date eventDateEventTime = new Date()
sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS")
def eventDateEventTimeDBFormat = sdf.format(eventDateEventTime)
testRunner.testCase.testSuite.setPropertyValue("eventDateEventTimeDBFormat", eventDateEventTimeDBFormat);
log.info eventDateEventTimeDBFormat</script></con:config></con:testStep><con:testStep type="groovy" name="Записать в проперти проекта данные для сообщения" id="61bb0176-fd38-47b9-8516-c02a6ac4866c"><con:settings/><con:config><script>testRunner.testCase.testSuite.setPropertyValue("expertName","\"Двоеглазов Александр Дмитриевич\"")
testRunner.testCase.testSuite.setPropertyValue("expertSpeciality","\"Окулист\"")
testRunner.testCase.testSuite.setPropertyValue("procedureName","\"МРТ\"")
testRunner.testCase.testSuite.setPropertyValue("nameMO","\"166 ДЗМ\"")
testRunner.testCase.testSuite.setPropertyValue("address","\"ул.Папанина, д.36\"")
testRunner.testCase.testSuite.setPropertyValue("office","\"Кабинет №19\"")</script></con:config></con:testStep><con:testStep type="groovy" name="Подобрать данные для теста" id="94643762-f273-4c49-b5fb-2661630af7bc"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()
patientIdKIS=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("patientIdKIS",patientIdKIS)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType","remind")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())

// Записать eventDate и eventTime = текущее время
Date now = new Date()
sdfD = new SimpleDateFormat("yyyy-MM-dd")
def today = sdfD.format(now)
testRunner.testCase.testSuite.setPropertyValue("eventDate", today.toString())
sdfT = new SimpleDateFormat("HH:mm")
def time = sdfT.format(now)
testRunner.testCase.testSuite.setPropertyValue("eventTime", time.toString())

// Подобрать пользователя с устройством
query="select fu.id, fu.patient_id, fu.oms_number, fud.device_guid from f_user fu join f_user_device fud on fud.user_id = fu.id where fud.authentication = true and fud.deleted = false and fud.voip is NULL"
response=sql.firstRow(query)
log.info response

userId = response.id.toString()
patientId = response.patient_id.toString()
omsNumber = response.oms_number
deviceGuid = response.device_guid.toString()

testRunner.testCase.testSuite.setPropertyValue("userId",userId)
testRunner.testCase.testSuite.setPropertyValue("emiasId",patientId)
testRunner.testCase.testSuite.setPropertyValue("omsNumber",omsNumber)
testRunner.testCase.testSuite.setPropertyValue("deviceGuid",deviceGuid)</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="a2cee180-9d10-497e-b1dc-f2d3e5533bf6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>701860e5-8c6c-44b6-a1dd-5939935ff53d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить отсутствие записи в f_notification" id="84cc5ea9-c953-43f0-9cde-242cdfa3dbd5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1077c545-cd4c-484b-9bb1-191e6e5bada6</con:targetTestCase><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="calltestcase" name="Проверить отсутствие записи в f_notification_hospital_appointment" id="70b0aa93-7e62-4b89-99eb-71ffe827d4d9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>9e170c54-98b6-411e-acc2-dadc8b6b6591</con:targetTestCase><con:properties><con:property><con:name>eventDateDescriptionFormat</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="80e8a2c8-4f1c-4f51-bd03-e1d847246e6c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="413061_АС1. Отсутствует обязательный параметр emiasId" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="07f97e8f-fdd9-4d41-88b8-7213ef27494b"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()
patientIdKIS=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("patientIdKIS",patientIdKIS)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType","remind")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())

// Записать eventDate и eventTime = текущее время + 1 минута
Date now = new Date()
Date nowPlusOneMin = LocalDateTime.now().plusMinutes(1).toDate()
sdfD = new SimpleDateFormat("yyyy-MM-dd")
def today = sdfD.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventDate", today.toString())
sdfT = new SimpleDateFormat("HH:mm")
def time = sdfT.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventTime", time.toString())

// Подобрать пользователя с устройством
query="select fu.id, fu.patient_id, fu.oms_number, fud.device_guid from f_user fu join f_user_device fud on fud.user_id = fu.id where fud.authentication = true and fud.deleted = false and fud.voip = false"
response=sql.firstRow(query)
log.info response

userId = response.id.toString()
patientId = response.patient_id.toString()
omsNumber = response.oms_number
deviceGuid = response.device_guid.toString()

testRunner.testCase.testSuite.setPropertyValue("userId",userId)
testRunner.testCase.testSuite.setPropertyValue("emiasId",patientId)
testRunner.testCase.testSuite.setPropertyValue("omsNumber",omsNumber)
testRunner.testCase.testSuite.setPropertyValue("deviceGuid",deviceGuid)</script></con:config></con:testStep><con:testStep type="groovy" name="Отправить уведомление" id="3643db25-613f-4248-88be-d092eb7a151c"><con:settings/><con:config><script>def mainScripts = new ScriptLibrary(context, testRunner, log)
tc = testRunner.testCase.testSuite.getPropertyValue("testCase")
log.info "Отправить сообщение по ТК \""+tc+"\""

// сформировать сообщение
appointmentId = testRunner.testCase.testSuite.getPropertyValue("appointmentId")
eventDate = testRunner.testCase.testSuite.getPropertyValue("eventDate")
eventTime = testRunner.testCase.testSuite.getPropertyValue("eventTime")
eventType = testRunner.testCase.testSuite.getPropertyValue("eventType")
emiasId = testRunner.testCase.testSuite.getPropertyValue("emiasId")
patientIdKIS = testRunner.testCase.testSuite.getPropertyValue("patientIdKIS")
phoneNum = testRunner.testCase.testSuite.getPropertyValue("phoneNum")
expertName = testRunner.testCase.testSuite.getPropertyValue("expertName")
expertSpeciality = testRunner.testCase.testSuite.getPropertyValue("expertSpeciality")
procedureName = testRunner.testCase.testSuite.getPropertyValue("procedureName")
office = testRunner.testCase.testSuite.getPropertyValue("office")
address = testRunner.testCase.testSuite.getPropertyValue("address")
nameMO = testRunner.testCase.testSuite.getPropertyValue("nameMO")

message="""{
    "appointmentId": \""""+appointmentId+"""\",
    "eventDate": \""""+eventDate+"""\",
    "eventTime": \""""+eventTime+"""\",
    "eventType": \""""+eventType+"""\",
    "patientId": \""""+patientIdKIS+"""\",
    "phoneNum": \""""+phoneNum+"""\",
    "resource": {
        "type": "expert",
        "expertName": """+expertName+""",
        "expertSpeciality": """+expertSpeciality+""",
        "procedureName": """+procedureName+""",
        "office": """+office+""",
        "address": """+address+""",
        "nameMO": """+nameMO+"""
    }
}
"""
//return message
//sleep(2000)
// отправить сообщение    
topicName = testRunner.testCase.testSuite.project.getPropertyValue("topicKIS_appointment_reminder")
mainScripts.kafka().sendMessageToKafka(topicName,message)


</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить лог ошибки" id="e63993e4-f99a-4a47-9b3b-eb023600b18d"><con:description>Зайти в логи кибаны соответствующего стенда модуля notification по appointmentId из пропертиз сьюта</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>error_code = PATIENT_ID_NOT_RECEIVED
error_text = Идентификатор пациента не был получен
error_type = BUSINESS
ok = false
response_status = 400</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="14796031-4f7f-4cb0-b234-222406083063" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="413062_АС2. Пользователь отсутствует в f_user" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="9008c9c1-46ea-499a-8791-7151666e6987"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()
patientIdKIS=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("patientIdKIS",patientIdKIS)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType","remind")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())

// Записать eventDate и eventTime = текущее время + 1 минута
Date now = new Date()
Date nowPlusOneMin = LocalDateTime.now().plusMinutes(1).toDate()
sdfD = new SimpleDateFormat("yyyy-MM-dd")
def today = sdfD.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventDate", today.toString())
sdfT = new SimpleDateFormat("HH:mm")
def time = sdfT.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventTime", time.toString())

// Подобрать пользователя, которого нет в f_user
query="select max(patient_id) from f_user"

response=sql.firstRow(query)

patientId = response.max +1

testRunner.testCase.testSuite.setPropertyValue("emiasId",patientId.toString())
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="fb593079-8ac8-4284-a0cc-d9fab0a97438"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>701860e5-8c6c-44b6-a1dd-5939935ff53d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить лог ошибки" id="6b40f97b-a436-4049-ad41-e39d0877f2ea"><con:description>Зайти в логи кибаны соответствующего стенда модуля notification по appointmentId из пропертиз сьюта</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>error_code = USER_NOT_FOUND
error_text =Пользователь не найден
error_type = BUSINESS
ok = false
response_status = 404</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7636b50b-5da2-45c0-b092-349dfbd37f76" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="413091_АС3. Отсутствуют устройства доступные для отправления уведомления (отсутствует запись в f_user_device)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="a344a196-ba9e-4aa8-bb50-a05e1a6ab277"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()
patientIdKIS=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("patientIdKIS",patientIdKIS)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType","remind")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())

// Записать eventDate и eventTime = текущее время + 1 минута
Date now = new Date()
Date nowPlusOneMin = LocalDateTime.now().plusMinutes(1).toDate()
sdfD = new SimpleDateFormat("yyyy-MM-dd")
def today = sdfD.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventDate", today.toString())
sdfT = new SimpleDateFormat("HH:mm")
def time = sdfT.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventTime", time.toString())

// Подобрать пользователя, у которого отсутствует запись в f_user_device
query="select patient_id from f_user fu natural left join f_user_device fud where fud.id is null"

response=sql.firstRow(query)

patientId = response.patient_id

testRunner.testCase.testSuite.setPropertyValue("emiasId",patientId.toString())
</script></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="84870328-8fd1-44f3-8f8e-713e4c717aaa"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>701860e5-8c6c-44b6-a1dd-5939935ff53d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить лог ошибки" id="55c0a990-4cdf-4b68-b7ae-a1c2ada76f4c"><con:description>Зайти в логи кибаны соответствующего стенда модуля notification по appointmentId из пропертиз сьюта</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>error_code = DEVICE_NOT_FOUND
error_text = Устройство не найдено
error_type = BUSINESS
ok = false
response_status = 404</con:expectedResult></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4b1b1888-f71a-44ce-92bf-6abb6be45546" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="413366_АС3. f_user_device: authentication = false, deleted = false, voip = false" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="3bd92abf-5323-42cd-a183-ec6ab33de792"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()
patientIdKIS=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("patientIdKIS",patientIdKIS)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType","remind")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())

// Записать eventDate и eventTime = текущее время + 1 минута
Date now = new Date()
Date nowPlusOneMin = LocalDateTime.now().plusMinutes(1).toDate()
sdfD = new SimpleDateFormat("yyyy-MM-dd")
def today = sdfD.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventDate", today.toString())
sdfT = new SimpleDateFormat("HH:mm")
def time = sdfT.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventTime", time.toString())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Найти пользователя с 1 устройством" id="33f5a90a-e176-47bf-be68-8dcced65b1c3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>85402761-c436-42bf-9e12-5f97124757b6</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать настройки" id="91098f23-d45e-4aa3-ad81-d1181027fed5"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

deviceGuid = testRunner.testCase.testSuite.getPropertyValue("deviceGuid")

query="select authentication, deleted, voip from f_user_device where device_guid = '"+deviceGuid+"' "
response=sql.firstRow(query)
log.info response

authenticationOld = response.authentication
deletedOld = response.deleted
voipOld = response.voip

testRunner.testCase.setPropertyValue("authenticationOld", authenticationOld.toString())
testRunner.testCase.setPropertyValue("deletedOld", deletedOld.toString())
testRunner.testCase.setPropertyValue("voipOld", voipOld.toString())

</script></con:config></con:testStep><con:testStep type="jdbc" name="Изменить настройки" id="ddbc23eb-9cfb-4dcb-aff6-4bea6ffd9be8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>update f_user_device fud set authentication = false, deleted = false, voip = false where fud.device_guid = '${#TestSuite#deviceGuid}'</con:query><con:assertion type="XPath Match" id="5117ef8a-298c-4b67-9519-f2e94d5186f4" name="UpdateCount = 1"><con:configuration><path>//*:Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="40488bac-d1b9-43c1-a026-d056ad949b88"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>701860e5-8c6c-44b6-a1dd-5939935ff53d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="b6743077-6ade-4f2c-a79e-96b4bb5ef81b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Вернуть настройки" id="937ccc5b-dc41-4782-b779-8ce67e5e5235"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>update f_user_device fud set authentication = '${#TestCase#authenticationOld}', deleted = '${#TestCase#deletedOld}', voip = ${#TestCase#voipOld} where fud.device_guid = '${#TestSuite#deviceGuid}'</con:query><con:assertion type="XPath Match" id="5117ef8a-298c-4b67-9519-f2e94d5186f4" name="UpdateCount = 1"><con:configuration><path>//*:Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить лог ошибки" id="6c226310-48a5-4d46-a876-101f271f7e99"><con:description>Зайти в логи кибаны соответствующего стенда модуля notification, найти лог по appointmentId из пропертиз сьюта</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>error_code = DEVICE_NOT_FOUND
error_text = Устройство не найдено
error_type = BUSINESS
ok = false
response_status = 404</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>authenticationOld</con:name><con:value>true</con:value></con:property><con:property><con:name>deletedOld</con:name><con:value>false</con:value></con:property><con:property><con:name>voipOld</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="8cf42238-2117-4121-bb66-26c926582561" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="413372_АС3. f_user_device: authentication = true, deleted = true, voip = Null" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="0e6d24e3-e631-4451-aebc-963614232c15"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()
patientIdKIS=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("patientIdKIS",patientIdKIS)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType","remind")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())

// Записать eventDate и eventTime = текущее время + 1 минута
Date now = new Date()
Date nowPlusOneMin = LocalDateTime.now().plusMinutes(1).toDate()
sdfD = new SimpleDateFormat("yyyy-MM-dd")
def today = sdfD.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventDate", today.toString())
sdfT = new SimpleDateFormat("HH:mm")
def time = sdfT.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventTime", time.toString())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Найти пользователя с 1 устройством" id="46892c22-da44-415d-87fc-8531db6e315f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>85402761-c436-42bf-9e12-5f97124757b6</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать настройки" id="7ca0a620-7471-400a-b65d-e6c7ad907a58"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

deviceGuid = testRunner.testCase.testSuite.getPropertyValue("deviceGuid")

query="select authentication, deleted, voip from f_user_device where device_guid = '"+deviceGuid+"' "
response=sql.firstRow(query)
log.info response

authenticationOld = response.authentication
deletedOld = response.deleted
voipOld = response.voip

testRunner.testCase.setPropertyValue("authenticationOld", authenticationOld.toString())
testRunner.testCase.setPropertyValue("deletedOld", deletedOld.toString())
testRunner.testCase.setPropertyValue("voipOld", voipOld.toString())

</script></con:config></con:testStep><con:testStep type="jdbc" name="Изменить настройки" id="da28b664-25c5-420a-b110-5c1b7d2d325b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>update f_user_device fud set authentication = true, deleted = true, voip = NULL where fud.device_guid = '${#TestSuite#deviceGuid}'</con:query><con:assertion type="XPath Match" id="5117ef8a-298c-4b67-9519-f2e94d5186f4" name="UpdateCount = 1"><con:configuration><path>//*:Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="da410a87-859c-453a-a0a5-7a89594448e0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>701860e5-8c6c-44b6-a1dd-5939935ff53d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="d3fa273f-9f61-4f41-a470-bc3377fbf588"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Вернуть настройки" id="f3543de6-a0f2-459d-88fc-aa60f7fc0167"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>update f_user_device fud set authentication = '${#TestCase#authenticationOld}', deleted = '${#TestCase#deletedOld}', voip = ${#TestCase#voipOld} where fud.device_guid = '${#TestSuite#deviceGuid}'</con:query><con:assertion type="XPath Match" id="5117ef8a-298c-4b67-9519-f2e94d5186f4" name="UpdateCount = 1"><con:configuration><path>//*:Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить лог ошибки" id="c7a3a8f7-a084-4458-81bf-43365f1b16af"><con:description>Зайти в логи кибаны соответствующего стенда модуля notification, найти лог по appointmentId из пропертиз сьюта</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>error_code = DEVICE_NOT_FOUND
error_text = Устройство не найдено
error_type = BUSINESS
ok = false
response_status = 404</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>authenticationOld</con:name><con:value>true</con:value></con:property><con:property><con:name>deletedOld</con:name><con:value>false</con:value></con:property><con:property><con:name>voipOld</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="d7aea167-e971-4285-b1aa-aa8af4939139" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="413393_АС3. f_user_device: authentication = true, deleted = false, voip = true" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="d1fa4235-923d-4d5f-92e4-15c9301bc92b"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()
patientIdKIS=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("patientIdKIS",patientIdKIS)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType","remind")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())

// Записать eventDate и eventTime = текущее время + 1 минута
Date now = new Date()
Date nowPlusOneMin = LocalDateTime.now().plusMinutes(1).toDate()
sdfD = new SimpleDateFormat("yyyy-MM-dd")
def today = sdfD.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventDate", today.toString())
sdfT = new SimpleDateFormat("HH:mm")
def time = sdfT.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventTime", time.toString())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Найти пользователя с 1 устройством" id="42a5b4e0-ac06-4b68-bffc-8e203e7f6c59"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>85402761-c436-42bf-9e12-5f97124757b6</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать настройки" id="82b8cfff-b2a4-40de-898a-e2f0761fe442"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

deviceGuid = testRunner.testCase.testSuite.getPropertyValue("deviceGuid")

query="select authentication, deleted, voip from f_user_device where device_guid = '"+deviceGuid+"' "
response=sql.firstRow(query)
log.info response

authenticationOld = response.authentication
deletedOld = response.deleted
voipOld = response.voip

testRunner.testCase.setPropertyValue("authenticationOld", authenticationOld.toString())
testRunner.testCase.setPropertyValue("deletedOld", deletedOld.toString())
testRunner.testCase.setPropertyValue("voipOld", voipOld.toString())

</script></con:config></con:testStep><con:testStep type="jdbc" name="Изменить настройки" id="2d58eee6-eca7-4219-9f2f-1ada9742b7b8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>update f_user_device fud set authentication = true, deleted = false, voip = true where fud.device_guid = '${#TestSuite#deviceGuid}'</con:query><con:assertion type="XPath Match" id="5117ef8a-298c-4b67-9519-f2e94d5186f4" name="UpdateCount = 1"><con:configuration><path>//*:Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="21e713d1-4c11-43c7-8b38-46df4a5901d4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>701860e5-8c6c-44b6-a1dd-5939935ff53d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="701e3dbc-cd05-4b71-9131-125d54a19479"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Вернуть настройки" id="4549ae69-6e6a-42c7-a6cd-4144c6da0492"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>update f_user_device fud set authentication = '${#TestCase#authenticationOld}', deleted = '${#TestCase#deletedOld}', voip = ${#TestCase#voipOld} where fud.device_guid = '${#TestSuite#deviceGuid}'</con:query><con:assertion type="XPath Match" id="5117ef8a-298c-4b67-9519-f2e94d5186f4" name="UpdateCount = 1"><con:configuration><path>//*:Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить лог ошибки" id="f6a10bcd-3afb-429d-93d1-242e6a5f68f5"><con:description>Зайти в логи кибаны соответствующего стенда модуля notification, найти лог по appointmentId из пропертиз сьюта</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>error_code = DEVICE_NOT_FOUND
error_text = Устройство не найдено
error_type = BUSINESS
ok = false
response_status = 404</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>authenticationOld</con:name><con:value>true</con:value></con:property><con:property><con:name>deletedOld</con:name><con:value>false</con:value></con:property><con:property><con:name>voipOld</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="d7ea062d-ab75-4874-8461-c48e303ffd23" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="413392_АС3. f_user_device: authentication = false, deleted = true, voip = true" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Подобрать данные для теста" id="eeae2ded-8d75-4f5c-8060-b4ae1163f84e"><con:settings/><con:config><script>import java.text.SimpleDateFormat
import java.time.LocalDateTime
import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

appointmentId=UUID.randomUUID().toString()
patientIdKIS=UUID.randomUUID().toString()
testRunner.testCase.testSuite.setPropertyValue("patientIdKIS",patientIdKIS)
testRunner.testCase.testSuite.setPropertyValue("appointmentId",appointmentId)
testRunner.testCase.testSuite.setPropertyValue("eventType","remind")
testRunner.testCase.testSuite.setPropertyValue("testCase",testRunner.testCase.getName())

// Записать eventDate и eventTime = текущее время + 1 минута
Date now = new Date()
Date nowPlusOneMin = LocalDateTime.now().plusMinutes(1).toDate()
sdfD = new SimpleDateFormat("yyyy-MM-dd")
def today = sdfD.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventDate", today.toString())
sdfT = new SimpleDateFormat("HH:mm")
def time = sdfT.format(nowPlusOneMin)
testRunner.testCase.testSuite.setPropertyValue("eventTime", time.toString())</script></con:config></con:testStep><con:testStep type="calltestcase" name="Найти пользователя с 1 устройством" id="c915814d-8591-47cb-9202-4b546a348f5e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>85402761-c436-42bf-9e12-5f97124757b6</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Записать настройки" id="f276cee1-8f34-42c1-b8de-a0030dcc0428"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.xml.XmlSlurper

connection =testRunner.testCase.testSuite.project.getPropertyValue("emiasInfoNotificationsFullDbConnection")
sql = Sql.newInstance(connection)

deviceGuid = testRunner.testCase.testSuite.getPropertyValue("deviceGuid")

query="select authentication, deleted, voip from f_user_device where device_guid = '"+deviceGuid+"' "
response=sql.firstRow(query)
log.info response

authenticationOld = response.authentication
deletedOld = response.deleted
voipOld = response.voip

testRunner.testCase.setPropertyValue("authenticationOld", authenticationOld.toString())
testRunner.testCase.setPropertyValue("deletedOld", deletedOld.toString())
testRunner.testCase.setPropertyValue("voipOld", voipOld.toString())

</script></con:config></con:testStep><con:testStep type="jdbc" name="Изменить настройки" id="a5bebe99-38fe-40ea-8d58-e72dd705b63f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>update f_user_device fud set authentication = false, deleted = true, voip = true where fud.device_guid = '${#TestSuite#deviceGuid}'</con:query><con:assertion type="XPath Match" id="5117ef8a-298c-4b67-9519-f2e94d5186f4" name="UpdateCount = 1"><con:configuration><path>//*:Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="calltestcase" name="Отправить уведомление" id="1b684b11-6c2d-4ebf-aa7f-51df8b643506"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>701860e5-8c6c-44b6-a1dd-5939935ff53d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="4fedea11-a112-48ad-965d-5cf1a34ffadb"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="jdbc" name="Вернуть настройки" id="4e62e38e-97c1-42db-bc42-162fb0e0ff4c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#emiasInfoNotificationsDBDriver}</con:driver><con:connectionString>${#Project#emiasInfoNotificationsFullDbConnection}</con:connectionString><con:query>update f_user_device fud set authentication = '${#TestCase#authenticationOld}', deleted = '${#TestCase#deletedOld}', voip = ${#TestCase#voipOld} where fud.device_guid = '${#TestSuite#deviceGuid}'</con:query><con:assertion type="XPath Match" id="5117ef8a-298c-4b67-9519-f2e94d5186f4" name="UpdateCount = 1"><con:configuration><path>//*:Results/UpdateCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="manualTestStep" name="Проверить лог ошибки" id="926aed28-07ab-48a0-b437-41174323a05f"><con:description>Зайти в логи кибаны соответствующего стенда модуля notification, найти лог по appointmentId из пропертиз сьюта</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>error_code = DEVICE_NOT_FOUND
error_text = Устройство не найдено
error_type = BUSINESS
ok = false
response_status = 404</con:expectedResult></con:config></con:testStep><con:properties><con:property><con:name>authenticationOld</con:name><con:value>true</con:value></con:property><con:property><con:name>deletedOld</con:name><con:value>false</con:value></con:property><con:property><con:name>voipOld</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>appointmentId</con:name><con:value>b6df93b7-1435-4314-a3c5-709a5c1ad5c6</con:value></con:property><con:property><con:name>emiasId</con:name><con:value>17623504</con:value></con:property><con:property><con:name>phoneNum</con:name><con:value>79605388865</con:value></con:property><con:property><con:name>type</con:name><con:value>device</con:value></con:property><con:property><con:name>eventType</con:name><con:value>remind</con:value></con:property><con:property><con:name>eventDate</con:name><con:value>2024-05-14</con:value></con:property><con:property><con:name>eventTime</con:name><con:value>08:49</con:value></con:property><con:property><con:name>expertSpeciality</con:name><con:value>"Окулист"</con:value></con:property><con:property><con:name>expertName</con:name><con:value>"Двоеглазов Александр Дмитриевич"</con:value></con:property><con:property><con:name>procedureName</con:name><con:value>"МРТ"</con:value></con:property><con:property><con:name>office</con:name><con:value>"Кабинет №19"</con:value></con:property><con:property><con:name>address</con:name><con:value>"ул.Папанина, д.36"</con:value></con:property><con:property><con:name>nameMO</con:name><con:value>"166 ДЗМ"</con:value></con:property><con:property><con:name>testCase</con:name><con:value>413392_АС3. f_user_device: authentication = false, deleted = true, voip = true</con:value></con:property><con:property><con:name>userId</con:name><con:value>3</con:value></con:property><con:property><con:name>omsNumber</con:name><con:value>7749210891003531</con:value></con:property><con:property><con:name>deviceGuid</con:name><con:value>a4ab53aa-22fa-41b1-8903-66167030e331</con:value></con:property><con:property><con:name>patientIdKIS</con:name><con:value>36a90841-166a-46de-9ce3-e7e320c962e0</con:value></con:property><con:property><con:name>title</con:name><con:value>Напоминание о записи в КДО</con:value></con:property><con:property><con:name>eventDateDescriptionFormat</con:name><con:value>14.05.2024</con:value></con:property><con:property><con:name>notificationId</con:name><con:value>199245</con:value></con:property><con:property><con:name>eventDateEventTime</con:name><con:value/></con:property><con:property><con:name>eventDateEventTimeDBFormat</con:name><con:value>2024-05-14 08:41:12.388</con:value></con:property><con:property><con:name>authenticationOld</con:name><con:value>true</con:value></con:property><con:property><con:name>deletedOld</con:name><con:value>false</con:value></con:property><con:property><con:name>voipOld</con:name><con:value>null</con:value></con:property><con:property><con:name>timestamp</con:name><con:value>2024-05-14 08:37:47.577</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>emiasInfoNotificationsEndpoint</con:name><con:value>http://notification-emiasinfo2.emias.solit-clouds.ru</con:value></con:property><con:property><con:name>emiasInfoNotificationsDbConnection</con:name><con:value>172.17.5.11:29216/notification</con:value></con:property><con:property><con:name>emiasInfoNotificationsDbLogin</con:name><con:value>notification</con:value></con:property><con:property><con:name>emiasInfoNotificationsDbPassword</con:name><con:value>notification</con:value></con:property><con:property><con:name>emiasInfoNotificationsFullDbConnection</con:name><con:value>jdbc:postgresql://172.17.5.11:29216/notification?user=notification&amp;password=notification</con:value></con:property><con:property><con:name>emiasInfoNotificationsDBDriver</con:name><con:value>org.postgresql.Driver</con:value></con:property><con:property><con:name>topicAppointment2Bm</con:name><con:value>Appointment2Bm.EMIASINFO_SOLIT_TEST_2</con:value></con:property><con:property><con:name>topicAppointment2Doctor</con:name><con:value>Appointment2Doctor.EMIASINFO_SOLIT_TEST_2</con:value></con:property><con:property><con:name>topicAppointment2Ldp</con:name><con:value>Appointment2Ldp.EMIASINFO_SOLIT_TEST_2</con:value></con:property><con:property><con:name>topicBookingRecipeInfoMessage</con:name><con:value>BookingRecipeInfoMessage.EMIASINFO_SOLIT_TEST_2</con:value></con:property><con:property><con:name>topicMedicationAssignmentChangesPerDay</con:name><con:value>MedicationAssignmentChangesPerDay.EMIASINFO_SOLIT_TEST_2</con:value></con:property><con:property><con:name>topicKisNazToEmiasPublication</con:name><con:value>kisNazToEmiasPublication.EMIASINFO_SOLIT_TEST_2</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>sendRequestPath</con:name><con:value>"/app/events/send"</con:value></con:property><con:property><con:name>topicTmkNotify</con:name><con:value>tmkNotify.EMIASINFO_SOLIT_TEST_2</con:value></con:property><con:property><con:name>emiasInfoEndpoint</con:name><con:value>http://application-emiasinfo2.emias.solit-clouds.ru</con:value></con:property><con:property><con:name>emiasInfoDbConnection</con:name><con:value>172.17.5.11:29103/emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoDbLogin</con:name><con:value>emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoDbPassword</con:name><con:value>emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoFullDbConnection</con:name><con:value>jdbc:postgresql://172.17.5.11:29103/emiasinfoapp?user=emiasinfoapp&amp;password=emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoDBDriver</con:name><con:value>org.postgresql.Driver</con:value></con:property><con:property><con:name>env</con:name><con:value>solit2</con:value></con:property><con:property><con:name>topicKIS_appointment_reminder</con:name><con:value>KIS_appointment_reminder.EMIASINFO_SOLIT_TEST_2</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>