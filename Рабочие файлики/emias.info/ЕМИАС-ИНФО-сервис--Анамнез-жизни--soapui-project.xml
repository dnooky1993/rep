<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="4b39f07f-3479-4ca6-922c-9723d55e0196" activeEnvironment="Default" name="ЕМИАС.ИНФО сервис &quot;Анамнез жизни&quot;" resourceRoot="${projectDir}" soapui-version="5.7.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="22918af0-305d-46fb-b12b-a0f496e67ef1" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://lkservice.test.emias.mos.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint></con:endpoints><con:resource name="life-anamnesis" path="/api/3/forms/life-anamnesis" id="b778e4e7-1d0f-4916-802a-c693a5856d09"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value>8d075820-b3cb-4fbe-9666-3106776652d2</con:value><con:style>QUERY</con:style><con:default>8d075820-b3cb-4fbe-9666-3106776652d2</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value><con:style>HEADER</con:style><con:default>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getLifeAnamnesisLK" id="454af864-3d22-4f7f-b4da-28c6b01011e2" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:life="https://lkservice.test.emias.mos.ru/api/3/forms/life-anamnesis">life:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:life="https://lkservice.test.emias.mos.ru/api/3/forms/life-anamnesis">life:Response</con:element></con:representation><con:request name="Request 1" id="a3d9f39d-4938-4b5e-80b0-248fafafbea9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/forms/life-anamnesis</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value=""/>
  <con:entry key="ehrId" value=""/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:request></con:method><con:method name="postLifeAnamnesisLK" id="5d26541e-55cc-4443-ad72-c1a4e31ca641" method="POST"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:life="https://lkservice.test.emias.mos.ru/api/3/forms/life-anamnesis">life:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="150b8189-685f-4e44-9355-5992c8b7eefa" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/forms/life-anamnesis</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="X-Access-JWT" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="child-allergy-history" path="/api/2/forms/history/version/child-allergy-history" id="6c8a2c5f-558d-4046-9c9d-c0ac82f7858d"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>documentId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="c03ad735-8631-4fba-a9b8-2701d1a4b1f3" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:chil="https://lkservice.test.emias.mos.ru/api/2/forms/history/version/child-allergy-history">chil:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:chil="https://lkservice.test.emias.mos.ru/api/2/forms/history/version/child-allergy-history">chil:Response</con:element></con:representation><con:request name="Request 1" id="4040f217-c195-46bc-87f7-f3eb55bfcdd2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/2/forms/history/version/child-allergy-history</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NjkxOTE1ODMsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiIyYWVhZWM5NC00Mzg5LTQzOWQtOWM2Yi0yNjczZmQ0M2JjOGEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiQ0NoQ0JXV29jeTBjV2IrQkt5SWNJekNmRDZ6eG1tZlcxYzY5aTdiakw5dUx3NEZHSXp6Zmoxc1VnbHZFbzlBR3BpbDExZlJBYmx2eXFMOW9mSlVaclIxUEx0NXNKbEdacUxMZFNncmc4bjVWV0hJS01pRkVwd3NSekRUZVpZMVpZZHVDYUpFOGw1Ryt1aDJHNUdITFpvMUY1OUZhdUE2WmVaRkRMYU11b0tOYkI4SGw1a215Wk9zTkdRODc0eHhLSUNqZ1NkaUhTcVROd09vZTdzVTNrYk1UNlJTMWRTV1UxUWRIaUFCOUVtNDdWRThBaWROZHlCZEN5eHZ2cU1wSGIraTBObnZGc0NaZVVKNXk2VHNia0EvOXIwL29panJhd0pBVlVRSnBTY0J1eUJNUXBKWUpxNjdud2wvckorS2crVUVJeFl2QlhWWEQ2Q1kwTHdZRFh3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.ryrbNeWqxeBD3I8opD0QGi27T7pPugVONWAJiN1xriaLZdxrAFFUkgIz9o5DCuZFsZpuBwfB80zgskALL6GofYgt9M9itNRoHj1wcBXZhf_srFOv5jD0K1hJZx2kfEQCtZqAuT-swLiknXTUPElj_y1CP2OO9mLfBJK6B4CVE3Chvq1vTH_x1GP_5DiTUrvNVJLgme8pFuSLh8U3Pz7PKQluW3IiDSLiKW0fRh883uXyNRHggBWXR4fmVKw2t2Uv3qXkpqonTR1e4lIIYuEc0KyyV7unec8PKUHgbxjjtCidjqpO74DxxZuWsEI4Bt3l8FwWKp4pLiugjeiZwN0ClLj9vmFWaNmwwmlOibqENGwDo6R63M6a5OeKe_wW3-P4_EjY0HYa5bl9QN5b7TpiNktRk0bZLqE-5ghks1336JhQUxL8H2pxv-CsGMaFALObTwUX5r4DbgM3yysvZxKlT8_XlTfIzAMPaBbBdOohOxtat-IstSay5i6R59V0JxXEDx2omQz4Dtv6wWgudOGFUHgvJ8ecJWtk2SDzZz9HcsI7fCX7X5532YkXnTlhXwOtaJ0pQg422AS8GworbC3LnOFILEFS5a6cVqQcXV0l8EHNi232ki1VxGYd0-sDmxOUN2cFdsyqp-_uCjhdFiHBGzRBnod3OhQaYsRd8wOAG1U"/>
  <con:entry key="documentId" value="17c5141b-9a66-4d85-8c9a-ef69a3f58b58"/>
  <con:entry key="ehrId" value="528f55f6-7b47-4faa-9454-613cad09eb64"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>documentId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="life-anamnesis" path="/api/4/forms/life-anamnesis" id="38756abe-1263-4434-9b90-89d474211e2f"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getLifeAnamnesis" id="7e49d0ab-a6a4-4d57-9d88-8fe0bd4638af" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 404 400</con:status><con:params/><con:element xmlns:life="https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis">life:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:life="https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis">life:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:request></con:method><con:method name="postLifeAnamnesis" id="ec249bbe-1a8c-4f53-8a56-8d5ae6a0d321" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>404 401</con:status><con:params/><con:element xmlns:life="https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis">life:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:life="https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis">life:Response</con:element></con:representation><con:request name="Request 1" id="63b2de8d-8976-4e0b-901f-d1d3d36ebc46" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value=""/>
  <con:entry key="ehrId" value=""/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="child-allergy-history" path="/api/1/forms/child-allergy-history" id="bef10aa3-795a-4282-b977-360ea31688e5"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="721addfd-ab73-4226-944f-938b698ac5e6" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:chil="https://lkservice.test.emias.mos.ru/api/1/forms/child-allergy-history">chil:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>406 404 401 400</con:status><con:params/><con:element xmlns:chil="https://lkservice.test.emias.mos.ru/api/1/forms/child-allergy-history">chil:Fault</con:element></con:representation><con:request name="Request 1" id="3c02513f-fe08-4b42-a638-052f973df9be" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/1/forms/child-allergy-history</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="login" path="/api/auth/1/login" id="6eb9bc9f-5beb-407d-960b-5f285adf2e4f"><con:settings/><con:parameters/><con:method name="Method 1" id="9ad0a5ec-4347-4b96-81f3-40beee932050" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="https://lkservice.test.emias.mos.ru/api/auth/1/login">log:Response</con:element></con:representation><con:request name="Request 1" id="3b40c73f-e9cf-4762-8875-d5f43b1bb979" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="confirm" path="/api/auth/1/confirm" id="b8c5e4d0-3e4b-40cb-b5ec-6de311c51097"><con:settings/><con:parameters/><con:method name="Method 1" id="cbc1e345-d29d-4808-9b0a-2ca88ff5776d" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:con1="https://lkservice.test.emias.mos.ru/api/auth/1/confirm">con1:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="f65b6804-8e6e-4dfc-8069-8dee18b5bd0b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
    "otp_code": "19674",
    "attempt_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6IjJlOGFmN2Q5LWQ2MDYtNDg0Yi04MGNhLWIzNGI0YTA4NTFlZCIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY2OTE5MTcyNSwic3ViIjoiYmI1ZWI4NTgtZWY3Ni00Mjk1LTk4NTktYzlkNmEyNTFiMzUwIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiWllNSnRkdmVQbUVxUlViYUkyYko0dW5TWURHMU13aGNXYUVhNlNjUnIyNlBQTE1lMmovbUtpZitEZHR6TVkvV1BCaGZHUjJGT3NEeklUSVJ6bHZJcllzYnpwT3RQOGl4S2hPa3FDVGduRForenZUSk1MZHhjRjk5bUtubjBaTFNCNmNZSVNtWkM3cmZ6ZzBBWjNJZ2lDRFpGTTMrbGU4cm5QUUF4d1ZwcjRVL1h2Rml5SWx2ZThoVUZEb3JQQnliMnc5eDFVRnZwQjE3MElvQklLZkgyL0RXSkpiWElyMk9UYkZyRHhpR2NYbnNQMm1TSkhrbTNMWCtYNWhmRk0yT1QwMWlOdFBGUHJrVlVrU0hhTUxCV0Jyd3FaNDZpQ0VkaEtlNFRMMmp1dTdzbDFuZkEvOHhyTnVZTkZ6V0hJQzQ5UWJ6V2Rjajh4WXMzMlovcjZVZUZRPT0ifQ.ou49QvDA-tc6M7MhUND0-5nVMnxKqs4eoKrFSmRa9_RlQxdQOnDpyqybo-jjeC4NpUR-wgHF0UDDIz0ss_51DTMoNqpr6oLWOqv4cIUCzmXCDyAuENPhqxKDKw9JzNMiL3mDjDgi7W1M6cuuvHaXCyGMu3r6nSJ_ZeBJWvnJlZ_EpTqzQp7CzQ-My6fvF6CpJ839e1lgC3GwEbsc5Vqr-_ywkjDPx62NJOM6iY_CthFroKkZrXlc6oTV5gJ2a1IDtB6JQ9YWCIsPc4-Dg2jihC4tdC7YgRlAivWpGrLd-mpNc70AdJjS8HF0rjPrMwbtfsuWGnwUy2Ung0HdgPEHwX0JD17GYPJy4V7p5TtGHiFsjvMzEQH-rNuGlLEyPL1be1V5MarnvJlAeCqSF26r0q3uTbPtWGqHD0miv4rt5G85jt41eZFS3YEN3zpfbh9PiH5Xf4zGqp3BLVad9WuyIoFnrezZ5cTKPWtUOmIZej1Uni0uRZNpps54O-XNDBziTrqh3-6H_slfoWAqmWDiHxwxslF-rOtujGJ5bTofRs0QoUYLEDMVZP8JLDfMKSsdrm_v87RJDEvvyx9sOn6b09VJm_g3IMaewol_r4m0yWASLMg210spfaI-AMiqqAqRpiNPLBf3AU_vTD6QLFVuocTCwNgMdy02VdBHCA7J-QM"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="login" path="/api/auth/1/login" id="05c199aa-9cc1-4e80-9a15-4356c2f878eb"><con:settings/><con:parameters/><con:method name="Method 1" id="b8ba9406-e41a-4b65-8edd-c846294023a5" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="f89cabb1-cb6e-4a7d-8289-d21a2101014f" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="instance" path="/api/2/mobile/auth/instance" id="c1a352c1-6389-4e37-8e77-6de7bebfb956"><con:settings/><con:parameters/><con:method name="Method 1" id="59813977-5708-45b5-ba25-683298a75219" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>520</con:status><con:params/><con:element xmlns:ins="https://lkservice.test.emias.mos.ru/api/2/mobile/auth/instance">ins:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ins="https://lkservice.test.emias.mos.ru/api/2/mobile/auth/instance">ins:Response</con:element></con:representation><con:request name="Request 1" id="e57c6a8f-3d81-419a-ae11-5b2ec205faee" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request>{
  "instanceToken": "${#TestCase#client_id}",
  "sudirToken": "${#Project#sudirToken}"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="confirm-instance" path="/api/2/mobile/auth/confirm-instance" id="8e9b6d5c-436e-4d2d-afb8-94181edd348b"><con:settings/><con:parameters/><con:method name="Method 1" id="d5fe1b9d-93e7-4cfb-957c-59016185edf8" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>520</con:status><con:params/><con:element xmlns:con1="https://lkservice.test.emias.mos.ru./api/2/mobile/auth/confirm-instance">con1:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:con1="https://lkservice.test.emias.mos.ru./api/2/mobile/auth/confirm-instance">con1:Response</con:element></con:representation><con:request name="Request 1" id="655e81d6-5413-438f-b588-a3d4889c513b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request>{
    "otpCode": "${#TestCase#x-otp}",
    "attemptToken": "${#TestCase#attempt_token}"
 }</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="profile" path="/api/2/profile" id="afbcc725-6b66-41ad-b505-f95556cf7268"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="e36d80e8-a949-41b3-ae9d-0482ac1bff97" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:emc="https://lkservice.test.emias.mos.ru./api/internal/3/emc-permissions">emc:Response</con:element></con:representation><con:request name="Request 1" id="e36e62ba-58eb-4876-ab32-cdf48a1da198" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="emc-permissions" path="/api/internal/3/emc-permissions" id="1bf91402-d2db-4cb2-bfa9-112ae67c5dab"><con:settings/><con:parameters><con:parameter><con:name>ssoId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="39a54c38-ad6d-41ca-95b0-a0a8875558be" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:emc="https://lkservice.test.emias.mos.ru/api/internal/3/emc-permissions">emc:Response</con:element></con:representation><con:request name="Request 1" id="03c8f988-0eb2-4772-a286-7a0e1d7ceb83" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>ssoId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="grant-permission" path="/api/internal/1/user/grant-permission" id="11961280-c2ca-4018-889c-0ac74bb159a5"><con:settings/><con:parameters/><con:method name="Method 1" id="ca3f60a3-b624-499e-ae8c-90ded96db5a1" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="8a7fb58e-0973-4b3f-be4f-b719d73b549c" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="life-anamnesis" path="/api/4/forms/life-anamnesis" id="d5f63d66-d9ab-4289-8537-5c37f796d4fe"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getLifeAnamnesis" id="d8db541e-682e-44a9-ab0d-702768706381" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="1aec7af6-d4a9-4388-bb24-7362f4e494cc" mediaType="application/json"><con:settings/><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:request></con:method><con:method name="postLifeAnamnesis" id="a70a08e9-1f33-4a57-8fb7-a52c123070f3" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="b9ba3d8c-7dd0-46d5-8c55-d04ed33dc8c9" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="5ba0afac-7cdb-4db8-8d92-5addd1399a03" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://emiasinfo1.emias.solit-clouds.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint></con:endpoints><con:resource name="lifeAnamnesis" path="/api/v2/anamnesis/lifeAnamnesis" id="3c401735-ee01-4b1a-92bd-93b98ff34fc7"><con:settings/><con:parameters/><con:method name="postLifeAnamnesis" id="a628be8f-b0c9-4b75-b8bf-855fe7229640" method="POST"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:lif="http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis">lif:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>403 400 401 500</con:status><con:params/><con:element xmlns:lif="http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis">lif:Fault</con:element></con:representation><con:request name="Request 1" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value=""/>
  <con:entry key="ehrId" value=""/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:request></con:method><con:method name="getLifeAnamnesis" id="7c139b20-f434-466d-a9dd-932da2879e3e" method="GET"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:lif="http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis">lif:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:lif="http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis">lif:Fault</con:element></con:representation><con:request name="Request 1" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="lifeAnamnesisKind" path="/api/v2/anamnesis/lifeAnamnesisKind" id="694648c1-1c0e-4f7c-a1fb-a3cf5e95f2bd"><con:settings/><con:parameters/><con:method name="Method 1" id="182e1483-00bc-4071-8e00-efe31375846d" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:lif="http://emiasinfo-application.test.emias.mos.ru/api/v2/anamnesis/lifeAnamnesisKind">lif:Response</con:element></con:representation><con:request name="Request 1" id="b3eb9f06-bfa9-4e04-9edb-f29df9ebf105" mediaType="application/json"><con:settings/><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="lifeAnamnesisKind" path="/api/v3/anamnesis/lifeAnamnesisKind" id="246d58ec-ac4c-4cd1-97ea-0ef71ace223c"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>EI-Token</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="4ce03d64-bd53-4894-8b07-5adc23aac911" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:lif="http://emiasinfo1.emias.solit-clouds.ru/api/v3/anamnesis/lifeAnamnesisKind">lif:Response</con:element></con:representation><con:request name="Request 1" id="b3afffce-2dac-441c-a46f-3bb15b7c2df6" mediaType="application/json"><con:settings/><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="lifeAnamnesis" path="/api/v3/anamnesis/lifeAnamnesis" id="de7a5996-f81c-4aae-8436-9df8b2d01d25"><con:settings/><con:parameters/><con:method name="getLifeAnamnesis" id="e612b038-a863-4c10-84d3-c9b793e2dc9a" method="GET"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>EI-Token</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:lif="http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis">lif:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 400</con:status><con:params/><con:element xmlns:lif="http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis">lif:Fault</con:element></con:representation><con:request name="Request 1" id="552fa171-40ad-440f-b811-27b64a8e3e79" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:request></con:method><con:method name="postLifeAnamnesis" id="78d7ba65-827e-45d4-8469-faad58e4b43c" method="POST"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>EI-Token</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500 400</con:status><con:params/><con:element xmlns:lif="http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis">lif:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:lif="http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis">lif:Response</con:element></con:representation><con:request name="Request 1" id="4a73b9f6-7c64-4ffd-87dc-845c7a3f1839" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="a599dbb0-95bf-4302-bc49-d8f2a63ad04d" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://login-tech.mos.ru" type="rest" basePath="" definitionUrl="C:\Users\knaumov\Documents\_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://login-tech.mos.ru</con:endpoint></con:endpoints><con:resource name="register" path="sps/oauth/register" id="71821670-df86-401a-8bf0-246e2d8782a4"><con:settings/><con:parameters/><con:method name="Method 1" id="3d8130c2-b14c-4dea-97cf-2c4bb8ef1981" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="e90e8b57-0109-48fc-bc1d-0e887fa7484f" mediaType="application/json"><con:settings/><con:endpoint>https://login-tech.mos.ru</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="te" path="sps/oauth/te" id="1886f1e9-383a-4508-ac3f-62a12cc89d52"><con:settings/><con:parameters><con:parameter><con:name>code</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>redirect_uri</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>grant_type</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>refresh_token</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" id="38e40deb-b3c5-4d45-8874-2fcc1d7e78b0" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="91988a39-2adb-4f66-970c-08c9cc1e5cac" mediaType="application/x-www-form-urlencoded"><con:settings/><con:endpoint>https://login-tech.mos.ru</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="refresh_token" value=""/>
  <con:entry key="grant_type" value=""/>
</con:parameters><con:parameterOrder><con:entry>code</con:entry><con:entry>redirect_uri</con:entry><con:entry>grant_type</con:entry><con:entry>refresh_token</con:entry></con:parameterOrder></con:request></con:method><con:method name="Обновить токен" id="f8178146-4f9f-4a5d-9143-210a37d6c00a" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="c566d786-848a-4c2d-b497-d642cea7d48d" mediaType="application/json"><con:settings/><con:endpoint>https://login-tech.mos.ru</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="me" path="sps/oauth/me" id="a5bef18f-dfa7-4ffe-9b2e-00cfea87cbab"><con:settings/><con:parameters><con:parameter><con:name>Cache-control</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" id="b7ede3ff-872e-420c-88ca-33955684b089" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="4cd6c06a-bf06-4af7-8484-7193a0fa4ffe" mediaType="application/json"><con:settings/><con:endpoint>https://login-tech.mos.ru</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="refresh_te" path="/sps/oauth/te" id="15dd8061-92f6-481c-9ce5-7b58d8902ba3"><con:settings/><con:parameters><con:parameter><con:name>refresh_token</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>grant_type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Обновить токен" id="39a00070-42ed-4288-a698-e6f47975988b" method="GET"><con:settings/><con:parameters/><con:request name="Обновить токен" id="a0093c55-f22f-4474-9832-71a9e5bc0667" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>refresh_token</con:entry><con:entry>grant_type</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="0a56f882-5082-4ccd-8f82-68e9fb80f8c2" name="post/getLifeAnamnesis" disabled="true"><con:description>TestSuite generated for REST Service [http://emiasinfo-application.test.emias.mos.ru]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="20e16df9-b0fa-43d6-b36e-40c7c82ee780" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение токена X-Access-JWT" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Авторизация ЛК (мужчина)" id="eb601054-5f6f-4608-b348-15fa7d6eef02"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Авторизация ЛК (мужчина)" id="3b40c73f-e9cf-4762-8875-d5f43b1bb979" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "yar.promo.zapov.a@gmail.com"
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/login</con:originalUri><con:assertion type="Simple NotContains" id="2b30274b-96a2-4696-981c-a6342eba3ef7" name="Not Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="5812c462-9482-4e8d-b95f-4ad1d19e6230" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Перенос старого токена для получения нового (муж)" id="289d7cf6-b9ae-42be-add5-f24e31efed4f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>attempt_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Авторизация ЛК (мужчина)</con:sourceStep><con:sourcePath>$.attempt_token</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Получение нового токена (мужчина)</con:targetStep><con:targetPath>$.attempt_token</con:targetPath><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Получение нового токена (мужчина)" id="ecd52973-330f-4845-a586-802103d8cf68"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение нового токена (мужчина)" id="f65b6804-8e6e-4dfc-8069-8dee18b5bd0b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{"otp_code":"19674","attempt_token":"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImQ5MGM4MjhjLTU2MGMtNGI4My04YzQ5LTA3ZmU5NDI4MjAxNCIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY4MjU4NDAyNiwic3ViIjoiYmI1ZWI4NTgtZWY3Ni00Mjk1LTk4NTktYzlkNmEyNTFiMzUwIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiWjlvaTZPam5oNXI1OFlST3RPbUxJQ0pTQm9qd2NJcXpkYjUvWnp0eDJ5TEh4WTJRN2s0VVBUSXE0MUcyRnE1V096WEgvWjluOGw4cnlnMDF6MWNNNmVuaFY1ajFEa2M1dDYvUmJQcmFtTW91bnFvNWRkenZremxBTTJsUWJjQ3NPblJmWSt3UkpmRExmbDVaczFQMXBsaGlhdkRTK1ZKYVNHMWRTSnBOQzRBMUUzbTVpRGV4UDFOTlVFNFp6dDU0WVRGY0xST2tZMnNJZktXdUM3OHR1SDJTT1JhVmc4bTAyd1hhZ2FkYXFtdVEyUlVuZzNTaFpscHFhTFhBenYxTElCMFhPT0NMZTZwd0s5QjFya0djRWZiZW9NOVJ5V2s0VkJqS01TYXdMejBvYTZGVFBIWFBEZ3NFZDJWZlpxTXBNSTMxVGVxdXdDVjhOMWlVT0h0YWlBPT0ifQ.SYdLdN228anHihcSIIqhLnEufcBAEILh3u5rVEHI4a9gtRXw_k64ubuzMT_tCxHDmJfw41ZpIBQ09abfXmMVmjIK6XiPMOlDOVavqKZK7Jr5I-jmsAgPVhtJ1WKhQORXdRzpB_E49S2yTDHFlww6bRQ_ocKq_F-Pk5khewOR4bZ2licHdu5-soEEM60kGW4DG0JYRJvIvwcO12uTUL4HbCP1YSKd8GqbARjmqmwLzWpKmvtIbFAGc-wgujyuzhCUva96r1iXrmAkmO-K4ucX-ze284WYtlsmzL5jRqeLPcLivQWXDU1dkYVEf9LuXwa5UhUMriHj6Xm-n0L9tc0LYd_78cjl2H2uFY-AraEaS2IaR8lonKXzq-1KYoB0j7EpnrDrv1vEJbrKyTQdXB1w0K0gt6RCti4a99JWo6hTsgbxcJ9scfQStbLk-BsJYOe0zssWQesW07yCtyAPIlo2E7E3QG713ba9ankjQkC_74h-hNI14ou5x9cGKnbvCPgbSKZrMFshDlWiudEgdMf7BxYph_8e0JjNj4IN0JAD6s0l0jnVy3C1a0DpbAfgqzwxqxr-Axe8qzyOZb7xfpQ56NREAOavgHOwl1PLpjiWX-er2AJBrLPElsrB6MyaX-OM_2xPNOqNHFfSdt3K9MUraPTrk4x16fp7SRPthX2B2VY"}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:assertion type="Simple NotContains" id="f09cbe04-2ac8-441c-a1b2-4a345efa8cad" name="Not Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="673b543a-ea94-401b-a0c2-0ea219173a26" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Перенос нового токена в пропертиc (муж)" id="a3707a8b-822a-4e68-a7f2-a16aadb68bf0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>X-Access-JWT</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение нового токена (мужчина)</con:sourceStep><con:sourcePath>$.access_token</con:sourcePath><con:targetType>X-Access-JWT-man</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>XQUERY</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Авторизация ЛК (женщина)" id="73fab81a-c7e0-43e8-b918-0f224d276414"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Авторизация ЛК (женщина)" id="3b40c73f-e9cf-4762-8875-d5f43b1bb979" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "zaycevatania@gmail.com"
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/login</con:originalUri><con:assertion type="Simple NotContains" id="2bf48ca1-ee62-4278-b1c3-bc750ad7d46e" name="Not Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="0fa4f6b8-bbea-43ff-9ab4-f767ee80a61e" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Перенос старого токена для получения нового (жен)" id="5fdc63ed-6f85-4ea6-aec6-f5dbdb47a1c9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>attempt_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Авторизация ЛК (женщина)</con:sourceStep><con:sourcePath>$.attempt_token</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Получение нового токена (женщина)</con:targetStep><con:targetPath>$.attempt_token</con:targetPath><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Получение нового токена (женщина)" id="c3945bc1-3083-4ed4-821c-9f6f0ee3fb8e"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение нового токена (женщина)" id="f65b6804-8e6e-4dfc-8069-8dee18b5bd0b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{"otp_code":"19674","attempt_token":"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRjYmNmNzYwLTgxODUtNDM1My05Mzg2LTMxMWIwZTQxNzFmMiIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY4MjU4NDAyOCwic3ViIjoiMmZhZmJhNjYtOTk3OC00ZDQyLWIxNzMtMTI3NDhlNThkN2ZiIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiSkhSQkNhd0ljNmNUejRZT0NScjNyMG9mVCt6bjl4YWYrTmhpMlE0eGpIZmVyaFZ4WlNsYkpnOXJEeTNVNVBLSjRyYzRUVm9lcS8rVTR1RURTcVI4SXpMVFdMemZaQThMUUFERXVuQ2hMelNIRG1oNnE2UHpYQ2MvN1REb0pEOTBWckt6djBVVXJWRDBRVEJDdTN4MzYwVDR4UEVBbEc4RUEzVXJVUmlwbmFKSkRlQ3VUNHV5UndlWVE3OGVFUkl2aGowUFdWY1lLdC9Qb2pVN0ZlOEFLRndqVWZCeVRyZFFUaGtWaWhCRUdpS3pxS3FsZWx3MjZWMXhWTHU3ejRPSjcrejFsT2s4S3lnT0tFSnp0Tm9tQ0RDSzZka3BjMTNUdUIwVnkvQnhWOFFxOUtlbU1tOE5FYlVRcXpUU1ltaEc3K3AzTEp3c1UwdStmRU1BNU9sK0V3PT0ifQ.ZWJaJRjx-e_O1HbUU9T7BajNXhbtWU4O2gxM8uA_N95XKw5zO5pH8pdbIOAbgR1YRR_emj1E-WBPzSMF3eAV2FoWUa5XJjE5sdzav0UK0NIIm9jHrJ__sSsHuyXfl_gW7ENwsWOvcQFvfmQLHyrhLcHqfnVshnaFf6GhJYQWESiokbYdynfX6gGriHDg5JEV3p0EONRmqFXGuByInMAG6gFncrGEwP3q7qd4M53cT5VZsXux5kroRzboOJc-Cv4vf_k7u-4rnw-YJT_IubcfKQsSAGOOEiGyNKAz9oah92TMiYkg6t7TMF_NHncjgnOoexv3BXzzGQDG7XJT8QUCgyw2NoSEYQHYCLUrqrxH4Yp8fNbNkY1x9ZnqGSW7sDUQgrU95H_UYh2Df7JzvRBdN8BDJAD5qrcQsqs9NqdGKA9n-XOzUPDPc7k4kspg8NdhQvUno71Ay6oihEGZQ7ZruqMs6G_8iY6DCYfA5YrPk6SOE1DVkQreujfeilJUS4g9AKbvPVkjfMsttTaygtB5dspMDDmJWv-71RTUj71yE7S8smCqtKMyOUqaVHXVluEZYkXOTqPNm-Y1LrsT2Iuf7IgCAwtDd8k0Nsheo7GAvudFndulbs6PfPCSh-aPowNdeQeef2NqSU5N6_N0bCS3ZYUmVp4DAHXN9ZKNRrbxC0o"}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:assertion type="Simple NotContains" id="de072bd1-e3a9-4a68-b53a-4f4666b5e509" name="Not Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="5f229393-b085-4f4c-af9f-34e6e9ba2bae" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Перенос нового токена в пропертиc (жен)" id="cea4ef18-4df4-4363-b32c-fe4e6bcdf830"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>X-Access-JWT</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение нового токена (женщина)</con:sourceStep><con:sourcePath>$.access_token</con:sourcePath><con:targetType>X-Access-JWT-woman</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>XQUERY</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="eaea76c7-19c4-4f1e-977e-043d69d4df88" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Есть все виды аллергии" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="d0ebacb8-df12-4ecd-b741-71cc1707acaa"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="cd77c212-5e9f-40bb-bbfa-bb639366fc01"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"obstetricHistoryAnamnesis": {},
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {},
			"diseases": {
				"diseasesInChildHood": [],
				"haveInjures": [],
				"haveDiseases": [],
				"haveSurgeries": []
			}
		},
		"hazardousWorkAnamnesis": {},
		"allergyAnamnesis": {
			"haveAllergy": "да",
			"whatExactly": [
				{
					"selectAllergy": "на лекарственные препараты (если знаете, укажите на какие)"
				},
				{
					"selectAllergy": "на пищевые продукты"
				},
				{
					"selectAllergy": "на вещества бытовой химии"
				},
				{
					"selectAllergy": "на пыль, плесень"
				},
				{
					"selectAllergy": "на укусы насекомых"
				},
				{
					"selectAllergy": "на домашних животных"
				},
				{
					"selectAllergy": "на растения, пыльцу (поллиноз)"
				},
				{
					"selectAllergy": "на ультрафиолетовый свет/солнечные лучи"
				},
				{
					"selectAllergy": "на холод"
				},
				{
					"selectAllergy": "на иные аллергены"
				},
				{
					"selectAllergy": "на вакцины (прививки) (если знаете, укажите на какие)"
				},
				{
					"selectAllergy": "на местные обезболивающие средства (если знаете, укажите на какие)"
				}
			]
		},
		"harmfulHabitsAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="a90ef645-0b55-4dca-99eb-c9f38f40f490"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="b85aa5cb-2884-4403-9066-4d0428de7f76"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2f56bd4-f55d-4d38-a4be-13ceea3aafec"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy true"><con:configuration><path>$.payload.allergy.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка аллергоанамнеза" id="019520a2-b5e1-452d-a5c3-6f7ea0eed5d1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг аллергоанамнеза из постановки
def selectAllergy = [
0: [code:"at0109", value: "на лекарственные препараты"],
1: [code:"at0111", value: "на пищевые продукты"],
2: [code:"at0112", value: "на вещества бытовой химии"],
3: [code:"at0113", value: "на пыль, плесень"],
4: [code:"at0114", value: "на укусы насекомых"],
5: [code:"at0115", value: "на домашних животных"],
6: [code:"at0116", value: "на растения, пыльцу (поллиноз)"],
7: [code:"at0117", value: "на ультрафиолетовый свет/солнечные лучи"],
8: [code:"at0118", value: "на холод"],
9: [code:"at0120", value: "на иные аллергены"],
10: [code:"at0110", value: "на вакцины (прививки)"],
11: [code:"at0119", value: "на местные обезболивающие средства"]
]

def haveAllergy = [code:"at0006", value: "да"]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с selectAllergy
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
SelectAllergyLKCode = textGetRespLK.allergy.whatExactly.selectAllergy.code
SelectAllergyLKValue = textGetRespLK.allergy.whatExactly.selectAllergy.value
// Проверяем соответствие ответа getLifeAnamnesis маппингу
for (int i=0; i&lt; selectAllergy.size(); i++){
assert SelectAllergyLKCode[0].get(i).get(0) == selectAllergy[i].code// вытаскиваем элемент из массива из массива
assert SelectAllergyLKValue[0].get(i).get(0) == selectAllergy[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с haveAllergy
HaveAllergyLKCode = textGetRespLK.allergy.haveAllergy.code
HaveAllergyLKValue = textGetRespLK.allergy.haveAllergy.value
assert HaveAllergyLKCode[0].get(0) == haveAllergy.code
assert HaveAllergyLKValue[0].get(0) == haveAllergy.value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK и getLifeAnamnesisInfo
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
SelectAllergyInfoCode = textGetRespInfo.payload.allergy.whatExactly.selectAllergy.code
SelectAllergyInfoValue = textGetRespInfo.payload.allergy.whatExactly.selectAllergy.value
for (int i=0; i&lt; selectAllergy.size(); i++){
assert SelectAllergyInfoCode[i] == SelectAllergyLKCode[0].get(i).get(0)
assert SelectAllergyInfoValue[i] == SelectAllergyLKValue[0].get(i).get(0)
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d6d29382-6b9c-4c59-a617-01de5be2f601" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Нет аллергии" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="a2ca978e-0fbc-459a-ac24-9047f43e7aef"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="c919b221-9004-476e-9370-e403b108412c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"obstetricHistoryAnamnesis": {},
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {},
			"diseases": {
				"diseasesInChildHood": [],
				"haveInjures": [],
				"haveDiseases": [],
				"haveSurgeries": []
			}
		},
		"hazardousWorkAnamnesis": {},
		"allergyAnamnesis": {
			"haveAllergy": "нет (ранее не было проявлений)",
			"whatExactly": []
		},
		"harmfulHabitsAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="ab984ce2-935a-4afb-bd79-50763c2285ae"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="350a1901-1717-4726-918d-8c7bcc1fba6b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy true"><con:configuration><path>$.payload.allergy.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка аллергоанамнеза" id="31880492-ec24-4956-b770-41749efc2191"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг аллергоанамнеза из постановки
def haveAllergy = [code:"at0007", value: "нет (ранее не было проявлений)"]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с selectAllergy
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
SelectAllergyLKCode = textGetRespLK.allergy.whatExactly.selectAllergy.code
SelectAllergyLKValue = textGetRespLK.allergy.whatExactly.selectAllergy.value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с haveAllergy
HaveAllergyLKCode = textGetRespLK.allergy.haveAllergy.code
HaveAllergyLKValue = textGetRespLK.allergy.haveAllergy.value
// Проверяем соответствие ответа getLifeAnamnesis от ЛК маппингу
assert HaveAllergyLKCode[0].get(0) == haveAllergy.code
assert HaveAllergyLKValue[0].get(0) == haveAllergy.value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
HaveAllergyInfo = textGetRespInfo.payload.allergy.haveAllergy
assert HaveAllergyInfo == HaveAllergyLKValue[0].get(0) 
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6cea9e7f-5a6e-4754-9a46-15f999cc4d50" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Курить начал до 15 лет, &lt;10 штук; алкоголь никогда" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="ceda18a1-73a8-4e81-aa7e-9e394d984f92"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="0a60bdec-5581-4a22-9239-edd88bceff16"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"obstetricHistoryAnamnesis": {},
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {},
			"diseases": {
				"diseasesInChildHood": [],
				"haveInjures": [],
				"haveDiseases": [],
				"haveSurgeries": []
			}
		},
		"hazardousWorkAnamnesis": {},
		"allergyAnamnesis": {},
		"harmfulHabitsAnamnesis": {
			"ifSmokeAnswer": {
				"ageSmoking": "в детском (до 15 лет)",
				"smokingCount": "меньше 10 штук"
			},
			"frequencyAlcoholDrinks": "никогда",
			"isSmoking": "да"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="36d7f3a2-acda-4eb7-9062-c090cd47a4e7"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="f576c233-e1ec-4e47-8f90-f7c2a5d296a2"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="b1263659-8f11-492a-b290-ab803af21ff2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[0].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[0].value


// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapAgeSmoking
ageSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.code
ageSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.value
assert ageSmokingLKCode[0].get(0).get(0) == mapAgeSmoking[0].code
assert ageSmokingLKValue[0].get(0).get(0) == mapAgeSmoking[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapSmokingCount
smokingCountLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.code
smokingCountLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.value
assert smokingCountLKCode[0].get(0).get(0) == mapSmokingCount[0].code
assert smokingCountLKValue[0].get(0).get(0) == mapSmokingCount[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[0].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
ageSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.ageSmoking
smokingCountInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.smokingCount
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert ageSmokingInfo == ageSmokingLKValue[0].get(0).get(0)
assert smokingCountInfo == smokingCountLKValue[0].get(0).get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)


</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="01e4cb8d-546d-4d50-8feb-8ec7beac7445" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Курить начал 15-17 лет, &lt;1 пачки; алкоголь ежедневно, 1-2 порции" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="fda56e49-aaf3-44f9-91cc-68984fb9686d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="51b51049-926c-4cc3-a9cc-a9529873795a"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"obstetricHistoryAnamnesis": {},
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {},
			"diseases": {
				"diseasesInChildHood": [],
				"haveInjures": [],
				"haveDiseases": [],
				"haveSurgeries": []
			}
		},
		"hazardousWorkAnamnesis": {},
		"allergyAnamnesis": {},
		"harmfulHabitsAnamnesis": {
			"ifSmokeAnswer": {
				"ageSmoking": "в подростковом (15-17 лет)",
				"smokingCount": "меньше 1 пачки"
			},
			"frequencyAlcoholDrinks": "ежедневно",
			"ifDrinkAnswer": {
				"portionsCount": "1-2 порции"
			},
			"isSmoking": "да"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="f98a90e0-c384-42c0-8bea-a52556144635"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="2daa862c-f80f-4d56-8601-84a74df45e24"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="61186ad4-15c1-4bc5-8af2-a5493b327340"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[0].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[0].value


// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapAgeSmoking
ageSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.code
ageSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.value
assert ageSmokingLKCode[0].get(0).get(0) == mapAgeSmoking[1].code
assert ageSmokingLKValue[0].get(0).get(0) == mapAgeSmoking[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapSmokingCount
smokingCountLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.code
smokingCountLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.value
assert smokingCountLKCode[0].get(0).get(0) == mapSmokingCount[1].code
assert smokingCountLKValue[0].get(0).get(0) == mapSmokingCount[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[1].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapPortionsCount
portionsCountLKCode = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.code
portionsCountLKValue = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.value
assert portionsCountLKCode[0].get(0).get(0) == mapPortionsCount[0].code
assert portionsCountLKValue[0].get(0).get(0) == mapPortionsCount[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
ageSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.ageSmoking
smokingCountInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.smokingCount
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
portionsCountInfo = textGetRespInfo.payload.harmfulHabits.ifDrinkAnswer.portionsCount
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert ageSmokingInfo == ageSmokingLKValue[0].get(0).get(0)
assert smokingCountInfo == smokingCountLKValue[0].get(0).get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)
assert portionsCountInfo == portionsCountLKValue[0].get(0).get(0)

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1b05980b-b03e-487e-8d97-53a6c46a09bf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Курить начал >18, >1 пачки, бросил &lt;1 года; алкоголь еженедельно, 3-4 порции" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="9c281c5f-a9b9-43f0-a6d7-6317402bc499"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="98f26fb1-1ef5-40ef-9a3a-f352040a4ce3"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"obstetricHistoryAnamnesis": {},
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {},
			"diseases": {
				"diseasesInChildHood": [],
				"haveInjures": [],
				"haveDiseases": [],
				"haveSurgeries": []
			}
		},
		"hazardousWorkAnamnesis": {},
		"allergyAnamnesis": {},
		"harmfulHabitsAnamnesis": {
			"ifSmokeAnswer": {
				"ageSmoking": "в зрелом (старше 18 лет)",
				"smokingCount": "больше 1 пачки",
				"stopSmoking": "менее 1 года назад"
			},
			"frequencyAlcoholDrinks": "еженедельно",
			"ifDrinkAnswer": {
				"portionsCount": "3-4 порции"
			},
			"isSmoking": "бросил(а)"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="56525f5a-7c5d-4410-8fe0-3bd216051f95"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="7efbd2f3-d6b4-468f-9b28-87049019ff4c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="1b2ceec5-6c44-43a8-a2d5-9eaf41efb0eb"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[2].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[2].value


// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapAgeSmoking
ageSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.code
ageSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.value
assert ageSmokingLKCode[0].get(0).get(0) == mapAgeSmoking[2].code
assert ageSmokingLKValue[0].get(0).get(0) == mapAgeSmoking[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapSmokingCount
smokingCountLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.code
smokingCountLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.value
assert smokingCountLKCode[0].get(0).get(0) == mapSmokingCount[2].code
assert smokingCountLKValue[0].get(0).get(0) == mapSmokingCount[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[2].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapPortionsCount
portionsCountLKCode = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.code
portionsCountLKValue = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.value
assert portionsCountLKCode[0].get(0).get(0) == mapPortionsCount[1].code
assert portionsCountLKValue[0].get(0).get(0) == mapPortionsCount[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapStopSmoking
stopSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.code
stopSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.value
assert stopSmokingLKCode[0].get(0).get(0) == mapStopSmoking[0].code
assert stopSmokingLKValue[0].get(0).get(0) == mapStopSmoking[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
ageSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.ageSmoking
smokingCountInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.smokingCount
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
portionsCountInfo = textGetRespInfo.payload.harmfulHabits.ifDrinkAnswer.portionsCount
stopSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.stopSmoking
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert ageSmokingInfo == ageSmokingLKValue[0].get(0).get(0)
assert smokingCountInfo == smokingCountLKValue[0].get(0).get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)
assert portionsCountInfo == portionsCountLKValue[0].get(0).get(0)
assert stopSmokingInfo == stopSmokingLKValue[0].get(0).get(0)

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b3cac8d4-1ffa-459a-9fe3-b12dbdd490c8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Курить бросил &lt;15 лет; алкоголь иногда, 5-6 порций" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="c818e5f7-2f20-415c-969a-6de89f90e8bc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="c0039083-1f66-4ed4-bb30-73222f6fc260"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"obstetricHistoryAnamnesis": {},
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {},
			"diseases": {
				"diseasesInChildHood": [],
				"haveInjures": [],
				"haveDiseases": [],
				"haveSurgeries": []
			}
		},
		"hazardousWorkAnamnesis": {},
		"allergyAnamnesis": {},
		"harmfulHabitsAnamnesis": {
			"ifSmokeAnswer": {
				"stopSmoking": "менее 15 лет назад"
			},
			"frequencyAlcoholDrinks": "иногда",
			"ifDrinkAnswer": {
				"portionsCount": "5-6 порций"
			},
			"isSmoking": "бросил(а)"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="0b412c32-d932-42f7-8583-22cc81f0f8bb"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="41301680-1314-47dd-8cd9-92020579fbd0"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="cbac8d4c-de04-441e-95e8-d5e914954a4f"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[2].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[3].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[3].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapPortionsCount
portionsCountLKCode = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.code
portionsCountLKValue = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.value
assert portionsCountLKCode[0].get(0).get(0) == mapPortionsCount[2].code
assert portionsCountLKValue[0].get(0).get(0) == mapPortionsCount[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapStopSmoking
stopSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.code
stopSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.value
assert stopSmokingLKCode[0].get(0).get(0) == mapStopSmoking[1].code
assert stopSmokingLKValue[0].get(0).get(0) == mapStopSmoking[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
ageSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.ageSmoking
smokingCountInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.smokingCount
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
portionsCountInfo = textGetRespInfo.payload.harmfulHabits.ifDrinkAnswer.portionsCount
stopSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.stopSmoking
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)
assert portionsCountInfo == portionsCountLKValue[0].get(0).get(0)
assert stopSmokingInfo == stopSmokingLKValue[0].get(0).get(0)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3b62060f-c957-4404-9a1e-1995798ca29f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Курить бросил >15 лет; алкоголь иногда, 7-9 порций" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="d1d47b29-97c9-4e42-8dbc-1c878336d708"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="a0292bd8-6e38-44da-9ce7-0385d1f932c4"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"obstetricHistoryAnamnesis": {},
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {},
			"diseases": {
				"diseasesInChildHood": [],
				"haveInjures": [],
				"haveDiseases": [],
				"haveSurgeries": []
			}
		},
		"hazardousWorkAnamnesis": {},
		"allergyAnamnesis": {},
		"harmfulHabitsAnamnesis": {
			"ifSmokeAnswer": {
				"stopSmoking": "более 15 лет назад"
			},
			"frequencyAlcoholDrinks": "иногда",
			"ifDrinkAnswer": {
				"portionsCount": "7-9 порций"
			},
			"isSmoking": "бросил(а)"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="5358a451-ef33-4769-99c0-f8de5b200e7c"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="c29db0fe-b67e-4042-b456-ffe9bfe0f3ba"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="b0ad9bcd-e86a-445d-9e11-986692558bb6"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[2].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[3].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[3].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapPortionsCount
portionsCountLKCode = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.code
portionsCountLKValue = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.value
assert portionsCountLKCode[0].get(0).get(0) == mapPortionsCount[3].code
assert portionsCountLKValue[0].get(0).get(0) == mapPortionsCount[3].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapStopSmoking
stopSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.code
stopSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.value
assert stopSmokingLKCode[0].get(0).get(0) == mapStopSmoking[2].code
assert stopSmokingLKValue[0].get(0).get(0) == mapStopSmoking[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[2].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
ageSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.ageSmoking
smokingCountInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.smokingCount
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
portionsCountInfo = textGetRespInfo.payload.harmfulHabits.ifDrinkAnswer.portionsCount
stopSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.stopSmoking
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)
assert portionsCountInfo == portionsCountLKValue[0].get(0).get(0)
assert stopSmokingInfo == stopSmokingLKValue[0].get(0).get(0)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1c66ed48-3aa3-41b2-8861-006f9b6ce42e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Не курит; алкоголь иногда, >10 порций" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="55892893-4de2-4512-95a9-0e6d96c772f0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="aca9ec69-ee52-4a21-964d-6245fe9e2d3b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"obstetricHistoryAnamnesis": {},
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {},
			"diseases": {
				"diseasesInChildHood": [],
				"haveInjures": [],
				"haveDiseases": [],
				"haveSurgeries": []
			}
		},
		"hazardousWorkAnamnesis": {},
		"allergyAnamnesis": {},
		"harmfulHabitsAnamnesis": {
			"ifSmokeAnswer": {},
			"frequencyAlcoholDrinks": "иногда",
			"ifDrinkAnswer": {
				"portionsCount": "более 10 порций"
			},
			"isSmoking": "нет"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="f0f616e8-e9e2-4c28-93ce-9be6830a537c"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="103b829b-fb45-47b7-b7d1-2bc3963660b0"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="3c410f40-645c-47e2-a0a5-2fb836cb67f2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[1].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[3].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[3].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapPortionsCount
portionsCountLKCode = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.code
portionsCountLKValue = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.value
assert portionsCountLKCode[0].get(0).get(0) == mapPortionsCount[4].code
assert portionsCountLKValue[0].get(0).get(0) == mapPortionsCount[4].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[1].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
portionsCountInfo = textGetRespInfo.payload.harmfulHabits.ifDrinkAnswer.portionsCount
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)
assert portionsCountInfo == portionsCountLKValue[0].get(0).get(0)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="334dbcc3-31ab-4558-9697-f48cb5c5e4c8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Не работал на вредных производствах" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="5bbdd159-6c03-4626-bd62-7b655a0836ac"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="c5c50bbc-e1cc-4779-9170-6e6774569377"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {},
		"harmfulHabitsAnamnesis": {},
		"hazardousWorkAnamnesis": {
			"hazardousWork": {},
			"isHazardousWork": "нет"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="773f8166-306a-4af4-8486-eb36f44ab385"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=1"><con:configuration><path>$.hazardousWork</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="4a4bfc36-5ae1-435e-9aeb-efe8ee0abde3"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork true"><con:configuration><path>$.payload.hazardousWork.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных производств" id="52404df5-6547-43e7-a884-d44f847ee8c7"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsHazardousWork  = [
0: [code:"at0009", value: "да"],
1: [code:"at0010", value: "нет"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsHazardousWork
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isHazardousWorkLKCode = textGetRespLK.hazardousWork.hazardousWork.isHazardousWork.code
isHazardousWorkLKValue = textGetRespLK.hazardousWork.hazardousWork.isHazardousWork.value
assert isHazardousWorkLKCode[0].get(0).get(0) == mapIsHazardousWork[1].code
assert isHazardousWorkLKValue[0].get(0).get(0) == mapIsHazardousWork[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isHazardousWorkInfo = textGetRespInfo.payload.hazardousWork.isHazardousWork
assert isHazardousWorkInfo == isHazardousWorkLKValue[0].get(0).get(0)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="af21df27-9948-4abe-b1b2-c7037979d87f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Работал на вредных производствах" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="22a8d33c-1f0f-4009-a161-b84da70ddf9d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="b204d30b-66f9-4e26-b4cd-88c0fefd4bec"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {},
		"harmfulHabitsAnamnesis": {},
		"hazardousWorkAnamnesis": {
			"hazardousWork": {
				"recitation": [
					"производство асбеста",
					"производство радона",
					"производство мышьяка",
					"сварочное производство",
					"работа на типографии",
					"производство резины",
					"работа в условиях длительного воздействия вредных веществ (токсические соединения, пыль, ионизирующая радиация)"
				],
				"other": "иное вредное производство",
				"yearsCount": "13"
			},
			"isHazardousWork": "да"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="0e1fb6fc-71cb-4078-986c-7efa076fe121"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=1"><con:configuration><path>$.hazardousWork</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="df12f356-5023-4d42-9f08-91dd24b85555"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork true"><con:configuration><path>$.payload.hazardousWork.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных производств" id="9dc91d41-a964-4535-b350-3c262f7a1df2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsHazardousWork  = [
0: [code:"at0009", value: "да"],
1: [code:"at0010", value: "нет"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsHazardousWork
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isHazardousWorkLKCode = textGetRespLK.hazardousWork.hazardousWork.isHazardousWork.code
isHazardousWorkLKValue = textGetRespLK.hazardousWork.hazardousWork.isHazardousWork.value
yearsCountLK = textGetRespLK.hazardousWork.hazardousWork.hazardousWork.yearsCount[0].get(0).get(0).get(0)
recitationLK = textGetRespLK.hazardousWork.hazardousWork.hazardousWork.recitation[0].get(0).get(0)
otherLK = textGetRespLK.hazardousWork.hazardousWork.hazardousWork.other[0].get(0).get(0)
assert isHazardousWorkLKCode[0].get(0).get(0) == mapIsHazardousWork[0].code
assert isHazardousWorkLKValue[0].get(0).get(0) == mapIsHazardousWork[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isHazardousWorkInfo = textGetRespInfo.payload.hazardousWork.isHazardousWork
assert isHazardousWorkInfo == isHazardousWorkLKValue[0].get(0).get(0)
yearsCountInfo = textGetRespInfo.payload.hazardousWork.hazardousWork.yearsCount
assert yearsCountInfo == yearsCountLK
recitationInfo = textGetRespInfo.payload.hazardousWork.hazardousWork.recitation
assert recitationInfo == recitationLK
otherInfo = textGetRespInfo.payload.hazardousWork.hazardousWork.other
assert recitationInfo == recitationLK</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="97a3fa34-10a9-472f-a109-489ead0ccc8c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Заболевания. Мужчины: отмечены все виды заболеваний" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="8154fcb2-6a77-40de-a229-4b87c188b50b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="95b87d8b-ca91-4172-a6e3-1da35d33d8d5"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {
				"regularMedicines": [
					"гипотензивные препараты",
					"сахароснижающие препараты",
					"кроворазжижающие препараты",
					"препараты химиотерапии",
					"мочегонные препараты (диуретики)",
					"сердечные гликозиды",
					"обезболивающие препараты (нестероидные противовоспалительные средства)",
					"антидепрессанты",
					"противосудорожные препараты",
					"препараты для лечения астмы (ингаляторы, лекарственные средства)"
				]
			},
			"diseases": {
				"diseasesInChildHood": [
					"корь",
					"краснуха",
					"ветряная оспа",
					"коклюш",
					"свинка"
				],
				"haveDiseases": [
					"онкологические заболевания",
					"туберкулез",
					"гепатит",
					"язвенная болезнь",
					"бронхиальная астма",
					"артериальная гипертензия",
					"инфаркт",
					"инсульт",
					"сахарный диабет"
				],
				"haveInjures": [
					"травмы грудной клетки",
					"травмы таза",
					"травмы позвоночника",
					"переломы конечностей",
					"черепно-мозговые травмы"
				],
				"haveSurgeries": [
					"удаление аппендикса",
					"удаление желчного пузыря",
					"удаление органа в результате лечения онкологического заболевания",
					"удаление щитовидной железы",
					"операции на сосудах и сердце"
				]
			}
		},
		"harmfulHabitsAnamnesis": {},
		"hazardousWorkAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="72552277-5c3a-4c47-82fe-b7ac69d4ff9d"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=1"><con:configuration><path>$.diseases</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="af178976-c06c-47c3-b425-13aa9a924a03"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases true"><con:configuration><path>$.payload.diseases.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка перенесенных заболеваний" id="ede03e6d-4013-4dd7-b295-fdcee08acd29"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

// Маппинг RegularMedicines из постановки
def mapRegularMedicinesMAN  = [
0: [code:"at0043", value: "гипотензивные препараты"],
1: [code:"at0044", value: "сахароснижающие препараты"],
2: [code:"at0045", value: "кроворазжижающие препараты"],
3: [code:"at0046", value: "препараты химиотерапии"],
4: [code:"at0047", value: "мочегонные препараты (диуретики)"],
5: [code:"at0048", value: "сердечные гликозиды"],
6: [code:"at0049", value: "обезболивающие препараты (нестероидные противовоспалительные средства)"],
7: [code:"at0050", value: "антидепрессанты"],
8: [code:"at0051", value: "противосудорожные препараты"],
9: [code:"at0054", value: "препараты для лечения астмы (ингаляторы, лекарственные средства)"]
]

def mapRegularMedicinesNO = [0: [code:"at0055", value: "нет"]]

def mapDiseasesInChildHood  = [
0: [code:"at0019", value: "корь"],
1: [code:"at0020", value: "краснуха"],
2: [code:"at0021", value: "ветряная оспа"],
3: [code:"at0022", value: "коклюш"],
4: [code:"at0023", value: "свинка"]
]

def mapHaveDiseasesMAN  = [
0: [code:"at0015", value: "онкологические заболевания"],
1: [code:"at0014", value: "туберкулез"],
2: [code:"at0013", value: "гепатит"],
3: [code:"at0012", value: "язвенная болезнь"],
4: [code:"at0011", value: "бронхиальная астма"],
5: [code:"at0010", value: "артериальная гипертензия"],
6: [code:"at0009", value: "инфаркт"],
7: [code:"at0008", value: "инсульт"],
8: [code:"at0007", value: "сахарный диабет"]
]

def mapHaveDiseasesWOMAN  = [
0: [code:"at0016", value: "мастит"],
1: [code:"at0017", value: "нет"]
]

def mapHaveInjuresMAN  = [
0: [code:"at0030", value: "травмы грудной клетки"],
1: [code:"at0029", value: "травмы таза"],
2: [code:"at0028", value: "травмы позвоночника"],
3: [code:"at0027", value: "переломы конечностей"],
4: [code:"at0026", value: "черепно-мозговые травмы"]
]

def mapHaveSurgeriesMAN  = [
0: [code:"at0034", value: "удаление аппендикса"],
1: [code:"at0035", value: "удаление желчного пузыря"],
2: [code:"at0036", value: "удаление органа в результате лечения онкологического заболевания"],
3: [code:"at0038", value: "удаление щитовидной железы"],
4: [code:"at0037", value: "операции на сосудах и сердце"]
]

def mapHaveBloodTransfusion	 = [
0: [code:"at0059", value: "да"],
1: [code:"at0060", value: "нет"]
]

def mapBloodTransfusionReactions	 = [
0: [code:"at0062", value: "да"],
1: [code:"at0063", value: "нет"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapRegularMedicinesMAN
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
RegularMedicinesLKCode = textGetRespLK.diseases.medicines.regularMedicines.code
RegularMedicinesLKValue = textGetRespLK.diseases.medicines.regularMedicines.value
for (int i=0; i< mapRegularMedicinesMAN.size(); i++){
assert RegularMedicinesLKCode[0].get(0).get(i) == mapRegularMedicinesMAN[i].code// вытаскиваем элемент из массива из массива
assert RegularMedicinesLKValue[0].get(0).get(i) == mapRegularMedicinesMAN[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveInjuresMAN
haveInjuresLKCode = textGetRespLK.diseases.diseases.haveInjures.code
haveInjuresLKValue = textGetRespLK.diseases.diseases.haveInjures.value
for (int i=0; i< mapHaveInjuresMAN.size(); i++){
assert haveInjuresLKCode[0].get(0).get(i) == mapHaveInjuresMAN[i].code// вытаскиваем элемент из массива из массива
assert haveInjuresLKValue[0].get(0).get(i) == mapHaveInjuresMAN[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveSurgeriesMAN
haveSurgeriesLKCode = textGetRespLK.diseases.diseases.haveSurgeries.code
haveSurgeriesLKValue = textGetRespLK.diseases.diseases.haveSurgeries.value
// Проверяем соответствие ответа getLifeAnamnesis маппингу
for (int i=0; i< mapHaveSurgeriesMAN.size(); i++){
assert haveSurgeriesLKCode[0].get(0).get(i) == mapHaveSurgeriesMAN[i].code// вытаскиваем элемент из массива из массива
assert haveSurgeriesLKValue[0].get(0).get(i) == mapHaveSurgeriesMAN[i].value
}

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapBloodTransfusionReactions
bloodTransfusionReactionsLKCode = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.code
bloodTransfusionReactionsLKValue = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.value
assert bloodTransfusionReactionsLKCode[0].get(0).get(0) == mapBloodTransfusionReactions[0].code
assert bloodTransfusionReactionsLKValue[0].get(0).get(0) == mapBloodTransfusionReactions[0].value

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapHaveBloodTransfusion
haveBloodTransfusionLKCode = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.code
haveBloodTransfusionLKValue = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[0].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapDiseasesInChildhood
diseasesInChildhoodLKCode = textGetRespLK.diseases.diseases.diseasesInChildhood.code
diseasesInChildhoodLKValue = textGetRespLK.diseases.diseases.diseasesInChildhood.value
for (int i=0; i< mapDiseasesInChildHood.size(); i++){
assert diseasesInChildhoodLKCode[0].get(0).get(i) == mapDiseasesInChildHood[i].code
assert diseasesInChildhoodLKValue[0].get(0).get(i) == mapDiseasesInChildHood[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveDiseasesMAN
haveDiseasesLKCode = textGetRespLK.diseases.diseases.haveDiseases.code
haveDiseasesLKValue = textGetRespLK.diseases.diseases.haveDiseases.value
for (int i=0; i< mapHaveDiseasesMAN.size(); i++){
assert haveDiseasesLKCode[0].get(0).get(i) == mapHaveDiseasesMAN[i].code// вытаскиваем элемент из массива из массива
assert haveDiseasesLKValue[0].get(0).get(i) == mapHaveDiseasesMAN[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
RegularMedicinesInfo = textGetRespInfo.payload.diseases.medicines.regularMedicines
for (int i=0; i< RegularMedicinesInfo.size(); i++){
assert RegularMedicinesInfo[i] == RegularMedicinesLKValue[0].get(0).get(i)
}
haveBloodTransfusionInfo = textGetRespInfo.payload.diseases.bloodTransfusion.haveBloodTransfusion
assert haveBloodTransfusionInfo == haveBloodTransfusionLKValue[0].get(0).get(0)
bloodTransfusionReactionsInfo = textGetRespInfo.payload.diseases.bloodTransfusion.bloodTransfusionReactions
assert bloodTransfusionReactionsInfo == bloodTransfusionReactionsLKValue[0].get(0).get(0)
haveInjuresInfo = textGetRespInfo.payload.diseases.diseases.haveInjures
for (int i=0; i< haveInjuresInfo.size(); i++){
assert haveInjuresInfo[i] == haveInjuresLKValue[0].get(0).get(i)
}
]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d2a65757-b3c4-4fa7-82f9-cc88d699d842" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Заболевания. Мужчины: все ответы отрицательные, переливание крови = &quot;нет&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="c3769197-f8cd-4420-ab7e-4ea393480cc8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="80e7ce1a-1547-484c-b9c1-04d9207ca540"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {
			"bloodTransfusion": {
                "haveBloodTransfusion": "нет"
            },
			"medicines": {

        "regularMedicines": [
          "нет"
        ]

      },
		    "diseases": {
                "diseasesInChildHood": [
                    "никакими из вышеперечисленных"
                ],
                "haveDiseases": [
                    "нет"
                ],
                "haveInjures": [
                    "нет"
                ],
                "haveSurgeries": [
                    "нет"
                ]
            }	
		},
		"harmfulHabitsAnamnesis": {},
		"hazardousWorkAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="52587f7a-581d-4f8a-8435-68352759e2cd"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=1"><con:configuration><path>$.diseases</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="d1b8c7d0-ebf3-43cc-b5b9-8b206218f1b7"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases true"><con:configuration><path>$.payload.diseases.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка перенесенных заболеваний; переливание крови" id="5ec02e00-bf29-4b34-842b-77980ae6e051"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг RegularMedicines из постановки
def mapRegularMedicinesMAN = [
0: [code:"at0055", value: "гипотензивные препараты"],
1: [code:"at0044", value: "сахароснижающие препараты"],
2: [code:"at0045", value: "кроворазжижающие препараты"],
3: [code:"at0046", value: "препараты химиотерапии"],
4: [code:"at0047", value: "мочегонные препараты (диуретики)"],
5: [code:"at0048", value: "сердечные гликозиды"],
6: [code:"at0049", value: "обезболивающие препараты (нестероидные противовоспалительные средства)"],
7: [code:"at0050", value: "антидепрессанты"],
8: [code:"at0051", value: "противосудорожные препараты"],
9: [code:"at0054", value: "препараты для лечения астмы (ингаляторы, лекарственные средства)"]
]

def mapRegularMedicinesWOMAN  = [
0: [code:"at0043", value: "гипотензивные препараты"],
1: [code:"at0044", value: "сахароснижающие препараты"],
2: [code:"at0045", value: "кроворазжижающие препараты"],
3: [code:"at0046", value: "препараты химиотерапии"],
4: [code:"at0047", value: "мочегонные препараты (диуретики)"],
5: [code:"at0048", value: "сердечные гликозиды"],
6: [code:"at0049", value: "обезболивающие препараты (нестероидные противовоспалительные средства)"],
7: [code:"at0050", value: "антидепрессанты"],
8: [code:"at0051", value: "противосудорожные препараты"],
7: [code:"at0052", value: "гормональные контрацептивы"],
8: [code:"at0053", value: "препараты заместительной гормонотерапии (при менопаузе)"],
9: [code:"at0054", value: "препараты для лечения астмы (ингаляторы, лекарственные средства)"]
]

def mapRegularMedicinesNO = [0: [code:"at0055", value: "нет"]]

def mapDiseasesInChildHood  = [
0: [code:"at0019", value: "корь"],
1: [code:"at0020", value: "краснуха"],
2: [code:"at0021", value: "ветряная оспа"],
3: [code:"at0022", value: "коклюш"],
4: [code:"at0023", value: "свинка"]
]

def mapDiseasesInChildHoodNO  = [
0: [code:"at0024", value: "никакими из вышеперечисленных"]
]

def mapHaveDiseasesMAN  = [
0: [code:"at0015", value: "онкологические заболевания"],
1: [code:"at0014", value: "туберкулез"],
2: [code:"at0013", value: "гепатит"],
3: [code:"at0012", value: "язвенная болезнь"],
4: [code:"at0011", value: "бронхиальная астма"],
5: [code:"at0010", value: "артериальная гипертензия"],
6: [code:"at0009", value: "инфаркт"],
7: [code:"at0008", value: "инсульт"],
8: [code:"at0007", value: "сахарный диабет"]
]

def mapHaveDiseasesWOMAN  = [
0: [code:"at0016", value: "мастит"]
]

def mapHaveDiseasesNO  = [
0: [code:"at0017", value: "нет"]
]

def mapHaveInjuresMAN  = [
0: [code:"at0030", value: "травмы грудной клетки"],
1: [code:"at0029", value: "травмы таза"],
2: [code:"at0028", value: "травмы позвоночника"],
3: [code:"at0027", value: "переломы конечностей"],
4: [code:"at0026", value: "черепно-мозговые травмы"]
]

def mapHaveInjuresNO  = [
0: [code:"at0032", value: "нет"]
]

def mapHaveSurgeriesMAN  = [
0: [code:"at0034", value: "удаление аппендикса"],
1: [code:"at0035", value: "удаление желчного пузыря"],
2: [code:"at0036", value: "удаление органа в результате лечения онкологического заболевания"],
3: [code:"at0038", value: "удаление щитовидной железы"],
4: [code:"at0037", value: "операции на сосудах и сердце"]
]

def mapHaveSurgeriesNO  = [
0: [code:"at0040", value: "нет"]
]

def mapHaveBloodTransfusion	 = [
0: [code:"at0059", value: "да"],
1: [code:"at0060", value: "нет"]
]

def mapBloodTransfusionReactions	 = [
0: [code:"at0062", value: "да"],
1: [code:"at0063", value: "нет"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapRegularMedicinesNO
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString()
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
RegularMedicinesLKCode = textGetRespLK.diseases.medicines.regularMedicines.code
RegularMedicinesLKValue = textGetRespLK.diseases.medicines.regularMedicines.value
assert RegularMedicinesLKCode[0].get(0).get(0) == mapRegularMedicinesNO[0].code
assert RegularMedicinesLKValue[0].get(0).get(0) == mapRegularMedicinesNO[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveInjuresNO
haveInjuresLKCode = textGetRespLK.diseases.diseases.haveInjures.code
haveInjuresLKValue = textGetRespLK.diseases.diseases.haveInjures.value
assert haveInjuresLKCode[0].get(0).get(0) == mapHaveInjuresNO[0].code
assert haveInjuresLKValue[0].get(0).get(0) == mapHaveInjuresNO[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveSurgeriesNO
haveSurgeriesLKCode = textGetRespLK.diseases.diseases.haveSurgeries.code
haveSurgeriesLKValue = textGetRespLK.diseases.diseases.haveSurgeries.value
// Проверяем соответствие ответа getLifeAnamnesis маппингу
assert haveSurgeriesLKCode[0].get(0).get(0) == mapHaveSurgeriesNO[0].code
assert haveSurgeriesLKValue[0].get(0).get(0) == mapHaveSurgeriesNO[0].value

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapHaveBloodTransfusion
haveBloodTransfusionLKCode = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.code
haveBloodTransfusionLKValue = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[1].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[1].value

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapBloodTransfusionReactions
bloodTransfusionReactionsLKCode = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.code
bloodTransfusionReactionsLKValue = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[1].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapDiseasesInChildhood
diseasesInChildhoodLKCode = textGetRespLK.diseases.diseases.diseasesInChildhood.code
diseasesInChildhoodLKValue = textGetRespLK.diseases.diseases.diseasesInChildhood.value
assert diseasesInChildhoodLKCode[0].get(0).get(0) == mapDiseasesInChildHoodNO[0].code
assert diseasesInChildhoodLKValue[0].get(0).get(0) == mapDiseasesInChildHoodNO[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveDiseasesNO
haveDiseasesLKCode = textGetRespLK.diseases.diseases.haveDiseases.code
haveDiseasesLKValue = textGetRespLK.diseases.diseases.haveDiseases.value
// Проверяем соответствие ответа getLifeAnamnesis маппингу
assert haveDiseasesLKCode[0].get(0).get(0) == mapHaveDiseasesNO[0].code// вытаскиваем элемент из массива из массива
assert haveDiseasesLKValue[0].get(0).get(0) == mapHaveDiseasesNO[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
RegularMedicinesInfo = textGetRespInfo.payload.diseases.medicines.regularMedicines
for (int i=0; i&lt; RegularMedicinesInfo.size(); i++){
assert RegularMedicinesInfo[i] == RegularMedicinesLKValue[0].get(0).get(i)
}
haveBloodTransfusionInfo = textGetRespInfo.payload.diseases.bloodTransfusion.haveBloodTransfusion
assert haveBloodTransfusionInfo == haveBloodTransfusionLKValue[0].get(0).get(0)
haveInjuresInfo = textGetRespInfo.payload.diseases.diseases.haveInjures
for (int i=0; i&lt; haveInjuresInfo.size(); i++){
assert haveInjuresInfo[i] == haveInjuresLKValue[0].get(0).get(i)
}

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1af1b08a-fff9-47cf-bfec-acfdc73e6d75" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Переливание крови = &quot;да&quot;, реакция = &quot;нет&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="03c1ae97-e2dc-43fd-a792-25254fe3cae5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="d89756da-2b1c-4eb6-9caa-0da042e66274"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {
		    "bloodTransfusion": {
                "haveBloodTransfusion": "да",
                "bloodTransfusionReactions": "нет"
            }

		},
		"harmfulHabitsAnamnesis": {},
		"hazardousWorkAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="d6d9a3d2-4fbb-4a98-a933-62ddef3551a5"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=1"><con:configuration><path>$.diseases</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="f8a5735b-b076-46a4-8f27-6a62d5681711"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases true"><con:configuration><path>$.payload.diseases.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка переливания крови" id="f73b2497-61a4-4b9c-b302-fe8019edf276"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг bloodTransfusion из постановки
def mapHaveBloodTransfusion	 = [
0: [code:"at0059", value: "да"],
1: [code:"at0060", value: "нет"]
]

def mapBloodTransfusionReactions	 = [
0: [code:"at0062", value: "да"],
1: [code:"at0063", value: "нет"]
]

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapHaveBloodTransfusion
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString()
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
haveBloodTransfusionLKCode = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.code
haveBloodTransfusionLKValue = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[0].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[0].value

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapBloodTransfusionReactions
bloodTransfusionReactionsLKCode = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.code
bloodTransfusionReactionsLKValue = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[0].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
RegularMedicinesInfo = textGetRespInfo.payload.diseases.medicines.regularMedicines
for (int i=0; i&lt; RegularMedicinesInfo.size(); i++){
assert RegularMedicinesInfo[i] == RegularMedicinesLKValue[0].get(0).get(i)
}
haveBloodTransfusionInfo = textGetRespInfo.payload.diseases.bloodTransfusion.haveBloodTransfusion
assert haveBloodTransfusionInfo == haveBloodTransfusionLKValue[0].get(0).get(0)
bloodTransfusionReactionsInfo = textGetRespInfo.payload.diseases.bloodTransfusion.bloodTransfusionReactions
assert bloodTransfusionReactionsInfo == bloodTransfusionReactionsLKValue[0].get(0).get(0)
haveInjuresInfo = textGetRespInfo.payload.diseases.diseases.haveInjures
for (int i=0; i&lt; haveInjuresInfo.size(); i++){
assert haveInjuresInfo[i] == haveInjuresLKValue[0].get(0).get(i)
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e98f0407-3f67-4ace-a882-b7d584436bdb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Переливание крови = &quot;да&quot;, реакция = &quot;да&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="c5270277-8e5c-4c0e-ad5c-95cdba066e10"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="68b8996d-6564-4732-8740-007854fae646"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {
			"bloodTransfusion": {
				"haveBloodTransfusion": "да",
				"bloodTransfusionReactions": "да"
			}
		},
		"harmfulHabitsAnamnesis": {},
		"hazardousWorkAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="48ddcc59-08e2-4dc2-b699-deda55684706"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=1"><con:configuration><path>$.diseases</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="c99c63b2-c4c3-41a6-ab6b-3d633300ae93"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases true"><con:configuration><path>$.payload.diseases.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка переливания крови" id="e7488a3f-b871-4903-a5af-24702fcac42a"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг bloodTransfusion из постановки
def mapHaveBloodTransfusion	 = [
0: [code:"at0059", value: "да"],
1: [code:"at0060", value: "нет"]
]

def mapBloodTransfusionReactions	 = [
0: [code:"at0062", value: "да"],
1: [code:"at0063", value: "нет"]
]

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapHaveBloodTransfusion
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString()
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
haveBloodTransfusionLKCode = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.code
haveBloodTransfusionLKValue = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[0].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[0].value

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapBloodTransfusionReactions
bloodTransfusionReactionsLKCode = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.code
bloodTransfusionReactionsLKValue = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.value
assert bloodTransfusionReactionsLKCode[0].get(0).get(0) == mapBloodTransfusionReactions[0].code
assert bloodTransfusionReactionsLKValue[0].get(0).get(0) == mapBloodTransfusionReactions[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
RegularMedicinesInfo = textGetRespInfo.payload.diseases.medicines.regularMedicines
for (int i=0; i&lt; RegularMedicinesInfo.size(); i++){
assert RegularMedicinesInfo[i] == RegularMedicinesLKValue[0].get(0).get(i)
}
haveBloodTransfusionInfo = textGetRespInfo.payload.diseases.bloodTransfusion.haveBloodTransfusion
assert haveBloodTransfusionInfo == haveBloodTransfusionLKValue[0].get(0).get(0)
bloodTransfusionReactionsInfo = textGetRespInfo.payload.diseases.bloodTransfusion.bloodTransfusionReactions
assert bloodTransfusionReactionsInfo == bloodTransfusionReactionsLKValue[0].get(0).get(0)
haveInjuresInfo = textGetRespInfo.payload.diseases.diseases.haveInjures
for (int i=0; i&lt; haveInjuresInfo.size(); i++){
assert haveInjuresInfo[i] == haveInjuresLKValue[0].get(0).get(i)
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="782c8bc2-49c2-459d-a579-8b2ceee01772" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Женщины: отмечены все женские заболевания, медикаменды, травмы, операции" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="c4e40d52-abf1-4e78-8e75-9909e5068af8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>20e16df9-b0fa-43d6-b36e-40c7c82ee780</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="42b8ccf2-c096-42b1-a60f-daad21dd2b0b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {
			"medicines": {
				"regularMedicines": [
					"гормональные контрацептивы",
					"препараты заместительной гормонотерапии (при менопаузе)"
				]
			},
			"diseases": {
				"diseasesInChildHood": [],
				"haveDiseases": [
					"мастит"
				],
				"haveInjures": [
					"ушибы молочной железы"
				],
				"haveSurgeries": [
					"операции на молочной железе"
				]
			}
		},
		"harmfulHabitsAnamnesis": {},
		"hazardousWorkAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-woman}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-woman}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="bd4c1792-cd1a-4ef9-abdb-4ca357b44950"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=1"><con:configuration><path>$.diseases</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-woman}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-woman}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="edc87f61-ca16-4072-a800-fd1d6fc03023"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases true"><con:configuration><path>$.payload.diseases.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-woman}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-woman}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка женских заболеваний, медикаментов, травм и операций" id="9ddb8675-0bf6-461f-9d7f-c5803566e440"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг RegularMedicines из постановки
def mapRegularMedicinesWOMAN  = [
0: [code:"at0052", value: "гормональные контрацептивы"],
1: [code:"at0053", value: "препараты заместительной гормонотерапии (при менопаузе)"]
]

def mapHaveDiseasesWOMAN  = [code:"at0016", value: "мастит"]
def mapHaveInjuresWOMAN  = [code:"at0031", value: "ушибы молочной железы"]
def mapHaveSurgeriesWOMAN = [code:"at0039", value: "операции на молочной железе"]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveDiseasesWOMAN
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString()
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
haveDiseasesLKCode = textGetRespLK.diseases.diseases.haveDiseases.code
haveDiseasesLKValue = textGetRespLK.diseases.diseases.haveDiseases.value
assert haveDiseasesLKCode[0].get(0).get(0) == mapHaveDiseasesWOMAN.code
assert haveDiseasesLKValue[0].get(0).get(0) == mapHaveDiseasesWOMAN.value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveInjuresWOMAN
haveInjuresLKCode = textGetRespLK.diseases.diseases.haveInjures.code
haveInjuresLKValue = textGetRespLK.diseases.diseases.haveInjures.value
assert haveInjuresLKCode[0].get(0).get(0) == mapHaveInjuresWOMAN.code
assert haveInjuresLKValue[0].get(0).get(0) == mapHaveInjuresWOMAN.value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveSurgeriesWOMAN
haveSurgeriesLKCode = textGetRespLK.diseases.diseases.haveSurgeries.code
haveSurgeriesLKValue = textGetRespLK.diseases.diseases.haveSurgeries.value
assert haveSurgeriesLKCode[0].get(0).get(0) == mapHaveSurgeriesWOMAN.code
assert haveSurgeriesLKValue[0].get(0).get(0) == mapHaveSurgeriesWOMAN.value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapRegularMedicinesWOMAN
regularMedicinesLKCode = textGetRespLK.diseases.medicines.regularMedicines.code
regularMedicinesLKValue = textGetRespLK.diseases.medicines.regularMedicines.value
for (int i=0; i&lt; mapRegularMedicinesWOMAN.size(); i++){
assert regularMedicinesLKCode[0].get(0).get(i) == mapRegularMedicinesWOMAN[i].code
assert regularMedicinesLKValue[0].get(0).get(i) == mapRegularMedicinesWOMAN[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() 
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
regularMedicinesInfo = textGetRespInfo.payload.diseases.medicines.regularMedicines
for (int i=0; i&lt; regularMedicinesInfo.size(); i++){
assert regularMedicinesInfo[i] == regularMedicinesLKValue[0].get(0).get(i)
}
haveInjuresInfo = textGetRespInfo.payload.diseases.diseases.haveInjures
assert haveInjuresInfo.get(0) == haveInjuresLKValue[0].get(0).get(0)
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>X-Access-JWT-man</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2ODI3NTY0ODMsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJlYTc1ZTIyZC01NWZiLTQ5ZjctYmNiZS05OTRkY2YzOTc1MzAiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoibXEwMi9nNXlDd3VFcUh1cm9SZGEybXBYdmk1cytUNE9xOUxlS21JQVdpRGRjb1dSRTVJVFVEUzU5UFhvQTdDWTY5VzU2eTBOUzFYNW9CU29MMENkRW5TQ2J2ZmlBcGMzUlNaM0ZHZFFTRFRaNVMwMlRKSXJsQUdRb0ZaOE9yK2IxMjlWWW1PSW5WdTZwVWZzSEhMdEU4alVKNEc1TjE1Ym9KR3EwdTdFaUx4Tm1ORExyY09KK0N4VmNSOWI4QzNHUXVZOWZyd2M0RTg2M0VWZ0F1M0thbnAzMjZTU2g0ZTlGb2NKUm9Ob0pmbElFMFlsVWJHY2tINkU4ZjkzMkwrSGRlNU5WY3Z4UDEwTnpBZVNjKytEQk5Jci90d251bmkyR051cUg3TmEvc1lySVZUZDZlRFR0U1B5QWJwMmIwQ0ZxMXVWVFRUQ25yaTUwZ3pqTDdFeFJBPT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIyIn0.ZSv5B4izbbQGWRKzOvoSdfHd4YbtsI-YDYhRUlZId1Y33bL85vKOmhcDUx4HyvkhEzTNvx14TDHk8j9spiSOSAfJgQkfHc-qz-aYKVnhP3kTad8AWjJuah-JO-54QohdfZ-Igi9iMcRrRYy-wW-Rx3I5Ce2xWyX3prfkHUq8qg-VaM9wRVYzDkbRorjT6fQfunBvS3Wxs0xx7iguR-R5Rk3wEX637mPeMIn9WAl2cCB91MhtnyRej2bRt_iEMkgl_WsOVenj9lGIU-vpFjLc9IiFxgwYcxLwN7G0IsCKRX2K1oXiKi7nO2hUsd_U5aqClH33mXk6l1wxpvKP_RTVA95aDWRAVAWjwxu7K7ujC0twutoIeKTx22uCMDaGnSB4gcuNRHfwIpZTsq8lEgJjySBHzGQ6xgK-KyoBzc7AVDNzJ0qw2WofmIdhlTDekDz0RXZrEn8pP0mBLgGBGE_GSsJLDs3C3YEcs3NcUB7Yi9ofziOMZPBaKt5m17cVtiUn8gUPEHXWrYTrbXQXCfHr1gkYv9oO-6oT4GKM8zHRRSKUdwX5pM3nwlY7onWoH0TzqVZ3AIyOVEhytt4yqfC-Pi7THPAl06eS81GAvuVNeoLwRKkxwx_ZLf__aetenYdfsJ2QQCdKQCADdk2ZHTVdJlcYsZOpSWoLXGWtZtp6iQo</con:value></con:property><con:property><con:name>X-Access-JWT-woman</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2ODI3NTY0ODQsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiIyZmFmYmE2Ni05OTc4LTRkNDItYjE3My0xMjc0OGU1OGQ3ZmIiLCJzaWQiOiIxNjMzMzVjYS0zMWNkLTQ0NTUtOTRhNS1iNTY0YmU4NGM5ZmYiLCJwaG9uZSI6Ijc5MTE0Njg0NzYyIiwic3NvX2lkIjoiYVEyU0hBRkNxS3d4WWMrZFV1V0YvMTV4bGhiMlJJcVBLaGFkUFNWS2lCZGM3c0F6SzRjTlM3blJaam9Ya2dnd1haTWRBK3lVWTMrZ2kvVDhKeCtsSXV4Qms5amxnSnowcU00R1p3aHFMeVBQWHM2SVczM3A2VUk0b3hiMDgxTXlML1JyaG1RRVZ6Y0dsLzIvdUg0UkI1OTRjOHg0amRoOTJJSHVWRzgrQXErcDBxMWZqSWlNRGwvREQ2VWN2enN5bHpsbExPTmVmekxDSmFPT1RaakZIc1hNRE4veldGNEp6ZG1hVnVvRlNmQ3pwZU5oZlkyVUdoVnpOcWVyaCtkV3hSTnk3SEk3dnFIWThNejRYT0xHYzRSb3Fzc0ZnVXdaazgreE9SMEVnazB2dGZFbGE2YW9BaGdoVk1LZHFuUDc1bEl3TkhiQ0ROQm1VUGh4YzdjdGZBPT0iLCJlbWFpbCI6InpheWNldmF0YW5pYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiXHUwNDEyXHUwNDM1XHUwNDQwXHUwNDNlXHUwNDNkXHUwNDM4XHUwNDNhXHUwNDMwIiwic2Vjb25kX25hbWUiOiJcdTA0MTMuIiwibWlkZGxlX25hbWUiOiJcdTA0MTJcdTA0NGZcdTA0NDdcdTA0MzVcdTA0NDFcdTA0M2JcdTA0MzBcdTA0MzJcdTA0M2VcdTA0MzJcdTA0M2RcdTA0MzAiLCJiaXJ0aF9kYXRlIjoiMjAwNi0xMi0yMiJ9.RG3xuBm6HC8s4339cWz0d-giR_6nxCcPny9KN2sbBXg68lKWqkcj9i_SQwDQ3PPlEAYsaLCKe9vR0ubDARGQr4TBvAKSBwWPySdsPfpDUN0cD5PsMUnN7ENmjk4i-sqNdpFVupX294rCoK8Dvz5qAsGxeU__r84E_YbD7cL9fhaaYpw-J_tzlJVGwHHUDxHCj4dFsjbJzQtrZlML-y4VsHwXh87fqmmjrvPkvYDjA31m2AcUQfr5fjxsIE-h3goPRUqCTk4Ay40MQMrLmDuqEEu2VlKlF_pNIut0nGVCn9VkMIDnwfWhlmykx2jdzUnQeEGVXjEsTUyTqDJlT2io8QdoFGh5o-bTh-OyWYW00JuTNQBGxJb7ZGetG3z8FI4K0qJKEi3Ejwz4gDg-QCp1MTVCHSW9aUIymlLt8UmDhHYTm4xZI3pHvuvdK1vm3KXkLB5hA-FvNGCwSWfnzJ_QlGrmVepfzgZHQBp97zPEb1I7n8kE00dy8xNXWaS_AD-B7Rr2DEHpYkKAngvJjfTV8NXMT-HYG7NyDqRN8j7doH8xGpAe3Zt0RptqDLi4fS80avu76NCQDwxczPg6epUWY1QAKj0HMV0sGMn4WFVlPH03kDqwJwNr376af6eI18RYbx6BwiTcL4zxnLcPvVlI1y97-lMddyNQQDM6OfhAhpc</con:value></con:property><con:property><con:name>ehrId-man</con:name><con:value>8d075820-b3cb-4fbe-9666-3106776652d2</con:value></con:property><con:property><con:name>ehrId-woman</con:name><con:value>caeb8ed2-ba2e-4673-805a-6e81680ac4d1</con:value></con:property></con:properties></con:testSuite><con:testSuite id="2cc3656b-1e02-42bf-a61b-7918ead3ab2d" name="post/getLifeAnamnesis v3"><con:description>TestSuite generated for REST Service [http://emiasinfo-application.test.emias.mos.ru]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="23af0847-0c0a-4c6a-b558-52d067e2b5b7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Есть все виды аллергии" searchProperties="true"><con:settings/><con:testStep type="manualTestStep" name="Необходимо получить токен судир" id="a598f615-f97a-4724-8aa8-1d78f6904902"><con:description>Перед запуском необходимо получить токен судир
в сьюте "Получение токена СУДИР и токена ЛК"
Первый раз получить в тест кейсе "Получение токена судир и токена ЛК"!
Последующие разы можно обновлять тест кейсом "Обновить токен СУДИР"!</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="d68cb447-56ad-46e9-b84c-2e1c196d7758"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "lifeAnamnesisForm": {
    "allergyAnamnesis": {
      "haveAllergy": "да",
      "whatExactly": [
        {
          "selectAllergy": "на лекарственные препараты"
        },
        {
          "selectAllergy": "на вакцины (прививки)"
        },
        {
          "selectAllergy": "на пищевые продукты"
        },
        {
          "selectAllergy": "на вещества бытовой химии"
        },
        {
          "selectAllergy": "на пыль, плесень"
        },
        {
          "selectAllergy": "на укусы насекомых"
        },
        {
          "selectAllergy": "на домашних животных"
        },
        {
          "selectAllergy": "на растения, пыльцу (поллиноз)"
        },
        {
          "selectAllergy": "на ультрафиолетовый свет/солнечные лучи"
        },
        {
          "selectAllergy": "на холод"
        },
        {
          "selectAllergy": "на местные обезболивающие средства"
        },
        {
          "selectAllergy": "на иные аллергены"
        }
      ]
    }
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="a73f6946-e881-4ea6-ae1e-aafd3a4463e7"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="4b24bf66-ab5e-45f0-b98f-7c1d7cae3977"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2f56bd4-f55d-4d38-a4be-13ceea3aafec"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy true"><con:configuration><path>$.payload.allergy.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка аллергоанамнеза" id="bd1aaf6b-b463-4ed4-831c-a22f69a67153"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг аллергоанамнеза из постановки
def selectAllergy = [
0: [code:"at0109", value: "на лекарственные препараты"],
1: [code:"at0110", value: "на вакцины (прививки)"],
2: [code:"at0111", value: "на пищевые продукты"],
3: [code:"at0112", value: "на вещества бытовой химии"],
4: [code:"at0113", value: "на пыль, плесень"],
5: [code:"at0114", value: "на укусы насекомых"],
6: [code:"at0115", value: "на домашних животных"],
7: [code:"at0116", value: "на растения, пыльцу (поллиноз)"],
8: [code:"at0117", value: "на ультрафиолетовый свет/солнечные лучи"],
9: [code:"at0118", value: "на холод"],
10: [code:"at0119", value: "на местные обезболивающие средства"],
11: [code:"at0120", value: "на иные аллергены"]
]

def haveAllergy = [code:"at0006", value: "да"]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с selectAllergy
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
SelectAllergyLKCode = textGetRespLK.allergy.whatExactly.selectAllergy.code
SelectAllergyLKValue = textGetRespLK.allergy.whatExactly.selectAllergy.value
// Проверяем соответствие ответа getLifeAnamnesis маппингу
for (int i=0; i&lt; selectAllergy.size(); i++){
assert SelectAllergyLKCode[0].get(i).get(0) == selectAllergy[i].code// вытаскиваем элемент из массива из массива
assert SelectAllergyLKValue[0].get(i).get(0) == selectAllergy[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с haveAllergy
HaveAllergyLKCode = textGetRespLK.allergy.haveAllergy.code
HaveAllergyLKValue = textGetRespLK.allergy.haveAllergy.value
assert HaveAllergyLKCode[0].get(0) == haveAllergy.code
assert HaveAllergyLKValue[0].get(0) == haveAllergy.value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK и getLifeAnamnesisInfo
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
SelectAllergyInfoCode = textGetRespInfo.payload.allergy.whatExactly.selectAllergy.code
SelectAllergyInfoValue = textGetRespInfo.payload.allergy.whatExactly.selectAllergy.value
for (int i=0; i&lt; selectAllergy.size(); i++){
assert SelectAllergyInfoCode[i] == SelectAllergyLKCode[0].get(i).get(0)
assert SelectAllergyInfoValue[i] == SelectAllergyLKValue[0].get(i).get(0)
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="40dcb551-7c3d-43be-93a8-cd3325b20fd1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Нет аллергии" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="9b623426-e08c-4e93-91ed-fc49ba901461"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "lifeAnamnesisForm": {
    "allergyAnamnesis": {
      "haveAllergy": "нет (ранее не было проявлений)"
    }
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="20c92e71-df4b-428a-9256-9946434a32e1"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="d5158ca6-f301-4e0b-99f7-8e0f5a41df0a"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy true"><con:configuration><path>$.payload.allergy.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка аллергоанамнеза" id="eded43d0-c504-41aa-86fc-88d3d2f830d9"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг аллергоанамнеза из постановки
def haveAllergy = [code:"at0007", value: "нет (ранее не было проявлений)"]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с selectAllergy
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
SelectAllergyLKCode = textGetRespLK.allergy.whatExactly.selectAllergy.code
SelectAllergyLKValue = textGetRespLK.allergy.whatExactly.selectAllergy.value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с haveAllergy
HaveAllergyLKCode = textGetRespLK.allergy.haveAllergy.code
HaveAllergyLKValue = textGetRespLK.allergy.haveAllergy.value
// Проверяем соответствие ответа getLifeAnamnesis от ЛК маппингу
assert HaveAllergyLKCode[0].get(0) == haveAllergy.code
assert HaveAllergyLKValue[0].get(0) == haveAllergy.value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
HaveAllergyInfo = textGetRespInfo.payload.allergy.haveAllergy
assert HaveAllergyInfo == HaveAllergyLKValue[0].get(0) 
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="49f30a25-1d88-46ed-842f-14b00981ea44" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Курить начал до 15 лет, &lt;10 штук; алкоголь никогда" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="974986a6-9b25-4dd7-9294-4e5b8a24a860"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "lifeAnamnesisForm": {
    "harmfulHabitsAnamnesis": {
      "isSmoking": "да",
      "ifSmokeAnswer": {
        "ageSmoking": "в детском (до 15 лет)",
        "smokingCount": "меньше 10 штук"
      },
      "frequencyAlcoholDrinks": "никогда"
    }
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="87140497-3800-489f-9ae8-41def28d3c95"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="dd298029-210b-459f-975c-79385f8fd2c1"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="8ff0c728-457b-40df-aa54-a61fd20b5844"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[0].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[0].value


// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapAgeSmoking
ageSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.code
ageSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.value
assert ageSmokingLKCode[0].get(0).get(0) == mapAgeSmoking[0].code
assert ageSmokingLKValue[0].get(0).get(0) == mapAgeSmoking[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapSmokingCount
smokingCountLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.code
smokingCountLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.value
assert smokingCountLKCode[0].get(0).get(0) == mapSmokingCount[0].code
assert smokingCountLKValue[0].get(0).get(0) == mapSmokingCount[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[0].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
ageSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.ageSmoking
smokingCountInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.smokingCount
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert ageSmokingInfo == ageSmokingLKValue[0].get(0).get(0)
assert smokingCountInfo == smokingCountLKValue[0].get(0).get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)


</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a0716987-f1cb-488e-a481-0488408f61ef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Курить начал 15-17 лет, &lt;1 пачки; алкоголь ежедневно, 1-2 порции" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="e01fc9d4-a611-4c26-9e36-7e7b8f8c0cdd"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "lifeAnamnesisForm": {
    "harmfulHabitsAnamnesis": {
      "isSmoking": "да",
      "ifSmokeAnswer": {
        "ageSmoking": "в подростковом (15-17 лет)",
        "smokingCount": "меньше 1 пачки"
      },
      "frequencyAlcoholDrinks": "ежедневно",
      "ifDrinkAnswer": {
        "portionsCount": "1-2 порции"
      }
    }
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="e1124adf-25e5-4d0a-aeff-1c9d6720898a"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="4308e22c-567a-47f1-bfcb-2740249fbabd"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="8e972a6a-5f2a-4e98-979e-f12cad70e7ed"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[0].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[0].value


// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapAgeSmoking
ageSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.code
ageSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.value
assert ageSmokingLKCode[0].get(0).get(0) == mapAgeSmoking[1].code
assert ageSmokingLKValue[0].get(0).get(0) == mapAgeSmoking[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapSmokingCount
smokingCountLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.code
smokingCountLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.value
assert smokingCountLKCode[0].get(0).get(0) == mapSmokingCount[1].code
assert smokingCountLKValue[0].get(0).get(0) == mapSmokingCount[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[1].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapPortionsCount
portionsCountLKCode = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.code
portionsCountLKValue = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.value
assert portionsCountLKCode[0].get(0).get(0) == mapPortionsCount[0].code
assert portionsCountLKValue[0].get(0).get(0) == mapPortionsCount[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
ageSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.ageSmoking
smokingCountInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.smokingCount
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
portionsCountInfo = textGetRespInfo.payload.harmfulHabits.ifDrinkAnswer.portionsCount
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert ageSmokingInfo == ageSmokingLKValue[0].get(0).get(0)
assert smokingCountInfo == smokingCountLKValue[0].get(0).get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)
assert portionsCountInfo == portionsCountLKValue[0].get(0).get(0)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="54c22a4c-d66e-46e3-b459-ad95f7ee90a1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Курить начал >18, >1 пачки, бросил &lt;1 года; алкоголь еженедельно, 3-4 порции" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="932b3130-5bb0-4363-8d72-2e941acca66f"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"harmfulHabitsAnamnesis": {
			"ifSmokeAnswer": {
				"ageSmoking": "в зрелом (старше 18 лет)",
				"smokingCount": "больше 1 пачки",
				"stopSmoking": "менее 1 года назад"
			},
			"frequencyAlcoholDrinks": "еженедельно",
			"ifDrinkAnswer": {
				"portionsCount": "3-4 порции"
			},
			"isSmoking": "бросил(а)"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="23d2ce3a-6ceb-4605-bb72-2f13786652d0"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="51e394f0-8c87-4a84-9cab-e182070f2557"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="81f455d1-fd92-4bb4-ad1e-69f3e75bb288"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[2].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[2].value


// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapAgeSmoking
ageSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.code
ageSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.ageSmoking.value
assert ageSmokingLKCode[0].get(0).get(0) == mapAgeSmoking[2].code
assert ageSmokingLKValue[0].get(0).get(0) == mapAgeSmoking[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapSmokingCount
smokingCountLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.code
smokingCountLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.smokingCount.value
assert smokingCountLKCode[0].get(0).get(0) == mapSmokingCount[2].code
assert smokingCountLKValue[0].get(0).get(0) == mapSmokingCount[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[2].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapPortionsCount
portionsCountLKCode = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.code
portionsCountLKValue = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.value
assert portionsCountLKCode[0].get(0).get(0) == mapPortionsCount[1].code
assert portionsCountLKValue[0].get(0).get(0) == mapPortionsCount[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapStopSmoking
stopSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.code
stopSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.value
assert stopSmokingLKCode[0].get(0).get(0) == mapStopSmoking[0].code
assert stopSmokingLKValue[0].get(0).get(0) == mapStopSmoking[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
ageSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.ageSmoking
smokingCountInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.smokingCount
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
portionsCountInfo = textGetRespInfo.payload.harmfulHabits.ifDrinkAnswer.portionsCount
stopSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.stopSmoking
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert ageSmokingInfo == ageSmokingLKValue[0].get(0).get(0)
assert smokingCountInfo == smokingCountLKValue[0].get(0).get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)
assert portionsCountInfo == portionsCountLKValue[0].get(0).get(0)
assert stopSmokingInfo == stopSmokingLKValue[0].get(0).get(0)

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1bc6284d-92b8-4c11-a7a6-3198954d344a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Курить бросил &lt;15 лет; алкоголь иногда, 5-6 порций" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="b7287dd2-bc16-4a45-a5cf-9a6cb1bd1675"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "lifeAnamnesisForm": {
    "harmfulHabitsAnamnesis": {
      "isSmoking": "бросил(а)",
      "ifSmokeAnswer": {
            "stopSmoking": "менее 15 лет назад"
      },
      "frequencyAlcoholDrinks": "иногда",
      "ifDrinkAnswer": {
        "portionsCount": "5-6 порций"
      }
    }
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="69bf6191-4ca3-4314-a833-90a4212fc85e"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="88a61ae3-0b39-4299-b6c9-c287c5d2254b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="387e70cb-7bfb-4a00-b203-1192d7bae6d6"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[2].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[3].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[3].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapPortionsCount
portionsCountLKCode = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.code
portionsCountLKValue = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.value
assert portionsCountLKCode[0].get(0).get(0) == mapPortionsCount[2].code
assert portionsCountLKValue[0].get(0).get(0) == mapPortionsCount[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapStopSmoking
stopSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.code
stopSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.value
assert stopSmokingLKCode[0].get(0).get(0) == mapStopSmoking[1].code
assert stopSmokingLKValue[0].get(0).get(0) == mapStopSmoking[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
ageSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.ageSmoking
smokingCountInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.smokingCount
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
portionsCountInfo = textGetRespInfo.payload.harmfulHabits.ifDrinkAnswer.portionsCount
stopSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.stopSmoking
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)
assert portionsCountInfo == portionsCountLKValue[0].get(0).get(0)
assert stopSmokingInfo == stopSmokingLKValue[0].get(0).get(0)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b8365a6a-4284-4be7-8bd1-6ac7aec4df29" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Курить бросил >15 лет; алкоголь иногда, 7-9 порций" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="2e29a3a8-6f77-4fba-80ed-f77a2c39e1d6"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"harmfulHabitsAnamnesis": {
			"ifSmokeAnswer": {
				"stopSmoking": "более 15 лет назад"
			},
			"frequencyAlcoholDrinks": "иногда",
			"ifDrinkAnswer": {
				"portionsCount": "7-9 порций"
			},
			"isSmoking": "бросил(а)"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="c908908b-7d46-4707-9d51-a0993c577264"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="5cbc06b9-c8cc-4959-9abd-ee468d1c1f9b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="a6646203-4038-4a71-a691-68a53ef2880e"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[2].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[3].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[3].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapPortionsCount
portionsCountLKCode = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.code
portionsCountLKValue = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.value
assert portionsCountLKCode[0].get(0).get(0) == mapPortionsCount[3].code
assert portionsCountLKValue[0].get(0).get(0) == mapPortionsCount[3].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapStopSmoking
stopSmokingLKCode = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.code
stopSmokingLKValue = textGetRespLK.harmfulHabits.ifSmokeAnswer.stopSmoking.value
assert stopSmokingLKCode[0].get(0).get(0) == mapStopSmoking[2].code
assert stopSmokingLKValue[0].get(0).get(0) == mapStopSmoking[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[2].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[2].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
ageSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.ageSmoking
smokingCountInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.smokingCount
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
portionsCountInfo = textGetRespInfo.payload.harmfulHabits.ifDrinkAnswer.portionsCount
stopSmokingInfo = textGetRespInfo.payload.harmfulHabits.ifSmokeAnswer.stopSmoking
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)
assert portionsCountInfo == portionsCountLKValue[0].get(0).get(0)
assert stopSmokingInfo == stopSmokingLKValue[0].get(0).get(0)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2e88e61f-afbb-4aed-ab69-63ee1bf1e33f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Не курит; алкоголь иногда, >10 порций" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="8fb5ac0f-d738-4ace-acc4-b6a0ede5ec60"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"harmfulHabitsAnamnesis": {
			"frequencyAlcoholDrinks": "иногда",
			"ifDrinkAnswer": {
				"portionsCount": "более 10 порций"
			},
			"isSmoking": "нет"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="10c9f0d1-b562-4061-92d5-29614f16bf15"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isHazardousWork"><con:configuration><token>isHazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=1"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="28f205f0-f553-446c-a1fd-db729f10d1ca"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits true"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f51229a-6ec2-440e-b2d0-cfacd04ff083"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных привычек" id="118b5b20-d330-4435-9510-a4db7411c762"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsSmoking  = [
0: [code:"at0057", value: "да"],
1: [code:"at0058", value: "нет"],
2: [code:"at0074", value: "бросил(а)"]
]
def mapAgeSmoking = [
0: [code:"at0075", value: "в детском (до 15 лет)"],
1: [code:"at0076", value: "в подростковом (15-17 лет)"],
2: [code:"at0077", value: "в зрелом (старше 18 лет)"]
]

def mapSmokingCount = [
0: [code:"at0078", value: "меньше 10 штук"],
1: [code:"at0079", value: "меньше 1 пачки"],
2: [code:"at0080", value: "больше 1 пачки"]
]

def mapStopSmoking = [
0: [code:"at0081", value: "менее 1 года назад"],
1: [code:"at0082", value: "менее 15 лет назад"],
2: [code:"at0083", value: "более 15 лет назад"]
]

def mapFrequencyAlcoholDrinks = [
0: [code:"at0084", value: "никогда"],
1: [code:"at0085", value: "ежедневно"],
2: [code:"at0086", value: "еженедельно"],
3: [code:"at0087", value: "иногда"]
]

def mapPortionsCount = [
0: [code:"at0088", value: "1-2 порции"],
1: [code:"at0089", value: "3-4 порции"],
2: [code:"at0090", value: "5-6 порций"],
3: [code:"at0091", value: "7-9 порций"],
4: [code:"at0092", value: "более 10 порций"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[1].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapFrequencyAlcoholDrinks
frequencyAlcoholDrinksLKCode = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.code
frequencyAlcoholDrinksLKValue = textGetRespLK.harmfulHabits.frequencyAlcoholDrinks.value
assert frequencyAlcoholDrinksLKCode[0].get(0) == mapFrequencyAlcoholDrinks[3].code
assert frequencyAlcoholDrinksLKValue[0].get(0) == mapFrequencyAlcoholDrinks[3].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapPortionsCount
portionsCountLKCode = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.code
portionsCountLKValue = textGetRespLK.harmfulHabits.ifDrinkAnswer.portionsCount.value
assert portionsCountLKCode[0].get(0).get(0) == mapPortionsCount[4].code
assert portionsCountLKValue[0].get(0).get(0) == mapPortionsCount[4].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsSmoking
isSmokingLKCode = textGetRespLK.harmfulHabits.isSmoking.code
isSmokingLKValue = textGetRespLK.harmfulHabits.isSmoking.value
assert isSmokingLKCode[0].get(0) == mapIsSmoking[1].code
assert isSmokingLKValue[0].get(0) == mapIsSmoking[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
frequencyAlcoholDrinksInfo = textGetRespInfo.payload.harmfulHabits.frequencyAlcoholDrinks
portionsCountInfo = textGetRespInfo.payload.harmfulHabits.ifDrinkAnswer.portionsCount
isSmokingInfo = textGetRespInfo.payload.harmfulHabits.isSmoking
assert isSmokingInfo == isSmokingLKValue[0].get(0)
assert frequencyAlcoholDrinksInfo == frequencyAlcoholDrinksLKValue[0].get(0)
assert portionsCountInfo == portionsCountLKValue[0].get(0).get(0)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cac8daeb-11d1-4129-9745-193f7fb2e370" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Не работал на вредных производствах" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="5f23b816-6553-4ce7-8105-ad418ba55a61"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"hazardousWorkAnamnesis": {
			"hazardousWork": {},
			"isHazardousWork": "нет"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="faf6d92c-a383-4e53-8afd-23fcdff1f469"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=1"><con:configuration><path>$.hazardousWork</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="01ec3af4-5a8c-4cdb-9f16-7ddd367c11ef"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork true"><con:configuration><path>$.payload.hazardousWork.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных производств" id="f0b962d2-7a12-4c94-9dba-64fd46c6cf25"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsHazardousWork  = [
0: [code:"at0009", value: "да"],
1: [code:"at0010", value: "нет"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsHazardousWork
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isHazardousWorkLKCode = textGetRespLK.hazardousWork.hazardousWork.isHazardousWork.code
isHazardousWorkLKValue = textGetRespLK.hazardousWork.hazardousWork.isHazardousWork.value
assert isHazardousWorkLKCode[0].get(0).get(0) == mapIsHazardousWork[1].code
assert isHazardousWorkLKValue[0].get(0).get(0) == mapIsHazardousWork[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isHazardousWorkInfo = textGetRespInfo.payload.hazardousWork.isHazardousWork
assert isHazardousWorkInfo == isHazardousWorkLKValue[0].get(0).get(0)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="226b3f13-93e4-4762-b492-bad5dbbca056" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Работал на вредных производствах" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="892c3fb8-c2d4-4084-a587-28dcb1cc924e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"hazardousWorkAnamnesis": {
			"hazardousWork": {
				"recitation": [
					"производство асбеста",
					"производство радона",
					"производство мышьяка",
					"сварочное производство",
					"работа на типографии",
					"производство резины",
					"работа в условиях длительного воздействия вредных веществ (токсические соединения, пыль, ионизирующая радиация)"
				],
				"other": "иное вредное производство",
				"yearsCount": "13"
			},
			"isHazardousWork": "да"
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="da2be083-fa05-420f-9203-0bb7f88327ef"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=0"><con:configuration><path>$.diseases</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=1"><con:configuration><path>$.hazardousWork</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="a4f5b63d-dfda-4841-9a60-def6dc882071"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases false"><con:configuration><path>$.payload.diseases.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork true"><con:configuration><path>$.payload.hazardousWork.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка вредных производств" id="d5693cfd-40a2-4cee-b3aa-182ba4f7da05"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг вредных привычек из постановки
def mapIsHazardousWork  = [
0: [code:"at0009", value: "да"],
1: [code:"at0010", value: "нет"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapIsHazardousWork
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
isHazardousWorkLKCode = textGetRespLK.hazardousWork.hazardousWork.isHazardousWork.code
isHazardousWorkLKValue = textGetRespLK.hazardousWork.hazardousWork.isHazardousWork.value
yearsCountLK = textGetRespLK.hazardousWork.hazardousWork.hazardousWork.yearsCount[0].get(0).get(0).get(0)
recitationLK = textGetRespLK.hazardousWork.hazardousWork.hazardousWork.recitation[0].get(0).get(0)
otherLK = textGetRespLK.hazardousWork.hazardousWork.hazardousWork.other[0].get(0).get(0)
assert isHazardousWorkLKCode[0].get(0).get(0) == mapIsHazardousWork[0].code
assert isHazardousWorkLKValue[0].get(0).get(0) == mapIsHazardousWork[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
isHazardousWorkInfo = textGetRespInfo.payload.hazardousWork.isHazardousWork
assert isHazardousWorkInfo == isHazardousWorkLKValue[0].get(0).get(0)
yearsCountInfo = textGetRespInfo.payload.hazardousWork.hazardousWork.yearsCount
assert yearsCountInfo == yearsCountLK
recitationInfo = textGetRespInfo.payload.hazardousWork.hazardousWork.recitation
assert recitationInfo == recitationLK
otherInfo = textGetRespInfo.payload.hazardousWork.hazardousWork.other
assert recitationInfo == recitationLK</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5eee9b72-af82-42d2-95fa-f5d2f68bf04a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Переливание крови = &quot;да&quot;, реакция = &quot;нет&quot;" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="1bba3eb5-3c24-4cba-a4b8-82edac43aec6"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {
		    "bloodTransfusion": {
                "haveBloodTransfusion": "да",
                "bloodTransfusionReactions": "нет"
            }
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="3e19c87e-af99-4042-b88c-ffe6a851e8f3"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=1"><con:configuration><path>$.diseases</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="cc9bafdf-c761-4ed0-992a-f4bd992f4665"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases true"><con:configuration><path>$.payload.diseases.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка переливания крови" id="917423a9-c862-411f-a4db-7fbc7bcdd70c"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг bloodTransfusion из постановки
def mapHaveBloodTransfusion	 = [
0: [code:"at0059", value: "да"],
1: [code:"at0060", value: "нет"]
]

def mapBloodTransfusionReactions	 = [
0: [code:"at0062", value: "да"],
1: [code:"at0063", value: "нет"]
]

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapHaveBloodTransfusion
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString()
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
haveBloodTransfusionLKCode = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.code
haveBloodTransfusionLKValue = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[0].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[0].value

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapBloodTransfusionReactions
bloodTransfusionReactionsLKCode = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.code
bloodTransfusionReactionsLKValue = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[0].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
RegularMedicinesInfo = textGetRespInfo.payload.diseases.medicines.regularMedicines
for (int i=0; i&lt; RegularMedicinesInfo.size(); i++){
assert RegularMedicinesInfo[i] == RegularMedicinesLKValue[0].get(0).get(i)
}
haveBloodTransfusionInfo = textGetRespInfo.payload.diseases.bloodTransfusion.haveBloodTransfusion
assert haveBloodTransfusionInfo == haveBloodTransfusionLKValue[0].get(0).get(0)
bloodTransfusionReactionsInfo = textGetRespInfo.payload.diseases.bloodTransfusion.bloodTransfusionReactions
assert bloodTransfusionReactionsInfo == bloodTransfusionReactionsLKValue[0].get(0).get(0)
haveInjuresInfo = textGetRespInfo.payload.diseases.diseases.haveInjures
for (int i=0; i&lt; haveInjuresInfo.size(); i++){
assert haveInjuresInfo[i] == haveInjuresLKValue[0].get(0).get(i)
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2274931d-2d9b-404e-b881-e6c16c76eed0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Переливание крови = &quot;да&quot;, реакция = &quot;да&quot;" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="7188412c-1aab-4c13-8e53-e8f4c61beb37"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {
			"bloodTransfusion": {
				"haveBloodTransfusion": "да",
				"bloodTransfusionReactions": "да"
			}
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="10756c46-86e2-42c1-a562-772555d47756"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=1"><con:configuration><path>$.diseases</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="063cf65c-f323-4cb7-b06f-07df6cbc981f"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases true"><con:configuration><path>$.payload.diseases.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка переливания крови" id="35d80a2a-c93b-4796-aa54-a6e0513de45d"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг bloodTransfusion из постановки
def mapHaveBloodTransfusion	 = [
0: [code:"at0059", value: "да"],
1: [code:"at0060", value: "нет"]
]

def mapBloodTransfusionReactions	 = [
0: [code:"at0062", value: "да"],
1: [code:"at0063", value: "нет"]
]

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapHaveBloodTransfusion
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString()
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
haveBloodTransfusionLKCode = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.code
haveBloodTransfusionLKValue = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[0].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[0].value

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapBloodTransfusionReactions
bloodTransfusionReactionsLKCode = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.code
bloodTransfusionReactionsLKValue = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.value
assert bloodTransfusionReactionsLKCode[0].get(0).get(0) == mapBloodTransfusionReactions[0].code
assert bloodTransfusionReactionsLKValue[0].get(0).get(0) == mapBloodTransfusionReactions[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
RegularMedicinesInfo = textGetRespInfo.payload.diseases.medicines.regularMedicines
for (int i=0; i&lt; RegularMedicinesInfo.size(); i++){
assert RegularMedicinesInfo[i] == RegularMedicinesLKValue[0].get(0).get(i)
}
haveBloodTransfusionInfo = textGetRespInfo.payload.diseases.bloodTransfusion.haveBloodTransfusion
assert haveBloodTransfusionInfo == haveBloodTransfusionLKValue[0].get(0).get(0)
bloodTransfusionReactionsInfo = textGetRespInfo.payload.diseases.bloodTransfusion.bloodTransfusionReactions
assert bloodTransfusionReactionsInfo == bloodTransfusionReactionsLKValue[0].get(0).get(0)
haveInjuresInfo = textGetRespInfo.payload.diseases.diseases.haveInjures
for (int i=0; i&lt; haveInjuresInfo.size(); i++){
assert haveInjuresInfo[i] == haveInjuresLKValue[0].get(0).get(i)
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1668412a-161f-4458-9127-0f01afd82583" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Переливание крови = &quot;нет&quot;" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="a8fb4722-2860-41c8-bc78-e0f68b8b9aac"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {
			"bloodTransfusion": {
				"haveBloodTransfusion": "нет"
			}
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="a8157cef-a5f8-4947-9a9b-5ea5f38c98e5"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=1"><con:configuration><path>$.diseases</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="ba0020e5-4afe-472b-a330-e144150bca43"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases true"><con:configuration><path>$.payload.diseases.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка переливания крови" id="93fcdb0d-37bf-4dce-b691-25bd4164b790"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг bloodTransfusion из постановки
def mapHaveBloodTransfusion	 = [
0: [code:"at0059", value: "да"],
1: [code:"at0060", value: "нет"]
]

def mapBloodTransfusionReactions	 = [
0: [code:"at0062", value: "да"],
1: [code:"at0063", value: "нет"]
]

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapHaveBloodTransfusion
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString()
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
haveBloodTransfusionLKCode = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.code
haveBloodTransfusionLKValue = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[1].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
RegularMedicinesInfo = textGetRespInfo.payload.diseases.medicines.regularMedicines
for (int i=0; i&lt; RegularMedicinesInfo.size(); i++){
assert RegularMedicinesInfo[i] == RegularMedicinesLKValue[0].get(0).get(i)
}
haveBloodTransfusionInfo = textGetRespInfo.payload.diseases.bloodTransfusion.haveBloodTransfusion
assert haveBloodTransfusionInfo == haveBloodTransfusionLKValue[0].get(0).get(0)
bloodTransfusionReactionsInfo = textGetRespInfo.payload.diseases.bloodTransfusion.bloodTransfusionReactions
haveInjuresInfo = textGetRespInfo.payload.diseases.diseases.haveInjures
for (int i=0; i&lt; haveInjuresInfo.size(); i++){
assert haveInjuresInfo[i] == haveInjuresLKValue[0].get(0).get(i)
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e319af3d-1c9a-43c7-a21b-31f3459e8bb2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Заболевания. Мужчины: отмечены все виды заболеваний" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="0b37a9a2-57a8-4769-83d3-457b99b601bd"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {
			"medicines": {
				"regularMedicines": [
					"гипотензивные препараты",
					"сахароснижающие препараты",
					"кроворазжижающие препараты",
					"препараты химиотерапии",
					"мочегонные препараты (диуретики)",
					"сердечные гликозиды",
					"обезболивающие препараты (нестероидные противовоспалительные средства)",
					"антидепрессанты",
					"противосудорожные препараты",
					"препараты для лечения астмы (ингаляторы, лекарственные средства)"
				]
			},
			"diseases": {
				"diseasesInChildHood": [
					"корь",
					"краснуха",
					"ветряная оспа",
					"коклюш",
					"свинка"
				],
				"haveDiseases": [
					"онкологические заболевания",
					"туберкулез",
					"гепатит",
					"язвенная болезнь",
					"бронхиальная астма",
					"артериальная гипертензия",
					"инфаркт",
					"инсульт",
					"сахарный диабет"
				],
				"haveInjures": [
					"травмы грудной клетки",
					"травмы таза",
					"травмы позвоночника",
					"переломы конечностей",
					"черепно-мозговые травмы"
				],
				"haveSurgeries": [
					"удаление аппендикса",
					"удаление желчного пузыря",
					"удаление органа в результате лечения онкологического заболевания",
					"удаление щитовидной железы",
					"операции на сосудах и сердце"
				]
			}
		}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="d03943b7-4746-43c2-84f5-1c883d3e4db1"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=1"><con:configuration><path>$.diseases</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="4ef7e556-1cf0-4983-aef9-a6c283320f9d"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases true"><con:configuration><path>$.payload.diseases.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка перенесенных заболеваний" id="05131f99-37ed-44fd-aecf-91bfd8e36ff9"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

// Маппинг RegularMedicines из постановки
def mapRegularMedicinesMAN  = [
0: [code:"at0043", value: "гипотензивные препараты"],
1: [code:"at0044", value: "сахароснижающие препараты"],
2: [code:"at0045", value: "кроворазжижающие препараты"],
3: [code:"at0046", value: "препараты химиотерапии"],
4: [code:"at0047", value: "мочегонные препараты (диуретики)"],
5: [code:"at0048", value: "сердечные гликозиды"],
6: [code:"at0049", value: "обезболивающие препараты (нестероидные противовоспалительные средства)"],
7: [code:"at0050", value: "антидепрессанты"],
8: [code:"at0051", value: "противосудорожные препараты"],
9: [code:"at0054", value: "препараты для лечения астмы (ингаляторы, лекарственные средства)"]
]

def mapRegularMedicinesNO = [0: [code:"at0055", value: "нет"]]

def mapDiseasesInChildHood  = [
0: [code:"at0019", value: "корь"],
1: [code:"at0020", value: "краснуха"],
2: [code:"at0021", value: "ветряная оспа"],
3: [code:"at0022", value: "коклюш"],
4: [code:"at0023", value: "свинка"]
]

def mapHaveDiseasesMAN  = [
0: [code:"at0015", value: "онкологические заболевания"],
1: [code:"at0014", value: "туберкулез"],
2: [code:"at0013", value: "гепатит"],
3: [code:"at0012", value: "язвенная болезнь"],
4: [code:"at0011", value: "бронхиальная астма"],
5: [code:"at0010", value: "артериальная гипертензия"],
6: [code:"at0009", value: "инфаркт"],
7: [code:"at0008", value: "инсульт"],
8: [code:"at0007", value: "сахарный диабет"]
]

def mapHaveDiseasesWOMAN  = [
0: [code:"at0016", value: "мастит"],
1: [code:"at0017", value: "нет"]
]

def mapHaveInjuresMAN  = [
0: [code:"at0030", value: "травмы грудной клетки"],
1: [code:"at0029", value: "травмы таза"],
2: [code:"at0028", value: "травмы позвоночника"],
3: [code:"at0027", value: "переломы конечностей"],
4: [code:"at0026", value: "черепно-мозговые травмы"]
]

def mapHaveSurgeriesMAN  = [
0: [code:"at0034", value: "удаление аппендикса"],
1: [code:"at0035", value: "удаление желчного пузыря"],
2: [code:"at0036", value: "удаление органа в результате лечения онкологического заболевания"],
3: [code:"at0038", value: "удаление щитовидной железы"],
4: [code:"at0037", value: "операции на сосудах и сердце"]
]

def mapHaveBloodTransfusion	 = [
0: [code:"at0059", value: "да"],
1: [code:"at0060", value: "нет"]
]

def mapBloodTransfusionReactions	 = [
0: [code:"at0062", value: "да"],
1: [code:"at0063", value: "нет"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapRegularMedicinesMAN
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString() // получает из get-запроса ответ
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
RegularMedicinesLKCode = textGetRespLK.diseases.medicines.regularMedicines.code
RegularMedicinesLKValue = textGetRespLK.diseases.medicines.regularMedicines.value
for (int i=0; i< mapRegularMedicinesMAN.size(); i++){
assert RegularMedicinesLKCode[0].get(0).get(i) == mapRegularMedicinesMAN[i].code// вытаскиваем элемент из массива из массива
assert RegularMedicinesLKValue[0].get(0).get(i) == mapRegularMedicinesMAN[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveInjuresMAN
haveInjuresLKCode = textGetRespLK.diseases.diseases.haveInjures.code
haveInjuresLKValue = textGetRespLK.diseases.diseases.haveInjures.value
for (int i=0; i< mapHaveInjuresMAN.size(); i++){
assert haveInjuresLKCode[0].get(0).get(i) == mapHaveInjuresMAN[i].code// вытаскиваем элемент из массива из массива
assert haveInjuresLKValue[0].get(0).get(i) == mapHaveInjuresMAN[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveSurgeriesMAN
haveSurgeriesLKCode = textGetRespLK.diseases.diseases.haveSurgeries.code
haveSurgeriesLKValue = textGetRespLK.diseases.diseases.haveSurgeries.value
// Проверяем соответствие ответа getLifeAnamnesis маппингу
for (int i=0; i< mapHaveSurgeriesMAN.size(); i++){
assert haveSurgeriesLKCode[0].get(0).get(i) == mapHaveSurgeriesMAN[i].code// вытаскиваем элемент из массива из массива
assert haveSurgeriesLKValue[0].get(0).get(i) == mapHaveSurgeriesMAN[i].value
}

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapBloodTransfusionReactions
bloodTransfusionReactionsLKCode = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.code
bloodTransfusionReactionsLKValue = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.value
//assert bloodTransfusionReactionsLKCode[0].get(0).get(0) == mapBloodTransfusionReactions[0].code
//assert bloodTransfusionReactionsLKValue[0].get(0).get(0) == mapBloodTransfusionReactions[0].value

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapHaveBloodTransfusion
haveBloodTransfusionLKCode = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.code
haveBloodTransfusionLKValue = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.value
//assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[0].code
//assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapDiseasesInChildhood
diseasesInChildhoodLKCode = textGetRespLK.diseases.diseases.diseasesInChildhood.code
diseasesInChildhoodLKValue = textGetRespLK.diseases.diseases.diseasesInChildhood.value
for (int i=0; i< mapDiseasesInChildHood.size(); i++){
assert diseasesInChildhoodLKCode[0].get(0).get(i) == mapDiseasesInChildHood[i].code
assert diseasesInChildhoodLKValue[0].get(0).get(i) == mapDiseasesInChildHood[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveDiseasesMAN
haveDiseasesLKCode = textGetRespLK.diseases.diseases.haveDiseases.code
haveDiseasesLKValue = textGetRespLK.diseases.diseases.haveDiseases.value
for (int i=0; i< mapHaveDiseasesMAN.size(); i++){
assert haveDiseasesLKCode[0].get(0).get(i) == mapHaveDiseasesMAN[i].code// вытаскиваем элемент из массива из массива
assert haveDiseasesLKValue[0].get(0).get(i) == mapHaveDiseasesMAN[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
RegularMedicinesInfo = textGetRespInfo.payload.diseases.medicines.regularMedicines
for (int i=0; i< RegularMedicinesInfo.size(); i++){
assert RegularMedicinesInfo[i] == RegularMedicinesLKValue[0].get(0).get(i)
}
haveBloodTransfusionInfo = textGetRespInfo.payload.diseases.bloodTransfusion.haveBloodTransfusion
//assert haveBloodTransfusionInfo == haveBloodTransfusionLKValue[0].get(0).get(0)
bloodTransfusionReactionsInfo = textGetRespInfo.payload.diseases.bloodTransfusion.bloodTransfusionReactions
//assert bloodTransfusionReactionsInfo == bloodTransfusionReactionsLKValue[0].get(0).get(0)
haveInjuresInfo = textGetRespInfo.payload.diseases.diseases.haveInjures
for (int i=0; i< haveInjuresInfo.size(); i++){
assert haveInjuresInfo[i] == haveInjuresLKValue[0].get(0).get(i)
}
]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="555b96d2-6cd9-40fa-8c8a-edb89182aa2c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Заболевания. Мужчины: все ответы отрицательные, переливание крови = &quot;нет&quot;" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="45b515d5-004f-4a3d-8ef6-7dc75c26f799"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {
			"bloodTransfusion": {
                "haveBloodTransfusion": "нет"
            },
			"medicines": {

        "regularMedicines": [
          "нет"
        ]

      },
		    "diseases": {
                "diseasesInChildHood": [
                    "никакими из вышеперечисленных"
                ],
                "haveDiseases": [
                    "нет"
                ],
                "haveInjures": [
                    "нет"
                ],
                "haveSurgeries": [
                    "нет"
                ]
            }	
		},
		"harmfulHabitsAnamnesis": {},
		"hazardousWorkAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="1e5d2d6a-fc32-4781-9d0f-f6fd40743f4a"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=1"><con:configuration><path>$.diseases</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="14255f2e-582b-4baa-b104-f7735b5e8eeb"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases true"><con:configuration><path>$.payload.diseases.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка перенесенных заболеваний; переливание крови" id="f6ddf32c-11b3-4408-9ea7-327d47b0eaa2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг RegularMedicines из постановки
def mapRegularMedicinesMAN = [
0: [code:"at0055", value: "гипотензивные препараты"],
1: [code:"at0044", value: "сахароснижающие препараты"],
2: [code:"at0045", value: "кроворазжижающие препараты"],
3: [code:"at0046", value: "препараты химиотерапии"],
4: [code:"at0047", value: "мочегонные препараты (диуретики)"],
5: [code:"at0048", value: "сердечные гликозиды"],
6: [code:"at0049", value: "обезболивающие препараты (нестероидные противовоспалительные средства)"],
7: [code:"at0050", value: "антидепрессанты"],
8: [code:"at0051", value: "противосудорожные препараты"],
9: [code:"at0054", value: "препараты для лечения астмы (ингаляторы, лекарственные средства)"]
]

def mapRegularMedicinesWOMAN  = [
0: [code:"at0043", value: "гипотензивные препараты"],
1: [code:"at0044", value: "сахароснижающие препараты"],
2: [code:"at0045", value: "кроворазжижающие препараты"],
3: [code:"at0046", value: "препараты химиотерапии"],
4: [code:"at0047", value: "мочегонные препараты (диуретики)"],
5: [code:"at0048", value: "сердечные гликозиды"],
6: [code:"at0049", value: "обезболивающие препараты (нестероидные противовоспалительные средства)"],
7: [code:"at0050", value: "антидепрессанты"],
8: [code:"at0051", value: "противосудорожные препараты"],
7: [code:"at0052", value: "гормональные контрацептивы"],
8: [code:"at0053", value: "препараты заместительной гормонотерапии (при менопаузе)"],
9: [code:"at0054", value: "препараты для лечения астмы (ингаляторы, лекарственные средства)"]
]

def mapRegularMedicinesNO = [0: [code:"at0055", value: "нет"]]

def mapDiseasesInChildHood  = [
0: [code:"at0019", value: "корь"],
1: [code:"at0020", value: "краснуха"],
2: [code:"at0021", value: "ветряная оспа"],
3: [code:"at0022", value: "коклюш"],
4: [code:"at0023", value: "свинка"]
]

def mapDiseasesInChildHoodNO  = [
0: [code:"at0024", value: "никакими из вышеперечисленных"]
]

def mapHaveDiseasesMAN  = [
0: [code:"at0015", value: "онкологические заболевания"],
1: [code:"at0014", value: "туберкулез"],
2: [code:"at0013", value: "гепатит"],
3: [code:"at0012", value: "язвенная болезнь"],
4: [code:"at0011", value: "бронхиальная астма"],
5: [code:"at0010", value: "артериальная гипертензия"],
6: [code:"at0009", value: "инфаркт"],
7: [code:"at0008", value: "инсульт"],
8: [code:"at0007", value: "сахарный диабет"]
]

def mapHaveDiseasesWOMAN  = [
0: [code:"at0016", value: "мастит"]
]

def mapHaveDiseasesNO  = [
0: [code:"at0017", value: "нет"]
]

def mapHaveInjuresMAN  = [
0: [code:"at0030", value: "травмы грудной клетки"],
1: [code:"at0029", value: "травмы таза"],
2: [code:"at0028", value: "травмы позвоночника"],
3: [code:"at0027", value: "переломы конечностей"],
4: [code:"at0026", value: "черепно-мозговые травмы"]
]

def mapHaveInjuresNO  = [
0: [code:"at0032", value: "нет"]
]

def mapHaveSurgeriesMAN  = [
0: [code:"at0034", value: "удаление аппендикса"],
1: [code:"at0035", value: "удаление желчного пузыря"],
2: [code:"at0036", value: "удаление органа в результате лечения онкологического заболевания"],
3: [code:"at0038", value: "удаление щитовидной железы"],
4: [code:"at0037", value: "операции на сосудах и сердце"]
]

def mapHaveSurgeriesNO  = [
0: [code:"at0040", value: "нет"]
]

def mapHaveBloodTransfusion	 = [
0: [code:"at0059", value: "да"],
1: [code:"at0060", value: "нет"]
]

def mapBloodTransfusionReactions	 = [
0: [code:"at0062", value: "да"],
1: [code:"at0063", value: "нет"]
]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapRegularMedicinesNO
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString()
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
RegularMedicinesLKCode = textGetRespLK.diseases.medicines.regularMedicines.code
RegularMedicinesLKValue = textGetRespLK.diseases.medicines.regularMedicines.value
assert RegularMedicinesLKCode[0].get(0).get(0) == mapRegularMedicinesNO[0].code
assert RegularMedicinesLKValue[0].get(0).get(0) == mapRegularMedicinesNO[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveInjuresNO
haveInjuresLKCode = textGetRespLK.diseases.diseases.haveInjures.code
haveInjuresLKValue = textGetRespLK.diseases.diseases.haveInjures.value
assert haveInjuresLKCode[0].get(0).get(0) == mapHaveInjuresNO[0].code
assert haveInjuresLKValue[0].get(0).get(0) == mapHaveInjuresNO[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveSurgeriesNO
haveSurgeriesLKCode = textGetRespLK.diseases.diseases.haveSurgeries.code
haveSurgeriesLKValue = textGetRespLK.diseases.diseases.haveSurgeries.value
// Проверяем соответствие ответа getLifeAnamnesis маппингу
assert haveSurgeriesLKCode[0].get(0).get(0) == mapHaveSurgeriesNO[0].code
assert haveSurgeriesLKValue[0].get(0).get(0) == mapHaveSurgeriesNO[0].value

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapHaveBloodTransfusion
haveBloodTransfusionLKCode = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.code
haveBloodTransfusionLKValue = textGetRespLK.diseases.bloodTransfusion.haveBloodTransfusion.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[1].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[1].value

// Сравниваем значения code и value есть из ответа getLifeAnamnesisLK с mapBloodTransfusionReactions
bloodTransfusionReactionsLKCode = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.code
bloodTransfusionReactionsLKValue = textGetRespLK.diseases.bloodTransfusion.bloodTransfusionReactions.value
assert haveBloodTransfusionLKCode[0].get(0).get(0) == mapHaveBloodTransfusion[1].code
assert haveBloodTransfusionLKValue[0].get(0).get(0) == mapHaveBloodTransfusion[1].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapDiseasesInChildhood
diseasesInChildhoodLKCode = textGetRespLK.diseases.diseases.diseasesInChildhood.code
diseasesInChildhoodLKValue = textGetRespLK.diseases.diseases.diseasesInChildhood.value
assert diseasesInChildhoodLKCode[0].get(0).get(0) == mapDiseasesInChildHoodNO[0].code
assert diseasesInChildhoodLKValue[0].get(0).get(0) == mapDiseasesInChildHoodNO[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveDiseasesNO
haveDiseasesLKCode = textGetRespLK.diseases.diseases.haveDiseases.code
haveDiseasesLKValue = textGetRespLK.diseases.diseases.haveDiseases.value
// Проверяем соответствие ответа getLifeAnamnesis маппингу
assert haveDiseasesLKCode[0].get(0).get(0) == mapHaveDiseasesNO[0].code// вытаскиваем элемент из массива из массива
assert haveDiseasesLKValue[0].get(0).get(0) == mapHaveDiseasesNO[0].value

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() // получает из get-запроса ответ
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
RegularMedicinesInfo = textGetRespInfo.payload.diseases.medicines.regularMedicines
for (int i=0; i&lt; RegularMedicinesInfo.size(); i++){
assert RegularMedicinesInfo[i] == RegularMedicinesLKValue[0].get(0).get(i)
}
haveBloodTransfusionInfo = textGetRespInfo.payload.diseases.bloodTransfusion.haveBloodTransfusion
assert haveBloodTransfusionInfo == haveBloodTransfusionLKValue[0].get(0).get(0)
haveInjuresInfo = textGetRespInfo.payload.diseases.diseases.haveInjures
for (int i=0; i&lt; haveInjuresInfo.size(); i++){
assert haveInjuresInfo[i] == haveInjuresLKValue[0].get(0).get(i)
}

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9a87cd59-3cf0-46ed-92c9-3eeed9e4111f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Женщины: отмечены все женские заболевания, медикаменды, травмы, операции" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="createLifeAnamnesis" id="4e84104c-569d-4794-91c0-18bdf327fb48"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"diseasesAnamnesis": {
			"medicines": {
				"regularMedicines": [
					"гормональные контрацептивы",
					"препараты заместительной гормонотерапии (при менопаузе)"
				]
			},
			"diseases": {
				"diseasesInChildHood": [],
				"haveDiseases": [
					"мастит"
				],
				"haveInjures": [
					"ушибы молочной железы"
				],
				"haveSurgeries": [
					"операции на молочной железе"
				]
			}
		},
		"harmfulHabitsAnamnesis": {},
		"hazardousWorkAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="40d5f5de-00b3-46a6-a45a-8cbffe6afdf3" name="Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="75fccd48-086e-44e1-b5aa-77c7100ec5e2" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5da83401-4329-4a9a-9130-95a541cf35ea" name="Not Contains SaveAnamnesisError"><con:configuration><token>SaveAnamnesisError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="239252cb-44bc-403d-92a5-b293d76d4c86" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="3e20cce2-cc1c-4902-a25c-93d4663aa1c8" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8e06e8db-28e0-43da-bfcc-801d39278ecf" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="8bb9f44d-1cfd-4086-a613-e0b420241d3f"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9912b36f-4ac1-482c-94f3-d43cf27da92f" name="Not Contains isSmoking"><con:configuration><token>isSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="b59825d8-e815-42fb-bb19-ca8f11819036" name="diseases Count=1"><con:configuration><path>$.diseases</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="03e837dd-baf9-4992-9805-b363118f1f2c" name="harmfulHabits Count=0"><con:configuration><path>$.harmfulHabits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="9b71b413-dd1e-4e0f-922a-90394ab8a1f3" name="hazardousWork Count=0"><con:configuration><path>$.hazardousWork</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad72b1e7-c5df-4d37-9737-b0807c859381" name="obstetricHistory Count=0"><con:configuration><path>$.obstetricHistory</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="75ae8eaf-addb-4302-8b80-4e20e4127635" name="allergy Count=0"><con:configuration><path>$.allergy</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="966d24c2-18fa-40db-9f92-29f1b01a996d" name="Not Contains ifDrinkAnswer"><con:configuration><token>ifDrinkAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b7a2f266-461d-4382-bf06-be614d2952cd" name="Not Contains frequencyAlcoholDrinks"><con:configuration><token>frequencyAlcoholDrinks</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cd759fbc-f538-46a8-ba04-0d3c13f3559f" name="Not Contains whatExactly"><con:configuration><token>whatExactly</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="67cbb975-c8a3-4284-a639-030c90e58264" name="Not Contains selectAllergy"><con:configuration><token>selectAllergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f24fe608-fbd1-47c0-a2ca-d9d2c9d1fcaf" name="Not Contains ifSmokeAnswer"><con:configuration><token>ifSmokeAnswer</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="99c33350-77dd-40a9-9025-718ca489a573" name="Not Contains ageSmoking"><con:configuration><token>ageSmoking</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="004f7701-cff2-44a7-9676-1a52feb56405" name="Not Contains smokingCount"><con:configuration><token>smokingCount</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="8c8a4a65-9b73-4363-b79f-2da447b3a1ab"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="73d5187d-d520-453d-920d-78aa623b8f19" name="Not Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d90b1a0-56bc-4b6c-a009-203ab777aa1c" name="diseases true"><con:configuration><path>$.payload.diseases.complete</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1cafd4-ee92-4f57-904b-0bc316df2e04" name="harmfulHabits false"><con:configuration><path>$.payload.harmfulHabits.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7066d47-04b5-46e1-9f31-d7816f4cb760" name="hazardousWork false"><con:configuration><path>$.payload.hazardousWork.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a69eeac-0130-4d32-8664-effafba89821" name="obstetricHistory false"><con:configuration><path>$.payload.obstetricHistory.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42d1b6fd-4faf-4671-94f9-5bbe4d172174" name="allergy false"><con:configuration><path>$.payload.allergy.complete</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Access-JWT}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка женских заболеваний, медикаментов, травм и операций" id="c9059739-86a3-4892-a3aa-3ed997fe1f78"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// Маппинг RegularMedicines из постановки
def mapRegularMedicinesWOMAN  = [
0: [code:"at0052", value: "гормональные контрацептивы"],
1: [code:"at0053", value: "препараты заместительной гормонотерапии (при менопаузе)"]
]

def mapHaveDiseasesWOMAN  = [code:"at0016", value: "мастит"]
def mapHaveInjuresWOMAN  = [code:"at0031", value: "ушибы молочной железы"]
def mapHaveSurgeriesWOMAN = [code:"at0039", value: "операции на молочной железе"]

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveDiseasesWOMAN
def getResponseLK = context.expand('${getLifeAnamnesisLK#Response}').toString()
def jsonGetRespLK = new JsonSlurper()// создаем объект json
def textGetRespLK = jsonGetRespLK.parseText getResponseLK
haveDiseasesLKCode = textGetRespLK.diseases.diseases.haveDiseases.code
haveDiseasesLKValue = textGetRespLK.diseases.diseases.haveDiseases.value
assert haveDiseasesLKCode[0].get(0).get(0) == mapHaveDiseasesWOMAN.code
assert haveDiseasesLKValue[0].get(0).get(0) == mapHaveDiseasesWOMAN.value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveInjuresWOMAN
haveInjuresLKCode = textGetRespLK.diseases.diseases.haveInjures.code
haveInjuresLKValue = textGetRespLK.diseases.diseases.haveInjures.value
assert haveInjuresLKCode[0].get(0).get(0) == mapHaveInjuresWOMAN.code
assert haveInjuresLKValue[0].get(0).get(0) == mapHaveInjuresWOMAN.value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapHaveSurgeriesWOMAN
haveSurgeriesLKCode = textGetRespLK.diseases.diseases.haveSurgeries.code
haveSurgeriesLKValue = textGetRespLK.diseases.diseases.haveSurgeries.value
assert haveSurgeriesLKCode[0].get(0).get(0) == mapHaveSurgeriesWOMAN.code
assert haveSurgeriesLKValue[0].get(0).get(0) == mapHaveSurgeriesWOMAN.value

// Сравниваем значения code и value из ответа getLifeAnamnesisLK с mapRegularMedicinesWOMAN
regularMedicinesLKCode = textGetRespLK.diseases.medicines.regularMedicines.code
regularMedicinesLKValue = textGetRespLK.diseases.medicines.regularMedicines.value
for (int i=0; i&lt; mapRegularMedicinesWOMAN.size(); i++){
assert regularMedicinesLKCode[0].get(0).get(i) == mapRegularMedicinesWOMAN[i].code
assert regularMedicinesLKValue[0].get(0).get(i) == mapRegularMedicinesWOMAN[i].value
}

// Сравниваем значения code и value из ответа getLifeAnamnesis от ЛК и getLifeAnamnesis от Инфо
def getResponseInfo = context.expand('${getLifeAnamnesisInfo#Response}').toString() 
def jsonGetRespInfo = new JsonSlurper()// создаем объект json
def textGetRespInfo = jsonGetRespInfo.parseText getResponseInfo
regularMedicinesInfo = textGetRespInfo.payload.diseases.medicines.regularMedicines
for (int i=0; i&lt; regularMedicinesInfo.size(); i++){
assert regularMedicinesInfo[i] == regularMedicinesLKValue[0].get(0).get(i)
}
haveInjuresInfo = textGetRespInfo.payload.diseases.diseases.haveInjures
assert haveInjuresInfo.get(0) == haveInjuresLKValue[0].get(0).get(0)
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>X-Access-JWT-man</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2ODI2NjY4NDAsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiI2M2M1NGZjNi0wOTIyLTQ1YTItODBiNC0wOTMzMzFjYjZkZjAiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiR29XVFM0TERGRjdLV2FrN2l5ZWkzRkJ5SDBheVpYa2JaN245UjA0ekNpZHRkUnN5MXJ4Nno1Y0c3Y0tJeXVUZ0o1cklLeW9kbzg2MkhCaGlXakZCQUwrM2tOdWZnUlVSTXQ3Qm1mcm9EaUZ2NEZOZzZFZE8wUnk5ZWxFdGQ5d1g1ZU04ajNoNG13OEM4TlJvSWFhNk9FVURaMnp2eWZKS0krZlJnT1k4ZEh5RFhBaWJ2MGcyeFhVTE9BcnBoSStHRXlIaTlsZVpYVVEzbFBCZ1ZBamVJUnlXQ0lKTUNkYXhhM2k0S0ZEWWZ1M3YwSzg4KzNIVncvL2JCNHhlZ29lNi80QlMxQUtab3Jkb3BtUUM2SEgzODJWUld1NG1qOFRZQWpHdldIYUZDbzE5bCtmekY1VFJaMlUxYU1jNGVLVEtrc2NhditYcXdMS1JUMlVoZ3Q2aUF3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIyIn0.Z-p09fAJo-fOGL-XF2ENBlNUnllKDBUzTuy_6cYeYx4yn1O7zTFV9ZHQFOz-A1CBhPyk3l-bNJgsXpAfS4zilvC83ybp6T59atsmWXWd-KJVx2smwItJcu2jn981HX7SJbXxL8qxMYt2qAaDwFszH5lYCwyVTOBkaJ3p4gxrzJPU9Pq8iq64eDpxR0gRoZBEOvUHJIkP3UnzlW5LG2cUpdwFLuYzU1-fvL3KFWOHSW_hTJMBwaLDQVcHtczhMSkJnYbZ9boxLS6A6EtvqXFMF7Ya8cscVXudTY4tRdIuGO0U_yZ4v7FDK8OEtoBsMHp8oXiM6-arVvpuErZhokdCWvPencdv-Lo0j6dMD-I_Mttr_7I_TAlLeJeYCobH78rzohIOHg2fo-q7Mvh4gQD6zDnhZ_5ndIot2sEBUdN9zgttA42lKqyvWTCPDEjVAt5zxkGQ63wpzoji5dPxQsFxh-gosGbwSjfnh6_mtQG3FQGdJS2SF7g9uqCB55MEAyRI-SS9nXxUIBh04vsxVIo0gm1WdZVtr-J7XuRmnlUjiiNsfy39OQfrES-cQf4zUXO-f5HO6Ti59rmL-_7h8brogvmsdBaKCMv29GDVIpIq_FCOlNQ6IbGuYBv5VMTPu6-kn6MpGb4SyFK9ypNdROQ5bNXCU2MvL2gKAj5lq_Isoto</con:value></con:property><con:property><con:name>X-Access-JWT-woman</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2ODI2NjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiIyZmFmYmE2Ni05OTc4LTRkNDItYjE3My0xMjc0OGU1OGQ3ZmIiLCJzaWQiOiI0ZDQ3NGRlOS1kYzJiLTRkZjEtOWI0Zi03YmI0MDJlMGZhNjgiLCJwaG9uZSI6Ijc5MTE0Njg0NzYyIiwic3NvX2lkIjoiQWVMZ2R1ZVFBM0JXYzdVOUtBQncveWF2QTNmWlZlVXZxSUhRQ25KTlZEOEhiZXcyYjd0TmI3ZXhGU00ydndOajNUQkJxWEJnNCtYNTRFY1E2YWEvMkk0N205VGFjMllJSm0yem1UazJKRmF3REhPQUtvZmFjcktsZDJET0l2K09JVmtDb05GYTRNd3V3VlZJZFg0eE1Xc2xmeitQcDh5WTV2MlE1N1ByZElNVkYxcWdTY1M4YStoSmF4YThWaUs5NXhkZjlhNndzSzFEMVBTQm04dkdDZms1U3BZZ0xyTUVjVUt3SWpudjZZVGJtTXQ5MzBsWXVBVnE5TEZON3FUV0Z2YVB3aFBVT2hEVDh3V0RKbkdrOFM4NzgxdzltMk10RkR6TWsyVEhmMGJxdGtnSzAvaDRzRFNWQXI0b2xsOHYwWkRXeGpTV3AwNXExdXhCc2pOY3d3PT0iLCJlbWFpbCI6InpheWNldmF0YW5pYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiXHUwNDEyXHUwNDM1XHUwNDQwXHUwNDNlXHUwNDNkXHUwNDM4XHUwNDNhXHUwNDMwIiwic2Vjb25kX25hbWUiOiJcdTA0MTMuIiwibWlkZGxlX25hbWUiOiJcdTA0MTJcdTA0NGZcdTA0NDdcdTA0MzVcdTA0NDFcdTA0M2JcdTA0MzBcdTA0MzJcdTA0M2VcdTA0MzJcdTA0M2RcdTA0MzAiLCJiaXJ0aF9kYXRlIjoiMjAwNi0xMi0yMiJ9.NEGZliFxYCQmIlDkNxV4Gzozg1Z6jULbwwY0eVKSM_jYAKAVqMLCq0f9VxPOgxXAOwNf848dY08UkjTxNAm98f-dvNCuCS8aR9VTFREAwVfMTtoMg1rplesjvp_Flj4Hqj1hFkUIJJjAfYRfxNtyIQL6uVPcR4If6Z5fl9kj7eEutsnORcSUR0o5cvnxhRzGelRw4mYplErLvJbtJoPvLmZW9AeY_mgwL4fUlEWbtneBU_wNiRTpqe70O19hIPMHI1QaGPUOSHDvJcgx-pYtV7PibqXkOSkaiD-7y2a7yGwbbNsr8-0EpTDKqUMncIGLjswbLee8rV4mWkFp8K4XULg81BhTLXxuwmFNEUq8vM6OQpKtcmoaOI7ayq_Y5z9rhqoNTL9bNGYxnq7vPZQhhvAUql0CiIk8CYzo01a0IjFR23vUCgzVkCbEPgmqr4SocGTDwuQh62-xpkM_zJUt_rnarcoktsvb1aWWq5QiV3gK3qEimkTG4msjjcamX8EFizbruLuGueKQhfdtYlm4XLKfkYQhcz-pTTcBuFOg74BpAvm0qC6PC6iCoBVJv5UnFm8lGhXgfTMadYKA3yeOBuVOFdvTPosZh2FYnUUdmMar8ey0H6ds3ioCflsz6Sc4q07pfMBa-OSNXvN1Mzesj7S7wH6UVUafpTCQCjCDnTg</con:value></con:property><con:property><con:name>ehrId-man</con:name><con:value>12b7ca46-74ce-43f1-8659-5e31898580db</con:value></con:property><con:property><con:name>ehrId-woman</con:name><con:value>caeb8ed2-ba2e-4673-805a-6e81680ac4d1</con:value></con:property></con:properties></con:testSuite><con:testSuite id="89ea5cf5-e148-41e2-ace6-e6808aa121f3" name="post/getLifeAnamnesis АС"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ddf1e696-0dda-4272-82b6-587f32b2c28d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение токена X-Access-JWT" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Авторизация ЛК (мужчина)" id="b782e177-7021-48a7-9ee5-51b5a9a85151"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Авторизация ЛК (мужчина)" id="3b40c73f-e9cf-4762-8875-d5f43b1bb979" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "yar.promo.zapov.a@gmail.com"
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/login</con:originalUri><con:assertion type="Simple NotContains" id="2b30274b-96a2-4696-981c-a6342eba3ef7" name="Not Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="5812c462-9482-4e8d-b95f-4ad1d19e6230" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Перенос старого токена для получения нового (муж)" id="d1627f06-02bb-4a0d-ab00-903fbedfb6ff"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>attempt_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Авторизация ЛК (мужчина)</con:sourceStep><con:sourcePath>$.attempt_token</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Получение нового токена (мужчина)</con:targetStep><con:targetPath>$.attempt_token</con:targetPath><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Получение нового токена (мужчина)" id="90aa087f-eddd-478a-8a7c-5ce5214b6c9c"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение нового токена (мужчина)" id="f65b6804-8e6e-4dfc-8069-8dee18b5bd0b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{"otp_code":"19674","attempt_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6IjZjOWRmN2ViLWMyZWUtNGI3ZS1iMjc4LThiZjlhZmM2ZGRkMSIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY3MDQyNzU5NSwic3ViIjoiYmI1ZWI4NTgtZWY3Ni00Mjk1LTk4NTktYzlkNmEyNTFiMzUwIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiUFlsLytFeHNMcTlPZ2ZJaTVGcVoxcVNVWlVSeVByYnVSUTJiVFZUcUp0VFdjbUdyV2VaL3B1REJxUFNzVUp0dlYvWE95SHIzY3gzY3MzeEtsRm9xdmlOdHRpa2x0dVFGQjVJVW1HblhadUFTUURzcFJFQW5MbVFScUZXc1FHRjhVWkdtdk5xNkVIR0JmNHVBTzRFdWxUeHlNSWY1NzFQVGU3dVlGblZlTnFLWWEzTGNyYzh3Wko4L295UXB1ZUprTTcyNjA2cFB0YUxJNm1ycFpyQlZGdkxwRXZiVHNKUTRzZlFZV3d2T1Y2RTVkb200UVZZVnhCM003SS96MlFsblVoWDBLTHpuRFRzNUdBcGxIVmJMWWJRZUp4WjhUdXFLQ0NUVUZMYnpObGJlNEVhdmRCQnMwNTNuZFpiYlFrV3IrM1JDZmhiYWpUa2NmaWhjbksyQWdnPT0ifQ.Z9F0ldEjVQJaXIIxQIsjwwwcdtZ3H0Szwa7sDfNwO0WPXqC5aAxy5K9Xh8uZl73hORhdOsFbS3ol2UP6QjR9iCZV6USiIsX98jUHSgDimv2Sctrv1gC7Oru3iLaMmY0yadbTp414wNkh_epO_wNRajsZMbogl80JZFQDsFIci55RDcghTaAISBYpmbb2w4HE6cV8K_j-C-raNpHQe1P0KCYhhJG_TW6Enh0QLwlSSQbT-3tzpLAtkizMCohs6GS9pn5wVz7K69-ypUBM8cQwI4B_vvKSG8sQyPcYYdatq5LwnW5vqTf7UWIff__mhzqhUYmNegdw_PT1xf9gZRbj0NqVF6BC2_PNBbkpE9mrxKpShSO8sAseuVd1NmRIOvFkRwSWkNu3oNUVS71YUwF8ODdHGxkT0ncAqsEBSbZuGHGfU_pKDvmwfbNjRcIBxzVtFWnd7Ue8Xupl2g6tG79G8moqnPb324960JvgVD3_Gen9ZbDqn5i33Kc5W99JYY1MQmtN1wXUmYZ7SuCok4klaZKslF67JwAfag97jaw2uJGnSnTHsBSD4WD-BDiLJrSnVBeAfcZA7ROdeTObwHwnfp4MGHJw71pDfrqGIe_zq9vXi4Dz4_cvnSliwl0quocZiXUV7BoAJAPp-D53-EYYZbM-gwICeqLBgR4-dVZe0AQ"}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:assertion type="Simple NotContains" id="f09cbe04-2ac8-441c-a1b2-4a345efa8cad" name="Not Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="673b543a-ea94-401b-a0c2-0ea219173a26" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Перенос нового токена в пропертиc (муж)" id="ecbf4934-7283-4878-bd3c-1bc7ad324ce0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>X-Access-JWT</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение нового токена (мужчина)</con:sourceStep><con:sourcePath>$.access_token</con:sourcePath><con:targetType>X-Access-JWT-man</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>XQUERY</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Авторизация ЛК (для АС2(GET))" id="29e91c92-9bf0-4567-a7aa-142b99d21ec4"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Авторизация ЛК (для АС2(GET))" id="3b40c73f-e9cf-4762-8875-d5f43b1bb979" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "test2068@cptest.ru"
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/login</con:originalUri><con:assertion type="Simple NotContains" id="2b30274b-96a2-4696-981c-a6342eba3ef7" name="Not Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="5812c462-9482-4e8d-b95f-4ad1d19e6230" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Перенос старого токена для получения нового (АС2(GET))" id="ff648c7c-ce21-46ea-9bbb-9de7f9047df7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>attempt_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Авторизация ЛК (для АС2(GET))</con:sourceStep><con:sourcePath>$.attempt_token</con:sourcePath><con:targetType>Request</con:targetType><con:targetStep>Получение нового токена (для АС2(GET))</con:targetStep><con:targetPath>$.attempt_token</con:targetPath><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Получение нового токена (для АС2(GET))" id="6186f680-78c9-4752-a858-217ad42d303c"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение нового токена (для АС2(GET))" id="f65b6804-8e6e-4dfc-8069-8dee18b5bd0b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{"otp_code":"19674","attempt_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6ImYyMjcxZjNhLWMxOWYtNDM2NS04ZWUzLTIxZDY3YThiMGFjMSIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY3MDQyNzU5Nywic3ViIjoiNmRiZTYxM2YtZjk2Yi00Nzg5LWJjMTMtM2MwMDFkYjExNzdmIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiVEd3YnRDL0wzdVl5eHZrT05meFNjTUVWQmVaUmdvSFpxb2ttL1paRFh2ZVA3dGpqUThiRGlEWFEwelBKQkpna2hBdWJENGtLeGY3enZ2MW0zRWFnRy81QTN2TE5TWVV1Uy9yRzN4d3lpTmxyWDhjQllCRFBSRldHYmRZNVY2RzZaVyswSmNRZmNPcXk0d1RVL3hZeGdlZVYxSS8wWklSajZTazEwZ1Z4a0pEQzAxZStVdzgyNXFtZXJESGlsdlNNMW1ZMHl3QXY4aFdFNGJmNTB4ZDVMajlGd3JGRnBpUWE5bmJHUWs4KzZzemlBNlhxQnQzV0tYaFhKL2UvZEVpOHVBekh3U3Zlc1YxeS9pSEFlUXFDcC85dmtqY29sRzlWQWp5TVNneHcwOTRVZEdiUXpqakFjNkFoc3N3emwvRExxZEsrQ1lONHdaSXkzTVE4azQzUmRRPT0ifQ.OX0vI6hWUbTXSgPST1z6CgX99hwoZ099EzOvwIYc4ShgQIPnxTlAlG-9XFdoBNydP-EBKWeSmXhTimBy_j0uZi4YgO9LRNYq8UCfxNdu769X3kXyV6n7WGj46ZMzqppKk6JkaiJyxdrcVXxFxcZf7Ji3QuSHcy8YSqdk5BCyKh06dlOWfBHwDvJ9WGJyIOog5ig6zcIZy4Nskh-pAeO30o-eGTCVRtc40PRauEF-6vG2jEqdmxDyCAmVlOESDjvRTfwOh4Cv6IuMi2-gZyk6-TfFS0s0D9oGuOFzQgI3fuMl6LvS-b3MnFmShHS7bEXZFlFImY-k-FUCdmoxflWZQsmx5bh5FbUh0nCoUIKab-eZumJH4FWjGFdm6ggQZrRnXN45PthdUwUjI7f_oNw7XnDlNSwaj-dF8Vdkr81_3iDcOi6yGM697Q1iW9ereGYxDF8N-nJsgZJqb2-mB3kSt2kvZX1gg_KatX2SdesDqkuipjCM84W_J3Ip8gknSTTtpAMJHBoeioW4DftSrw_As74z5-kf5ITVJR_eXEVZSoqKScTdrSrN4cU5EiucxMnFr4BKVLGIXbW94OwFL8xQSmTdheay-9mnL4LeYH60A2TVwA2caOfpZBRpLyYXHeDFz4ddnvSkxR3QCD_ZeZYNKNB-v6SSACGtSgtclv9IUzs"}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:assertion type="Simple NotContains" id="f09cbe04-2ac8-441c-a1b2-4a345efa8cad" name="Not Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="673b543a-ea94-401b-a0c2-0ea219173a26" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Перенос нового токена в пропертиc (для АС2(GET))" id="21476d2b-36ad-467b-810c-74513b86b19a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>X-Access-JWT</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение нового токена (для АС2(GET))</con:sourceStep><con:sourcePath>$.access_token</con:sourcePath><con:targetType>X-Access-JWT-AC2GET</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>XQUERY</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="dd4fe007-4e1e-41b2-9459-00deff3ca00d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1 (POST). LK_LIFE_ANAMNESIS_PERMISSION" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="ca9d45a5-846c-4388-886b-c2a393a3410f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ddf1e696-0dda-4272-82b6-587f32b2c28d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesisLK" id="f738c790-e42f-48c6-b411-56d87b4c7c84"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesisLK" id="63b2de8d-8976-4e0b-901f-d1d3d36ebc46" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
   "ehrId":"c09d4d0f-a4d0-4e98-a772-b7c5a288b15b",
   "lifeAnamnesisForm":{
      "allergy":[
         {
            "haveAllergy":[
               
            ],
            "whatExactly":[
               
            ]
         }
      ]
   }
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple Contains" id="82af2ca9-bc8c-4884-bce3-1b1d2a57ffed" name="Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="fd3fb813-1dd5-475d-8f9b-fc0a5a921683" name="Not Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8932effc-0eaf-4706-8ef7-5fb6059a697d" name="Not Contains AuthTokenExpired"><con:configuration><token>AuthTokenExpired</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="e14a7f90-66d8-4045-ad05-0e0850eb5d0c" name="Not Contains Unauthorized"><con:configuration><token>Unauthorized</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-AC1POST}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="921b39d2-6165-4939-acaf-7400613cf013"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"obstetricHistoryAnamnesis": {},
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {},
			"diseases": {
				"diseasesInChildHood": [],
				"haveInjures": [],
				"haveDiseases": [],
				"haveSurgeries": []
			}
		},
		"hazardousWorkAnamnesis": {},
		"allergyAnamnesis": {
			"haveAllergy": "нет (ранее не было проявлений)",
			"whatExactly": []
		},
		"harmfulHabitsAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="5e37d4de-e65a-4b96-8ac9-09154dabd68d" name="Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="31c4026f-f6e2-4de6-8daf-2b50223f208e" name="Contains LK_LIFE_ANAMNESIS_PERMISSION"><con:configuration><token>LK_LIFE_ANAMNESIS_PERMISSION</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="679b766d-011d-407b-8f1b-4e68099d45fe" name="Not Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="e55e4c28-4de6-43c1-8502-f53c61b7938b" name="Valid HTTP Status Code 403"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-man}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-AC1POST}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2ffde01a-a363-4a01-af15-6509a58a4b84" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС2 (POST). LK_LIFE_ANAMNESIS_SAVE_ERROR" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="c61ee395-91d4-441b-bd12-a65191a8cb4b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ddf1e696-0dda-4272-82b6-587f32b2c28d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesisLK" id="96878ecd-762f-43ce-903e-93bd5bd6534b"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesisLK" id="63b2de8d-8976-4e0b-901f-d1d3d36ebc46" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
   "ehrId":"8d075820-b3cb-4fbe-9666-3106776652d2",
   "lifeAnamnesisForm":{
      "allergy":[
         {
            "haveAllergy":[
               
            ],
            "whatExactly":[
               
            ]
         }
      ]
   }
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="0feada45-09c7-445a-9bd5-320bca07785e" name="Not Contains NoAccessToForm "><con:configuration><token>NoAccessToForm </token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="96da277c-dfce-4954-b0ee-a540307c1269" name="Not Contains AuthTokenExpired"><con:configuration><token>AuthTokenExpired</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="374de9a4-6caa-4c93-b0f9-e99ed1d23b9f" name="Contains Unauthorized"><con:configuration><token>Unauthorized</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="15e1c7d4-4c88-4d97-88fb-98fead2c39d4" name="Not Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-incorrect}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="3b3e951b-94af-44f5-b6d0-a31a35329f9c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"obstetricHistoryAnamnesis": {},
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {},
			"diseases": {
				"diseasesInChildHood": [],
				"haveInjures": [],
				"haveDiseases": [],
				"haveSurgeries": []
			}
		},
		"hazardousWorkAnamnesis": {},
		"allergyAnamnesis": {
			"haveAllergy": "да",
			"whatExactly": [
				{
					"selectAllergy": "на лекарственные препараты (если знаете, укажите на какие)"
				},
				{
					"selectAllergy": "на пищевые продукты"
				},
				{
					"selectAllergy": "на вещества бытовой химии"
				},
				{
					"selectAllergy": "на пыль, плесень"
				},
				{
					"selectAllergy": "на укусы насекомых"
				},
				{
					"selectAllergy": "на домашних животных"
				},
				{
					"selectAllergy": "на растения, пыльцу (поллиноз)"
				},
				{
					"selectAllergy": "на ультрафиолетовый свет/солнечные лучи"
				},
				{
					"selectAllergy": "на холод"
				},
				{
					"selectAllergy": "на иные аллергены"
				},
				{
					"selectAllergy": "на вакцины (прививки) (если знаете, укажите на какие)"
				},
				{
					"selectAllergy": "на местные обезболивающие средства (если знаете, укажите на какие)"
				}
			]
		},
		"harmfulHabitsAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="5e37d4de-e65a-4b96-8ac9-09154dabd68d" name="Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="31c4026f-f6e2-4de6-8daf-2b50223f208e" name="Contains LK_LIFE_ANAMNESIS_SAVE_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_SAVE_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="679b766d-011d-407b-8f1b-4e68099d45fe" name="Not Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="e55e4c28-4de6-43c1-8502-f53c61b7938b" name="Valid HTTP Status Code 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-incorrect}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a51fafa4-5fa8-467f-a722-01dd407b1726" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС3 (POST). LK_AUTH_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить актуальный токен" id="c302cc4b-7e21-4aae-bb59-2dd64d99291f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ddf1e696-0dda-4272-82b6-587f32b2c28d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesisLK" id="e01d4345-0fd7-4007-af95-3bb43028ff4f"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesisLK" id="63b2de8d-8976-4e0b-901f-d1d3d36ebc46" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="0feada45-09c7-445a-9bd5-320bca07785e" name="Not Contains NoAccessToForm "><con:configuration><token>NoAccessToForm </token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d92b3f2b-8cdf-4cca-949a-978aa1fa79f1" name="Contains AuthTokenExpired"><con:configuration><token>AuthTokenExpired</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-expired}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createLifeAnamnesis" id="349a4132-f8eb-4ad5-8be5-f2f47f29fbe6"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="postLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createLifeAnamnesis" id="1b5e6f35-ee79-4c3f-b465-0781dd20d537" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"lifeAnamnesisForm": {
		"obstetricHistoryAnamnesis": {},
		"diseasesAnamnesis": {
			"bloodTransfusion": {},
			"medicines": {},
			"diseases": {
				"diseasesInChildHood": [],
				"haveInjures": [],
				"haveDiseases": [],
				"haveSurgeries": []
			}
		},
		"hazardousWorkAnamnesis": {},
		"allergyAnamnesis": {
			"haveAllergy": "да",
			"whatExactly": [
				{
					"selectAllergy": "на лекарственные препараты (если знаете, укажите на какие)"
				},
				{
					"selectAllergy": "на пищевые продукты"
				},
				{
					"selectAllergy": "на вещества бытовой химии"
				},
				{
					"selectAllergy": "на пыль, плесень"
				},
				{
					"selectAllergy": "на укусы насекомых"
				},
				{
					"selectAllergy": "на домашних животных"
				},
				{
					"selectAllergy": "на растения, пыльцу (поллиноз)"
				},
				{
					"selectAllergy": "на ультрафиолетовый свет/солнечные лучи"
				},
				{
					"selectAllergy": "на холод"
				},
				{
					"selectAllergy": "на иные аллергены"
				},
				{
					"selectAllergy": "на вакцины (прививки) (если знаете, укажите на какие)"
				},
				{
					"selectAllergy": "на местные обезболивающие средства (если знаете, укажите на какие)"
				}
			]
		},
		"harmfulHabitsAnamnesis": {}
	}
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="5e37d4de-e65a-4b96-8ac9-09154dabd68d" name="Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="31c4026f-f6e2-4de6-8daf-2b50223f208e" name="Contains LK_AUTH_TOKEN_EXPIRED"><con:configuration><token>LK_AUTH_TOKEN_EXPIRED</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="679b766d-011d-407b-8f1b-4e68099d45fe" name="Not Contains true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="e55e4c28-4de6-43c1-8502-f53c61b7938b" name="Valid HTTP Status Code 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-expired}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a271e61c-d9ba-48c8-8ce0-622a5767820d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1 (GET). LK_LIFE_ANAMNESIS_ERROR" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="da1957a4-b2c3-4d90-baf7-dbd00389345c"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="0f1b4002-7a5c-46f9-a9a5-5897739735bd" name="Not Contains allergy"><con:configuration><token>allergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="361a2143-9ab1-418a-ada7-3412b9001d23" name="Not Contains harmfulHabits"><con:configuration><token>harmfulHabits</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="9b73356d-c0d4-42db-a891-e79481824eb3" name="Not Contains hazardousWork"><con:configuration><token>hazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="a3cfb569-99c3-4d42-8540-9fdf9e9b27da" name="Not Contains diseases"><con:configuration><token>diseases</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="c18c3ea5-a2f6-458a-94bc-24f9c1c24a52" name="Not Contains obstetricHistory"><con:configuration><token>obstetricHistory</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-incorrect}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="0a6d5912-bb8d-402d-b917-1dcbef7b7def"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple Contains" id="a4460251-9c00-4b62-a877-d488c87c11d0" name="Contains LK_LIFE_ANAMNESIS_ERROR"><con:configuration><token>LK_LIFE_ANAMNESIS_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="62fc9f4e-19ce-4150-adcd-1bbdfdc958cb" name="Not Contains allergy"><con:configuration><token>allergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="7f4037ed-e884-4ef2-9d60-b03b9c4287d0" name="Not Contains harmfulHabits"><con:configuration><token>harmfulHabits</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5aee3bc1-e3a8-4f76-99fa-cb7eedfebe91" name="Not Contains hazardousWork"><con:configuration><token>hazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="805cf558-8ed6-4aa8-b39e-1744626edad5" name="Not Contains diseases"><con:configuration><token>diseases</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="55064fa3-4b7e-4589-b94f-9be2d753cbb7" name="Not Contains obstericHistory"><con:configuration><token>obstericHistory</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="88ecbe1d-2307-46a1-88df-1676d0a5dd80" name="Valid HTTP Status Code 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-incorrect}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-man}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d993696d-e39d-40e4-95f7-a69c09e67e3a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС2 (GET). Любая ошибка от GET /api/1/forms/child-allergy-history" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="Получить токен" id="adeea7ca-1346-405b-8632-9f3a681c2d47"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ddf1e696-0dda-4272-82b6-587f32b2c28d</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisLK" id="8000076c-e5dc-4fb7-81f8-d0cfbb00f131"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/4/forms/life-anamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisLK" id="cdd0cfdf-981b-4a1b-917d-67630bac774c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/4/forms/life-anamnesis</con:originalUri><con:assertion type="Simple NotContains" id="18998824-3ac8-47d8-84d0-702634d343d5" name="Not Contains ValidationError"><con:configuration><token>ValidationError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="657c3f90-e0b8-4b03-a941-349c7f96585c" name="Not Contains NoAccessToForm"><con:configuration><token>NoAccessToForm</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="2f3854a7-2a53-426e-888d-a37dcd8d2617" name="Not Contains UserNotFound"><con:configuration><token>UserNotFound</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="b3992f1d-1b7d-4ee3-a439-087b1bbb84c2" name="Not Contains ServerError"><con:configuration><token>ServerError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="5802d672-0669-4b9d-aa11-0c205e131ef2" name="Contains obstetricHistory"><con:configuration><token>obstetricHistory</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="02931f51-d83a-4220-8b88-34d477802faa" name="Contains allergy"><con:configuration><token>allergy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="17654816-c2bd-4159-baf5-f87948d8c5a5" name="Contains harmfulHabits"><con:configuration><token>harmfulHabits</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="211ae3bc-3e32-4045-a1f0-81f18146e271" name="Contains hazardousWork"><con:configuration><token>hazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="05fe92c2-2f59-4ddd-a6fd-68fd894f64d0" name="Contains diseases"><con:configuration><token>diseases</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-AC2GET}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-AC2GET}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getChildAllergyHistory" id="ae40efcd-5be0-4cbe-b566-56823dfec457"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/1/forms/child-allergy-history" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getChildAllergyHistory" id="3c02513f-fe08-4b42-a638-052f973df9be" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/1/forms/child-allergy-history</con:originalUri><con:assertion type="Simple Contains" id="77093418-de61-461f-a9e8-221540d8ac5a" name="Contains EhrPermissionTypeForbiddenError"><con:configuration><token>EhrPermissionTypeForbiddenError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="2e532277-b06b-46ba-a6ca-c4ea4566ee5a" name="Valid HTTP Status Code 406"><con:configuration><codes>406</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-AC2GET}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-AC2GET}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisInfo" id="a7e74ec8-1d46-421f-ae82-331ba6850da2"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesis" methodName="getLifeAnamnesis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisInfo" id="da1132f1-1314-4e71-a834-99e0c5772dfe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/anamnesis/lifeAnamnesis</con:originalUri><con:assertion type="Simple NotContains" id="62fc9f4e-19ce-4150-adcd-1bbdfdc958cb" name="Not Contains LK_CHILD_ALLERGY_HISTORY_ERROR"><con:configuration><token>LK_CHILD_ALLERGY_HISTORY_ERROR</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="88ecbe1d-2307-46a1-88df-1676d0a5dd80" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0f74e59a-3b96-4c30-ad95-b0af44e4ee09" name="Contains allergy"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e4f22fec-bee2-4e36-abf7-77f6f09e1639" name="Contains obstetricHistory"><con:configuration><token>obstetricHistory</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e9d308cb-ed43-487c-8d41-70dd5f668542" name="Contains hazardousWork"><con:configuration><token>hazardousWork</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0ce214e9-78d4-430d-adb7-a94953384d3e" name="Contains harmfulHabits"><con:configuration><token>harmfulHabits</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="078f1083-112b-4281-a4ef-795d898bf977" name="Contains diseases"><con:configuration><token>diseases</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestSuite#X-Access-JWT-AC2GET}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId-AC2GET}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>X-Access-JWT-man</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NzA1ODMxOTIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiI1ZWIyY2M3Zi00Y2I2LTQ5YzAtYjY1MC0xYmE3ZWM3ZmE1NWUiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiZVM4QlZ2bG1YMkwyaXg4MUlwU1EwaklBNVh0WHo3VnlMSjN3TnkydmFBTW9XenA2a3N6d0tmNWl5dm93cmQ3SG9waUNWRkI3bUY2MHIrM3pCQnFaTE4rQiszL3RKZmladytDcUdOdGpqMHB0bVFwTVFXRWNPQVhKMkdoNFRwWTI4SnNrQi9obEc3Y3NJMmlJcGdwVVlEQllmV28yamU3NmFCQUZmR2VScldGNmR0eEJ5eS9mSmppM1pkZlhmWkk0RUExc3N3UnEydzBuY2ZQdWY1djFaMFRza21vN016eHdncmdVYTNOL3k4b2xjckZxS3JjYnl4YzF3d1FiRU5OS3pEZXRKRDEvTlhPcGdPcE54VDA0OTRlWmY0c1Q3dENlYW1sOURmSlF1dkhMRVAwc1NrRWkzcjZTbjVnQzRQNktGVkphaUhWOExtbkN1b21UMG5wWEtBPT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.Z4VMljKXGnMbLPXRJHMHCqnH-DG5v-GYlqrailzaeeCi28Jcz2pqdkFSOBwVim1MIDjC2Z-0r1tf_VmxJU7uc7r-5aLIYRxNnA1YKxoWiznda8ja7Tna6Fd3meYgaDFP_yVqZJHlIv6J8IFxeEWTb5FJ4tTUnLjXYFH0dv4-h-7j4BlupAvF23tFeOPsjFrWmFmRlNyg-9C-VFIl5IY6IEN-C3NB8Io-jXPuYwDiIhkEOuekIqaTfwZTlxeq9uPrlAGCGmiCzDVUS-my_VKWkVmSIfZZ6CgWiMWh7U969Hn5tS8D8DrZBdTVPjX2xJ80Vin1nVIsmIPcyjRBo-2VSk_l_n4WMv6Oj38zGaYqmbcKxTKif5h_1ME28vVXKpCfgQ787EtwHom5x15IVHXizxJMyxVmjj5FLQAVfUvNihAb6Lbg5uKObba2GTfKwPNGq0wFfWtNa_AEWE7ypwQVcGVMbNox9IJX6YDaiWHt5BFxOgihCNxwupKtyzZrXCn8mEkGXvfMLrKKQwzCH22helpCQWsf_8zv5iAmwb8gNLrnrwszhdjIVo9ZbnVNrzxP6Z7aZ4KCCPEb5OtE4JPhVarm5rkq0R2qFU-MUnVnCwVbh8VXDGFHbwTSFgFXuCiOCaOWtELxQF0VmBE0iL8kC7jSSjEYk0m0QzrwoGgF9nw</con:value></con:property><con:property><con:name>X-Access-JWT-incorrect</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NjkwOTk5NTksImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiI5NTNkYjY0Yi01YjczLTQ2MGUtOTRhOC00YzFjNmZhNzZlM2UiLCJwaG9uZSI6Ijc4MDA1NTUzNTM1Iiwic3NvX2lkIjoiY1YwWEE4TUFuUE9XL05xOFpxT0dSNmlyTEpoZlp4ckJ5ZUY1L3M0dGMrbEN3WWEzWWk4RklVYnhDT2szOWVGQXJ3cjUyeVdReTZ1VnJzVXlsUFJzZngrYVhjZHc4ajRmcmNleC82eHY3NzNTTWo0NTllc0xLbXVNem9rWG9FazVXRExZNG4rQVZwRzIvU3ZQK0FUS2VwajJqVU5DVmlTUERHcmVBeUlUWGVLdTByUXJkcm12N0NaeHA3UjJ1NDdoOWd3ZTFUbm1aRHBWUGl2Vmo5a2RJQlFMdGhXMko1bUUrOUcvbzlxN0NBRnBDR3NsVnlHUHdoaUtGYVdLT2t6b1J1MXRnYXFLdE5mVHZVanhCT0o5cWg4d3c2aGdsZ244QWdxZ2RYanR2ajR4U2ZLdHRGY1MzTjY0M2hxOHNndjFkUnpYQ3NWTGx2eVdyeDE3U0x1aFFRPT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.eXj2O-hRxCyYJdefdiFQBQNGlRrzTmfbZTo3QFvJfcJXBhkcUMxlxL2y3anHVB2WCT-3wqvsn6Pxn1kfl4_GV1BYFO8E6KRqeRVRSYiSrAtiwmgL6wQF5pYYm8TYcTvZw5TiYvKOHd-5cvaGNF1_ecFU1hTDicTR8s04EJcQykq2Pp-VLON9LBZECMZJaR-TN144SvC9DSLY60lmt-TdDr6FlcXaA7BHIEconA787tx85RFoWfyKfwDw2DnQfEUcOWZ6HdEUZVL1ghPRM_8LPOHGZ6P03Q5pPbyhwWBFxHw1sQcHu5Mxxd3zShqq0XXuSCCRUAXv2410IgyYaEwT6A5Lhgb7bf0COMEP9LqgpMSKmhULuol9R_z_4b7O7iXddJfHuMZ7Cm-GCzYSdK0X-vIXmN10qUSR9zyool-sAYq0xbdCoylZm-Pxis8G4ECQBP4daTi-4btQF9lM2_9pnvGn0yBbRBm0Uo-MV8zDPANxiuj_XEinfuzfRfU6dEgo68_VVqTydv3Gkvk_AroUjHWd1WISZ_vTQ8ZoRMj1A_5xSp1bt_DZ7V_H4zNTZgfXL6RXgep0iIa3KRhylE4Qmq2-aHMxkCHOcoXiGURkkPqSlS0OJTyuvNrTVUD_prO3yNbcN1jPMEbde_jpoOUtYZC-1TMMc7kSbDdQ0goDbbc</con:value></con:property><con:property><con:name>X-Access-JWT-expired</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2Njg4NjQ2NjQsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiIyZmFmYmE2Ni05OTc4LTRkNDItYjE3My0xMjc0OGU1OGQ3ZmIiLCJzaWQiOiJiOGMwOTU5MC1hODMzLTQ0MzYtYTM0YS0wYjMwNmExYzhkOGQiLCJwaG9uZSI6Ijc5MTE0Njg0NzYyIiwic3NvX2lkIjoibW1XbDRUdWt1SVFaeFFqeC93OVcvMndnRXRnandUWUVEQ3B2dXkraHZoRmp3bHkyWklKcWpJSlF4SUI5bk5XNkFFSWo4aHpEQkVyZVBXOUZ0TXoySDFvS2wvNHhjNGxKY2hMRmJiVncxazltZ0UwWVZ4OGRad1RWWUdSMUhacmZCaTNuZzY0TXYxMTRhRWQvK0EzeHIyUzBuR3cxZGw5bS8valMrYnF3TkxaL05TRm1NcHQ4RWp6RWhoZTUxeUN6bjhwWFI3dGRQMmtORXJkWVpwNHhwWUpxKzZHclg4ejlFUlg0VEtiMW5VSmx2c21MbEk4YVMwK1NkMnFXMVhkVkdDVnFnNm45azBOSmY3Um93UnlvMmcwRmFoY0xlL015ZmtzV25HYkp5ZVYvZlVWME1ucURlZ1ZNOXFPWDlaV3FleE9lZE95UlpjelFjcWJkTXRFUXJBPT0iLCJlbWFpbCI6InpheWNldmF0YW5pYUBnbWFpbC5jb20iLCJmaXJzdF9uYW1lIjoiXHUwNDEyXHUwNDM1XHUwNDQwXHUwNDNlXHUwNDNkXHUwNDM4XHUwNDNhXHUwNDMwIiwic2Vjb25kX25hbWUiOiJcdTA0MTMuIiwibWlkZGxlX25hbWUiOiJcdTA0MTJcdTA0NGZcdTA0NDdcdTA0MzVcdTA0NDFcdTA0M2JcdTA0MzBcdTA0MzJcdTA0M2VcdTA0MzJcdTA0M2RcdTA0MzAiLCJiaXJ0aF9kYXRlIjoiMjAwNi0xMi0yMiJ9.cm-4-ci7HLFVh0prQK3BkmH2HfPmvwePpI2gT2lMwn289XFfGiRjO0mIwVlQfMlXCRSbTT2BbNNVfp61MlWT5XxwCSJN3dRrg1adVXwNPrs7PN-6NUdcwbfSIP_nkatcD3IGqkxfwXUIBFRZxb0_kO-ZQ7YfJl1rI9nVCDzdMhu_Fl55GhKgWQja4BE_38RzuOQw4SWjtoWMiVgxZQIUOSqyaxj7bXtFcAdgwOudFYWkOZ6DEENtwrgCseEuUMq8uae-ID50an0f6xjeN8kcZ0n11L80R0x-fe4_zQOEPCORSJtqi3FAqhp4U_JQSNQ_b_WncQi3pQHHOvlgD9asdi9AH-cmF4L7c7yvN8wJzip0mO1mSU3eK0BNWbVXNb7jqEysRNEZUsccZdU9bgf7gOorXC_F-gFTI95Omgz9OKnquw9u8MvIuCTdv6U1atsXh_TaPHHZd_1Q81PQziH4Xw1PEqtov3_miZmH_ohSvkfwtcTd4MYMo1D9-komL6imtQI1Fo1Co2buXUU2GCH0L9c0dKtMZ5VB0y4vGEHJH4uD5QnHSY68moIe3qEZwz2JBKvArutz7rLoPm53N7ff5y1iEzt5EgpQkgO9tfu-S2kNihQ77h2qN6703OkKV9OmI-WwRH52tVW5gUE9fCePDkfIuMR3WFiE89JF9ZJzSAI</con:value></con:property><con:property><con:name>X-Access-JWT-AC2GET</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NzA1ODMxOTQsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiI2ZGJlNjEzZi1mOTZiLTQ3ODktYmMxMy0zYzAwMWRiMTE3N2YiLCJzaWQiOiIxZWIyOGZlYS1kZjg4LTQ5NzktOGU3Ni0wMTAyZmU5ZDhhNTciLCJwaG9uZSI6Ijc5NDMwMDAyMDE3Iiwic3NvX2lkIjoiSCtEVlM0bnJyaUpUY0tIdnJHWGR0M1pPOHJBUi9MaThuV09wM09uTTdpeXlvMjNPV0tUQ0ZFNlA3MXBpcnNERzdTeWpCZzNGcVBGbElaaG1xRitVOEdOcDRZWnlkTEtmNzE2K2NOTkVwL0xiTTd6cGN2SkRKV2l1R0RCbG1GTmMyMFY0V3I1ZTZZQ2NldmNzQXZteXBLVW5yNGJBTFdyOERXMFJaNEJsQit5V3pESGZYcGVZQkZNRE56enhGbWxuUTRWTGZwc1I5b2pLKy9paVoxSTFGdWd6UzZUSngwUEJGT2JUS1d6SGpYMlpia0tWMG10RzJxWkc3b0REYmFzOExRckkzWjVTZFJtOEY1QUxSODh2dGRXRUxtWmc3OEhpeGtZRGhuelRUL05VRmpvNjM4a1AzTEJNd1dncHp4Z204K2gwMFJxN2RIUDRyVGxVQzkvdkR3PT0iLCJlbWFpbCI6IiIsImZpcnN0X25hbWUiOiJcdTA0MThcdTA0MzJcdTA0MzBcdTA0M2QiLCJzZWNvbmRfbmFtZSI6Ilx1MDQyNC4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxOFx1MDQzM1x1MDQzZVx1MDQ0MFx1MDQzNVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIyMDA1LTA4LTI2In0.YJXIQIOlA8JY50HeDmtTC5eQ-6y8rm_WqI3EmMh3xyBYAhiQPlxc_215gDO1t7bGmzfcAZoiypY9y_voojBkAQKCfTuFLZZz0021i9QkPw97sgIov2PdsBwsxft_Mv2_WR4oF4UV8NpFyZDc3OLD22GCN2i1DnGZiPo08ki4utOZ5iNRlKL17R5dwRCxaTLWSaEWDoEvjbm0Dse_jyMIARmSepNzcYnW0yE-v5Z2fP8dQvcwM2x2-dyEAyNi1kjWwxFN9UYQsFwH2FAk6PkILfVTKfaMjdfTIUqnFg7aF9ZjL2KcdtvdEuteivZbDp4o48-p3yyMKYtx3NNe4RQ8iFEF__HlgiLSADRVqcCoVKePQYT73QnSqfrHqdjeXo8JxEePbMoxzSf6zpoT2XxZdKsUkSUW2JyGzrW5KMdaZQz_5AieYYKIIZdkX-CPiMumAmXsl-0QkkVIZ3vK8bqNVJ8lZRCPpxwcXSD0XvAPTV5IcSg0Z0kOsbu_oXjS2Szne5bLZJv2TalcnZ2xprEsAOxq5S027JZfExjkMJEjD98ZvW4UgL32dqDqN5ZyhkSPNVPZbKkHdiJxpnfSVn9qYUh1-Ng_czI8AdEkuyY3lpGoYpgsRkztGmDFpG092mV4Vy-_DTXHmoPLpD4vikl7HgL_YaP1J2nJTB_8EhW9UjA</con:value></con:property><con:property><con:name>ehrId-man</con:name><con:value>8d075820-b3cb-4fbe-9666-3106776652d2</con:value></con:property><con:property><con:name>ehrId-AC2GET</con:name><con:value>2be1e5c1-9690-436b-971e-a3c529529d9f</con:value></con:property><con:property><con:name>ehrId-AC1POST</con:name><con:value>c09d4d0f-a4d0-4e98-a772-b7c5a288b15b</con:value></con:property></con:properties></con:testSuite><con:testSuite id="d4b8f378-1089-42d3-95a1-69ea57fbcc9b" name="lifeAnamnesisKind v2" disabled="true"><con:description>TestSuite generated for REST Service [http://emiasinfo-application.test.emias.mos.ru]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8e6a8cbc-fb70-4ac0-87cb-627d8a242fed" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга" searchProperties="true"><con:description>TestCase generated for REST Resource [lifeAnamnesisKind] located at [/api/v2/anamnesis/lifeAnamnesisKind]</con:description><con:settings/><con:testStep type="restrequest" name="getLifeAnamnesisKind" id="873a15cc-a8ed-4041-ad42-411111c7a22c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/anamnesis/lifeAnamnesisKind" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisKind" id="7b561780-fdfe-40cc-87fe-1dfe20783793" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/anamnesis/lifeAnamnesisKind</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b02bc417-5ea2-493d-9e43-6739853681c2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка объекта allergyAnamnesis" id="abb8222f-3338-4bca-9013-a24ec1c922d5"><con:settings/><con:config><script>import groovy.json.JsonSlurper

class kindAllergyObject{
	String code
	String value

	kindAllergyObject(String code, String value)
	{
		this.code = code
		this.value = value
	}
}
//Маппинг аллергоанамнеза
kindAllergySymptomsMap = ["нос (заложенность, зуд, чихание, насморк, потеря обоняния)",
										"кожные проявления (покраснение, отек, зуд, сухость)",
										"глаза (слезоточивость, покраснение, зуд, отек век)",
										"желудочно-кишечный тракт (тошнота, боли в животе, рвота, диарея)",
										"отек Квинке",
										"дыхание (затрудненное, кашель, удушье, свистящее дыхание, хрипы, отек горла)",
										"анафилактической шок (падение давления, потеря сознания)"]

kindHaveAllergyMap = [
	new kindAllergyObject("at0006", "да"),
	new kindAllergyObject("at0007", "нет (ранее не было проявлений)"),
]
kindSelectAllergyMap = [
	new kindAllergyObject("at0109", "на лекарственные препараты"),
	new kindAllergyObject("at0110", "на вакцины (прививки)"),
	new kindAllergyObject("at0111", "на пищевые продукты"),
	new kindAllergyObject("at0112", "на вещества бытовой химии"),
	new kindAllergyObject("at0113", "на пыль, плесень"),
	new kindAllergyObject("at0114", "на укусы насекомых"),
	new kindAllergyObject("at0115", "на домашних животных"),
	new kindAllergyObject("at0116", "на растения, пыльцу (поллиноз)"),
	new kindAllergyObject("at0117", "на ультрафиолетовый свет/солнечные лучи"),
	new kindAllergyObject("at0118", "на холод"),
	new kindAllergyObject("at0119", "на местные обезболивающие средства"),
	new kindAllergyObject("at0120", "на иные аллергены")
]
										
def getLifeAnamnesisKindResponse = context.expand('${getLifeAnamnesisKind#Response}')
def slurperJson = new JsonSlurper()
LifeAnamnesisKind = slurperJson.parseText(getLifeAnamnesisKindResponse)

//Проверка объекта allergyAnamnesis
allergyAnamnesis = LifeAnamnesisKind.payload.allergyAnamnesis

assert allergyAnamnesis.kindAllergySymptoms == kindAllergySymptomsMap
for(int i=0; i &lt;allergyAnamnesis.kindHaveAllergy.size();i++){
	assert allergyAnamnesis.kindHaveAllergy[i].code == kindHaveAllergyMap[i].code
	assert allergyAnamnesis.kindHaveAllergy[i].value == kindHaveAllergyMap[i].value
}
for(int i=0; i &lt;allergyAnamnesis.kindSelectAllergy.size();i++){
	assert allergyAnamnesis.kindSelectAllergy[i].code == kindSelectAllergyMap[i].code
	assert allergyAnamnesis.kindSelectAllergy[i].value == kindSelectAllergyMap[i].value
}

log.info "allergyAnamnesis object was checked successfully"
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка объекта diseasesAnamnesis" id="150fafbf-3ede-42ba-917a-e80ecbc71dad"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

class kindAllergyObject{
	public String code
	public String value

	kindAllergyObject(String code, String value)
	{
		this.code = code
		this.value = value
	}
}
kindRegularMedicinesMap = [
	new kindAllergyObject("at0043", "гипотензивные препараты"),
	new kindAllergyObject("at0044", "сахароснижающие препараты"),
	new kindAllergyObject("at0045", "кроворазжижающие препараты"),
	new kindAllergyObject("at0046", "препараты химиотерапии"),
	new kindAllergyObject("at0047", "мочегонные препараты (диуретики)"),
	new kindAllergyObject("at0048", "сердечные гликозиды"),
	new kindAllergyObject("at0049", "обезболивающие препараты (нестероидные противовоспалительные средства)"),
	new kindAllergyObject("at0050", "антидепрессанты"),
	new kindAllergyObject("at0052", "гормональные контрацептивы"),
	new kindAllergyObject("at0051", "противосудорожные препараты"),
	new kindAllergyObject("at0053", "препараты заместительной гормонотерапии (при менопаузе)"),
	new kindAllergyObject("at0054", "препараты для лечения астмы (ингаляторы, лекарственные средства)"),
	new kindAllergyObject("at0055", "нет")
]

kindDiseasesInChildHoodMap = [
	new kindAllergyObject("at0019", "корь"),
	new kindAllergyObject("at0020", "краснуха"),
	new kindAllergyObject("at0021", "ветряная оспа"),
	new kindAllergyObject("at0022", "коклюш"),
	new kindAllergyObject("at0023", "свинка"),
	new kindAllergyObject("at0024", "никакими из вышеперечисленных")
]
kindHaveDiseasesMap = [
	new kindAllergyObject("at0007", "сахарный диабет"),
	new kindAllergyObject("at0008", "инсульт"),
	new kindAllergyObject("at0009", "инфаркт"),
	new kindAllergyObject("at0010", "артериальная гипертензия"),
	new kindAllergyObject("at0011", "бронхиальная астма"),
	new kindAllergyObject("at0012", "язвенная болезнь"),
	new kindAllergyObject("at0013", "гепатит"),
	new kindAllergyObject("at0014", "туберкулез"),
	new kindAllergyObject("at0015", "онкологические заболевания"),
	new kindAllergyObject("at0016", "мастит"),
	new kindAllergyObject("at0017", "нет")
]
kindHaveInjuresMap = [
	new kindAllergyObject("at0026", "черепно-мозговые травмы"),
	new kindAllergyObject("at0027", "переломы конечностей"),
	new kindAllergyObject("at0028", "травмы позвоночника"),
	new kindAllergyObject("at0029", "травмы таза"),
	new kindAllergyObject("at0030", "травмы грудной клетки"),
	new kindAllergyObject("at0031", "ушибы молочной железы"),
	new kindAllergyObject("at0032", "нет")
]
kindHaveSurgeriesMap = [
	new kindAllergyObject("at0034", "удаление аппендикса"),
	new kindAllergyObject("at0035", "удаление желчного пузыря"),
	new kindAllergyObject("at0036", "удаление органа в результате лечения онкологического заболевания"),
	new kindAllergyObject("at0037", "операции на сосудах и сердце"),
	new kindAllergyObject("at0038", "удаление щитовидной железы"),
	new kindAllergyObject("at0039", "операции на молочной железе"),
	new kindAllergyObject("at0040", "нет")
]
kindHaveBloodTransfusionMap = [
	new kindAllergyObject("at0059", "да"),
	new kindAllergyObject("at0060", "нет")
]
kindBloodTransfusionReactionsMap = [
	new kindAllergyObject("at0062", "да"),
	new kindAllergyObject("at0063", "нет")
]

def getLifeAnamnesisKindResponse = context.expand('${getLifeAnamnesisKind#Response}')
def slurperJson = new JsonSlurper()
LifeAnamnesisKind = slurperJson.parseText(getLifeAnamnesisKindResponse)

diseasesAnamnesis = LifeAnamnesisKind.payload.diseasesAnamnesis

for(int i=0; i < diseasesAnamnesis.kindRegularMedicines.size();i++){
	assert diseasesAnamnesis.kindRegularMedicines[i].code == kindRegularMedicinesMap[i].code
	assert diseasesAnamnesis.kindRegularMedicines[i].value == kindRegularMedicinesMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindDiseasesInChildHood.size();i++){
	assert diseasesAnamnesis.kindDiseasesInChildHood[i].code == kindDiseasesInChildHoodMap[i].code
	assert diseasesAnamnesis.kindDiseasesInChildHood[i].value == kindDiseasesInChildHoodMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindHaveDiseases.size();i++){
	assert diseasesAnamnesis.kindHaveDiseases[i].code == kindHaveDiseasesMap[i].code
	assert diseasesAnamnesis.kindHaveDiseases[i].value == kindHaveDiseasesMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindHaveInjures.size();i++){
	assert diseasesAnamnesis.kindHaveInjures[i].code == kindHaveInjuresMap[i].code
	assert diseasesAnamnesis.kindHaveInjures[i].value == kindHaveInjuresMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindHaveSurgeries.size();i++){
	assert diseasesAnamnesis.kindHaveSurgeries[i].code == kindHaveSurgeriesMap[i].code
	assert diseasesAnamnesis.kindHaveSurgeries[i].value == kindHaveSurgeriesMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindHaveBloodTransfusion.size();i++){
	assert diseasesAnamnesis.kindHaveBloodTransfusion[i].code == kindHaveBloodTransfusionMap[i].code
	assert diseasesAnamnesis.kindHaveBloodTransfusion[i].value == kindHaveBloodTransfusionMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindBloodTransfusionReactions.size();i++){
	assert diseasesAnamnesis.kindBloodTransfusionReactions[i].code == kindBloodTransfusionReactionsMap[i].code
	assert diseasesAnamnesis.kindBloodTransfusionReactions[i].value == kindBloodTransfusionReactionsMap[i].value
}

log.info "diseasesAnamnesis object was checked successfully"]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка объекта harmfulHabits" id="29ecd005-0e34-40b2-a4fe-a1490929d8fb"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

class kindAllergyObject{
	public String code
	public String value

	kindAllergyObject(String code, String value)
	{
		this.code = code
		this.value = value
	}
}
kindSmokingMap = [
	new kindAllergyObject("at0057", "да"),
	new kindAllergyObject("at0058", "нет"),
	new kindAllergyObject("at0074", "бросил(а)")
]
kindAgeSmokingMap = [
	new kindAllergyObject("at0075", "в детском (до 15 лет)"),
	new kindAllergyObject("at0076", "в подростковом (15-17 лет)"),
	new kindAllergyObject("at0077", "в зрелом (старше 18 лет)")
]
kindSmokingCountMap = [
	new kindAllergyObject("at0078", "меньше 10 штук"),
	new kindAllergyObject("at0079", "меньше 1 пачки"),
	new kindAllergyObject("at0080", "больше 1 пачки")
]
kindStopSmokingMap = [
	new kindAllergyObject("at0081", "менее 1 года назад"),
	new kindAllergyObject("at0082", "менее 15 лет назад"),
	new kindAllergyObject("at0083", "более 15 лет назад")
]
kindFrequencyAlcoholDrinksMap = [
	new kindAllergyObject("at0084", "никогда"),
	new kindAllergyObject("at0085", "ежедневно"),
	new kindAllergyObject("at0086", "еженедельно"),
	new kindAllergyObject("at0087", "иногда")
]
kindPortionsCount = [
	new kindAllergyObject("at0088", "1-2 порции"),
	new kindAllergyObject("at0089", "3-4 порции"),
	new kindAllergyObject("at0090", "5-6 порций"),
	new kindAllergyObject("at0091", "7-9 порций"),
	new kindAllergyObject("at0092", "более 10 порций")
]
def getLifeAnamnesisKindResponse = context.expand('${getLifeAnamnesisKind#Response}')
def slurperJson = new JsonSlurper()
LifeAnamnesisKind = slurperJson.parseText(getLifeAnamnesisKindResponse)

harmfulHabitsAnamnesis  = LifeAnamnesisKind.payload.harmfulHabitsAnamnesis

for(int i=0; i < harmfulHabitsAnamnesis.kindSmoking.size();i++){
	assert harmfulHabitsAnamnesis.kindSmoking[i].code == kindSmokingMap[i].code
	assert harmfulHabitsAnamnesis.kindSmoking[i].value == kindSmokingMap[i].value
}
for(int i=0; i < harmfulHabitsAnamnesis.kindAgeSmoking.size();i++){
	assert harmfulHabitsAnamnesis.kindAgeSmoking[i].code == kindAgeSmokingMap[i].code
	assert harmfulHabitsAnamnesis.kindAgeSmoking[i].value == kindAgeSmokingMap[i].value
}
for(int i=0; i < harmfulHabitsAnamnesis.kindSmokingCount.size();i++){
	assert harmfulHabitsAnamnesis.kindSmokingCount[i].code == kindSmokingCountMap[i].code
	assert harmfulHabitsAnamnesis.kindSmokingCount[i].value == kindSmokingCountMap[i].value
}
for(int i=0; i < harmfulHabitsAnamnesis.kindStopSmoking.size();i++){
	assert harmfulHabitsAnamnesis.kindStopSmoking[i].code == kindStopSmokingMap[i].code
	assert harmfulHabitsAnamnesis.kindStopSmoking[i].value == kindStopSmokingMap[i].value
}
for(int i=0; i < harmfulHabitsAnamnesis.kindFrequencyAlcoholDrinks.size();i++){
	assert harmfulHabitsAnamnesis.kindFrequencyAlcoholDrinks[i].code == kindFrequencyAlcoholDrinksMap[i].code
	assert harmfulHabitsAnamnesis.kindFrequencyAlcoholDrinks[i].value == kindFrequencyAlcoholDrinksMap[i].value
}
for(int i=0; i < harmfulHabitsAnamnesis.kindPortionsCount.size();i++){
	assert harmfulHabitsAnamnesis.kindPortionsCount[i].code == kindPortionsCount[i].code
	assert harmfulHabitsAnamnesis.kindPortionsCount[i].value == kindPortionsCount[i].value
}

log.info "harmfulHabits object was checked successfully"]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка объекта hazardousWork" id="ed3508b0-efae-4c5d-8f17-d44cf5f2f85c"><con:settings/><con:config><script>import groovy.json.JsonSlurper

class kindAllergyObject{
	public String code
	public String value

	kindAllergyObject(String code, String value)
	{
		this.code = code
		this.value = value
	}
}
kindRecitationMap = [
	"производство асбеста",
	"производство мышьяка",
	"производство радона",
	"сварочное производство",
	"работа на типографии",
	"производство резины",
	"работа в условиях длительного воздействия вредных веществ (токсические соединения, пыль, ионизирующая радиация)",
	"иные"
]
kindHazardousWork = [
	new kindAllergyObject("at0009", "да"),
	new kindAllergyObject("at0010", "нет"),
]

def getLifeAnamnesisKindResponse = context.expand('${getLifeAnamnesisKind#Response}')
def slurperJson = new JsonSlurper()
LifeAnamnesisKind = slurperJson.parseText(getLifeAnamnesisKindResponse)

hazardousWorkAnamnesis   = LifeAnamnesisKind.payload.hazardousWorkAnamnesis

assert hazardousWorkAnamnesis.kindRecitation == kindRecitationMap

for(int i=0; i &lt; hazardousWorkAnamnesis.kindHazardousWork.size();i++){
	assert hazardousWorkAnamnesis.kindHazardousWork[i].code == kindHazardousWork[i].code
	assert hazardousWorkAnamnesis.kindHazardousWork[i].value == kindHazardousWork[i].value
}

log.info "hazardousWork  object was checked successfully"</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="56fd2785-2168-4ea4-b9c8-9ecdd516d8e3" name="lifeAnamnesisKind v3"><con:description>TestSuite generated for REST Service [http://emiasinfo-application.test.emias.mos.ru]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="bf03a874-6c5c-417f-8130-e2103bc701ad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга" searchProperties="true"><con:description>TestCase generated for REST Resource [lifeAnamnesisKind] located at [/api/v2/anamnesis/lifeAnamnesisKind]</con:description><con:settings/><con:testStep type="manualTestStep" name="Получить токен судир" id="15d61640-708d-434e-8639-27a24f6bde3a"><con:description>Перед запуском необходимо получить токен судир
в сьюте "Получение токена СУДИР и токена ЛК"
Первый раз получить в тест кейсе "Получение токена судир и токена ЛК"!
Последующие разы можно обновлять тест кейсом "Обновить токен СУДИР"!</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="restrequest" name="Получить ehrId" id="346afd85-9a5b-451a-9757-8819fa66a777"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" methodName="Method 1" resourcePath="/api/internal/3/emc-permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получить ehrId" id="ab8a8f35-4f5f-43a3-b89e-7a326d150ffe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/internal/3/emc-permissions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c3947d4d-ffcf-43ca-b4ec-96c937843391" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ssoId" value="${#TestSuite#ssoId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Записать ehrId в проперти" id="2a19287e-3922-40a2-8eac-f82666a4807e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ehrId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получить ehrId</con:sourceStep><con:sourcePath>$.permissions[0].ehrId</con:sourcePath><con:targetType>ehrId</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="getLifeAnamnesisKind" id="78e0ba62-3109-44b7-bc91-fc010bf5a793"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" methodName="Method 1" resourcePath="/api/v3/anamnesis/lifeAnamnesisKind" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLifeAnamnesisKind" id="f3b28970-581b-486f-b2b9-d8a3545b3bd7" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/anamnesis/lifeAnamnesisKind</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df4afa39-b1ef-4725-8263-caf078d6eab3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="ehrId" value="${#TestSuite#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка объекта allergyAnamnesis" id="4737c975-fb6e-4e62-a2ff-d5b7e8a487a5"><con:settings/><con:config><script>import groovy.json.JsonSlurper

class kindAllergyObject{
	String code
	String value

	kindAllergyObject(String code, String value)
	{
		this.code = code
		this.value = value
	}
}
//Маппинг аллергоанамнеза
kindAllergySymptomsMap = ["нос (заложенность, зуд, чихание, насморк, потеря обоняния)",
										"кожные проявления (покраснение, отек, зуд, сухость)",
										"глаза (слезоточивость, покраснение, зуд, отек век)",
										"желудочно-кишечный тракт (тошнота, боли в животе, рвота, диарея)",
										"отек Квинке",
										"дыхание (затрудненное, кашель, удушье, свистящее дыхание, хрипы, отек горла)",
										"анафилактической шок (падение давления, потеря сознания)"]

kindHaveAllergyMap = [
	new kindAllergyObject("at0006", "да"),
	new kindAllergyObject("at0007", "нет (ранее не было проявлений)"),
]
kindSelectAllergyMap = [
	new kindAllergyObject("at0109", "на лекарственные препараты"),
	new kindAllergyObject("at0110", "на вакцины (прививки)"),
	new kindAllergyObject("at0111", "на пищевые продукты"),
	new kindAllergyObject("at0112", "на вещества бытовой химии"),
	new kindAllergyObject("at0113", "на пыль, плесень"),
	new kindAllergyObject("at0114", "на укусы насекомых"),
	new kindAllergyObject("at0115", "на домашних животных"),
	new kindAllergyObject("at0116", "на растения, пыльцу (поллиноз)"),
	new kindAllergyObject("at0117", "на ультрафиолетовый свет/солнечные лучи"),
	new kindAllergyObject("at0118", "на холод"),
	new kindAllergyObject("at0119", "на местные обезболивающие средства"),
	new kindAllergyObject("at0120", "на иные аллергены")
]
										
def getLifeAnamnesisKindResponse = context.expand('${getLifeAnamnesisKind#Response}')
def slurperJson = new JsonSlurper()
LifeAnamnesisKind = slurperJson.parseText(getLifeAnamnesisKindResponse)

//Проверка объекта allergyAnamnesis
allergyAnamnesis = LifeAnamnesisKind.payload.allergyAnamnesis

assert allergyAnamnesis.kindAllergySymptoms == kindAllergySymptomsMap
for(int i=0; i &lt;allergyAnamnesis.kindHaveAllergy.size();i++){
	assert allergyAnamnesis.kindHaveAllergy[i].code == kindHaveAllergyMap[i].code
	assert allergyAnamnesis.kindHaveAllergy[i].value == kindHaveAllergyMap[i].value
}
for(int i=0; i &lt;allergyAnamnesis.kindSelectAllergy.size();i++){
	assert allergyAnamnesis.kindSelectAllergy[i].code == kindSelectAllergyMap[i].code
	assert allergyAnamnesis.kindSelectAllergy[i].value == kindSelectAllergyMap[i].value
}

log.info "allergyAnamnesis object was checked successfully"
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка объекта diseasesAnamnesis" id="c972ba62-f364-4aeb-b2da-8bd47d0beb68"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

class kindAllergyObject{
	public String code
	public String value

	kindAllergyObject(String code, String value)
	{
		this.code = code
		this.value = value
	}
}
kindRegularMedicinesMap = [
	new kindAllergyObject("at0043", "гипотензивные препараты"),
	new kindAllergyObject("at0044", "сахароснижающие препараты"),
	new kindAllergyObject("at0045", "кроворазжижающие препараты"),
	new kindAllergyObject("at0046", "препараты химиотерапии"),
	new kindAllergyObject("at0047", "мочегонные препараты (диуретики)"),
	new kindAllergyObject("at0048", "сердечные гликозиды"),
	new kindAllergyObject("at0049", "обезболивающие препараты (нестероидные противовоспалительные средства)"),
	new kindAllergyObject("at0050", "антидепрессанты"),
	new kindAllergyObject("at0052", "гормональные контрацептивы"),
	new kindAllergyObject("at0051", "противосудорожные препараты"),
	new kindAllergyObject("at0053", "препараты заместительной гормонотерапии (при менопаузе)"),
	new kindAllergyObject("at0054", "препараты для лечения астмы (ингаляторы, лекарственные средства)"),
	new kindAllergyObject("at0055", "нет")
]

kindDiseasesInChildHoodMap = [
	new kindAllergyObject("at0019", "корь"),
	new kindAllergyObject("at0020", "краснуха"),
	new kindAllergyObject("at0021", "ветряная оспа"),
	new kindAllergyObject("at0022", "коклюш"),
	new kindAllergyObject("at0023", "свинка"),
	new kindAllergyObject("at0024", "никакими из вышеперечисленных")
]
kindHaveDiseasesMap = [
	new kindAllergyObject("at0007", "сахарный диабет"),
	new kindAllergyObject("at0008", "инсульт"),
	new kindAllergyObject("at0009", "инфаркт"),
	new kindAllergyObject("at0010", "артериальная гипертензия"),
	new kindAllergyObject("at0011", "бронхиальная астма"),
	new kindAllergyObject("at0012", "язвенная болезнь"),
	new kindAllergyObject("at0013", "гепатит"),
	new kindAllergyObject("at0014", "туберкулез"),
	new kindAllergyObject("at0015", "онкологические заболевания"),
	new kindAllergyObject("at0016", "мастит"),
	new kindAllergyObject("at0017", "нет")
]
kindHaveInjuresMap = [
	new kindAllergyObject("at0026", "черепно-мозговые травмы"),
	new kindAllergyObject("at0027", "переломы конечностей"),
	new kindAllergyObject("at0028", "травмы позвоночника"),
	new kindAllergyObject("at0029", "травмы таза"),
	new kindAllergyObject("at0030", "травмы грудной клетки"),
	new kindAllergyObject("at0031", "ушибы молочной железы"),
	new kindAllergyObject("at0032", "нет")
]
kindHaveSurgeriesMap = [
	new kindAllergyObject("at0034", "удаление аппендикса"),
	new kindAllergyObject("at0035", "удаление желчного пузыря"),
	new kindAllergyObject("at0036", "удаление органа в результате лечения онкологического заболевания"),
	new kindAllergyObject("at0037", "операции на сосудах и сердце"),
	new kindAllergyObject("at0038", "удаление щитовидной железы"),
	new kindAllergyObject("at0039", "операции на молочной железе"),
	new kindAllergyObject("at0040", "нет")
]
kindHaveBloodTransfusionMap = [
	new kindAllergyObject("at0059", "да"),
	new kindAllergyObject("at0060", "нет")
]
kindBloodTransfusionReactionsMap = [
	new kindAllergyObject("at0062", "да"),
	new kindAllergyObject("at0063", "нет")
]

def getLifeAnamnesisKindResponse = context.expand('${getLifeAnamnesisKind#Response}')
def slurperJson = new JsonSlurper()
LifeAnamnesisKind = slurperJson.parseText(getLifeAnamnesisKindResponse)

diseasesAnamnesis = LifeAnamnesisKind.payload.diseasesAnamnesis

for(int i=0; i < diseasesAnamnesis.kindRegularMedicines.size();i++){
	assert diseasesAnamnesis.kindRegularMedicines[i].code == kindRegularMedicinesMap[i].code
	assert diseasesAnamnesis.kindRegularMedicines[i].value == kindRegularMedicinesMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindDiseasesInChildHood.size();i++){
	assert diseasesAnamnesis.kindDiseasesInChildHood[i].code == kindDiseasesInChildHoodMap[i].code
	assert diseasesAnamnesis.kindDiseasesInChildHood[i].value == kindDiseasesInChildHoodMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindHaveDiseases.size();i++){
	assert diseasesAnamnesis.kindHaveDiseases[i].code == kindHaveDiseasesMap[i].code
	assert diseasesAnamnesis.kindHaveDiseases[i].value == kindHaveDiseasesMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindHaveInjures.size();i++){
	assert diseasesAnamnesis.kindHaveInjures[i].code == kindHaveInjuresMap[i].code
	assert diseasesAnamnesis.kindHaveInjures[i].value == kindHaveInjuresMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindHaveSurgeries.size();i++){
	assert diseasesAnamnesis.kindHaveSurgeries[i].code == kindHaveSurgeriesMap[i].code
	assert diseasesAnamnesis.kindHaveSurgeries[i].value == kindHaveSurgeriesMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindHaveBloodTransfusion.size();i++){
	assert diseasesAnamnesis.kindHaveBloodTransfusion[i].code == kindHaveBloodTransfusionMap[i].code
	assert diseasesAnamnesis.kindHaveBloodTransfusion[i].value == kindHaveBloodTransfusionMap[i].value
}
for(int i=0; i < diseasesAnamnesis.kindBloodTransfusionReactions.size();i++){
	assert diseasesAnamnesis.kindBloodTransfusionReactions[i].code == kindBloodTransfusionReactionsMap[i].code
	assert diseasesAnamnesis.kindBloodTransfusionReactions[i].value == kindBloodTransfusionReactionsMap[i].value
}

log.info "diseasesAnamnesis object was checked successfully"]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка объекта harmfulHabits" id="c8d584c8-5625-4f59-96cf-ad043ccb18e6"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

class kindAllergyObject{
	public String code
	public String value

	kindAllergyObject(String code, String value)
	{
		this.code = code
		this.value = value
	}
}
kindSmokingMap = [
	new kindAllergyObject("at0057", "да"),
	new kindAllergyObject("at0058", "нет"),
	new kindAllergyObject("at0074", "бросил(а)")
]
kindAgeSmokingMap = [
	new kindAllergyObject("at0075", "в детском (до 15 лет)"),
	new kindAllergyObject("at0076", "в подростковом (15-17 лет)"),
	new kindAllergyObject("at0077", "в зрелом (старше 18 лет)")
]
kindSmokingCountMap = [
	new kindAllergyObject("at0078", "меньше 10 штук"),
	new kindAllergyObject("at0079", "меньше 1 пачки"),
	new kindAllergyObject("at0080", "больше 1 пачки")
]
kindStopSmokingMap = [
	new kindAllergyObject("at0081", "менее 1 года назад"),
	new kindAllergyObject("at0082", "менее 15 лет назад"),
	new kindAllergyObject("at0083", "более 15 лет назад")
]
kindFrequencyAlcoholDrinksMap = [
	new kindAllergyObject("at0084", "никогда"),
	new kindAllergyObject("at0085", "ежедневно"),
	new kindAllergyObject("at0086", "еженедельно"),
	new kindAllergyObject("at0087", "иногда")
]
kindPortionsCount = [
	new kindAllergyObject("at0088", "1-2 порции"),
	new kindAllergyObject("at0089", "3-4 порции"),
	new kindAllergyObject("at0090", "5-6 порций"),
	new kindAllergyObject("at0091", "7-9 порций"),
	new kindAllergyObject("at0092", "более 10 порций")
]
def getLifeAnamnesisKindResponse = context.expand('${getLifeAnamnesisKind#Response}')
def slurperJson = new JsonSlurper()
LifeAnamnesisKind = slurperJson.parseText(getLifeAnamnesisKindResponse)

harmfulHabitsAnamnesis  = LifeAnamnesisKind.payload.harmfulHabitsAnamnesis

for(int i=0; i < harmfulHabitsAnamnesis.kindSmoking.size();i++){
	assert harmfulHabitsAnamnesis.kindSmoking[i].code == kindSmokingMap[i].code
	assert harmfulHabitsAnamnesis.kindSmoking[i].value == kindSmokingMap[i].value
}
for(int i=0; i < harmfulHabitsAnamnesis.kindAgeSmoking.size();i++){
	assert harmfulHabitsAnamnesis.kindAgeSmoking[i].code == kindAgeSmokingMap[i].code
	assert harmfulHabitsAnamnesis.kindAgeSmoking[i].value == kindAgeSmokingMap[i].value
}
for(int i=0; i < harmfulHabitsAnamnesis.kindSmokingCount.size();i++){
	assert harmfulHabitsAnamnesis.kindSmokingCount[i].code == kindSmokingCountMap[i].code
	assert harmfulHabitsAnamnesis.kindSmokingCount[i].value == kindSmokingCountMap[i].value
}
for(int i=0; i < harmfulHabitsAnamnesis.kindStopSmoking.size();i++){
	assert harmfulHabitsAnamnesis.kindStopSmoking[i].code == kindStopSmokingMap[i].code
	assert harmfulHabitsAnamnesis.kindStopSmoking[i].value == kindStopSmokingMap[i].value
}
for(int i=0; i < harmfulHabitsAnamnesis.kindFrequencyAlcoholDrinks.size();i++){
	assert harmfulHabitsAnamnesis.kindFrequencyAlcoholDrinks[i].code == kindFrequencyAlcoholDrinksMap[i].code
	assert harmfulHabitsAnamnesis.kindFrequencyAlcoholDrinks[i].value == kindFrequencyAlcoholDrinksMap[i].value
}
for(int i=0; i < harmfulHabitsAnamnesis.kindPortionsCount.size();i++){
	assert harmfulHabitsAnamnesis.kindPortionsCount[i].code == kindPortionsCount[i].code
	assert harmfulHabitsAnamnesis.kindPortionsCount[i].value == kindPortionsCount[i].value
}

log.info "harmfulHabits object was checked successfully"]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка объекта hazardousWork" id="c6f95de5-8155-4d05-9fa2-8647d4ebfa46"><con:settings/><con:config><script>import groovy.json.JsonSlurper

class kindAllergyObject{
	public String code
	public String value

	kindAllergyObject(String code, String value)
	{
		this.code = code
		this.value = value
	}
}
kindRecitationMap = [
	"производство асбеста",
	"производство мышьяка",
	"производство радона",
	"сварочное производство",
	"работа на типографии",
	"производство резины",
	"работа в условиях длительного воздействия вредных веществ (токсические соединения, пыль, ионизирующая радиация)",
	"иные"
]
kindHazardousWork = [
	new kindAllergyObject("at0009", "да"),
	new kindAllergyObject("at0010", "нет"),
]

def getLifeAnamnesisKindResponse = context.expand('${getLifeAnamnesisKind#Response}')
def slurperJson = new JsonSlurper()
LifeAnamnesisKind = slurperJson.parseText(getLifeAnamnesisKindResponse)

hazardousWorkAnamnesis   = LifeAnamnesisKind.payload.hazardousWorkAnamnesis

assert hazardousWorkAnamnesis.kindRecitation == kindRecitationMap

for(int i=0; i &lt; hazardousWorkAnamnesis.kindHazardousWork.size();i++){
	assert hazardousWorkAnamnesis.kindHazardousWork[i].code == kindHazardousWork[i].code
	assert hazardousWorkAnamnesis.kindHazardousWork[i].value == kindHazardousWork[i].value
}

log.info "hazardousWork  object was checked successfully"</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>ehrId</con:name><con:value>31cf397f-278a-4407-88e9-d172878dfcab</con:value></con:property><con:property><con:name>ssoId</con:name><con:value>af3e4ac5-96dd-4167-afb3-244eb7187aba</con:value></con:property></con:properties></con:testSuite><con:testSuite id="840c5251-00d7-4970-a38f-88a1e2033f42" name="Получение токена СУДИР и токена ЛК" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="d39326bb-4fce-41ad-94ed-cd705a515e1b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение токена СУДИР и токена ЛК" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Получение client_Id client_secret (шаг 1)" id="e7828277-d940-4dad-b37d-798fa56fe78b"><con:settings/><con:config service="https://login-tech.mos.ru" resourcePath="/sps/oauth/register" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение client_Id client_secret (шаг 1)" id="1acba04c-b558-4b14-94b3-193346516e38" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer jIeAUJjALkvjRcU_wAcASnNNc9ovLxhApSnJfqt2JLcRw_jCyugGxXfMdPVBayeiPj0pmufDqQxmE9ofd8Rnww" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request>{
"software_id": "CSI",
 "device_type": "android_phone",
 "software_statement": "eyJ0eXAiOiJKV1QiLCJibGl0ejpraW5kIjoiU09GVF9TVE0iLCJhbGciOiJSUzI1NiJ9.eyJncmFudF90eXBlcyI6WyJhdXRob3JpemF0aW9uX2NvZGUiLCJjbGllbnRfY3JlZGVudGlhbHMiLCJyZWZyZXNoX3Rva2VuIl0sInNjb3BlIjoib3BlbmlkIGNvbnRhY3RzIHByb2ZpbGUiLCJqdGkiOiJmYjg2NDcwMS1mZGNkLTRjZjctODg1Mi01ZTVmNDY3N2ZjZTYiLCJzb2Z0d2FyZV9pZCI6ImVtaWFzLmluZm8iLCJzb2Z0d2FyZV92ZXJzaW9uIjoiMSIsInJlc3BvbnNlX3R5cGVzIjpbImNvZGUiXSwiaWF0IjoxNjM1MTczODIyLCJpc3MiOiJodHRwczovL2xvZ2luLXRlY2gubW9zLnJ1IiwicmVkaXJlY3RfdXJpcyI6WyJodHRwczovL2VtaWFzLmluZm8vc3VkaXItbW9iaWxlIl0sImF1ZCI6WyJlbWlhcy5pbmZvIl19.glfjJb7PXa7l3O3CMIOrbw_N0Cd5y-kyn5lklyVGLXDAFv8MqC85MfgqEE86buaTAsOwEAqqoTwLpOXodN9ds_q7zcDyLQoDcILHhgg9G3-DoLu9XxpPbaRNFBjzpgZrjKZCGJCSqdjnQJzNv2-oySD_xTKHfXFjy62SITRnUjJCyxhmbrtckjJX6RckCqv3Y3WFgr8nmMcjh-OFgquklokVlo3cfRl4R1JwEe5kiya7ZfqsNhwhx_iaG4SHYICtzYboToAfiLYbJsJ-H89I7FspusOhidkrt23BteNUnjzT3Jx3_OuWauK4aLkaBXQzFVksaoDiuRHmHn6uOzFihQ"
}</con:request><con:originalUri>https://login-tech.mos.ru/sps/oauth/register</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c2013d0e-b347-454d-bc12-f33e5b820ccc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись client_id client_secret" id="418d342e-948f-427b-9d02-2450e1c9aff7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>client_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение client_Id client_secret (шаг 1)</con:sourceStep><con:sourcePath>$.client_id</con:sourcePath><con:targetType>client_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>client_secret</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение client_Id client_secret (шаг 1)</con:sourceStep><con:sourcePath>$.client_secret</con:sourcePath><con:targetType>client_secret</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Кодирование в base64 + составление запроса" id="16b183be-071e-4870-a4fc-b10a3dc89e08"><con:settings/><con:config><script>import java.util.Base64

def Encoder = Base64.getEncoder()

client_id = testRunner.testCase.getPropertyValue("client_id")
client_secret = testRunner.testCase.getPropertyValue("client_secret")

auth = Encoder.encodeToString((client_id + ":" + client_secret).getBytes())
testRunner.testCase.testSuite.setPropertyValue("base64",auth)

////////////Составление запроса. Ссылка для авторизации///////////

link = "https://login-tech.mos.ru/sps/oauth/ae?client_id=$client_id&amp;response_type=code&amp;redirect_uri=https://emias.info/sudir-mobile&amp;access_type=offline&amp;scope=openid+profile"
testRunner.testCase.setPropertyValue("link",link)
</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Действия со ссылкой" id="a679e3e3-40ec-45f4-bea9-be307559ac92"><con:description>1. Скопировать ссылку из проперти кейса (link)
2. Открыть консоль разработчика в браузере (F12)
3. Вставить скопированную ссылку
4. Ввести логин/пароль и капчу (логин: yar.promo.zapov.a@gmail.com пароль:Hibmavy3Pitnico9 )
5. Нажать войти
</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="delay" name="Delay" id="d8875b83-260d-498f-9431-c83edd0c7d26" disabled="true"><con:settings/><con:config><delay>50000</delay></con:config></con:testStep><con:testStep type="manualTestStep" name="Подтверждение и копирование кода" id="ea2f16f9-2719-49a9-90fe-c3e1a144ccf2" disabled="true"><con:description>1. Нажать кнопку "Подтвердить"
После получения данного кода есть минута, чтобы отправить следующий запрос
2.Скопировать код из консоли разработчика
3. Вставить код в проперти кейса (code)</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="restrequest" name="Получение токена СУДИР" id="1a90ae70-6308-413d-b891-6fa22c34b659"><con:settings/><con:config service="https://login-tech.mos.ru" resourcePath="/sps/oauth/te" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение токена СУДИР" id="26f90063-1811-4565-b889-d93e4d165864" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic ${#TestSuite#base64}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request/><con:originalUri>https://login-tech.mos.ru/sps/oauth/te</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fd19a4af-366b-4fed-8e55-939a693dbce6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="code" value="${#TestCase#code}"/>
  <con:entry key="grant_type" value="authorization_code"/>
  <con:entry key="redirect_uri" value="https://emias.info/sudir-mobile"/>
</con:parameters><con:parameterOrder><con:entry>grant_type</con:entry><con:entry>code</con:entry><con:entry>redirect_uri</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись токена СУДИР и refresh" id="26053beb-f08b-44d3-8fb5-f13bd86196ee"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>access_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение токена СУДИР</con:sourceStep><con:sourcePath>$.access_token</con:sourcePath><con:targetType>sudirToken</con:targetType><con:targetStep>#Project#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>refresh_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение токена СУДИР</con:sourceStep><con:sourcePath>$.refresh_token</con:sourcePath><con:targetType>refreshToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Получение данных о пользователе" id="8e3b7f98-3efc-4ee2-a4f7-4750fb7c4fb0"><con:settings/><con:config service="https://login-tech.mos.ru" resourcePath="/sps/oauth/me" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение данных о пользователе" id="e34c85f0-463c-454a-bb0f-a0f8070e9b0a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request/><con:originalUri>https://login-tech.mos.ru/sps/oauth/me</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a895841-cf20-40c7-a34a-86a7e5719b50" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Cache-control</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись guid" id="0945a82c-76c9-465c-997f-ccb09bd774fa"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>guid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение данных о пользователе</con:sourceStep><con:sourcePath>$.guid</con:sourcePath><con:targetType>guid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Зарегистрировать инстант" id="3dc90cb5-3c9c-47fc-a9dd-def57cc9c9ce"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/2/mobile/auth/instance" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Зарегистрировать инстант" id="60261039-b4ea-4d59-9649-f46e0fc1f793" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "instanceToken": "${#TestCase#client_id}",
  "sudirToken": "${#Project#sudirToken}"
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/2/mobile/auth/instance</con:originalUri><con:assertion type="Simple Contains" id="ca95a9e3-62a6-424f-a200-baaf7d074f58" name="Contains"><con:configuration><token>attemptToken</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Users с доступом к ЭМК2" id="ae037936-ca59-44b8-9243-1448c60008e0" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/2/profile" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Users с доступом к ЭМК2" id="7afb73ec-356a-499b-a3dd-566e7c239c30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru./api/internal/3/emc-permissions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ef35c434-94e6-4c3e-b7f2-acf1722fa3ad" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ssoId" value="${#TestCase#guid}"/>
  <con:entry key="X-Access-JWT" value=""/>
  <con:entry key="ehrId" value=""/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение attemp-access" id="468ac2b6-f0a7-4ba2-ab43-4fd4ef36761e"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def httpResponseHeaders = context.testCase.testSteps["Зарегистрировать инстант"].testRequest.response.responseHeaders
testRunner.testCase.setPropertyValue("x-otp", httpResponseHeaders.'x-otp'[0])

ResponseJson = context.expand('${Зарегистрировать инстант#Response}')
attempt_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("attempt_token", attempt_token.attemptToken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Подтвердить токен" id="35477482-2f16-4edb-8160-a204fa62843b"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/2/mobile/auth/confirm-instance" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Подтвердить токен" id="33cd7c74-7696-4e79-b652-2c604d7a36bb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
    "otpCode": "${#TestCase#x-otp}",
    "attemptToken": "${#TestCase#attempt_token}"
 }</con:request><con:originalUri>https://lkservice.test.emias.mos.ru./api/2/mobile/auth/confirm-instance</con:originalUri><con:assertion type="Simple Contains" id="3d630dca-8dc0-493c-ba56-a3d039abaa84" name="Contains"><con:configuration><token>accessToken</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение X-Access-JWT" id="b46a8033-8e3a-4867-b5c3-8fd1387d397a"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${Подтвердить токен#Response}')
access_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.testSuite.setPropertyValue("X-Access-JWT", access_token.accessToken)

testRunner.testCase.testSuite.project.setPropertyValue("X-Access-JWT", access_token.accessToken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Users с доступом к ЭМК" id="22f3ded4-4e66-4309-8645-1183e78044d7"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/2/profile" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Users с доступом к ЭМК" id="7afb73ec-356a-499b-a3dd-566e7c239c30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#Project#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru./api/internal/3/emc-permissions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ef35c434-94e6-4c3e-b7f2-acf1722fa3ad" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ssoId" value="${#TestCase#guid}"/>
  <con:entry key="X-Access-JWT" value=""/>
  <con:entry key="ehrId" value=""/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Посмотреть привязанных пользователей" id="db40b470-4def-4ce1-87cd-0e17c8a5e047"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/internal/3/emc-permissions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Посмотреть привязанных пользователей" id="41600ef4-dbb4-46ce-81f3-fbc8d75231db" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/internal/3/emc-permissions</con:originalUri><con:assertion type="Simple Contains" id="5636a380-bc1a-4484-8e5c-63221a606362" name="Contains"><con:configuration><token>policyNum</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ssoId" value="${#TestCase#guid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ssoId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>client_id</con:name><con:value>dyn~emias.info~81646001-98e3-458e-a6db-ec8043552f0f</con:value></con:property><con:property><con:name>client_secret</con:name><con:value>mJO4kI1E4GKV4yX</con:value></con:property><con:property><con:name>link</con:name><con:value>https://login-tech.mos.ru/sps/oauth/ae?client_id=dyn~emias.info~81646001-98e3-458e-a6db-ec8043552f0f&amp;response_type=code&amp;redirect_uri=https://emias.info/sudir-mobile&amp;access_type=offline&amp;scope=openid+profile</con:value></con:property><con:property><con:name>code</con:name><con:value>q6UL3jtgQZeILqloh_wZnGPPrkGsRNbzJdYSKR7ROLXyt1paf3Je1wD6yifmSDJZG-w-UhnUbz-m9CbJRX7P1VdzJkxqGy4dB8GkzQww5Gs</con:value></con:property><con:property><con:name>access_token</con:name><con:value>Q-F5iygkgbwX82WAwlrw9VZtIRJo23IeTI8M_38uh19jZWJhYThlZC0yNThhLTQ2ZWYtYTZiZC1lZjEzZDdiZWM1MjI</con:value></con:property><con:property><con:name>guid</con:name><con:value>af3e4ac5-96dd-4167-afb3-244eb7187aba</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>35863</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIwZWIyOTg4OC04NTdmLTQ5YjItYTJhZC1hOWQzNzc1ZmNiODkiLCJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2ODI2MDQ0NzcsInN1YiI6ImMzN2VhZTlkLWE5MmEtNGY5My04OWFjLTkyMjg2NTcyMzZhYSIsImhjbiI6NzM0LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiYWYzZTRhYzUtOTZkZC00MTY3LWFmYjMtMjQ0ZWI3MTg3YWJhIiwicGF5bG9hZCI6eyJpbnN0YW5jZV90b2tlbiI6ImR5bn5lbWlhcy5pbmZvfjgxNjQ2MDAxLTk4ZTMtNDU4ZS1hNmRiLWVjODA0MzU1MmYwZiJ9fQ.VH7MXkU_6fud4tWEIXMtVrKWhHbRalNFKaSlu1r7QAFwtl2uvMBMA3UH6A-xsjXZT4ZbIH6IgW_Q2izkQKu75pLTLiU9hGu9L8kVKDJdEMmd1cgSekc4a4drTBUB03t0vH5PCLa3OWPY-CbtzGN2fnnt5crzWNIpdz0tDsMg0jwtXrho39b-QaTLU3IXTGLZ6u-v1eArWSR-EkJily6fkr7BmrLOEbyNd6K1p2sgaWi9bZtbl_jLYUQ8kaXTf-JVMUi9bRkN0_hnuo4C7qMs_K3Zq_I3LJH8mq37fe3lmjo7UC9B9nMmKY_vtNbPsdIxY_AtgDXMZ6hL0N68hYOZqRff8YG9g7MruGi6Fzma0L5vTYwKQWDTwIdopiTQoLL_Ongg_uQNIOKXiqPnF6fAR0xcJqyQVOEmPBlaWvLEbcM4tT09tF1m9L6iQZRZufND4Sci27jF8P--YA2a4717npEQFu-qGSJgGgVMJh4VtFn5uDfD_Db-rgLhrs_80aKKnCAbpAuoZZ9ZXMJKueiCMky3zm_KorvHAvLCx8ukW0vwDzqLndTcuyw1xadZORQvce3EeuYBd3J1vhP9Nw0yeegmLVlig7sinxk_VOq2e5hUo7pPjCZPLTbC0bzvEe9hOeDdUUvVs_cj6hOpshIsm7PZ_U7Xvw6FQMxfvFFEMBU</con:value></con:property></con:properties></con:testCase><con:testCase id="108ed05c-ea81-49e4-a844-a516b3a28db9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Найти пациента и добавить в медкарту" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Найти пациента в базе СУПП по омс" id="36ef940c-2c13-4eb5-8ad4-a92fa66cc190"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT  OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, PATIENT_ID,
LAST_NAME, FIRST_NAME, SECOND_NAME, 
to_char(BIRTH_DATE, 'YYYY-MM-DD') as birth_date  FROM PATIENT  
WHERE (OMS_ASSURANCE_SERIES=${#TestCase#series} 
and OMS_ASSURANCE_NUMBER=${#TestCase#omsNumber})
or OMS_NEW_ASSURANCE_NUMBER=${#TestCase#oms}</con:query><con:assertion type="Simple Contains" id="02691c48-cd7a-430a-8519-337b2ccbcbe5" name="Contains"><con:configuration><token>row</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать в свойства" id="1ef41734-c411-47f2-81fe-2937372fb762"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>birthDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/BIRTH_DATE</con:sourcePath><con:targetType>birthDay</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/PATIENT_ID</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>lastNAme</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/LAST_NAME</con:sourcePath><con:targetType>lastName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>firstName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/FIRST_NAME</con:sourcePath><con:targetType>name</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>middleName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/SECOND_NAME</con:sourcePath><con:targetType>middleName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="Записать в свойства второго пациента" id="8c503a4a-99d9-47e0-920e-97194b4d6c86"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>birthDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[2]/BIRTH_DATE</con:sourcePath><con:targetType>birthDay</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[2]/PATIENT_ID</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>lastNAme</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[2]/LAST_NAME</con:sourcePath><con:targetType>lastName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>firstName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[2]/FIRST_NAME</con:sourcePath><con:targetType>name</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>middleName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[2]/SECOND_NAME</con:sourcePath><con:targetType>middleName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Найти пациента в базе СУПП по patient_id" id="d66344e0-c44d-408d-9dcf-e84742e986cc"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT  OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, 
LAST_NAME, FIRST_NAME, SECOND_NAME, 
to_char(BIRTH_DATE, 'YYYY-MM-DD') as birth_date  FROM PATIENT  
WHERE PATIENT_ID=${#TestCase#patientId} </con:query><con:assertion type="Simple Contains" id="02691c48-cd7a-430a-8519-337b2ccbcbe5" name="Contains"><con:configuration><token>row</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Найти рандомного пациента в СУПП" id="0e4c5096-3a92-4b6b-9fd7-913b1216535f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT  OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER,OMS_NEW_ASSURANCE_NUMBER, PATIENT_ID,
LAST_NAME, FIRST_NAME, SECOND_NAME, 
to_char(BIRTH_DATE, 'YYYY-MM-DD') as birth_date  FROM PATIENT  
WHERE ((OMS_ASSURANCE_SERIES is not null and OMS_ASSURANCE_NUMBER is not null) or OMS_NEW_ASSURANCE_NUMBER is not null )
AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="Simple Contains" id="02691c48-cd7a-430a-8519-337b2ccbcbe5" name="Contains"><con:configuration><token>row</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Добавить пациента в медкарту" id="fa8f8d72-04e5-45ce-8cf9-5d9a74fb8a2f"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/internal/1/user/grant-permission" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Добавить пациента в медкарту" id="a5f68023-dec0-442a-9721-e4a177894c76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "documentId": "string",
 "id": "string",
 "permissionType": "CHILD",
 "userInfo": {
  "userName": "Яна Михайловна В.",
  "phoneNum": "79265209207",
  "ssoId": "af3e4ac5-96dd-4167-afb3-244eb7187aba"
  },
  "createDate": "2023-04-18",
  "patientInfo": {
    "patientName": "${#TestCase#name} ${#TestCase#middleName} ${#TestCase#lastName}",
    "birthday": "${#TestCase#birthDay}",
    "emiasId": ${#TestCase#patientId},
    "policyNum": "${#TestCase#series} ${#TestCase#omsNumber}"
  }
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/internal/1/user/grant-permission</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f30d0dd7-89eb-41cc-b7ae-8e3a80e283a0" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Получить токен" id="182772f7-0320-43ca-b6c4-8910ff43fc9f" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получить токен" id="3b40c73f-e9cf-4762-8875-d5f43b1bb979" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "med_test_2022@bk.ru"
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/login</con:originalUri><con:assertion type="Simple NotContains" id="2b30274b-96a2-4696-981c-a6342eba3ef7" name="Not Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="5812c462-9482-4e8d-b95f-4ad1d19e6230" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получить attemp-access" id="f6f9487f-4518-4552-90ca-4f00a1f85a53" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def httpResponseHeaders = context.testCase.testSteps["Получить токен"].testRequest.response.responseHeaders
testRunner.testCase.setPropertyValue("x-otp", httpResponseHeaders.'x-otp'[0])

ResponseJson = context.expand('${Получить токен#Response}')
attempt_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("attempt_token", attempt_token.attempt_token)</script></con:config></con:testStep><con:testStep type="restrequest" name="Подтвердить токен" id="044cb507-58db-46ac-ad65-65126905e953" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Подтвердить токен" id="3827440b-59d7-4e3f-82f2-7e31523ea53c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "otp_code": "${#TestCase#x-otp}",
  "refresh_token_ttl_seconds": 0,
  "access_token_ttl_seconds": 0,
  "attempt_token": "${#TestCase#attempt_token}"
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:assertion type="Simple Contains" id="aef0c267-6bdb-4264-9f13-e58bac6df0a6" name="Contains"><con:configuration><token>access_token</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Записать токен в свойства" id="7acae831-77d8-4016-9799-d709c472dc61" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Подтвердить токен</con:sourceStep><con:sourcePath>$.access_token</con:sourcePath><con:targetType>token</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Получить список прикрепленных" id="dba8a665-f7c1-4b94-901b-acfa9b45a91f"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/2/profile" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получить список прикрепленных" id="31babd50-0726-4247-bc7a-7409f01fa367" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/2/profile</con:originalUri><con:assertion type="Simple Contains" id="ab8aa89d-e818-47d9-b829-7850fe93c133" name="Contains"><con:configuration><token>relatives</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value=""/>
  <con:entry key="ehrId" value=""/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получить ehrId пациента" id="bff57ad6-8d60-496a-8144-2bbd202150aa"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${Получить список прикрепленных#Response}')
d = new JsonSlurper().parseText(ResponseJson)
birthDay = testRunner.testCase.getPropertyValue("birthDay")
oms = testRunner.testCase.getPropertyValue("oms")
lastName = testRunner.testCase.getPropertyValue("lastName")
name = testRunner.testCase.getPropertyValue("name")
middleName = testRunner.testCase.getPropertyValue("middleName")

fullName=name+" "+middleName+" "+lastName[0]+"."

for(def elem : d.relatives){
	if(elem.birthDate ==birthDay &amp;&amp; oms==elem.policyNum &amp;&amp; elem.firstName==fullName){
		log.info elem.profileId
		testRunner.testCase.setPropertyValue("ehrId", elem.profileId)
		break
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7066630284</con:value></con:property><con:property><con:name>series</con:name><con:value>770000</con:value></con:property><con:property><con:name>patientId</con:name><con:value>31110819</con:value></con:property><con:property><con:name>oms</con:name><con:value>7791889720000557</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Сафрошкин</con:value></con:property><con:property><con:name>name</con:name><con:value>Олег</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Юрьевич</con:value></con:property><con:property><con:name>birthDay</con:name><con:value>1984-02-13</con:value></con:property><con:property><con:name>token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2Nzk0OTk1NjgsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMjBlMWJmNC0yZWNjLTRlYTMtOTRjZi1iMTliMzc3ZDYyY2QiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoidzlzMGZSVEFXVE9VRWQ5VisremF0c3NsdFVXZnI5UFBIUEhoR1hzYzU3U05QL0ZwcGlOZWo2RzlhaVdXRmdielhHdVcyai9mdk5CalY3WkhlTDRjbGVPVTVEODRjT0RjSk5FNjhKSzBFNnJyT3o0bG8rZnM4cVZIc09rM3hyS1FaZmJUM3NweGgvUUdaaUMvU2JhMjQ3T1MvdVN1VnVYTVVySjUyM1RwSlJNd3RLRnliNXljQXU4b3h5dlYwTXVDVHhZSElOKy9OTU9ubnhvckRFMnIycW05YmwvTjV1QWE4c1B3Lyt6TXJYT1FXdm1PVXZWaUVvbHJXeXkwaS95Z215bjk3TWNtQVRnQ1JLQlE1MmJpTG5PbE41VVRiRi9lc1JCY3Mzb1FVVjc5YTlXTkMxTC9RakxtajdoVUJaY0tkbXJLL2JKaXhMQmp0bW0vL2ZFV1hBPT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIyIn0.U56ljjFNsiTlPAubVFSPnALoKcdCCkugqFUNKowxR1CAPe32wlLylF-iTmNF1NqjUm2iVwdV1gIOAZQPl5wKGKYNlAESK59wVfgNDlvuNaHhSLvkZbUtVXHDoSN_HROBiNcGpgrTYvK3X4yXJpXjnif_mehsnuQpn9PLR5hcCg-SXiZ4pbH_ovdhd1YI-d5lNM-IBG6WURBwCU7St7SjjxojxcR8Dtq6HmvsfGtgYBkwu13keryRjRUuWkuWizK5aNHmyxlhsN77IXTVLF-TbfbOZ-BeYFNZXqoMVeImGWVoMUsK3sKc0QpYy1ma81lZvjYBLBYMiCOK8NoY84ZOFd0-xRQ7XdXauDy0-HsQfPxab6pxigvKkx8mgbRkucLhWS_xM0dEVmY5CG7rSB0kNVgmyA4HZufTHHysr1En_a7HE_flx4odcnyQyO1nMKm_dYqzAOFFyYuYHhOJjE_x-FBsfybDSLxKeBiGXbRUTnhGPlmUus_Gs0dVYL0ZyD9aBl8Yh0uiWBMe_yz2KEdTZ__h6bX-RbgAi0lWs3OTQF19XXa5PRZ2w2ftvoJD5JhVvYl-Uf6Lagzox9i8_loWD4GxczbPCU8-dktpmWe-N_fb5O41G6zWcnOvIdOQB8k2u4K89dLr8hNHzcxYlmNNqMm9Em1mYQbzqDHXOxhFFSE</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>19674</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6IjdlMjVhYjIzLWUwYTMtNGUxOC05MDNlLWI3MmMwNjYzNjQyNCIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY3OTQxNjQ1Miwic3ViIjoiYmI1ZWI4NTgtZWY3Ni00Mjk1LTk4NTktYzlkNmEyNTFiMzUwIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiQ3Bwb3hwbE56b3M0L2h6RmEycm91S0lORXRQWnpiYkpTNmxlYmRJTDBTbHNNdDgyOEJDYXNMbGRWZHJ1TmZ2S0t2T0J4Ujd1V09RNjdCenpWSkM5aXpNaFd1akVTWnlrczhyb2FqL2VxNEZESnhTakR5aHdNYlo5UFNVam1xdCtyRUJjUHBGV3RRYVdWQk1UQlN1VldoN01xSzc4MHBlL283MGpIZUcxYUpveWlIZU5XaCtsUUhoUy94RHUzUXFKbEFhMEU5S3A3TTk3KzdLR1FoWFVEWVJ5eE1GMm5nZC91MXdCbXdhWkZjeXZkY003TWFRNTBRdUhmeUVORnQwZjRpS0lWL1pIQ0F0QS9qRTdwODRkMFFobXJudmc1TzgrZHZSS1hRb3htdzFWS3RkUVBPckJDMVltd2xtNTNWUU1ac0tRbFZJY2FCSkJEcTFpK2RycnlnPT0ifQ.hZxYie4xivThXf9tN1KLaYunCHqYJIq5XtQ6w24ku2JlVIV75hK54L0ZTtOsMyfOZe-epPyWsOQJBoDM7Z1-l55-Il-AEzjDtM-GBa_uiTiGkB3uvLhHoevWfFil5rwl7-ZEAxldIh5KkL8DzoXQ5K5XLACGgLQpEWPIdGiaWtlD_J3ZX9mfnFKgtPrDbKA-RGIWR9gsk9Kyxm8M_r5zeD-WCAVUNp-veEsGfOrzk2s6u-wOy72nzS97utiaulPEDNvsU7E-zsrBqn3YdRSXgnd4fR3NpwiXTTcSQ8K-D9e1JfNUVbNXpTf6OqiR24sFVH4gaJgsdmfuGT-4byfiygv9RZVhPbint3llTk2Rn15wNoAZJqe3hWgO--gJ7GPKfb_RFhUjquZliI3SI42jcySQRbSVXioJfObmo4LVrJwioyV8IBgsrJKDJ66RFeHPCABek_ktAh_GwAB17FlnXU3dDJ3WSv_jUq3R0-eyx5nAVhlxFqWqdTN5ladfGbOrMebF5IiIGFtxzUNxe1rQGe_1_2f8jumEDDsgkBlaIHQa8O52M1KwVMDDeW-OaL4jnG9OYDcX-1R1iG9jvXpiJh9fsx9Ng5eiYP8OYJsNojczD9vzizyjSxBh6qwze03fXDy5G9rqytp0CpwpcxvNYpi6msgjbF7JoDLuM6SBUuU</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>95706443-b316-4442-894c-748da1962c80</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-09-24</con:value></con:property><con:property><con:name>lastNameFirstLetter</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="8372170c-36a6-45e0-8dc4-9de3f977ea39" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Найти пациента по омс" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Найти пациента в базе СУПП по омс" id="47b2d1bb-0a67-463e-8e3b-0be3ec59d0bb"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT  OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, PATIENT_ID,
LAST_NAME, FIRST_NAME, SECOND_NAME, 
to_char(BIRTH_DATE, 'YYYY-MM-DD') as birth_date  FROM PATIENT  
WHERE (OMS_ASSURANCE_SERIES=${#TestCase#series} 
and OMS_ASSURANCE_NUMBER=${#TestCase#omsNumber})
or OMS_NEW_ASSURANCE_NUMBER=${#TestCase#oms}</con:query><con:assertion type="Simple Contains" id="02691c48-cd7a-430a-8519-337b2ccbcbe5" name="Contains"><con:configuration><token>row</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать в свойства" id="ba47b759-1ccc-4e03-bc8e-636fb3696349"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>birthDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/BIRTH_DATE</con:sourcePath><con:targetType>birthDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/PATIENT_ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>lastNAme</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/LAST_NAME</con:sourcePath><con:targetType>lastName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>firstName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/FIRST_NAME</con:sourcePath><con:targetType>name</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>middleName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/SECOND_NAME</con:sourcePath><con:targetType>middleName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>710271440</con:value></con:property><con:property><con:name>series</con:name><con:value>770000</con:value></con:property><con:property><con:name>id</con:name><con:value/></con:property><con:property><con:name>oms</con:name><con:value>770000710271440</con:value></con:property><con:property><con:name>lastName</con:name><con:value/></con:property><con:property><con:name>name</con:name><con:value/></con:property><con:property><con:name>middleName</con:name><con:value/></con:property><con:property><con:name>birthDate</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="95e185da-21fe-483b-ba30-72a760b0801b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обновить токен СУДИР" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Обновить токен СУДИР" id="d90d7905-80a0-4da1-acb0-4d055b2078f6"><con:settings/><con:config service="https://login-tech.mos.ru" methodName="Обновить токен" resourcePath="/sps/oauth/te" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Обновить токен СУДИР" id="793942aa-3f63-4200-ad97-16a44c94594a" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic ${#TestSuite#base64}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request/><con:originalUri>https://login-tech.mos.ru/sps/oauth/te</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="refresh_token" value="${#TestSuite#refreshToken}"/>
  <con:entry key="grant_type" value="refresh_token"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись токена СУДИР и refresh" id="38dedae8-1a4e-4455-8c81-71016dd3a862"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>access_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Обновить токен СУДИР</con:sourceStep><con:sourcePath>$.access_token</con:sourcePath><con:targetType>sudirToken</con:targetType><con:targetStep>#Project#</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>refresh_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Обновить токен СУДИР</con:sourceStep><con:sourcePath>$.refresh_token</con:sourcePath><con:targetType>refreshToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2ODI2MDQ1NDEsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJjMzdlYWU5ZC1hOTJhLTRmOTMtODlhYy05MjI4NjU3MjM2YWEiLCJzaWQiOiIxMmRiYzc1My02NmQ2LTQxMzMtYWYyMy0zMjI0Yzc5OTFlMjMiLCJwaG9uZSI6Ijc5MjY1MjA5MjA3Iiwic3NvX2lkIjoiYjFpMERmQUkyeCtrNzFPVEYxWE5ydHcrS0haZGlQZ1MybXVtdU5Dcy85bUpLK3ZvbVdMTU1BNFFRa0k5WVI2WWNnNmtpQ2dVU0hzVGZTaXQwOUQ0TFAvNld4S2NSWTFKK0x4em9CdVBBRDFSMmkxdGgrOURHMlJ4RlJtMGp3alFKTGJwUzh0aWJmQnhLV3B5bDZaU0haaUk3dFRPbXFUWjR5c0cyRmpEbDViUWc4d3BPNkFrMnYvQlZRT0cxKzBGYnMvSTBJb3JZZ3p6alNMUlBtdWUyZXV4eGV6ZUh6Z1R3WnhJbXFRSVF6dXkvb2VwRldoUDRLS2k3MnpLMXoxdmxZc2Y1bzl4V1FyamExRWd1UTEycWNycmMxSmpoY1d0V3NGcjVFanE2UHE5Y1BFWlV6Wmd6OUw2MjJnM09tL0lHdWxHY2srSFVYdFV6T2toZy9EVFNRPT0iLCJlbWFpbCI6IiIsImZpcnN0X25hbWUiOiJcdTA0MmZcdTA0M2RcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzOFx1MDQ0NVx1MDQzMFx1MDQzOVx1MDQzYlx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIxOTgyLTA0LTA5In0.kfdow6BlowU933ZqahdGhL8HdK7lqRou2yxH6OML14lrG6QwuGFeGsp5C8HdYrU1DYaq6Ve-XI8EIUMoALPw-ozEOAEQQogu9XOG95rSSCGHMFSxT5dxVgHUZ_PKoOG8EVK6K5idBU0KNoIYKFcCFGSuik6G-0xeYoeLRvxqc0A8aAM8jwYIaPBUTeF8nxvBeBQJy_6RU5-U6rZ3gvOXXkxNKCq3TpJBjyl7Gab0k3epyfFRwa1reCsOZyKFvCz2JhRW4losHwk_41R56qqwkLU1xIUBaHuTyafcYr4501Q4_1zs2_gayutztIJqqca0MJ80TIobL5bD-cV1aNUszqg3cUJUTdS5k-GH3Cgj1U9OdHkK7_w_t9Srdn9_FJnaIIrtcaC9SHTSWUeHnPfvJGD1VTqJwNZIcd6JXTbk5VZ8br_8KjDBqRZamoWnyDOwRV4qXvpxUNLt5x2007A_PJSX8e9-59fZSuGawai0u-R5WM6_YprEXPiZyAW-cwFt9wpKT7E8uk9btAvgaW1ozclKV6lu_4_EHYr8K42jkegtmHBHifgIce3VJQeLQeHF5PGhnB0uf7xe8AgpQqMoyIWWeN3P1q3MLwyGMG1FclG1jr8J0mxOVUyt-yr5FCPPMHfRv852lVE4MDetmm7fgBIaIr3MfXDT7HLvh-ao2rU</con:value></con:property><con:property><con:name>base64</con:name><con:value>ZHlufmVtaWFzLmluZm9+ODE2NDYwMDEtOThlMy00NThlLWE2ZGItZWM4MDQzNTUyZjBmOm1KTzRrSTFFNEdLVjR5WA==</con:value></con:property><con:property><con:name>refreshToken</con:name><con:value>3CzOaKD01JjTebIIUqwmJKpC4KNsH9Xk3LA3SVQGoEaP_TpIfy3G4_jA2REZLgbt3ajMWkTtlUAGhrN8fnHvzw</con:value></con:property></con:properties></con:testSuite><con:testSuite id="b40089ad-6a59-40dd-989a-63a12be5d703" name="Сохранить токены из глобалных свойств в свойства проекта"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b7a66f48-1111-4ace-8e42-27acd528905b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Сохранить" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Сохранить" id="f244cc1e-8604-4b0f-9808-c81aa9ebe154"><con:settings/><con:config><script>def sudirToken =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "sudirToken" )
def accessToken =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "X-Access-JWT" )
log.info sudirToken
log.info accessToken
testRunner.testCase.testSuite.project.setPropertyValue("sudirToken", sudirToken)
testRunner.testCase.testSuite.project.setPropertyValue("X-Access-JWT", accessToken)
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>emiasInfoEndpoint</con:name><con:value>http://emiasinfo1.emias.solit-clouds.ru</con:value></con:property><con:property><con:name>emiasInfoDbConnection</con:name><con:value>172.17.5.11:29100/emiasinfo</con:value></con:property><con:property><con:name>emiasInfoDbLogin</con:name><con:value>emiasinfo</con:value></con:property><con:property><con:name>emiasInfoDbPassword</con:name><con:value>emiasinfo</con:value></con:property><con:property><con:name>emiasInfoFullDbConnection</con:name><con:value>jdbc:postgresql://172.17.5.11:29100/emiasinfo?user=emiasinfo&amp;password=emiasinfo</con:value></con:property><con:property><con:name>emiasInfoDBDriver</con:name><con:value>org.postgresql.Driver</con:value></con:property><con:property><con:name>lkDbConnection</con:name><con:value/></con:property><con:property><con:name>lkDbLogin</con:name><con:value/></con:property><con:property><con:name>lkDbPassword</con:name><con:value/></con:property><con:property><con:name>lkFullDbConnection</con:name><con:value/></con:property><con:property><con:name>lkEndpoint</con:name><con:value>https://lkservice.test.emias.mos.ru</con:value></con:property><con:property><con:name>lkDBDriver</con:name><con:value/></con:property><con:property><con:name>sudirToken</con:name><con:value>NWY3yL-Lky0FtdxHrK7qiDPNQtv60muwiOe7NIrZzIk</con:value></con:property><con:property><con:name>X-Access-JWT</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2ODk4NDU5MjIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJjMzdlYWU5ZC1hOTJhLTRmOTMtODlhYy05MjI4NjU3MjM2YWEiLCJzaWQiOiJhZjNmMjU3MS1hZGM1LTRlOWMtOTUzYi0wNjczNTIyODE3NmIiLCJwaG9uZSI6Ijc5MjY1MjA5MjA3Iiwic3NvX2lkIjoiRTZoSU1mYWFzMFBXR3VPSUlmTUNsN2FHazNpUGFCbjlabHJLcnNsQzFITm5RUi80MElpU2RXaTNheVVhSEJRbEhZNytKc0ZMWHlsQnIzRTdTcnhMWFFLR3NjaXdWTFNwcE9GMytBWGhmU2puQm1QZytMa0xhVkUyTVIzQS9UREo2YWQ5Sm1RNk5LT2kvYWNVdFcxbmRxSGFCbTBGeEk3cEg4dE1OZmN1UGwrRnFIR2dMeWlDS1o4b1RPelpReFJiK3IrMlo2ODVmQlczVkZ3SmRLNCtDa05Fek1pUTBMMkNtZ1BEK0xudjZFSk5WTjNRaFRIeDUxYVEyRUQ1WldnUkJyOFNUWmx2REE5aHdDcVRjY1I1VjhOUjREVjIvQ05iNm15VW5lZTFmZmtCeFlyOS9iZEhRSjhYWVVPNzQ3ZUpaMnVwbXJ4WFNsbkxOVUpWSmFxWlZBPT0iLCJlbWFpbCI6IiIsImZpcnN0X25hbWUiOiJcdTA0MmZcdTA0M2RcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzOFx1MDQ0NVx1MDQzMFx1MDQzOVx1MDQzYlx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIxOTgyLTA0LTA5In0.RLmDPCt6kUu1na18HHzroGdme9FuMZaz1HyKmEVEqS-AUmEcaFwbq_CMMhtSlgWoNMZNe_L-CRMZDCRYP1XOFomc1MShHCBJH0LYUilNDccVHOfGVmPMXSWyJOkovAI01KX8D8GN8g6NshAar-OBrApiytD4rN8hS_1QAcrbUw01yRHna_Q5JT68WIncX16axGRN8RT8dpK-OCj2hr6MWrRIDhhXC4DtVxrcOUKNd1rmYPwJo1rHIii0qToVVid3ekmH_h-FZxFwqd0aRDXsuyePSpUP3Vvdhh8Hk6wuCRXVyZEoJJCvOxqjDZ7mvXRsFyPdh4vDnKWLe8QKvjIUlquzQHt7BApUX8pgDKFkRCJryOovIiVNFEVnMjCJAGmoQS5GqAOoKUGxEgPXNuWqsHSDiCwbUNnsDU79Gq7DC9vcczWglmGLYDAj-sgoyx0TBRh4qdpLccToTsjdi6nRHE8SQjSOWW02cHj-r1RIQ9c4wh2ZokVCgEE48QtSIkkWi2KGha_y2rH92uEDGDFawOIsHGb9j9r50-MdG_opRMhPLEZt96IbWA4K3ndNswhgSWbLXnZ1N-Bd35PrvKjfFn2RpMouA3jNJ8o4-eexPBnH2AEdMyDNTEgAxpITVqzvZIz-ed5I9QP6cXWTV4TV305DeXuxCQm-lxuc9eKHpH8</con:value></con:property><con:property><con:name>loginEndpoint</con:name><con:value>https://login-tech.mos.ru</con:value></con:property><con:property><con:name>suppDbConnection</con:name><con:value>@//10.2.172.242:1521/emiasdb</con:value></con:property><con:property><con:name>suppDbLogin</con:name><con:value>EMIAS_CLUSTER</con:value></con:property><con:property><con:name>suppDbPassword</con:name><con:value>EMIAS_CLUSTER</con:value></con:property><con:property><con:name>suppFullDbConnection</con:name><con:value> jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:value></con:property><con:property><con:name>suppDBDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>