<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="f6875b4c-6d76-4497-8934-90d711b65af5" activeEnvironment="Default" name="ЕМИАС.ИНФО сервис &quot;Рецепты&quot;" resourceRoot="" soapui-version="5.7.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="bdd5f862-060b-4907-baf1-de63d56f3614" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://emiasinfo1.emias.solit-clouds.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint></con:endpoints><con:resource name="prescriptions" path="/api/v3/prescription/prescriptions" id="5061bcd3-a0e6-4139-b856-29695a645b96"><con:settings/><con:parameters><con:parameter><con:name>oms</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>onlyActive</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>EI-token</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Mock-llo</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="get prescriptions" id="826779ad-8dfd-4b20-b3ea-26acf8b869b3" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404 403 500 401</con:status><con:params/><con:element xmlns:pres="http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions">pres:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:pres="http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions">pres:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="get prescriptions" id="c0b87c92-0a54-47c5-8daa-7ddd2dcdfdeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="{number}" path="/api/v4/prescription/prescription/{number}" id="66e826b0-6e63-46aa-892c-7407852695be"><con:settings/><con:parameters><con:parameter><con:name>number</con:name><con:value>number</con:value><con:style>TEMPLATE</con:style><con:default>number</con:default></con:parameter><con:parameter><con:name>EI-token</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>oms</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="get prescription number" id="5876fd29-8553-4607-9e4c-065d5ec75e2e" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404 500 400 401</con:status><con:params/><con:element xmlns:ns="http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/prescription/1">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:d0="http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescription/00%D0%944500000519">d0:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="get prescription number" id="dab16740-2a2e-4f11-a5c5-2b0c4e346181" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/prescription/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="number" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>number</con:entry><con:entry>EI-token</con:entry><con:entry>oms</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="aggregators" path="/api/v2/prescription/aggregators" id="eb20fc28-05be-453e-a4eb-93a574f83759"><con:settings/><con:parameters/><con:method name="get aggregators" id="d9a7aeec-230e-488b-8916-6532c8c0d157" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:agg="http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/aggregators">agg:Response</con:element></con:representation><con:request name="get aggregators" id="3359c434-ad41-44cf-bc78-e30552943c3b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="{orderId}" path="/api/v3/prescription/order/{orderId}" id="26b045fa-78b3-4755-8478-5fa9fbee898b"><con:settings/><con:parameters><con:parameter><con:name>orderId</con:name><con:value>orderId</con:value><con:style>TEMPLATE</con:style><con:default>orderId</con:default></con:parameter><con:parameter><con:name>oms</con:name><con:value>oms</con:value><con:style>QUERY</con:style><con:default>oms</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>EI-Token</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="3081cd2b-8b7d-4fca-8623-d7c26a84c903" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>404 400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/42">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404 500 403 401</con:status><con:params/><con:element xmlns:ns="http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/42">ns:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="3396d4d2-2fac-4008-9d9c-71df71795e71" mediaType="application/json"><con:settings/><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="rate" path="/api/v2/prescription/rate" id="1e1a142a-cc75-424c-8ebc-bace04d64244"><con:settings/><con:parameters/><con:method name="Method 1" id="3cf5615e-8371-410f-84b9-54590c259cca" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="94bd42d1-cef3-4ef4-91bd-88729e925f4d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="pharmaciesGeo" path="/api/v2/prescription/pharmaciesGeo" id="b8a67cff-20bc-4377-8dec-2d07f2c9ca29"><con:settings/><con:parameters/><con:method name="Method 1" id="78538f4f-ea0a-4793-8ca9-3088fefc8e7d" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:phar="http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/pharmaciesGeo">phar:Response</con:element></con:representation><con:request name="Request 1" id="e031d466-066b-41d0-97c3-6b3542aba205" mediaType="application/json"><con:settings/><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="pharmacies" path="/api/v2/prescription/pharmacies" id="82d3f35c-f8d8-486f-90b8-ce76eb3bd885"><con:settings/><con:parameters/><con:method name="Method 1" id="e95c820e-5df9-42c2-b853-4c09160dbc1e" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:phar="http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/pharmacies">phar:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 500</con:status><con:params/><con:element xmlns:phar="http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/pharmacies">phar:Fault</con:element></con:representation><con:request name="Request 1" id="67712257-7343-43ca-8981-10e481d3fa82" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="orders" path="/api/v3/prescription/orders" id="b147104b-1296-4be9-acf7-9391888a6f7c"><con:settings/><con:parameters><con:parameter><con:name>oms</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="57c799fc-40fb-4d80-9e02-4c40d6d20b16" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ord="http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/orders">ord:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500 401 403</con:status><con:params/><con:element xmlns:ord="http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders">ord:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="orders" id="554d5438-ce14-4b03-a912-fe8052b7c2c9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>oms</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="orderState" path="/api/v2/prescription/orderState" id="97b6aa1e-eb02-42c5-8b8b-732809c716f3"><con:settings/><con:parameters><con:parameter><con:name>qRCode</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="c3138146-979c-42d2-9288-a359a4fdc05b" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ord="http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/orderState">ord:Response</con:element></con:representation><con:request name="Request 1" id="38e2689e-eb44-402a-9c3a-fcf1a865754a" mediaType="application/json"><con:settings/><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>qRCode</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="drugsAvailability" path="/api/v2/prescription/drugsAvailability" id="92b0aed1-bfe4-4f2a-a058-4071b70ce2f0"><con:settings/><con:parameters/><con:method name="Method 1" id="4ed6abb0-552b-465a-b834-407981a6dd52" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:drug="http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/drugsAvailability">drug:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:drug="http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/drugsAvailability">drug:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="postDrugsAvailability" id="9c42939c-dbce-4d09-9b51-5383a9fa7316" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="aggregators" path="/api/v3/prescription/aggregators" id="35594588-cb68-4367-ad69-bcc2f7dc3601"><con:settings/><con:parameters/><con:method name="Method 1" id="544f8b9c-eded-46f4-93de-44711fc85225" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:agg="http://emiasinfo1.emias.solit-clouds.ru/api/v3/prescription/aggregators">agg:Response</con:element></con:representation><con:request name="Request 1" id="0598e2e1-ec59-4f9f-882a-12a6cb60574a" mediaType="application/json"><con:settings/><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="prescriptions" path="/api/v3/prescription/prescriptions" id="7fce9f50-c6f5-4164-920c-e4d3a8df4bb1"><con:settings/><con:parameters><con:parameter><con:name>oms</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>onlyActive</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Mock-llo</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="4a92cd53-1d19-4c1f-9e54-6042ffbaff67" method="GET"><con:settings/><con:parameters><con:parameter><con:name>EI-token</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 403</con:status><con:params/><con:element xmlns:pres="http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions">pres:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:pres="http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions">pres:Response</con:element></con:representation><con:request name="get prescriptions v3" id="0c184fae-3376-42dd-bca9-5e21b9f9de50" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>EI-token</con:entry><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="{number} с моком" path="/api/v4/prescription/prescription/{number}" id="66e826b0-6e63-46aa-892c-7407852695be"><con:settings/><con:parameters><con:parameter><con:name>number</con:name><con:value>number</con:value><con:style>TEMPLATE</con:style><con:default>number</con:default></con:parameter><con:parameter><con:name>EI-token</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>oms</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Mock-llo</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="get prescription number" id="5876fd29-8553-4607-9e4c-065d5ec75e2e" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404 500 400 401</con:status><con:params/><con:element xmlns:ns="http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/prescription/1">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:d0="http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescription/00%D0%944500000519">d0:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="get prescription number" id="dab16740-2a2e-4f11-a5c5-2b0c4e346181" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/prescription/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="number" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>number</con:entry><con:entry>EI-token</con:entry><con:entry>oms</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:WsdlInterface" id="d0c599a7-4c38-4185-a019-35b55869adb9" wsaVersion="NONE" name="PrescriptionInfoServiceV4SoapBinding" type="wsdl" bindingName="{http://emias2.gov.ru/business/llo/v4}PrescriptionInfoServiceV4SoapBinding" soapVersion="1_1" anonymous="optional" definition="http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService?wsdl"><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="PrescriptionInfoServiceV4" targetNamespace="http://emias2.gov.ru/business/llo/v4" xmlns:ns1="http://emias2.gov.ru/business/llo/v4/types" xmlns:ns2="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://emias2.gov.ru/business/llo/v4" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias2.gov.ru/business/llo/v4/types" version="1.0" xmlns:tns="http://emias2.gov.ru/business/llo/v4/types" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:complexType name="fpiChangeMilkShopRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element name="milkShopId" type="xs:long"/>
          <xs:element maxOccurs="unbounded" name="prescriptionNumber" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiChangeMilkShopResponseType">
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="extendedResponse">
        <xs:complexContent>
          <xs:extension base="tns:detailedResponse">
            <xs:sequence>
              <xs:element minOccurs="0" name="resultUserInfo" type="xs:string"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="detailedResponse">
        <xs:complexContent>
          <xs:extension base="tns:generalResponse">
            <xs:sequence>
              <xs:element minOccurs="0" name="resultDetails" type="xs:string"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="generalResponse">
        <xs:sequence>
          <xs:element name="resultCode" type="xs:int"/>
          <xs:element minOccurs="0" name="resultDescription" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piCompleteOrderRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element name="QRCode" type="xs:string"/>
          <xs:element minOccurs="0" name="userIdent" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piCompleteOrderResponseType">
        <xs:sequence>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piDrugAnnotationRequestType">
        <xs:sequence>
          <xs:element minOccurs="0" name="getFullText" type="xs:boolean"/>
          <xs:element minOccurs="0" name="getINNonly" type="xs:boolean"/>
          <xs:element minOccurs="0" name="getStructureLevel" type="xs:int"/>
          <xs:element minOccurs="0" name="ident" type="xs:string"/>
          <xs:element minOccurs="0" name="prescriptionNumber" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piDrugAnnotationResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="annotation" nillable="true" type="tns:annotationDrugs"/>
          <xs:element minOccurs="0" name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="annotationDrugs">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="chapter" nillable="true" type="tns:chapter"/>
          <xs:element minOccurs="0" name="fullText" type="xs:string"/>
          <xs:element minOccurs="0" name="isActual" type="xs:boolean"/>
          <xs:element minOccurs="0" name="latTitle" type="xs:string"/>
          <xs:element minOccurs="0" name="nameType" type="tns:annotationFeature"/>
          <xs:element minOccurs="0" name="rusTitle" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="chapter">
        <xs:sequence>
          <xs:element minOccurs="0" name="bodyStyle" type="xs:string"/>
          <xs:element minOccurs="0" name="chapterText" type="xs:string"/>
          <xs:element minOccurs="0" name="fullTitle" type="xs:string"/>
          <xs:element minOccurs="0" name="headerLevel" type="xs:int"/>
          <xs:element minOccurs="0" name="idx" type="xs:int"/>
          <xs:element minOccurs="0" name="shortTitle" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiCheckPatientRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element minOccurs="0" name="oms" type="xs:string"/>
          <xs:element minOccurs="0" name="patientID" type="xs:string"/>
          <xs:element minOccurs="0" name="snils" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiCheckPatientResponseType">
        <xs:sequence>
          <xs:element minOccurs="0" name="hasFoodPrescriptions" type="xs:boolean"/>
          <xs:element minOccurs="0" name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piCheckOrderRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element minOccurs="0" name="options" type="tns:Options"/>
          <xs:element name="QRCode" type="xs:string"/>
          <xs:element minOccurs="0" name="userIdent" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Options">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" nillable="true" type="tns:KeyValuePair"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="KeyValuePair">
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute name="key" type="xs:string" use="required"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="piCheckOrderResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="drug" nillable="true" type="tns:orderDrugInfo"/>
          <xs:element minOccurs="0" name="externalID" type="xs:string"/>
          <xs:element minOccurs="0" name="orderID" type="xs:long"/>
          <xs:element minOccurs="0" name="patientName" type="tns:patientName"/>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="orderDrugInfo">
        <xs:sequence>
          <xs:element minOccurs="0" name="amount" type="xs:long"/>
          <xs:element minOccurs="0" name="drugID" type="xs:string"/>
          <xs:element minOccurs="0" name="numero" type="xs:int"/>
          <xs:element name="qtySec" type="xs:int"/>
          <xs:element minOccurs="0" name="storageCondition" type="xs:string"/>
          <xs:element name="title" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="patientName">
        <xs:sequence>
          <xs:element name="firstName" type="xs:string"/>
          <xs:element name="lastName" type="xs:string"/>
          <xs:element minOccurs="0" name="middleName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piGetDrugOrdersRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element minOccurs="0" name="oms" type="xs:string"/>
          <xs:element minOccurs="0" name="patientID" type="xs:string"/>
          <xs:element minOccurs="0" name="snils" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piGetDrugOrdersResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="order" type="tns:orderDrugOrder"/>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="orderDrugOrder">
        <xs:sequence>
          <xs:element name="agregatorID" type="xs:long"/>
          <xs:element name="agregatorName" type="xs:string"/>
          <xs:element minOccurs="0" name="comment" type="xs:string"/>
          <xs:element name="createDate" type="xs:dateTime"/>
          <xs:element name="delivering" type="xs:boolean"/>
          <xs:element name="externalID" type="xs:string"/>
          <xs:element minOccurs="0" name="link" type="xs:string"/>
          <xs:element name="orderID" type="xs:long"/>
          <xs:element minOccurs="0" name="pharmacyID" type="xs:long"/>
          <xs:element maxOccurs="unbounded" name="prescription" type="tns:prescriptionDrugOrder"/>
          <xs:element name="QRCode" type="xs:string"/>
          <xs:element name="statusCode" type="xs:string"/>
          <xs:element minOccurs="0" name="statusDescription" type="xs:string"/>
          <xs:element minOccurs="0" name="statusDetail" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="prescriptionDrugOrder">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="drug" type="tns:drugOrder"/>
          <xs:element name="prescriptionNumber" type="xs:string"/>
          <xs:element name="type" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="drugOrder">
        <xs:sequence>
          <xs:element minOccurs="0" name="amount" type="xs:long"/>
          <xs:element minOccurs="0" name="drugID" type="xs:string"/>
          <xs:element name="qty" type="xs:int"/>
          <xs:element minOccurs="0" name="storageCondition" type="xs:string"/>
          <xs:element name="title" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piRatePharmacyRequestType">
        <xs:sequence>
          <xs:element minOccurs="0" name="comment" type="xs:string"/>
          <xs:element name="ident" type="xs:string"/>
          <xs:element name="mark" type="xs:string"/>
          <xs:element name="markedObject" type="tns:markedObject"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="markedObject">
        <xs:sequence>
          <xs:element minOccurs="0" name="orderID" type="xs:long"/>
          <xs:element minOccurs="0" name="prescriptionNumber" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piRatePharmacyResponseType">
        <xs:sequence>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiSetScheduleRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element name="prescriptionNumber" type="xs:string"/>
          <xs:element maxOccurs="unbounded" name="servicingDay" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiSetScheduleResponseType">
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiGetScheduleRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element name="prescriptionNumber" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiGetScheduleResponseType">
        <xs:sequence>
          <xs:element minOccurs="0" name="milkShop" type="tns:milkShop"/>
          <xs:element minOccurs="0" name="prescriptionNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="prescriptionPeriod" type="xs:string"/>
          <xs:element minOccurs="0" name="result" type="tns:extendedResponse"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="schedule" nillable="true" type="tns:fpiScheduleItem"/>
          <xs:element minOccurs="0" name="serviceMode" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="milkShop">
        <xs:sequence>
          <xs:element minOccurs="0" name="address" type="xs:string"/>
          <xs:element name="id" type="xs:long"/>
          <xs:element minOccurs="0" name="title" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiScheduleItem">
        <xs:sequence>
          <xs:element name="day" type="xs:int"/>
          <xs:element minOccurs="0" name="notes" type="xs:string"/>
          <xs:element name="scheduled" type="xs:boolean"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="timeSlot" nillable="true" type="tns:timeSlotItem"/>
          <xs:element name="workLoad" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="timeSlotItem">
        <xs:sequence>
          <xs:element minOccurs="0" name="description" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="service" nillable="true" type="xs:string"/>
          <xs:element name="slotEnd" type="xs:string"/>
          <xs:element name="slotStart" type="xs:string"/>
          <xs:element name="slotType" type="xs:string"/>
          <xs:element minOccurs="0" name="title" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piDetailsRequestType">
        <xs:sequence>
          <xs:element minOccurs="0" name="getQR" type="xs:boolean"/>
          <xs:element minOccurs="0" name="ident" type="xs:string"/>
          <xs:element minOccurs="0" name="options" type="tns:Options"/>
          <xs:element minOccurs="0" name="prescriptionNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="signature" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piDetailsResponseType">
        <xs:sequence>
          <xs:element minOccurs="0" name="benefit" type="tns:benefitInfo"/>
          <xs:element minOccurs="0" name="controlType" type="xs:string"/>
          <xs:element minOccurs="0" name="expirationDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="issuedBy" type="tns:registrationData"/>
          <xs:element minOccurs="0" name="medicine" type="tns:medicineInfo"/>
          <xs:element minOccurs="0" name="options" type="tns:Options"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="pharmacy" type="tns:pharmacyInfo"/>
          <xs:element minOccurs="0" name="prescriptionNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="prescriptionState" type="xs:string"/>
          <xs:element minOccurs="0" name="prescriptionTerm" type="xs:string"/>
          <xs:element minOccurs="0" name="prescriptionType" type="tns:prescriptionType"/>
          <xs:element minOccurs="0" name="QRstring" type="xs:string"/>
          <xs:element minOccurs="0" name="recipeService" type="tns:recipeServiceType"/>
          <xs:element minOccurs="0" name="registrationDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="benefitInfo">
        <xs:sequence>
          <xs:element minOccurs="0" name="budget" type="tns:benefitBudget"/>
          <xs:element minOccurs="0" name="code" type="xs:string"/>
          <xs:element minOccurs="0" name="discount" type="tns:discountValue"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="registrationData">
        <xs:sequence>
          <xs:element minOccurs="0" name="doctorName" type="xs:string"/>
          <xs:element minOccurs="0" name="doctorSpeciality" type="xs:string"/>
          <xs:element minOccurs="0" name="organizationCode" type="xs:string"/>
          <xs:element minOccurs="0" name="organizationStamp" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="medicineInfo">
        <xs:sequence>
          <xs:element minOccurs="0" name="dosage" type="xs:string"/>
          <xs:element minOccurs="0" name="medicineRus" type="xs:string"/>
          <xs:element minOccurs="0" name="qty" type="xs:string"/>
          <xs:element minOccurs="0" name="rp" type="xs:string"/>
          <xs:element minOccurs="0" name="usage" type="xs:string"/>
          <xs:element minOccurs="0" name="usageDetails" type="tns:signaDetails"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="signaDetails">
        <xs:sequence>
          <xs:element minOccurs="0" name="couponDose" type="xs:double"/>
          <xs:element minOccurs="0" name="couponLength" type="xs:int"/>
          <xs:element minOccurs="0" name="couponMethod" type="xs:string"/>
          <xs:element minOccurs="0" name="couponPer_day" type="xs:int"/>
          <xs:element minOccurs="0" name="couponUnit" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="schedule" nillable="true" type="tns:scheduleItem"/>
          <xs:element minOccurs="0" name="scheduleBase" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="sheduleLenght" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="scheduleItem">
        <xs:sequence>
          <xs:element minOccurs="0" name="dayDirections" type="xs:string"/>
          <xs:element minOccurs="0" name="dayZ" type="xs:int"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="remainder" nillable="true" type="xs:dateTime"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pharmacyInfo">
        <xs:sequence>
          <xs:element minOccurs="0" name="address" type="xs:string"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="pharmacyIdent" type="xs:string"/>
          <xs:element minOccurs="0" name="phone" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="saleInfo" type="tns:saleInfo"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="saleInfo">
        <xs:sequence>
          <xs:element minOccurs="0" name="qty" type="xs:string"/>
          <xs:element name="saleDate" type="xs:date"/>
          <xs:element minOccurs="0" name="title" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="recipeServiceType">
        <xs:sequence>
          <xs:element name="periodsQty" type="xs:int"/>
          <xs:element name="periodDrugAmount" type="xs:int"/>
          <xs:element minOccurs="0" name="periodicity" type="xs:int"/>
          <xs:element minOccurs="0" name="periodicityUnit" type="xs:string"/>
          <xs:element maxOccurs="unbounded" name="servicePeriod" type="tns:ServicePeriod"/>
          <xs:element minOccurs="0" name="booking" type="tns:pharmacyShort"/>
          <xs:element minOccurs="0" name="serviceMessage" type="tns:infoMessageType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ServicePeriod">
        <xs:sequence>
          <xs:element name="periodNumber" type="xs:int"/>
          <xs:element name="periodTerm" type="tns:DatePeriod"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="periodMode" nillable="true" type="tns:KeyValuePair"/>
          <xs:element minOccurs="0" name="isAllowed" type="xs:boolean"/>
          <xs:element minOccurs="0" name="isCompleted" type="xs:boolean"/>
          <xs:element name="drugAmount" type="xs:int"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="serviceCase" nillable="true" type="tns:ServiceCase"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DatePeriod">
        <xs:sequence>
          <xs:element minOccurs="0" name="start" type="xs:date"/>
          <xs:element minOccurs="0" name="end" type="xs:date"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ServiceCase">
        <xs:sequence>
          <xs:element name="saleDate" type="xs:date"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="saleMode" nillable="true" type="tns:KeyValuePair"/>
          <xs:element minOccurs="0" name="pharmacy" type="tns:pharmacyShort"/>
          <xs:element maxOccurs="unbounded" name="drugSold" type="tns:DrugSold"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pharmacyShort">
        <xs:sequence>
          <xs:element name="title" type="xs:string"/>
          <xs:element name="ident" type="xs:string"/>
          <xs:element minOccurs="0" name="address" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="phone" nillable="true" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DrugSold">
        <xs:sequence>
          <xs:element minOccurs="0" name="fullTradeName" type="xs:string"/>
          <xs:element minOccurs="0" name="fullTradeNameID" type="xs:int"/>
          <xs:element minOccurs="0" name="packQty" type="xs:decimal"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="infoMessageType">
        <xs:sequence>
          <xs:element minOccurs="0" name="colorMark" type="xs:string"/>
          <xs:element minOccurs="0" name="title" type="xs:string"/>
          <xs:element minOccurs="0" name="details" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piGetMarkPharmacyRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element name="markedObject" type="tns:markedObject"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piGetMarkPharmacyResponseType">
        <xs:sequence>
          <xs:element minOccurs="0" name="comment" type="xs:string"/>
          <xs:element minOccurs="0" name="mark" type="xs:string"/>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiGetMilkShopListRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element minOccurs="0" name="OMKTE" type="xs:string"/>
          <xs:element minOccurs="0" name="searchString" type="xs:string"/>
          <xs:element minOccurs="0" name="stationID" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiGetMilkShopListResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="milkShop" nillable="true" type="tns:fullMilkShop"/>
          <xs:element minOccurs="0" name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fullMilkShop">
        <xs:complexContent>
          <xs:extension base="tns:milkShop">
            <xs:sequence>
              <xs:element minOccurs="0" name="area" type="tns:area"/>
              <xs:element minOccurs="0" name="geoTag" type="xs:string"/>
              <xs:element minOccurs="0" name="loadLevel" type="xs:string"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="nearestMetro" nillable="true" type="tns:metro"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="area">
        <xs:sequence>
          <xs:element minOccurs="0" name="OMKTE" type="xs:string"/>
          <xs:element minOccurs="0" name="title" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="metro">
        <xs:sequence>
          <xs:element minOccurs="0" name="lineID" type="xs:long"/>
          <xs:element minOccurs="0" name="stationID" type="xs:long"/>
          <xs:element minOccurs="0" name="title" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piCancelOrderRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element name="QRCode" type="xs:string"/>
          <xs:element minOccurs="0" name="userIdent" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piCancelOrderResponseType">
        <xs:sequence>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piPatientPrescriptionsRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element name="oms" type="xs:string"/>
          <xs:element minOccurs="0" name="options" type="tns:Options"/>
          <xs:element maxOccurs="unbounded" name="prescriptionNumber" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piPatientPrescriptionsResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="prescription" nillable="true" type="tns:prescriptionItem"/>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="prescriptionItem">
        <xs:sequence>
          <xs:element minOccurs="0" name="expirationDate" type="xs:date"/>
          <xs:element name="medicine" type="tns:prescriptionMedicine"/>
          <xs:element name="number" type="xs:string"/>
          <xs:element minOccurs="0" name="options" type="tns:Options"/>
          <xs:element minOccurs="0" name="prescriptionState" type="xs:string"/>
          <xs:element minOccurs="0" name="registrationDate" type="xs:date"/>
          <xs:element name="type" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="prescriptionMedicine">
        <xs:sequence>
          <xs:element minOccurs="0" name="dosage" type="xs:string"/>
          <xs:element minOccurs="0" name="medicineRus" type="xs:string"/>
          <xs:element minOccurs="0" name="qty" type="xs:string"/>
          <xs:element minOccurs="0" name="rp" type="xs:string"/>
          <xs:element minOccurs="0" name="usage" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piPharmacyAuxiliaryNewRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piPharmacyAuxiliaryNewResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="agregator" nillable="true" type="tns:agregator"/>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="agregator">
        <xs:sequence>
          <xs:element name="bookingLink" type="xs:string"/>
          <xs:element minOccurs="0" name="bookingOfferUrl" type="xs:string"/>
          <xs:element minOccurs="0" name="isBooking" type="tns:bookingType"/>
          <xs:element minOccurs="0" name="logo" type="xs:string"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="phone" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
          <xs:element minOccurs="0" name="website" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piPharmacyAuxiliaryRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piPharmacyAuxiliaryResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="agregator" nillable="true" type="tns:agregator"/>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiListRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element minOccurs="0" name="mode" type="xs:string"/>
          <xs:element minOccurs="0" name="oms" type="xs:string"/>
          <xs:element minOccurs="0" name="patientID" type="xs:string"/>
          <xs:element minOccurs="0" name="snils" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiListResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="foodPrescription" nillable="true" type="tns:foodPrescriptionItem"/>
          <xs:element minOccurs="0" name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="foodPrescriptionItem">
        <xs:sequence>
          <xs:element minOccurs="0" name="issueDate" type="xs:date"/>
          <xs:element minOccurs="0" name="milkShop" type="tns:milkShop"/>
          <xs:element minOccurs="0" name="notes" type="xs:string"/>
          <xs:element name="prescriptionNumber" type="xs:string"/>
          <xs:element name="prescriptionPeriod" type="xs:string"/>
          <xs:element name="prescriptionTitle" type="xs:string"/>
          <xs:element name="state" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piGetPharmacyGeoRequestType">
        <xs:sequence>
          <xs:element minOccurs="0" name="filters" type="tns:pharmacyGeoFilters"/>
          <xs:element name="ident" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="options" nillable="true" type="tns:Options"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pharmacyGeoFilters">
        <xs:sequence>
          <xs:element minOccurs="0" name="is24Hours" type="xs:boolean"/>
          <xs:element minOccurs="0" name="OMKTE" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="pharmacyID" type="xs:long"/>
          <xs:element minOccurs="0" name="prescriptionNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="searchRadius" type="tns:searchRadius"/>
          <xs:element minOccurs="0" name="stationID" type="xs:long"/>
          <xs:element minOccurs="0" name="type" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="searchRadius">
        <xs:sequence>
          <xs:element name="distance" type="xs:int"/>
          <xs:element name="geoTag" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piGetPharmacyGeoResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="pharmacy" nillable="true" type="tns:pharmacyGeo"/>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pharmacyGeo">
        <xs:sequence>
          <xs:element name="address" type="xs:string"/>
          <xs:element minOccurs="0" name="isCommercial" type="xs:boolean"/>
          <xs:element name="geoTag" type="xs:string"/>
          <xs:element name="ID" type="xs:long"/>
          <xs:element minOccurs="0" name="is24Hours" type="xs:boolean"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="nearestMetro" nillable="true" type="tns:nearestMetro"/>
          <xs:element name="shortName" type="xs:string"/>
          <xs:element minOccurs="0" name="type" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="nearestMetro">
        <xs:sequence>
          <xs:element minOccurs="0" name="metroTitle" type="xs:string"/>
          <xs:element minOccurs="0" name="stationID" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piGetPharmacyListRequestType">
        <xs:sequence>
          <xs:element minOccurs="0" name="filters" type="tns:getPharmacyFilter"/>
          <xs:element name="ident" type="xs:string"/>
          <xs:element minOccurs="0" name="pagingOptions" type="tns:pagingOptions"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getPharmacyFilter">
        <xs:sequence>
          <xs:element minOccurs="0" name="is24Hours" type="xs:boolean"/>
          <xs:element minOccurs="0" name="OMKTE" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="pharmacyID" type="xs:long"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="pharmacyIdent" nillable="true" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="pharmacyType" nillable="true" type="xs:long"/>
          <xs:element minOccurs="0" name="prescriptionNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="searchRadius" type="tns:searchRadius"/>
          <xs:element minOccurs="0" name="searchString" type="xs:string"/>
          <xs:element minOccurs="0" name="stationID" type="xs:long"/>
          <xs:element minOccurs="0" name="type" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pagingOptions">
        <xs:sequence>
          <xs:element name="pageNumber" type="xs:int"/>
          <xs:element name="pageSize" type="xs:int"/>
          <xs:element minOccurs="0" name="sortingOptions" type="tns:sortingOptions"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="sortingOptions">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="sortOrder" nillable="true" type="tns:sortOrder"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="sortOrder">
        <xs:sequence>
          <xs:element name="attributeName" type="xs:string"/>
          <xs:element name="descending" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piGetPharmacyListResponseType">
        <xs:sequence>
          <xs:element minOccurs="0" name="pagingResults" type="tns:pagingResults"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="pharmacy" nillable="true" type="tns:pharmacyERItem"/>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pagingResults">
        <xs:sequence>
          <xs:element name="morePagesAvailable" type="xs:boolean"/>
          <xs:element name="pageNumber" type="xs:int"/>
          <xs:element name="pageSize" type="xs:int"/>
          <xs:element name="pageTotal" type="xs:int"/>
          <xs:element name="totalItemsCount" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pharmacyERItem">
        <xs:sequence>
          <xs:element name="address" type="xs:string"/>
          <xs:element minOccurs="0" name="area" type="tns:area"/>
          <xs:element name="benefitPrescription" type="xs:boolean"/>
          <xs:element name="booking" type="xs:boolean"/>
          <xs:element name="commercialPrescription" type="xs:boolean"/>
          <xs:element minOccurs="0" name="contacts" type="tns:pharmacyContact"/>
          <xs:element minOccurs="0" name="FIAS" type="xs:string"/>
          <xs:element minOccurs="0" name="geoTag" type="xs:string"/>
          <xs:element name="id" type="xs:long"/>
          <xs:element minOccurs="0" name="ident" type="xs:string"/>
          <xs:element name="is24Hours" type="xs:boolean"/>
          <xs:element name="name" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="nearestMetro" nillable="true" type="tns:nearestMetro"/>
          <xs:element minOccurs="0" name="pharmacyType" type="tns:pharmacyType"/>
          <xs:element minOccurs="0" name="rate" type="xs:string"/>
          <xs:element minOccurs="0" name="schedule" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pharmacyContact">
        <xs:sequence>
          <xs:element minOccurs="0" name="phone" type="xs:string"/>
          <xs:element minOccurs="0" name="website" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pharmacyType">
        <xs:sequence>
          <xs:element minOccurs="0" name="pharmacyTypeID" type="xs:long"/>
          <xs:element minOccurs="0" name="pharmacyTypeName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piListRequestType">
        <xs:sequence>
          <xs:element minOccurs="0" name="getForm" type="xs:boolean"/>
          <xs:element minOccurs="0" name="ident" type="xs:string"/>
          <xs:element minOccurs="0" name="oms" type="xs:string"/>
          <xs:element minOccurs="0" name="options" type="tns:Options"/>
          <xs:element minOccurs="0" name="patientId" type="xs:string"/>
          <xs:element minOccurs="0" name="snils" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piListResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="prescriptionList" nillable="true" type="tns:prescriptionInfo"/>
          <xs:element minOccurs="0" name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="prescriptionInfo">
        <xs:sequence>
          <xs:element minOccurs="0" name="bookingAvailable" type="xs:boolean"/>
          <xs:element minOccurs="0" name="controlType" type="xs:string"/>
          <xs:element minOccurs="0" name="ctime" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="expirationDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="form" type="xs:string"/>
          <xs:element minOccurs="0" name="medicineRus" type="xs:string"/>
          <xs:element minOccurs="0" name="number" type="xs:string"/>
          <xs:element minOccurs="0" name="periodical" type="tns:recipePeriodicalType"/>
          <xs:element minOccurs="0" name="prescriptionGUID" type="xs:string"/>
          <xs:element minOccurs="0" name="rp" type="xs:string"/>
          <xs:element minOccurs="0" name="saleDate" type="xs:date"/>
          <xs:element minOccurs="0" name="state" type="xs:string"/>
          <xs:element minOccurs="0" name="term" type="xs:string"/>
          <xs:element minOccurs="0" name="type" type="tns:prescriptionType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="recipePeriodicalType">
        <xs:sequence>
          <xs:element name="periodsQty" type="xs:int"/>
          <xs:element minOccurs="0" name="periodNumber" type="xs:int"/>
          <xs:element minOccurs="0" name="drugAmount" type="xs:int"/>
          <xs:element minOccurs="0" name="keyDate" type="xs:date"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piDrugsAvailabilityRequestType">
        <xs:sequence>
          <xs:element minOccurs="0" name="ident" type="xs:string"/>
          <xs:element minOccurs="0" name="prescriptionNumber" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piDrugsAvailabilityResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="pharmaciesList" nillable="true" type="tns:pharmacyItem"/>
          <xs:element minOccurs="0" name="prescriptionNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="result" type="tns:extendedResponse"/>
          <xs:element minOccurs="0" name="rp" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pharmacyItem">
        <xs:sequence>
          <xs:element minOccurs="0" name="pharmacyAddress" type="xs:string"/>
          <xs:element minOccurs="0" name="pharmacyIdent" type="xs:string"/>
          <xs:element minOccurs="0" name="pharmacyName" type="xs:string"/>
          <xs:element minOccurs="0" name="pharmacyPhone" type="xs:string"/>
          <xs:element minOccurs="0" name="pharmacySchedule" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="tradeRemains" nillable="true" type="tns:pharmacyRemainInfo"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pharmacyRemainInfo">
        <xs:sequence>
          <xs:element minOccurs="0" name="remainsDescription" type="xs:string"/>
          <xs:element minOccurs="0" name="remainsMedicine" type="xs:string"/>
          <xs:element minOccurs="0" name="remainsState" type="tns:remainsState"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piMultiplyDrugsAvailabilityRequestType">
        <xs:sequence>
          <xs:element minOccurs="0" name="filters" type="tns:multiplyDrugsAvailabilityFilters"/>
          <xs:element name="ident" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="options" type="tns:Options"/>
          <xs:element maxOccurs="unbounded" name="prescriptionNumber" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="multiplyDrugsAvailabilityFilters">
        <xs:sequence>
          <xs:element minOccurs="0" name="is24Hours" type="xs:boolean"/>
          <xs:element minOccurs="0" name="OMKTE" type="xs:string"/>
          <xs:element minOccurs="0" name="searchRadius" type="tns:searchRadius"/>
          <xs:element minOccurs="0" name="stationID" type="xs:long"/>
          <xs:element minOccurs="0" name="type" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="piMultiplyDrugsAvailabilityResponseType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="pharmacy" type="tns:pharmacyMultiply"/>
          <xs:element name="result" type="tns:extendedResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="pharmacyMultiply">
        <xs:sequence>
          <xs:element minOccurs="0" name="address" type="xs:string"/>
          <xs:element minOccurs="0" name="isCommercial" type="xs:boolean"/>
          <xs:element minOccurs="0" name="geoTag" type="xs:string"/>
          <xs:element minOccurs="0" name="is24Hours" type="xs:boolean"/>
          <xs:element name="name" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="nearestMetro" type="tns:nearestMetro"/>
          <xs:element name="pharmacyID" type="xs:long"/>
          <xs:element minOccurs="0" name="phone" type="xs:string"/>
          <xs:element maxOccurs="unbounded" name="prescription" type="tns:prescriptionMultiply"/>
          <xs:element minOccurs="0" name="rate" type="xs:string"/>
          <xs:element minOccurs="0" name="schedule" type="xs:string"/>
          <xs:element minOccurs="0" name="shortName" type="xs:string"/>
          <xs:element name="type" type="xs:string"/>
          <xs:element minOccurs="0" name="website" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="prescriptionMultiply">
        <xs:sequence>
          <xs:element name="amount" type="xs:long"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="available" type="tns:available"/>
          <xs:element minOccurs="0" name="INNName" type="xs:string"/>
          <xs:element name="medicineTitle" type="xs:string"/>
          <xs:element name="prescriptionNumber" type="xs:string"/>
          <xs:element name="qty" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="available">
        <xs:sequence>
          <xs:element minOccurs="0" name="comment" type="xs:string"/>
          <xs:element minOccurs="0" name="expiration" type="xs:date"/>
          <xs:element minOccurs="0" name="manufacturer" type="xs:string"/>
          <xs:element name="medicineTitle" type="xs:string"/>
          <xs:element minOccurs="0" name="origin" type="xs:string"/>
          <xs:element name="price" type="xs:long"/>
          <xs:element name="qty" type="xs:int"/>
          <xs:element name="surcharge" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiDetailsRequestType">
        <xs:sequence>
          <xs:element name="ident" type="xs:string"/>
          <xs:element name="prescriptionNumber" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="fpiDetailsResponseType">
        <xs:sequence>
          <xs:element minOccurs="0" name="doctor" type="tns:doctorInfo"/>
          <xs:element minOccurs="0" name="issueDate" type="xs:date"/>
          <xs:element minOccurs="0" name="milkShop" type="tns:milkShop"/>
          <xs:element minOccurs="0" name="MO" type="tns:moInfo"/>
          <xs:element minOccurs="0" name="notes" type="xs:string"/>
          <xs:element minOccurs="0" name="prescriptionNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="prescriptionPeriod" type="tns:prescriptionPeriod"/>
          <xs:element minOccurs="0" name="prescriptionTitle" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="productLine" nillable="true" type="tns:productLineItem"/>
          <xs:element minOccurs="0" name="result" type="tns:extendedResponse"/>
          <xs:element minOccurs="0" name="state" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="doctorInfo">
        <xs:sequence>
          <xs:element minOccurs="0" name="doctorID" type="xs:string"/>
          <xs:element minOccurs="0" name="fullName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="moInfo">
        <xs:sequence>
          <xs:element minOccurs="0" name="MOID" type="xs:string"/>
          <xs:element minOccurs="0" name="title" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="prescriptionPeriod">
        <xs:sequence>
          <xs:element minOccurs="0" name="dateBegin" type="xs:date"/>
          <xs:element minOccurs="0" name="dateEnd" type="xs:date"/>
          <xs:element minOccurs="0" name="periodTitle" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="productLineItem">
        <xs:sequence>
          <xs:element minOccurs="0" name="periodicity" type="xs:string"/>
          <xs:element name="productName" type="xs:string"/>
          <xs:element name="productOutput" type="xs:long"/>
          <xs:element minOccurs="0" name="unit" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="annotationFeature">
        <xs:restriction base="xs:string">
          <xs:enumeration value="inn"/>
          <xs:enumeration value="ftn"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="benefitBudget">
        <xs:restriction base="xs:string">
          <xs:enumeration value="federal"/>
          <xs:enumeration value="regional"/>
          <xs:enumeration value="municipal"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="discountValue">
        <xs:restriction base="xs:string">
          <xs:enumeration value="_50"/>
          <xs:enumeration value="_100"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="prescriptionType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="benefit"/>
          <xs:enumeration value="commercial"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="bookingType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="commercial"/>
          <xs:enumeration value="benefit"/>
          <xs:enumeration value="any"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="remainsState">
        <xs:restriction base="xs:string">
          <xs:enumeration value="available"/>
          <xs:enumeration value="soldout"/>
          <xs:enumeration value="shortage"/>
          <xs:enumeration value="unknown"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:element name="fpiChangeMilkShopRequest" nillable="true" type="tns:fpiChangeMilkShopRequestType"/>
      <xs:element name="fpiChangeMilkShopResponse" nillable="true" type="tns:fpiChangeMilkShopResponseType"/>
      <xs:element name="piCompleteOrderRequest" nillable="true" type="tns:piCompleteOrderRequestType"/>
      <xs:element name="piCompleteOrderResponse" nillable="true" type="tns:piCompleteOrderResponseType"/>
      <xs:element name="piDrugAnnotationRequest" nillable="true" type="tns:piDrugAnnotationRequestType"/>
      <xs:element name="piDrugAnnotationResponse" nillable="true" type="tns:piDrugAnnotationResponseType"/>
      <xs:element name="fpiCheckPatientRequest" nillable="true" type="tns:fpiCheckPatientRequestType"/>
      <xs:element name="fpiCheckPatientResponse" nillable="true" type="tns:fpiCheckPatientResponseType"/>
      <xs:element name="piCheckOrderRequest" nillable="true" type="tns:piCheckOrderRequestType"/>
      <xs:element name="piCheckOrderResponse" nillable="true" type="tns:piCheckOrderResponseType"/>
      <xs:element name="piGetDrugOrdersRequest" nillable="true" type="tns:piGetDrugOrdersRequestType"/>
      <xs:element name="piGetDrugOrdersResponse" nillable="true" type="tns:piGetDrugOrdersResponseType"/>
      <xs:element name="piRatePharmacyRequest" nillable="true" type="tns:piRatePharmacyRequestType"/>
      <xs:element name="piRatePharmacyResponse" nillable="true" type="tns:piRatePharmacyResponseType"/>
      <xs:element name="fpiSetScheduleRequest" nillable="true" type="tns:fpiSetScheduleRequestType"/>
      <xs:element name="fpiSetScheduleResponse" nillable="true" type="tns:fpiSetScheduleResponseType"/>
      <xs:element name="fpiGetScheduleRequest" nillable="true" type="tns:fpiGetScheduleRequestType"/>
      <xs:element name="fpiGetScheduleResponse" nillable="true" type="tns:fpiGetScheduleResponseType"/>
      <xs:element name="piDetailsRequest" nillable="true" type="tns:piDetailsRequestType"/>
      <xs:element name="piDetailsResponse" nillable="true" type="tns:piDetailsResponseType"/>
      <xs:element name="piGetMarkPharmacyRequest" nillable="true" type="tns:piGetMarkPharmacyRequestType"/>
      <xs:element name="piGetMarkPharmacyResponse" nillable="true" type="tns:piGetMarkPharmacyResponseType"/>
      <xs:element name="fpiGetMilkShopListRequest" nillable="true" type="tns:fpiGetMilkShopListRequestType"/>
      <xs:element name="fpiGetMilkShopListResponse" nillable="true" type="tns:fpiGetMilkShopListResponseType"/>
      <xs:element name="piCancelOrderRequest" nillable="true" type="tns:piCancelOrderRequestType"/>
      <xs:element name="piCancelOrderResponse" nillable="true" type="tns:piCancelOrderResponseType"/>
      <xs:element name="piPatientPrescriptionsRequest" nillable="true" type="tns:piPatientPrescriptionsRequestType"/>
      <xs:element name="piPatientPrescriptionsResponse" nillable="true" type="tns:piPatientPrescriptionsResponseType"/>
      <xs:element name="piPharmacyAuxiliaryNewRequest" nillable="true" type="tns:piPharmacyAuxiliaryNewRequestType"/>
      <xs:element name="piPharmacyAuxiliaryNewResponse" nillable="true" type="tns:piPharmacyAuxiliaryNewResponseType"/>
      <xs:element name="piPharmacyAuxiliaryRequest" nillable="true" type="tns:piPharmacyAuxiliaryRequestType"/>
      <xs:element name="piPharmacyAuxiliaryResponse" nillable="true" type="tns:piPharmacyAuxiliaryResponseType"/>
      <xs:element name="fpiGetListRequest" nillable="true" type="tns:fpiListRequestType"/>
      <xs:element name="fpiGetListResponse" nillable="true" type="tns:fpiListResponseType"/>
      <xs:element name="piGetPharmacyGeoRequest" nillable="true" type="tns:piGetPharmacyGeoRequestType"/>
      <xs:element name="piGetPharmacyGeoResponse" nillable="true" type="tns:piGetPharmacyGeoResponseType"/>
      <xs:element name="piGetPharmacyListRequest" nillable="true" type="tns:piGetPharmacyListRequestType"/>
      <xs:element name="piGetPharmacyListResponse" nillable="true" type="tns:piGetPharmacyListResponseType"/>
      <xs:element name="piListRequest" nillable="true" type="tns:piListRequestType"/>
      <xs:element name="piListResponse" nillable="true" type="tns:piListResponseType"/>
      <xs:element name="piDrugsAvailabilityRequest" nillable="true" type="tns:piDrugsAvailabilityRequestType"/>
      <xs:element name="piDrugsAvailabilityResponse" nillable="true" type="tns:piDrugsAvailabilityResponseType"/>
      <xs:element name="piMultiplyDrugsAvailabilityRequest" nillable="true" type="tns:piMultiplyDrugsAvailabilityRequestType"/>
      <xs:element name="piMultiplyDrugsAvailabilityResponse" nillable="true" type="tns:piMultiplyDrugsAvailabilityResponseType"/>
      <xs:element name="fpiGetDetailsRequest" nillable="true" type="tns:fpiDetailsRequestType"/>
      <xs:element name="fpiGetDetailsResponse" nillable="true" type="tns:fpiDetailsResponseType"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="piPharmacyAuxiliaryResponse">
    <wsdl:part element="ns1:piPharmacyAuxiliaryResponse" name="piPharmacyAuxiliaryResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiCheckPatientResponse">
    <wsdl:part element="ns1:fpiCheckPatientResponse" name="fpiCheckPatientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piRatePharmacy">
    <wsdl:part element="ns1:piRatePharmacyRequest" name="piRatePharmacyRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiGetListResponse">
    <wsdl:part element="ns1:fpiGetListResponse" name="fpiGetListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiSetSchedule">
    <wsdl:part element="ns1:fpiSetScheduleRequest" name="fpiSetScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiGetScheduleResponse">
    <wsdl:part element="ns1:fpiGetScheduleResponse" name="fpiGetScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piCancelOrderResponse">
    <wsdl:part element="ns1:piCancelOrderResponse" name="piCancelOrderResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piGetDrugOrdersResponse">
    <wsdl:part element="ns1:piGetDrugOrdersResponse" name="piGetDrugOrdersResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiGetSchedule">
    <wsdl:part element="ns1:fpiGetScheduleRequest" name="fpiGetScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiChangeMilkShopResponse">
    <wsdl:part element="ns1:fpiChangeMilkShopResponse" name="fpiChangeMilkShopResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piRatePharmacyResponse">
    <wsdl:part element="ns1:piRatePharmacyResponse" name="piRatePharmacyResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piDetails">
    <wsdl:part element="ns1:piDetailsRequest" name="piDetailsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiGetMilkShopList">
    <wsdl:part element="ns1:fpiGetMilkShopListRequest" name="fpiGetMilkShopListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piPharmacyAuxiliaryNewResponse">
    <wsdl:part element="ns1:piPharmacyAuxiliaryNewResponse" name="piPharmacyAuxiliaryNewResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piGetPharmacyListResponse">
    <wsdl:part element="ns1:piGetPharmacyListResponse" name="piGetPharmacyListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piDrugsAvailabilityResponse">
    <wsdl:part element="ns1:piDrugsAvailabilityResponse" name="piDrugsAvailabilityResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piPharmacyAuxiliaryNew">
    <wsdl:part element="ns1:piPharmacyAuxiliaryNewRequest" name="piPharmacyAuxiliaryNewRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piDetailsResponse">
    <wsdl:part element="ns1:piDetailsResponse" name="piDetailsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piMultiplyDrugsAvailabilityResponse">
    <wsdl:part element="ns1:piMultiplyDrugsAvailabilityResponse" name="piMultiplyDrugsAvailabilityResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piGetPharmacyList">
    <wsdl:part element="ns1:piGetPharmacyListRequest" name="piGetPharmacyListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piCompleteOrderResponse">
    <wsdl:part element="ns1:piCompleteOrderResponse" name="piCompleteOrderResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piMultiplyDrugsAvailability">
    <wsdl:part element="ns1:piMultiplyDrugsAvailabilityRequest" name="piMultiplyDrugsAvailabilityRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiSetScheduleResponse">
    <wsdl:part element="ns1:fpiSetScheduleResponse" name="fpiSetScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiChangeMilkShop">
    <wsdl:part element="ns1:fpiChangeMilkShopRequest" name="fpiChangeMilkShopRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piCompleteOrder">
    <wsdl:part element="ns1:piCompleteOrderRequest" name="piCompleteOrderRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piDrugAnnotation">
    <wsdl:part element="ns1:piDrugAnnotationRequest" name="piDrugAnnotationRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piDrugAnnotationResponse">
    <wsdl:part element="ns1:piDrugAnnotationResponse" name="piDrugAnnotationResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiCheckPatient">
    <wsdl:part element="ns1:fpiCheckPatientRequest" name="fpiCheckPatientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piCheckOrder">
    <wsdl:part element="ns1:piCheckOrderRequest" name="piCheckOrderRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piGetDrugOrders">
    <wsdl:part element="ns1:piGetDrugOrdersRequest" name="piGetDrugOrdersRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiGetDetailsResponse">
    <wsdl:part element="ns1:fpiGetDetailsResponse" name="fpiGetDetailsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiGetMilkShopListResponse">
    <wsdl:part element="ns1:fpiGetMilkShopListResponse" name="fpiGetMilkShopListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piGetMarkPharmacy">
    <wsdl:part element="ns1:piGetMarkPharmacyRequest" name="piGetMarkPharmacyRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piCancelOrder">
    <wsdl:part element="ns1:piCancelOrderRequest" name="piCancelOrderRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piPatientPrescriptions">
    <wsdl:part element="ns1:piPatientPrescriptionsRequest" name="piPatientPrescriptionsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piGetPharmacyGeoResponse">
    <wsdl:part element="ns1:piGetPharmacyGeoResponse" name="piGetPharmacyGeoResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piCheckOrderResponse">
    <wsdl:part element="ns1:piCheckOrderResponse" name="piCheckOrderResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piPharmacyAuxiliary">
    <wsdl:part element="ns1:piPharmacyAuxiliaryRequest" name="piPharmacyAuxiliaryRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piGetMarkPharmacyResponse">
    <wsdl:part element="ns1:piGetMarkPharmacyResponse" name="piGetMarkPharmacyResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiGetList">
    <wsdl:part element="ns1:fpiGetListRequest" name="fpiGetListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piGetPharmacyGeo">
    <wsdl:part element="ns1:piGetPharmacyGeoRequest" name="piGetPharmacyGeoRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piList">
    <wsdl:part element="ns1:piListRequest" name="piListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piDrugsAvailability">
    <wsdl:part element="ns1:piDrugsAvailabilityRequest" name="piDrugsAvailabilityRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piPatientPrescriptionsResponse">
    <wsdl:part element="ns1:piPatientPrescriptionsResponse" name="piPatientPrescriptionsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="piListResponse">
    <wsdl:part element="ns1:piListResponse" name="piListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fpiGetDetails">
    <wsdl:part element="ns1:fpiGetDetailsRequest" name="fpiGetDetailsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="PrescriptionInfoSrvV4">
    <wsdl:operation name="fpiChangeMilkShop">
      <wsdl:input message="tns:fpiChangeMilkShop" name="fpiChangeMilkShop"></wsdl:input>
      <wsdl:output message="tns:fpiChangeMilkShopResponse" name="fpiChangeMilkShopResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piCompleteOrder">
      <wsdl:input message="tns:piCompleteOrder" name="piCompleteOrder"></wsdl:input>
      <wsdl:output message="tns:piCompleteOrderResponse" name="piCompleteOrderResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piDrugAnnotation">
      <wsdl:input message="tns:piDrugAnnotation" name="piDrugAnnotation"></wsdl:input>
      <wsdl:output message="tns:piDrugAnnotationResponse" name="piDrugAnnotationResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiCheckPatient">
      <wsdl:input message="tns:fpiCheckPatient" name="fpiCheckPatient"></wsdl:input>
      <wsdl:output message="tns:fpiCheckPatientResponse" name="fpiCheckPatientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piCheckOrder">
      <wsdl:input message="tns:piCheckOrder" name="piCheckOrder"></wsdl:input>
      <wsdl:output message="tns:piCheckOrderResponse" name="piCheckOrderResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piGetDrugOrders">
      <wsdl:input message="tns:piGetDrugOrders" name="piGetDrugOrders"></wsdl:input>
      <wsdl:output message="tns:piGetDrugOrdersResponse" name="piGetDrugOrdersResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piRatePharmacy">
      <wsdl:input message="tns:piRatePharmacy" name="piRatePharmacy"></wsdl:input>
      <wsdl:output message="tns:piRatePharmacyResponse" name="piRatePharmacyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiSetSchedule">
      <wsdl:input message="tns:fpiSetSchedule" name="fpiSetSchedule"></wsdl:input>
      <wsdl:output message="tns:fpiSetScheduleResponse" name="fpiSetScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiGetSchedule">
      <wsdl:input message="tns:fpiGetSchedule" name="fpiGetSchedule"></wsdl:input>
      <wsdl:output message="tns:fpiGetScheduleResponse" name="fpiGetScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piDetails">
      <wsdl:input message="tns:piDetails" name="piDetails"></wsdl:input>
      <wsdl:output message="tns:piDetailsResponse" name="piDetailsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piGetMarkPharmacy">
      <wsdl:input message="tns:piGetMarkPharmacy" name="piGetMarkPharmacy"></wsdl:input>
      <wsdl:output message="tns:piGetMarkPharmacyResponse" name="piGetMarkPharmacyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiGetMilkShopList">
      <wsdl:input message="tns:fpiGetMilkShopList" name="fpiGetMilkShopList"></wsdl:input>
      <wsdl:output message="tns:fpiGetMilkShopListResponse" name="fpiGetMilkShopListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piCancelOrder">
      <wsdl:input message="tns:piCancelOrder" name="piCancelOrder"></wsdl:input>
      <wsdl:output message="tns:piCancelOrderResponse" name="piCancelOrderResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piPatientPrescriptions">
      <wsdl:input message="tns:piPatientPrescriptions" name="piPatientPrescriptions"></wsdl:input>
      <wsdl:output message="tns:piPatientPrescriptionsResponse" name="piPatientPrescriptionsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piPharmacyAuxiliaryNew">
      <wsdl:input message="tns:piPharmacyAuxiliaryNew" name="piPharmacyAuxiliaryNew"></wsdl:input>
      <wsdl:output message="tns:piPharmacyAuxiliaryNewResponse" name="piPharmacyAuxiliaryNewResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piPharmacyAuxiliary">
      <wsdl:input message="tns:piPharmacyAuxiliary" name="piPharmacyAuxiliary"></wsdl:input>
      <wsdl:output message="tns:piPharmacyAuxiliaryResponse" name="piPharmacyAuxiliaryResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiGetList">
      <wsdl:input message="tns:fpiGetList" name="fpiGetList"></wsdl:input>
      <wsdl:output message="tns:fpiGetListResponse" name="fpiGetListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piGetPharmacyGeo">
      <wsdl:input message="tns:piGetPharmacyGeo" name="piGetPharmacyGeo"></wsdl:input>
      <wsdl:output message="tns:piGetPharmacyGeoResponse" name="piGetPharmacyGeoResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piGetPharmacyList">
      <wsdl:input message="tns:piGetPharmacyList" name="piGetPharmacyList"></wsdl:input>
      <wsdl:output message="tns:piGetPharmacyListResponse" name="piGetPharmacyListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piList">
      <wsdl:input message="tns:piList" name="piList"></wsdl:input>
      <wsdl:output message="tns:piListResponse" name="piListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piDrugsAvailability">
      <wsdl:input message="tns:piDrugsAvailability" name="piDrugsAvailability"></wsdl:input>
      <wsdl:output message="tns:piDrugsAvailabilityResponse" name="piDrugsAvailabilityResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piMultiplyDrugsAvailability">
      <wsdl:input message="tns:piMultiplyDrugsAvailability" name="piMultiplyDrugsAvailability"></wsdl:input>
      <wsdl:output message="tns:piMultiplyDrugsAvailabilityResponse" name="piMultiplyDrugsAvailabilityResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiGetDetails">
      <wsdl:input message="tns:fpiGetDetails" name="fpiGetDetails"></wsdl:input>
      <wsdl:output message="tns:fpiGetDetailsResponse" name="fpiGetDetailsResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="PrescriptionInfoServiceV4SoapBinding" type="tns:PrescriptionInfoSrvV4">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="fpiChangeMilkShop">
      <soap:operation soapAction="fpiChangeMilkShop" style="document"/>
      <wsdl:input name="fpiChangeMilkShop">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="fpiChangeMilkShopResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piCompleteOrder">
      <soap:operation soapAction="piCompleteOrder" style="document"/>
      <wsdl:input name="piCompleteOrder">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piCompleteOrderResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piDrugAnnotation">
      <soap:operation soapAction="piDrugAnnotation" style="document"/>
      <wsdl:input name="piDrugAnnotation">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piDrugAnnotationResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiCheckPatient">
      <soap:operation soapAction="fpiCheckPatient" style="document"/>
      <wsdl:input name="fpiCheckPatient">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="fpiCheckPatientResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piCheckOrder">
      <soap:operation soapAction="piCheckOrder" style="document"/>
      <wsdl:input name="piCheckOrder">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piCheckOrderResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piGetDrugOrders">
      <soap:operation soapAction="piGetDrugOrders" style="document"/>
      <wsdl:input name="piGetDrugOrders">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piGetDrugOrdersResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piRatePharmacy">
      <soap:operation soapAction="piRatePharmacy" style="document"/>
      <wsdl:input name="piRatePharmacy">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piRatePharmacyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiSetSchedule">
      <soap:operation soapAction="fpiSetSchedule" style="document"/>
      <wsdl:input name="fpiSetSchedule">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="fpiSetScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiGetSchedule">
      <soap:operation soapAction="fpiGetSchedule" style="document"/>
      <wsdl:input name="fpiGetSchedule">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="fpiGetScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piDetails">
      <soap:operation soapAction="piDetails" style="document"/>
      <wsdl:input name="piDetails">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piDetailsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piGetMarkPharmacy">
      <soap:operation soapAction="piGetMarkPharmacy" style="document"/>
      <wsdl:input name="piGetMarkPharmacy">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piGetMarkPharmacyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiGetMilkShopList">
      <soap:operation soapAction="fpiGetMilkShopList" style="document"/>
      <wsdl:input name="fpiGetMilkShopList">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="fpiGetMilkShopListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piCancelOrder">
      <soap:operation soapAction="piCancelOrder" style="document"/>
      <wsdl:input name="piCancelOrder">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piCancelOrderResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piPatientPrescriptions">
      <soap:operation soapAction="piPatientPrescriptions" style="document"/>
      <wsdl:input name="piPatientPrescriptions">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piPatientPrescriptionsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piPharmacyAuxiliaryNew">
      <soap:operation soapAction="piPharmacyAuxiliaryNew" style="document"/>
      <wsdl:input name="piPharmacyAuxiliaryNew">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piPharmacyAuxiliaryNewResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piPharmacyAuxiliary">
      <soap:operation soapAction="piPharmacyAuxiliary" style="document"/>
      <wsdl:input name="piPharmacyAuxiliary">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piPharmacyAuxiliaryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiGetList">
      <soap:operation soapAction="fpiGetList" style="document"/>
      <wsdl:input name="fpiGetList">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="fpiGetListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piGetPharmacyGeo">
      <soap:operation soapAction="piGetPharmacyGeo" style="document"/>
      <wsdl:input name="piGetPharmacyGeo">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piGetPharmacyGeoResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piGetPharmacyList">
      <soap:operation soapAction="piGetPharmacyList" style="document"/>
      <wsdl:input name="piGetPharmacyList">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piGetPharmacyListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piList">
      <soap:operation soapAction="piList" style="document"/>
      <wsdl:input name="piList">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piDrugsAvailability">
      <soap:operation soapAction="piDrugsAvailability" style="document"/>
      <wsdl:input name="piDrugsAvailability">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piDrugsAvailabilityResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="piMultiplyDrugsAvailability">
      <soap:operation soapAction="piMultiplyDrugsAvailability" style="document"/>
      <wsdl:input name="piMultiplyDrugsAvailability">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="piMultiplyDrugsAvailabilityResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="fpiGetDetails">
      <soap:operation soapAction="fpiGetDetails" style="document"/>
      <wsdl:input name="fpiGetDetails">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="fpiGetDetailsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="PrescriptionInfoServiceV4">
    <wsdl:port binding="tns:PrescriptionInfoServiceV4SoapBinding" name="PrescriptionInfoSrvPortV4">
      <soap:address location="http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint></con:endpoints><con:operation id="06c79892-586b-428c-9ec5-1a3a52a67a9c" isOneWay="false" action="fpiChangeMilkShop" name="fpiChangeMilkShop" bindingOperationName="fpiChangeMilkShop" type="Request-Response" outputName="fpiChangeMilkShopResponse" inputName="fpiChangeMilkShop" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="7409c382-cdaa-4cd5-8d28-195e43ba5bac" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:fpiChangeMilkShopRequest>\r
         <typ:ident>?</typ:ident>\r
         <typ:milkShopId>?</typ:milkShopId>\r
         <!--1 or more repetitions:-->\r
         <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
      </typ:fpiChangeMilkShopRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="fpiChangeMilkShop"/></con:call></con:operation><con:operation id="23a3015d-d5cb-4ba8-b5ca-3b88f13fb53c" isOneWay="false" action="fpiCheckPatient" name="fpiCheckPatient" bindingOperationName="fpiCheckPatient" type="Request-Response" outputName="fpiCheckPatientResponse" inputName="fpiCheckPatient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="ba08ebcb-a66a-463d-8f79-f13463b91962" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:fpiCheckPatientRequest>\r
         <typ:ident>?</typ:ident>\r
         <!--Optional:-->\r
         <typ:oms>?</typ:oms>\r
         <!--Optional:-->\r
         <typ:patientID>?</typ:patientID>\r
         <!--Optional:-->\r
         <typ:snils>?</typ:snils>\r
      </typ:fpiCheckPatientRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="fpiCheckPatient"/></con:call></con:operation><con:operation id="e36fa57f-7bea-475e-a1ae-f6d88cd3ce5c" isOneWay="false" action="fpiGetDetails" name="fpiGetDetails" bindingOperationName="fpiGetDetails" type="Request-Response" outputName="fpiGetDetailsResponse" inputName="fpiGetDetails" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d99e6bd6-8088-4acf-8dc9-354d276b6327" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:fpiGetDetailsRequest>\r
         <typ:ident>?</typ:ident>\r
         <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
      </typ:fpiGetDetailsRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="fpiGetDetails"/></con:call></con:operation><con:operation id="aadd0070-7e56-41cc-b45f-7f58369683f3" isOneWay="false" action="fpiGetList" name="fpiGetList" bindingOperationName="fpiGetList" type="Request-Response" outputName="fpiGetListResponse" inputName="fpiGetList" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="1b16709d-8e80-43aa-8e92-acbb04889129" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:fpiGetListRequest>\r
         <typ:ident>?</typ:ident>\r
         <!--Optional:-->\r
         <typ:mode>?</typ:mode>\r
         <!--Optional:-->\r
         <typ:oms>?</typ:oms>\r
         <!--Optional:-->\r
         <typ:patientID>?</typ:patientID>\r
         <!--Optional:-->\r
         <typ:snils>?</typ:snils>\r
      </typ:fpiGetListRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="fpiGetList"/></con:call></con:operation><con:operation id="cea6248b-452c-425d-9ca0-1ba469ec0fed" isOneWay="false" action="fpiGetMilkShopList" name="fpiGetMilkShopList" bindingOperationName="fpiGetMilkShopList" type="Request-Response" outputName="fpiGetMilkShopListResponse" inputName="fpiGetMilkShopList" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="0dbd76f2-38cb-46c9-848e-3294f31532a0" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:fpiGetMilkShopListRequest>\r
         <typ:ident>?</typ:ident>\r
         <!--Optional:-->\r
         <typ:OMKTE>?</typ:OMKTE>\r
         <!--Optional:-->\r
         <typ:searchString>?</typ:searchString>\r
         <!--Optional:-->\r
         <typ:stationID>?</typ:stationID>\r
      </typ:fpiGetMilkShopListRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="fpiGetMilkShopList"/></con:call></con:operation><con:operation id="797378df-05d3-4632-8850-5594c585bec2" isOneWay="false" action="fpiGetSchedule" name="fpiGetSchedule" bindingOperationName="fpiGetSchedule" type="Request-Response" outputName="fpiGetScheduleResponse" inputName="fpiGetSchedule" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d12a128b-3edb-4973-8a19-bde11ac02f50" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:fpiGetScheduleRequest>\r
         <typ:ident>?</typ:ident>\r
         <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
      </typ:fpiGetScheduleRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="fpiGetSchedule"/></con:call></con:operation><con:operation id="9914e0c4-fec9-40fd-b8a7-9f5db8607c79" isOneWay="false" action="fpiSetSchedule" name="fpiSetSchedule" bindingOperationName="fpiSetSchedule" type="Request-Response" outputName="fpiSetScheduleResponse" inputName="fpiSetSchedule" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="5996d1cb-fb1d-49e8-8957-0ac94b8a98f8" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:fpiSetScheduleRequest>\r
         <typ:ident>?</typ:ident>\r
         <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
         <!--1 or more repetitions:-->\r
         <typ:servicingDay>?</typ:servicingDay>\r
      </typ:fpiSetScheduleRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="fpiSetSchedule"/></con:call></con:operation><con:operation id="546a6e90-3bb6-4bec-993e-2aaa70a1176b" isOneWay="false" action="piCancelOrder" name="piCancelOrder" bindingOperationName="piCancelOrder" type="Request-Response" outputName="piCancelOrderResponse" inputName="piCancelOrder" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="caed5c3f-964d-4712-8dc4-baeb293fd97f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piCancelOrderRequest>\r
         <typ:ident>?</typ:ident>\r
         <typ:QRCode>?</typ:QRCode>\r
         <!--Optional:-->\r
         <typ:userIdent>?</typ:userIdent>\r
      </typ:piCancelOrderRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piCancelOrder"/></con:call></con:operation><con:operation id="7cda2e55-7035-4380-aac6-66d991375db8" isOneWay="false" action="piCheckOrder" name="piCheckOrder" bindingOperationName="piCheckOrder" type="Request-Response" outputName="piCheckOrderResponse" inputName="piCheckOrder" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="8ca842c8-8f26-47f4-b239-33af8762d052" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piCheckOrderRequest>\r
         <typ:ident>?</typ:ident>\r
         <typ:QRCode>?</typ:QRCode>\r
         <!--Optional:-->\r
         <typ:userIdent>?</typ:userIdent>\r
      </typ:piCheckOrderRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piCheckOrder"/></con:call></con:operation><con:operation id="5f85aeb6-917b-414c-978d-415305f2ba27" isOneWay="false" action="piCompleteOrder" name="piCompleteOrder" bindingOperationName="piCompleteOrder" type="Request-Response" outputName="piCompleteOrderResponse" inputName="piCompleteOrder" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="35b0bc73-8c36-40af-9c40-0c996109db1b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piCompleteOrderRequest>\r
         <typ:ident>?</typ:ident>\r
         <typ:QRCode>?</typ:QRCode>\r
         <!--Optional:-->\r
         <typ:userIdent>?</typ:userIdent>\r
      </typ:piCompleteOrderRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piCompleteOrder"/></con:call></con:operation><con:operation id="81a17fdf-0c62-48c3-9d2e-68ba1fea9716" isOneWay="false" action="piDetails" name="piDetails" bindingOperationName="piDetails" type="Request-Response" outputName="piDetailsResponse" inputName="piDetails" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="50b13478-0fec-4ae0-a1ef-87d7568ba96a" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
 <soapenv:Body>
      <typ:piDetailsRequest>
         <typ:getQR>true</typ:getQR>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:options>
            <typ:entry key="notifications">true</typ:entry>
         </typ:options>
         <typ:prescriptionNumber>01Э4519362114</typ:prescriptionNumber>
      </typ:piDetailsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piDetails"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="fce446e8-4ab4-4cef-a279-88791e5e68a7" isOneWay="false" action="piDrugAnnotation" name="piDrugAnnotation" bindingOperationName="piDrugAnnotation" type="Request-Response" outputName="piDrugAnnotationResponse" inputName="piDrugAnnotation" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="ef1ea1a9-f288-442e-9e98-e98a6aa9883f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piDrugAnnotationRequest>\r
         <!--Optional:-->\r
         <typ:getFullText>?</typ:getFullText>\r
         <!--Optional:-->\r
         <typ:getINNonly>?</typ:getINNonly>\r
         <!--Optional:-->\r
         <typ:getStructureLevel>?</typ:getStructureLevel>\r
         <!--Optional:-->\r
         <typ:ident>?</typ:ident>\r
         <!--Optional:-->\r
         <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
      </typ:piDrugAnnotationRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piDrugAnnotation"/></con:call></con:operation><con:operation id="dc32d51f-604b-411f-95c3-f7cb7dda5aaa" isOneWay="false" action="piDrugsAvailability" name="piDrugsAvailability" bindingOperationName="piDrugsAvailability" type="Request-Response" outputName="piDrugsAvailabilityResponse" inputName="piDrugsAvailability" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="4a2fff3c-f8e8-4147-8622-17b6817755b0" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piDrugsAvailabilityRequest>\r
         <!--Optional:-->\r
         <typ:ident>?</typ:ident>\r
         <!--Optional:-->\r
         <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
      </typ:piDrugsAvailabilityRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piDrugsAvailability"/></con:call></con:operation><con:operation id="9649338a-8a23-49ab-93f6-0b84b7c597e9" isOneWay="false" action="piGetDrugOrders" name="piGetDrugOrders" bindingOperationName="piGetDrugOrders" type="Request-Response" outputName="piGetDrugOrdersResponse" inputName="piGetDrugOrders" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="141fb7ac-0d09-4f6c-b281-7b751e3f4d36" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piGetDrugOrdersRequest>\r
         <typ:ident>?</typ:ident>\r
         <!--Optional:-->\r
         <typ:oms>?</typ:oms>\r
         <!--Optional:-->\r
         <typ:patientID>?</typ:patientID>\r
         <!--Optional:-->\r
         <typ:snils>?</typ:snils>\r
      </typ:piGetDrugOrdersRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piGetDrugOrders"/></con:call></con:operation><con:operation id="596a9423-097e-4379-b632-b6363b4d364f" isOneWay="false" action="piGetMarkPharmacy" name="piGetMarkPharmacy" bindingOperationName="piGetMarkPharmacy" type="Request-Response" outputName="piGetMarkPharmacyResponse" inputName="piGetMarkPharmacy" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="860151a4-c920-4df2-845f-e2a78c394f38" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piGetMarkPharmacyRequest>\r
         <typ:ident>?</typ:ident>\r
         <typ:markedObject>\r
            <!--Optional:-->\r
            <typ:orderID>?</typ:orderID>\r
            <!--Optional:-->\r
            <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
         </typ:markedObject>\r
      </typ:piGetMarkPharmacyRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piGetMarkPharmacy"/></con:call></con:operation><con:operation id="9bce2d1e-abf2-46d6-89c7-49732eea95d2" isOneWay="false" action="piGetPharmacyGeo" name="piGetPharmacyGeo" bindingOperationName="piGetPharmacyGeo" type="Request-Response" outputName="piGetPharmacyGeoResponse" inputName="piGetPharmacyGeo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d6d49816-8b3b-4a3f-9b0c-bc552f44f092" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piGetPharmacyGeoRequest>\r
         <!--Optional:-->\r
         <typ:filters>\r
            <!--Optional:-->\r
            <typ:is24Hours>?</typ:is24Hours>\r
            <!--Optional:-->\r
            <typ:OMKTE>?</typ:OMKTE>\r
            <!--Zero or more repetitions:-->\r
            <typ:pharmacyID>?</typ:pharmacyID>\r
            <!--Optional:-->\r
            <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
            <!--Optional:-->\r
            <typ:searchRadius>\r
               <typ:distance>?</typ:distance>\r
               <typ:geoTag>?</typ:geoTag>\r
            </typ:searchRadius>\r
            <!--Optional:-->\r
            <typ:stationID>?</typ:stationID>\r
            <!--Optional:-->\r
            <typ:type>?</typ:type>\r
         </typ:filters>\r
         <typ:ident>?</typ:ident>\r
         <!--Zero or more repetitions:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <typ:entry key="?">?</typ:entry>\r
         </typ:options>\r
      </typ:piGetPharmacyGeoRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piGetPharmacyGeo"/></con:call></con:operation><con:operation id="04ec65f1-9c99-4974-9548-089e3d17e929" isOneWay="false" action="piGetPharmacyList" name="piGetPharmacyList" bindingOperationName="piGetPharmacyList" type="Request-Response" outputName="piGetPharmacyListResponse" inputName="piGetPharmacyList" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="bef04a35-5a60-4ca6-9ff3-8cbd6a2e4875" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piGetPharmacyListRequest>\r
         <!--Optional:-->\r
         <typ:filters>\r
            <!--Optional:-->\r
            <typ:is24Hours>?</typ:is24Hours>\r
            <!--Optional:-->\r
            <typ:OMKTE>?</typ:OMKTE>\r
            <!--Zero or more repetitions:-->\r
            <typ:pharmacyID>?</typ:pharmacyID>\r
            <!--Zero or more repetitions:-->\r
            <typ:pharmacyIdent>?</typ:pharmacyIdent>\r
            <!--Zero or more repetitions:-->\r
            <typ:pharmacyType>?</typ:pharmacyType>\r
            <!--Optional:-->\r
            <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
            <!--Optional:-->\r
            <typ:searchRadius>\r
               <typ:distance>?</typ:distance>\r
               <typ:geoTag>?</typ:geoTag>\r
            </typ:searchRadius>\r
            <!--Optional:-->\r
            <typ:searchString>?</typ:searchString>\r
            <!--Optional:-->\r
            <typ:stationID>?</typ:stationID>\r
            <!--Optional:-->\r
            <typ:type>?</typ:type>\r
         </typ:filters>\r
         <typ:ident>?</typ:ident>\r
         <!--Optional:-->\r
         <typ:pagingOptions>\r
            <typ:pageNumber>?</typ:pageNumber>\r
            <typ:pageSize>?</typ:pageSize>\r
            <!--Optional:-->\r
            <typ:sortingOptions>\r
               <!--Zero or more repetitions:-->\r
               <typ:sortOrder>\r
                  <typ:attributeName>?</typ:attributeName>\r
                  <typ:descending>?</typ:descending>\r
               </typ:sortOrder>\r
            </typ:sortingOptions>\r
         </typ:pagingOptions>\r
      </typ:piGetPharmacyListRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piGetPharmacyList"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="971b1c85-cb32-4a87-a541-3120f9fe310d" isOneWay="false" action="piList" name="piList" bindingOperationName="piList" type="Request-Response" outputName="piListResponse" inputName="piList" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="8512a34d-84ce-441c-9b85-c930467e9128" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piListRequest>
         <typ:getForm>true</typ:getForm>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:oms>5049630880000779</typ:oms>

      </typ:piListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piList"/><con:wsrmConfig version="1.2"/></con:call><con:call id="86aedba3-fa8a-49c8-9cd7-07ef0fdd2379" name="Request 2"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piListRequest>\r
         <!--Optional:-->\r
         <typ:getForm>?</typ:getForm>\r
         <!--Optional:-->\r
         <typ:ident>?</typ:ident>\r
         <!--Optional:-->\r
         <typ:oms>?</typ:oms>\r
         <!--Optional:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <typ:entry key="?">?</typ:entry>\r
         </typ:options>\r
         <!--Optional:-->\r
         <typ:patientId>?</typ:patientId>\r
         <!--Optional:-->\r
         <typ:snils>?</typ:snils>\r
      </typ:piListRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piList"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="13d2296e-d8ab-4900-b04e-ff7275e1e19d" isOneWay="false" action="piMultiplyDrugsAvailability" name="piMultiplyDrugsAvailability" bindingOperationName="piMultiplyDrugsAvailability" type="Request-Response" outputName="piMultiplyDrugsAvailabilityResponse" inputName="piMultiplyDrugsAvailability" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="409fa936-8d30-4dc8-a019-9c6b71c17c71" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piMultiplyDrugsAvailabilityRequest>\r
         <!--Optional:-->\r
         <typ:filters>\r
            <!--Optional:-->\r
            <typ:is24Hours>?</typ:is24Hours>\r
            <!--Optional:-->\r
            <typ:OMKTE>?</typ:OMKTE>\r
            <!--Optional:-->\r
            <typ:searchRadius>\r
               <typ:distance>?</typ:distance>\r
               <typ:geoTag>?</typ:geoTag>\r
            </typ:searchRadius>\r
            <!--Optional:-->\r
            <typ:stationID>?</typ:stationID>\r
            <!--Optional:-->\r
            <typ:type>?</typ:type>\r
         </typ:filters>\r
         <typ:ident>?</typ:ident>\r
         <!--Zero or more repetitions:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <typ:entry key="?">?</typ:entry>\r
         </typ:options>\r
         <!--1 or more repetitions:-->\r
         <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
      </typ:piMultiplyDrugsAvailabilityRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piMultiplyDrugsAvailability"/></con:call></con:operation><con:operation id="43023e9e-ae5f-4951-b5ea-2901f76e9ed2" isOneWay="false" action="piPatientPrescriptions" name="piPatientPrescriptions" bindingOperationName="piPatientPrescriptions" type="Request-Response" outputName="piPatientPrescriptionsResponse" inputName="piPatientPrescriptions" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="0f6728bc-49b0-41cc-8e4e-f8350015aeab" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piPatientPrescriptionsRequest>\r
         <typ:ident>?</typ:ident>\r
         <typ:oms>?</typ:oms>\r
         <!--Optional:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <typ:entry key="?">?</typ:entry>\r
         </typ:options>\r
         <!--1 or more repetitions:-->\r
         <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
      </typ:piPatientPrescriptionsRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piPatientPrescriptions"/></con:call></con:operation><con:operation id="c37d128e-74ac-4f8e-8d49-3718c077dea4" isOneWay="false" action="piPharmacyAuxiliary" name="piPharmacyAuxiliary" bindingOperationName="piPharmacyAuxiliary" type="Request-Response" outputName="piPharmacyAuxiliaryResponse" inputName="piPharmacyAuxiliary" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="b93bdd85-94d6-43f6-acf7-b7b2de82426a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piPharmacyAuxiliaryRequest>\r
         <typ:ident>?</typ:ident>\r
      </typ:piPharmacyAuxiliaryRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piPharmacyAuxiliary"/></con:call></con:operation><con:operation id="5116683a-f571-436a-8714-4ebdc94a8b61" isOneWay="false" action="piRatePharmacy" name="piRatePharmacy" bindingOperationName="piRatePharmacy" type="Request-Response" outputName="piRatePharmacyResponse" inputName="piRatePharmacy" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d15b8d15-3f77-4d9e-9bd6-5554e853140a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <typ:piRatePharmacyRequest>\r
         <!--Optional:-->\r
         <typ:comment>?</typ:comment>\r
         <typ:ident>?</typ:ident>\r
         <typ:mark>?</typ:mark>\r
         <typ:markedObject>\r
            <!--Optional:-->\r
            <typ:orderID>?</typ:orderID>\r
            <!--Optional:-->\r
            <typ:prescriptionNumber>?</typ:prescriptionNumber>\r
         </typ:markedObject>\r
      </typ:piRatePharmacyRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piRatePharmacy"/></con:call></con:operation><con:operation id="eb832686-4347-4eb4-95d2-3bdd38f774f0" isOneWay="false" action="piPharmacyAuxiliaryNew" name="piPharmacyAuxiliaryNew" bindingOperationName="piPharmacyAuxiliaryNew" type="Request-Response" outputName="piPharmacyAuxiliaryNewResponse" inputName="piPharmacyAuxiliaryNew" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="a653c13c-fccf-4496-b1a8-ce28912c28d3" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>\r
      <typ:piPharmacyAuxiliaryNewRequest>\r
         <typ:ident>EMIASINFO</typ:ident>\r
      </typ:piPharmacyAuxiliaryNewRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piPharmacyAuxiliaryNew"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:RestService" id="ab328def-d89c-4ba2-9d59-0991ec080724" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://lkservice.test.emias.mos.ru" type="rest" basePath="" definitionUrl="C:\Users\ekomarova\Desktop\Проекты\емиас инфо\_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="https://lkservice.test.emias.mos.ru.wadl"><con:part><con:url>https://lkservice.test.emias.mos.ru.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="https://lkservice.test.emias.mos.ru"/>
  <resources base="https://lkservice.test.emias.mos.ru">
    <resource path="api/auth/1/login" id="login">
      <doc xml:lang="en" title="login"/>
      <param name="X-Environment" type="xs:string" required="false" default="" style="header" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/json"/>
        </response>
        <response status="200">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
      </method>
    </resource>
    <resource path="api/auth/1/confirm" id="confirm">
      <doc xml:lang="en" title="confirm"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/json"/>
        </response>
        <response status="200">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
      </method>
    </resource>
    <resource path="api/internal/1/user/grant-permission" id="grant-permission">
      <doc xml:lang="en" title="grant-permission"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/json"/>
        </response>
        <response status="200">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
      </method>
    </resource>
    <resource path="api/2/profile" id="profile">
      <doc xml:lang="en" title="profile"/>
      <param name="ehrId" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <param name="X-Access-JWT" type="xs:string" required="false" default="" style="header" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
        <response status="401">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
        <response status="200">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
      </method>
    </resource>
    <resource path="api/2/mobile/auth/login" id="login">
      <doc xml:lang="en" title="login"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
          <representation mediaType="application/json"/>
        </response>
        <response status="500">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
      </method>
    </resource>
    <resource path="api/2/mobile/auth/instance" id="instance">
      <doc xml:lang="en" title="instance"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request/>
      </method>
    </resource>
    <resource path="api/2/mobile/auth/confirm-instance" id="confirm-instance">
      <doc xml:lang="en" title="confirm-instance"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request/>
      </method>
    </resource>
    <resource path="api/internal/1/user/grant-permission" id="grant-permission">
      <doc xml:lang="en" title="grant-permission"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request/>
      </method>
    </resource>
    <resource path="api/2/profile" id="profile">
      <doc xml:lang="en" title="profile"/>
      <param name="ehrId" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <param name="X-Access-JWT" type="xs:string" required="false" default="" style="header" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
      </method>
    </resource>
    <resource path="api/internal/3/emc-permissions" id="emc-permissions">
      <doc xml:lang="en" title="emc-permissions"/>
      <param name="ssoId" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint></con:endpoints><con:resource name="login" path="api/auth/1/login" id="ce46138d-820d-4306-8984-6d03e5684d13"><con:settings/><con:parameters><con:parameter><con:name>X-Environment</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" id="28e8f713-fe4d-4c0c-887d-ed55b4510637" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="d729d58f-e76e-47da-9bb9-f50d17487798" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="confirm" path="api/auth/1/confirm" id="eea29c9a-21d5-443c-9ef3-96fdf426b9ad"><con:settings/><con:parameters/><con:method name="Method 1" id="bc6d2b87-1fa4-4d3e-a863-32a7bcdd954a" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="0a512fb1-a894-4e48-a101-93e7a106d399" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="grant-permission" path="api/internal/1/user/grant-permission" id="60331a97-2fa0-4424-8f04-8615ef4916b3"><con:settings/><con:parameters/><con:method name="Method 1" id="226a52e6-f320-4213-881e-f0373dbe4f4d" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="835ef45c-6594-4f7f-ae8c-07bd3c7808b6" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="profile" path="api/2/profile" id="d7474cc8-9a90-4a4a-a897-f5a363ea3b90"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" id="b30450d7-7065-4498-805b-ea1bacbcb1ad" method="GET"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="ca54b081-2a9d-4e4d-b814-5a122f9ede85" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="login" path="api/2/mobile/auth/login" id="9395b797-4480-49c4-a716-80bd995e1857"><con:settings/><con:parameters/><con:method name="Method 1" id="ffc84852-5b25-4d85-b183-14840613b6a0" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="e10b799b-813e-4993-a66e-d4fcd32f64e4" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="instance" path="/api/2/mobile/auth/instance" id="97599201-74ff-4c0c-952a-058b170d40de"><con:settings/><con:parameters/><con:method name="Method 1" id="d3264597-368e-4e33-b869-5e26f9c28364" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="60261039-b4ea-4d59-9649-f46e0fc1f793" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="confirm-instance" path="/api/2/mobile/auth/confirm-instance" id="b9b2f9fd-3a0c-465d-aed4-a56b6c7503d1"><con:settings/><con:parameters/><con:method name="Method 1" id="0b817ad8-2459-44a5-b06f-3fcdb7754235" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="8d1bd44b-a95b-4afc-bdb6-d47968b5701d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="grant-permission" path="/api/internal/1/user/grant-permission" id="bb8ba524-9eb2-4e52-b912-406986871e5a"><con:settings/><con:parameters/><con:method name="Method 1" id="99f6032f-4602-4b34-afa0-a5190c0f1c40" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="d51241ad-a648-4f40-8863-aed425d226f8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="profile" path="/api/2/profile" id="c784a95f-2c73-4cb3-9129-0a0c36bd72bb"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="e4213676-f2fd-4a2b-ac39-a0c996a74c72" method="GET"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Request 1" id="18d951c2-7130-4d91-940e-407c670087a2" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="emc-permissions" path="/api/internal/3/emc-permissions" id="be785fed-061c-4462-9a3c-8d51d8a2548f"><con:settings/><con:parameters><con:parameter><con:name>ssoId</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" id="6e71904d-4931-40f9-b063-f9e836f3bf0e" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="41600ef4-dbb4-46ce-81f3-fbc8d75231db" mediaType="application/json"><con:settings/><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="e810e7e1-bfa5-475e-962a-618cc8440c3f" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://login-tech.mos.ru" type="rest" basePath="" definitionUrl="C:\Users\ekomarova\Desktop\Проекты\емиас инфо\_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://login-tech.mos.ru</con:endpoint></con:endpoints><con:resource name="register" path="/sps/oauth/register" id="97df77cb-9d24-4c7a-a853-a6f35f7d3151"><con:settings/><con:parameters/><con:method name="Method 1" id="56eb32b8-2db6-41eb-bfcb-76735a1736ce" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="5c38ff69-f03f-42ca-adc3-92a654dda487" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>https://login-tech.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="te" path="/sps/oauth/te" id="ae14ead3-8fc0-4ed2-bcaa-17f2a2522830"><con:settings/><con:parameters><con:parameter><con:name>code</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>redirect_uri</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>grant_type</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>redirect_uri</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>code</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>code</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>redirect_uri</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" id="96cdb284-2417-47c4-9274-d67e10db89b7" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="09cd33a6-60cc-45f2-bb44-0702c0e73177" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings/><con:endpoint>https://login-tech.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>grant_type</con:entry><con:entry>code</con:entry><con:entry>redirect_uri</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="me" path="/sps/oauth/me" id="236fc91f-43a7-4ec0-9aee-82b9c7b33a61"><con:settings/><con:parameters><con:parameter><con:name>Cache-control</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" id="e4213e52-8020-4428-ba9b-d229cb3a50b7" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="d36b1185-472b-459a-9a55-491ba2e6d152" mediaType="application/json"><con:settings/><con:endpoint>https://login-tech.mos.ru</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="refresh_te" path="/sps/oauth/te" id="23e24b2e-17e2-4675-aa15-d3fadac21ec0"><con:settings/><con:parameters><con:parameter><con:name>refresh_token</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>grant_type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Обновить токен" id="823f63ab-0218-45ad-b5c4-bb9a840a65e1" method="POST"><con:settings/><con:parameters/><con:request name="Обновить токен" id="2d74915e-7be9-4a28-85d8-abadb1d920f9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://login-tech.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>grant_type</con:entry><con:entry>refresh_token</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="5f13c7d7-ef76-4a1d-b2ef-40239800f61f" name="GET prescription/{number}"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0c5fd54d-ee63-4657-9f88-c5c85ae2b18c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescription/number" id="6e9fe0bb-99e3-4501-8216-7ff3362caa77"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/prescription/prescription/{number}" methodName="get prescription number" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescription/number" id="0e6f6eff-0263-4df6-8377-1674f5178ecf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescription/00%D0%944500000519</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0a57a60a-3549-43f3-bc26-699c01d3a7b1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="number" value="${#TestCase#number}"/>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value="${#Project#sudirToken}"/>
</con:parameters><con:parameterOrder><con:entry>number</con:entry><con:entry>EI-token</con:entry><con:entry>oms</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="PIDetails" id="6ce7ce5e-c7cd-4478-97d5-9e09ea0c8e36"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piDetails</con:operation><con:request name="PIDetails" id="821938b7-6349-4d95-9769-5bf23e3c730c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
 <soapenv:Body>
      <typ:piDetailsRequest>
         <typ:getQR>true</typ:getQR>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:options>
            <typ:entry key="notifications">true</typ:entry>
         </typ:options>
         <typ:prescriptionNumber>${#TestCase#number}</typ:prescriptionNumber>
      </typ:piDetailsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="fa03adfd-f1df-4b96-81a6-5bdd1f34fbc4"/><con:assertion type="SOAP Fault Assertion" id="6e77e29b-338a-4a5f-b8a4-14e8ba5f680b"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="PIGetMarkPharmacy" id="2c6b2609-9f8e-4fa2-adb1-0033399d6069"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetMarkPharmacy</con:operation><con:request name="PIGetMarkPharmacy" id="83c8c687-1271-42ef-8bf7-fd959c92f720"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>\r
      <typ:piGetMarkPharmacyRequest>\r
         <typ:ident>EMIASINFO</typ:ident>\r
         <typ:markedObject>\r
            <typ:prescriptionNumber>${#TestCase#number}</typ:prescriptionNumber>\r
         </typ:markedObject>\r
      </typ:piGetMarkPharmacyRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="11eda85c-f947-4c86-8a66-43607774eb3b"/><con:assertion type="SOAP Fault Assertion" id="147278b8-1d58-4f2a-b2e5-57e6b9766f8f"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга основных параметров" id="84bf2bf2-3ab7-4886-bdbb-c176f1322edd"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

prescriptionResponse = context.expand('${prescription/number#Response}')
prescriptionParsed = new JsonSlurper().parseText(prescriptionResponse)

prescriptionXmlResponse = context.expand('${PIDetails#Response}')
prescriptionXmlParsed = new XmlSlurper().parseText(prescriptionXmlResponse)

prescriptionXml = prescriptionXmlParsed.Body.piDetailsResponse
prescriptionJson = prescriptionParsed.payload

assert prescriptionJson.number == prescriptionXml.prescriptionNumber.toString()
assert (prescriptionJson.type == prescriptionXml.prescriptionType.toString()) ||
			(prescriptionJson.type == null &&  prescriptionXml.prescriptionType == "")

if (prescriptionJson.medicine != null &&  prescriptionXml.medicine != ""){
	assert (prescriptionJson.medicine.rp == prescriptionXml.medicine.rp.toString()) ||
				(prescriptionJson.medicine.rp == null &&  prescriptionXml.medicine.rp == "")
	assert (prescriptionJson.medicine.medicineRus == prescriptionXml.medicine.medicineRus.toString()) ||
				(prescriptionJson.medicine.medicineRus == null &&  prescriptionXml.medicine.medicineRus == "")
	assert (prescriptionJson.medicine.qty == prescriptionXml.medicine.qty.toString()) ||
				(prescriptionJson.medicine.qty == null &&  prescriptionXml.medicine.qty == "")
	assert (prescriptionJson.medicine.dosage == prescriptionXml.medicine.dosage.toString()) ||
				(prescriptionJson.medicine.dosage == null &&  prescriptionXml.medicine.dosage == "")
	assert (prescriptionJson.medicine.usage == prescriptionXml.medicine.usage.toString()) ||
				(prescriptionJson.medicine.usage == null &&  prescriptionXml.medicine.usage == "")
}

if (prescriptionJson.medicine.usageDetails != null &&  prescriptionXml.medicine.usageDetails != ""){
	assert (prescriptionJson.medicine.usageDetails.couponMethod == prescriptionXml.medicine.usageDetails.couponMethod.toString()) ||
				(prescriptionJson.medicine.usageDetails.couponMethod == null &&  prescriptionXml.medicine.usageDetails.couponMethod == "")
	assert (prescriptionJson.medicine.usageDetails.couponLength == prescriptionXml.medicine.usageDetails.couponLength.toLong()) ||
				(prescriptionJson.medicine.usageDetails.couponLength == null &&  prescriptionXml.medicine.usageDetails.couponLength == "") 
	assert (prescriptionJson.medicine.usageDetails.couponPerDay == prescriptionXml.medicine.usageDetails.couponPerDay.toLong()) ||
				(prescriptionJson.medicine.usageDetails.couponPerDay == null &&  prescriptionXml.medicine.usageDetails.couponPerDay == "") 
	assert (prescriptionJson.medicine.usageDetails.couponDose == prescriptionXml.medicine.usageDetails.couponDose.toString()) ||
				(prescriptionJson.medicine.usageDetails.couponDose == null &&  prescriptionXml.medicine.usageDetails.couponDose == "") 
	assert (prescriptionJson.medicine.usageDetails.couponUnit == prescriptionXml.medicine.usageDetails.couponUnit.toString()) ||
				(prescriptionJson.medicine.usageDetails.couponUnit == null &&  prescriptionXml.medicine.usageDetails.couponUnit == "") 
}

if (prescriptionJson.issuedBy != null &&  prescriptionXml.issuedBy != ""){
	assert (prescriptionJson.issuedBy.organizationStamp == prescriptionXml.issuedBy.organizationStamp.toString()) ||
				(prescriptionJson.issuedBy.organizationStamp == null &&  prescriptionXml.issuedBy.organizationStamp == "")
	assert (prescriptionJson.issuedBy.doctorName == prescriptionXml.issuedBy.doctorName.toString()) ||
				(prescriptionJson.issuedBy.doctorName == null &&  prescriptionXml.issuedBy.doctorName == "")
}

if (prescriptionJson.registrationDate != null &&  prescriptionXml.registrationDate != ""){
	registrationDateJson = Date.parse('yyyy-MM-dd', prescriptionJson.registrationDate)
	registrationDateXml = Date.parse('yyyy-MM-dd', prescriptionXml.registrationDate.toString())
	assert registrationDateJson == registrationDateXml
}
if (prescriptionJson.expirationDate != null &&  prescriptionXml.expirationDate != ""){
	expirationDateJson = Date.parse('yyyy-MM-dd', prescriptionJson.expirationDate )
	expirationDateXml = Date.parse('yyyy-MM-dd', prescriptionXml.expirationDate.toString())
	assert expirationDateJson == expirationDateXml
}

assert (prescriptionJson.term == prescriptionXml.prescriptionTerm.toString()) ||
			(prescriptionJson.term == null &&  prescriptionXml.prescriptionTerm == "")

if (prescriptionJson.state != null &&  prescriptionXml.state != ""){
	assert (prescriptionJson.state.code == prescriptionXml.state.code.toString()) ||
				(prescriptionJson.state.code == null &&  prescriptionXml.state.code == "")
	switch(prescriptionJson.state.code) {
		case "active":
			assert prescriptionJson.state.title == "Действующий"
			break
		case "inprogress":
			assert prescriptionJson.state.title == "Ожидается поступление в аптеку"
			break
		case "delivered":
			assert prescriptionJson.state.title == "Препарат поступил в аптеку"
			break
		case "completed":
			assert prescriptionJson.state.title == "Обслужен"
			break
		case "expired":
			assert prescriptionJson.state.title == "Просрочен"
			break
		default:
			assert prescriptionJson.state.title == null
			break
	}
}
if(prescriptionJson.hint != null){
	assert prescriptionJson.hint == prescriptionXml.options.entry[0].toString()
}
assert (prescriptionJson.QRstring == prescriptionXml.QRstring.toString()) ||
			(prescriptionJson.QRstring == null &&  prescriptionXml.QRstring  == "")
log.info "end"
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга pharmacy и saleinfo" id="3f5d34a5-66cb-42b3-8b15-88099f42e7bb"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

prescriptionResponse = context.expand('${prescription/number#Response}')
prescriptionParsed = new JsonSlurper().parseText(prescriptionResponse)

prescriptionXmlResponse = context.expand('${PIDetails#Response}')
prescriptionXmlParsed = new XmlSlurper().parseText(prescriptionXmlResponse)

pharmacyXml = prescriptionXmlParsed.Body.piDetailsResponse.pharmacy

pharmacyJson = prescriptionParsed.payload.pharmacy

if(pharmacyXml != "" || pharmacyJson != null)
{
	assert pharmacyXml.size() == pharmacyJson.size()
	for(int i=0; i < pharmacyXml.size(); i++){
		assert  (pharmacyJson[i].name.trim() == pharmacyXml[i].name.toString()) ||
					(pharmacyJson[i].name == null && pharmacyXml[i].name.toString() == "")
		assert  (pharmacyJson[i].address == pharmacyXml[i].address.toString()) ||
					(pharmacyJson[i].address == null && pharmacyXml[i].address.toString() == "")
		assert pharmacyXml[i].saleInfo.size() == pharmacyJson[i].saleInfo.size()
		
		for (int j = 0; j < pharmacyXml[i].saleInfo.size(); j++){
			assert (pharmacyJson[i].saleInfo[j].title == pharmacyXml[i].saleInfo[j].title.toString()) ||
					(pharmacyJson[i].saleInfo[j].title == null && pharmacyXml[i].saleInfo[j].title.toString() == "")
			assert (pharmacyJson[i].saleInfo[j].qty  == pharmacyXml[i].saleInfo[j].qty.toString()) ||
					(pharmacyJson[i].saleInfo[j].qty == null && pharmacyXml[i].saleInfo[j].qty.toString() == "")
			
			if (pharmacyJson[i].saleInfo[j].saleDate != null || pharmacyXml[i].saleInfo[j].saleDate.toString() != ""){
				saleDateJson = Date.parse('yyyy-MM-dd', pharmacyJson[i].saleInfo[j].saleDate)
				saleDateXml = Date.parse('yyyy-MM-dd', pharmacyXml[i].saleInfo[j].saleDate.toString())
				
				assert saleDateJson == expirationDateXml
			}
		}
		
	}
	log.info "oh yeah"
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга controlType" id="76b860bf-989d-411d-9d3a-fd6a57cb41da"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

prescriptionResponse = context.expand('${prescription/number#Response}')
prescriptionParsed = new JsonSlurper().parseText(prescriptionResponse)

prescriptionXmlResponse = context.expand('${PIDetails#Response}')
prescriptionXmlParsed = new XmlSlurper().parseText(prescriptionXmlResponse)

controlTypeXml = prescriptionXmlParsed.Body.piDetailsResponse.controlType
controlTypeJson = prescriptionParsed.payload.controlType

assert controlTypeJson.code == controlTypeXml.toString()
switch (controlTypeJson.code){
	case "narcotic":
		assert controlTypeJson.title == "Наркотический лекарственный препарат, недоступен для бронирования"
		break;
	case "drastic":
		assert controlTypeJson.title == "Сильнодействующий лекарственный препарат, недоступен для бронирования"
		break;
	case "devices":
		assert controlTypeJson.title == "Изделие медицинского назначения, недоступно для бронирования"
		break;
	default:
		assert controlTypeJson.title == null
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка параметра hasMark" id="b5ad22a8-73c9-4f27-ab0a-c1b077bf1059"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

prescriptionResponse = context.expand('${prescription/number#Response}')
prescriptionParsed = new JsonSlurper().parseText(prescriptionResponse)

markXmlResponse = context.expand('${PIGetMarkPharmacy#Response}')
markXmlParsed = new XmlSlurper().parseText(markXmlResponse)

markXml = markXmlParsed.Body.piGetMarkPharmacyResponse.result.mark
markJson = prescriptionParsed.payload.hasMark

if (markXml != "" &amp;&amp; markXml != null){
	if ( markJson != true) testRunner.fail("HasMark не соответствует ожидаемому")
}
else
	if ( markJson == true) testRunner.fail("HasMark не соответствует ожидаемому")
</script></con:config></con:testStep><con:properties><con:property><con:name>number</con:name><con:value>00Д4519354391</con:value></con:property><con:property><con:name>oms</con:name><con:value>4565465465465465</con:value></con:property></con:properties></con:testCase><con:testCase id="0b377df5-7f63-407e-befe-36725fec442b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Удаление pharmmacy из ответа (EINFOSRV-899)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Посмотреть привязанных пользователей" id="2bc51016-6ef8-4281-9a85-47b4d5a5628c"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/internal/3/emc-permissions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Посмотреть привязанных пользователей" id="41600ef4-dbb4-46ce-81f3-fbc8d75231db" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/internal/3/emc-permissions</con:originalUri><con:assertion type="Simple Contains" id="5636a380-bc1a-4484-8e5c-63221a606362" name="Contains"><con:configuration><token>policyNum</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ssoId" value="${#Project#guid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ssoId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="получить все emiasid из ответа" id="acae7e1d-5643-4c48-a305-53def587178b" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

response = context.expand('${Посмотреть привязанных пользователей#Response}')
parsedResponse = new JsonSlurper().parseText(response)

ids=parsedResponse.permissions.emiasId
log.info ids.toString().replace("[","(").replace("]",")")

id=10133820
for(int i=0; i&lt;parsedResponse.permissions.size(); i++){

	if(parsedResponse.permissions[i].emiasId == id){ log.info parsedResponse.permissions[i].policyNum; break}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="получить все омс из ответа" id="751d0dc3-fd39-4ea3-8700-c966d4de877c"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

response = context.expand('${Посмотреть привязанных пользователей#Response}')
parsedResponse = new JsonSlurper().parseText(response)

policyNum=parsedResponse.permissions.policyNum
log.info policyNum.toString().replace("[","(").replace("]",")")

id=10133820
for(int i=0; i&lt;parsedResponse.permissions.size(); i++){

	if(parsedResponse.permissions[i].emiasId == id){ log.info parsedResponse.permissions[i].policyNum; break}
}
n=testRunner.testCase.getPropertyValue("n").toInteger()
success=false
for(int i=n; i&lt;policyNum.size(); i++ ){
	testRunner.testCase.setPropertyValue("oms", policyNum[i].toString())
	def tCase = testRunner.testCase.testSuite.testCases["Удаление pharmmacy из ответа (EINFOSRV-899)"]
	def tStep = tCase.testSteps["get prescriptions"]
	tStep.run(testRunner, context)
	sleep(500)
	def httpResponseHeaders = testRunner.testCase.getTestStepByName("get prescriptions").testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	if(httpStatusCode =="200" ){
		response2 = context.expand('${get prescriptions#Response}')
		parsedResponse2 = new JsonSlurper().parseText(response2)
		numbers=parsedResponse2.payload.activePrescription.number
		log.info numbers
		j=numbers.size()
		for(int j=0; j&lt;numbers.size();j++ ){
			testRunner.testCase.setPropertyValue("number", numbers[j].toString())
			def tStep2 = tCase.testSteps["PIDetails"]
			tStep2.run(testRunner, context)
			prescriptionXmlResponse = context.expand('${PIDetails#Response}')
			prescriptionXmlParsed = new XmlSlurper().parseText(prescriptionXmlResponse)
			pharmacy = prescriptionXmlParsed.Body.piDetailsResponse.pharmacy
			if(pharmacy !="" ){
				log.info pharmacy.toString()
				log.info "Найден рецепт с pharmacy "
				success=true
				break
			}
		}
		if (success) break
		//n=i+1
		//testRunner.testCase.setPropertyValue("n", n.toString())
		//break
	}

}

if(!success){
	testRunner.fail("Не найден рецепт с pharmacy ")
	log.info "Не найден рецепт с pharmacy"
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="get prescriptions" id="e1c8afe1-05ad-429c-bb8c-7ac4419bce54" disabled="true"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="get prescriptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get prescriptions" id="c0b87c92-0a54-47c5-8daa-7ddd2dcdfdeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/prescriptions</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="false"/>
  <con:entry key="EI-token" value="${#Project#sudirToken}"/>
  <con:entry key="Mock-llo" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="PIDetails" id="264a87db-0fef-4860-8f31-54d93ce4447e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piDetails</con:operation><con:request name="PIDetails" id="821938b7-6349-4d95-9769-5bf23e3c730c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
	<soap:Header>
		<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
			<wsse:UsernameToken wsu:Id="UsernameToken-eaf08221-df80-4f88-9b36-8c5e8adbccf1">
				<wsse:Username>EIM/ssoId/EIM/ssoId</wsse:Username>
			</wsse:UsernameToken>
		</wsse:Security>
	</soap:Header>
	<soap:Body>
		<piDetailsRequest xmlns="http://emias2.gov.ru/business/llo/v4/types">
			<getQR>true</getQR>
			<ident>EMIASINFO</ident>
			<options>
				<entry key="get_sale">true</entry>
				<entry key="get_booking_availability">true</entry>
			</options>
			<prescriptionNumber>${#TestCase#number}</prescriptionNumber>
		</piDetailsRequest>
	</soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="fa03adfd-f1df-4b96-81a6-5bdd1f34fbc4"/><con:assertion type="SOAP Fault Assertion" id="6e77e29b-338a-4a5f-b8a4-14e8ba5f680b"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="prescription/number" id="efefc3f1-5b6f-4758-8a2e-9f2dc9d29838"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/prescription/prescription/{number}" methodName="get prescription number" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescription/number" id="0e6f6eff-0263-4df6-8377-1674f5178ecf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescription/00%D0%944500000519</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0a57a60a-3549-43f3-bc26-699c01d3a7b1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="number" value="${#TestCase#number}"/>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="false"/>
  <con:entry key="EI-token" value="${#Project#sudirToken}"/>
</con:parameters><con:parameterOrder><con:entry>number</con:entry><con:entry>EI-token</con:entry><con:entry>oms</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга основных параметров" id="3b38bb86-1e75-48ae-9e28-75f29d3d20f1"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.text.SimpleDateFormat
import groovy.xml.XmlSlurper

prescriptionResponse = context.expand('${prescription/number#Response}')
prescriptionParsed = new JsonSlurper().parseText(prescriptionResponse)

prescriptionXmlResponse = context.expand('${PIDetails#Response}')
prescriptionXmlParsed = new XmlSlurper().parseText(prescriptionXmlResponse)

pLLO = prescriptionXmlParsed.Body.piDetailsResponse
pInfo = prescriptionParsed.payload

// общая функция логирования ошибки
def logError(String paramName , def  infoValue, def otherValue){
	testRunner.fail("Значение параметра "+paramName+" отличается от ожидаемового")
	log.info "Полученное значение = "+infoValue
	log.info "Ожидаемое  значение ="+otherValue
}

// общая функция для проверки соответствия двухх значений
def checkParams(String paramName , def  infoValue, def otherValue){
	if (infoValue != otherValue) logError(paramName, infoValue, otherValue )
}

//общая функция для проверки необязательного параметра
def checkOptionalParams(String paramName , def  infoValue, def otherValue){
	if(otherValue.toString() !=""){
		checkParams(paramName, infoValue, otherValue )
	}
	else{
		if (infoValue != null && infoValue != "null") logError(paramName, infoValue, otherValue )
	}
}
// .А_ВА_06 Формирование подсказок для графика обслуживания длинных рецептов
def getNote(String periodType, Boolean isCompleted, Boolean isAllowed, String codeLLO, def types, String douseTitle){
	note=[ title : null , text : null , type : "other"]
	found=false
	if(isCompleted ){
		note.title="Препарат получен"
		note.type="success"
		found=true
	}
	else{
		//log.info periodType
		if(isAllowed ){
			switch(codeLLO) {
				case "inprogress":
					note.title="Ожидается поступление препарата"
					note.type="wait"
					found=true
					break
				case "delivered":
					note.title="Препарат поступил в аптеку"
					note.type="delivered"
					found=true
					break
				case "active":
					note.title="Получите "+douseTitle
					note.type="normal"
					found=true
					break
				default:
					break
			}
		}
		else{
			if(codeLLO == "active" && periodType == "currentPeriod"){
				note.title="Обслуживание не возможно"
				note.text="Обратитесь к выписавшему врачу"
				note.type="error"
				found=true
			}
			if(periodType == "pastPeriod"){
				note.title="Просрочен"
				note.type="expired"
				found=true
			}
		}
	}
	if (!found){
		n= i >0 ? i-1 : 0
		if(i > 0 &&  types[n] == "error"){
			note.title="Обслуживание не возможно"
			note.type="errorOnFuture"
		}
		else{
			if(periodType == "futurePeriod" ){
				note.title=douseTitle
				note.type="normalOnFuture"
			}
		}
	}
	return note
}

def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd")
def currentDateString=sdf.format(date)
currentDate=sdf.parse(currentDateString)
oms=testRunner.testCase.getPropertyValue("oms")
log.info "Проверяю рецепт номер "+pInfo.number+" пациента с омс =  "+oms
// проверка number
checkParams("number", pInfo.number,pLLO.prescriptionNumber.toString())

//проверка type
checkOptionalParams("type", pInfo.type, pLLO.prescriptionType.toString() )

// проверка medicine
medInfo=pInfo.medicine
medLLO=pLLO.medicine
if(medLLO.toString() !=""){
	//проверка rp
	checkOptionalParams("rp" , medInfo.rp, medLLO.rp.toString())
	//проверка medicineRus
	checkOptionalParams("medicineRus" , medInfo.medicineRus, medLLO.medicineRus.toString())
	//проверка qty
	checkOptionalParams("qty" , medInfo.qty, medLLO.qty.toString())
	//проверка dosage
	checkOptionalParams("dosage" , medInfo.dosage, medLLO.dosage.toString())
	//проверка usage
	checkOptionalParams("usage" , medInfo.usage, medLLO.usage.toString())
	//проверка usageDetails
	if(medLLO.usageDetails.toString() !=""){
		udInfo=medInfo.usageDetails
		udLLO=medLLO.usageDetails
		// проверить couponMethod
		checkOptionalParams("couponMethod" , udInfo.couponMethod, udLLO.couponMethod.toString())
		// проверить couponLength
		checkOptionalParams("couponLength" , udInfo.couponLength.toString(), udLLO.couponLength.toString())
		// проверить couponPerDay
		checkOptionalParams("couponPerDay" , udInfo.couponPerDay.toString(), udLLO.couponPer_day.toString())
		// проверить couponDose
		checkOptionalParams("couponDose" , udInfo.couponDose, udLLO.couponDose.toString())
		// проверить couponUnit
		checkOptionalParams("couponUnit" , udInfo.couponUnit, udLLO.couponUnit.toString())
	}
	else{
		if (medInfo.usageDetails.toString() != "{}") logError("usageDetails", medInfo.usageDetails, medLLO.usageDetails )
	}
}
else{
	if (medInfo != null) logError("medicine", medInfo, medLLO )
}

// проверка issuedBy
issuedByInfo=pInfo.issuedBy
issuedByLLO=pLLO.issuedBy
if(issuedByLLO.toString() !=""){
	// проверить organizationStamp
	checkOptionalParams("organizationStamp" , issuedByInfo.organizationStamp, issuedByLLO.organizationStamp.toString())
	// проверить doctorName
	checkOptionalParams("doctorName" , issuedByInfo.doctorName, issuedByLLO.doctorName.toString())
}
else{
	if (medInfo != null) logError("issuedBy", issuedByInfo, issuedByLLO )
}

//проверка registrationDate
checkOptionalParams("registrationDate", pInfo.registrationDate.toString(), pLLO.registrationDate.toString().split("T")[0] )

//проверка expirationDate
checkOptionalParams("expirationDate", pInfo.expirationDate.toString(), pLLO.expirationDate.toString().split("T")[0] )
def expDate
//проверка daysLeft
if(pLLO.expirationDate.toString() != ""){
	expDateString=pLLO.expirationDate.toString().split("T")[0]
	expDate=sdf.parse(expDateString)
	if(expDate >= currentDate){
		long milliseconds = expDate.getTime()-currentDate.getTime()
		dif = milliseconds / (24 * 60 * 60 * 1000)+1
		checkOptionalParams("daysLeft", pInfo.daysLeft, dif )
	}
	else{
		checkOptionalParams("daysLeft", pInfo.daysLeft, null )
	}
}
else checkParams("daysLeft", pInfo.type,null)
//проверка term
checkOptionalParams("term", pInfo.term, pLLO.prescriptionTerm.toString() )

//проверка prohibited
checkOptionalParams("prohibited", pInfo.prohibited, pLLO.prohibited.toBoolean() )

// проверка state
code=pInfo.state.code
title=pInfo.state.title
codeLLO=pLLO.prescriptionState.toString()
if( codeLLO != ""){
	checkOptionalParams("state.code", code, codeLLO )
	switch(code) {
		case "active":
			checkOptionalParams("state.title", title, "Действующий" )
			break
		case "inprogress":
			checkOptionalParams("state.title", title, "Ожидается поступление в аптеку" )
			break
		case "delivered":
			checkOptionalParams("state.title", title, "Препарат поступил в аптеку" )
			break
		case "completed":
			checkOptionalParams("state.title", title, "Обслужен" )
			break
		case "expired":
			checkOptionalParams("state.title", title, "Просрочен" )
			break
		default:
			testRunner.fail("Для значения параметра state.code = "+code+" нет значения маппинга параметра state.title")
			break
	}
}
// проверка отсутствия pharmacy
checkOptionalParams("pharmacy", pInfo.pharmacy, null )

//проверка QRstring
checkOptionalParams("QRstring", pInfo.qRstring, pLLO.QRstring.toString() )

// проверка state
codeCT=pInfo.controlType.code
titleCT=pInfo.controlType.title
controlTypeLLO=pLLO.controlType.toString()
if( codeLLO != ""){
	checkOptionalParams("controlType.code", codeCT, controlTypeLLO )
	switch(codeCT) {
		case "narcotic":
			checkOptionalParams("controlType.title", titleCT, "Наркотический лекарственный препарат, недоступен для бронирования" )
			break
		case "drastic":
			checkOptionalParams("controlType.title", titleCT, "Сильнодействующий лекарственный препарат, недоступен для бронирования" )
			break
		case "devices":
			checkOptionalParams("controlType.title", titleCT, "Изделие медицинского назначения, недоступно для бронирования" )
			break
		case "normal":
			checkOptionalParams("controlType.title", titleCT, null )
			break
		default:
			testRunner.fail("Для значения параметра controlType.code = "+codeCT+" нет значения маппинга параметра controlType.title")
			break
	}
}

// проверка serviceMessage
smLLO=pLLO.recipeService.serviceMessage
smInfo=pInfo.serviceMessage
//log.info smLLO.toString()
if(smLLO.toString() != ""){
	checkOptionalParams("serviceMessage.title", smInfo.title, smLLO.title.toString() )
	checkOptionalParams("serviceMessage.text", smInfo.text, smLLO.details.toString() )
	switch(smLLO.colorMark.toString()) {
		case "no_info":
			checkOptionalParams("serviceMessage.type", smInfo.type, "info" )
			break
		case "ok":
			if(code == "delivered") checkOptionalParams("serviceMessage.type", smInfo.type, "delivered" )
			else checkOptionalParams("serviceMessage.type", smInfo.type, "success" )
			break
		case "warning":
			checkOptionalParams("serviceMessage.type", smInfo.type, "wait" )
			break
		case "alert":
			checkOptionalParams("serviceMessage.type", smInfo.type, "error" )
			break
		case "infо":
			checkOptionalParams("serviceMessage.type", smInfo.type, "other" )
			break
		case "other":
			checkOptionalParams("serviceMessage.type", smInfo.type, "other" )
			break
		default:
			checkOptionalParams("serviceMessage.type", smInfo.type, "other" )
			break
	}
}
else{
	checkOptionalParams("serviceMessage", smInfo, null )
}

// проверка recipeService
rsLLO=pLLO.recipeService
rsInfo=pInfo.recipeService
if(rsLLO.toString() != "" ){
	checkParams("recipeService.periodsQty", rsInfo.periodsQty.toString(),rsLLO.periodsQty.toString())
	checkOptionalParams("recipeService.periodicity", rsInfo.periodicity.toString(),rsLLO.periodicity.toString())
	checkOptionalParams("recipeService.periodicityUnit", rsInfo.periodicityUnit,rsLLO.periodicityUnit.toString())
	//проверка firstOpenPeriodNumber
	def number
	spLLO=rsLLO.servicePeriod
	spInfo=rsInfo.servicePeriod
	if(code=="inprogress" ||  code=="delivered"){
		for(int i=0; i<spLLO.size(); i++){
			if(spLLO[i].isAllowed.toBoolean() ){
				number=spLLO[i].periodNumber.toInteger()
				break
			}
		}
	}
	else{
		found=false
		for(int i=0; i<spLLO.size(); i++){
			d1=spLLO[i].periodTerm.start.toString()
			d2=spLLO[i].periodTerm.end.toString()
			start=sdf.parse(d1)
			end=sdf.parse(d2)
			if(start <= currentDate && end >= currentDate ){
				number=spLLO[i].periodNumber.toInteger()
				found=true
				break
			}
		}
		if(!found) number = null
	}
	checkOptionalParams("recipeService.firstOpenPeriodNumber", rsInfo.firstOpenPeriodNumber,number)
	// проверка servicePeriod
	types=[]
	for(int i=0; i<spLLO.size(); i++){
		param="recipeService.servicePeriod"
		d1=spLLO[i].periodTerm.start.toString()
		d2=spLLO[i].periodTerm.end.toString()
		start=sdf.parse(d1)
		end=sdf.parse(d2)
		String periodType
		if ( end < currentDate ) periodType="pastPeriod"
		if ( start <= currentDate && end >= currentDate ) periodType="currentPeriod"
		if ( start > currentDate ) periodType="futurePeriod"
		checkParams(param+".periodNumber", spInfo[i].periodNumber.toString(),spLLO[i].periodNumber.toString())
		checkParams(param+".drugAmount", spInfo[i].drugAmount.toString(),spLLO[i].drugAmount.toString())
		checkOptionalParams(param+".periodTerm.start", spInfo[i].periodTerm.startDate.toString(),spLLO[i].periodTerm.start.toString())
		checkOptionalParams(param+".periodTerm.end", spInfo[i].periodTerm.endDate.toString(),spLLO[i].periodTerm.end.toString())
		checkOptionalParams(param+".isCompleted", spInfo[i].isCompleted,spLLO[i].isCompleted.toBoolean())
		checkOptionalParams(param+".isAllowed", spInfo[i].isAllowed,spLLO[i].isAllowed.toBoolean())
		// .А_ВА_06 Формирование подсказок для графика обслуживания длинных рецептов
		if(rsLLO.periodsQty.toInteger() >1 ){
			//log.info "periodsQty "+ rsLLO.periodsQty.toInteger()
			douseTitle=rsLLO.periodDrugAmount.toString()+" "+medLLO.usageDetails.couponUnit.toString()
			note=getNote(periodType, spLLO[i].isCompleted.toBoolean(),spLLO[i].isAllowed.toBoolean(),codeLLO,types,douseTitle)
			types << note.type
			//log.info note
			checkOptionalParams(param+".note.title", spInfo[i].note.title, note.title)
			checkOptionalParams(param+".note.text", spInfo[i].note.text, note.text)
			checkOptionalParams(param+".note.type", spInfo[i].note.type, note.type)
			checkParams(param+".periodType", spInfo[i].periodType,periodType)
		}
		else{ 
			checkOptionalParams(param+".note", spInfo[i].note, null)
			checkOptionalParams(param+".periodType", spInfo[i].periodType,null)
		}
		// проверка serviceCase
		scLLO=spLLO[i].serviceCase
		scInfo=spInfo[i].serviceCase
		param2=param+".serviceCase"
		if( scLLO.toString() != ""){
			countLLO=scLLO.size()
			countInfo=scInfo.size()
			checkParams(param2+"(количество элементов)", countInfo,countLLO)
			for(int k=0; k<countLLO; k++){
				checkParams(param2+".saleDate", scInfo[k].saleDate.toString(),scLLO[k].saleDate.toString())
				if( scLLO[k].pharmacy.toString() != ""){
					checkParams(param2+".pharmacy.title", scInfo[k].pharmacy.title, scInfo[k].pharmacy.title.toString())
					checkParams(param2+".pharmacy.ident", scInfo[k].pharmacy.ident, scInfo[k].pharmacy.ident.toString())
					checkOptionalParams(param2+".pharmacy.address", scInfo[k].pharmacy.address, scInfo[k].pharmacy.address.toString())
					if( scLLO[k].pharmacy.phone.toString() != ""){
						for(int g=0; g< scLLO[k].pharmacy.phone.size(); g++){
							checkOptionalParams(param2+".pharmacy.phone", scInfo[k].pharmacy.phone[g], scInfo[k].pharmacy.phone[g].toString())
						}
					}
					else checkOptionalParams(param2+".pharmacy.phone", scInfo[k].pharmacy.phone, null)
				}
				else checkOptionalParams(param2+".pharmacy", scInfo[k].pharmacy, null)
				for(int g=0; g< scLLO[k].drugSold.size(); g++){
					checkOptionalParams(param2+".drugSold.fullTradeName", scInfo[k].drugSold[g].fullTradeName, scInfo[k].drugSold[g].fullTradeName.toString())
					checkOptionalParams(param2+".drugSold.packQty", scInfo[k].drugSold[g].packQty, scInfo[k].drugSold[g].packQty.toInteger())
				}
				if( scLLO[k].booking.toString() != ""){
					checkParams(param2+".booking.title", scInfo[k].booking.title, scInfo[k].booking.title.toString())
					checkParams(param2+".booking.ident", scInfo[k].booking.ident, scInfo[k].booking.ident.toString())
					checkOptionalParams(param2+".booking.address", scInfo[k].booking.address, scInfo[k].booking.address.toString())
					if( scLLO[k].booking.phone.toString() != ""){
						for(int g=0; g< scLLO[k].booking.phone.size(); g++){
							checkOptionalParams(param2+".booking.phone", scInfo[k].booking.phone[g], scInfo[k].booking.phone[g].toString())
						}
					}
					else checkOptionalParams(param2+".booking.phone", scInfo[k].booking.phone, null)
				}
				else checkOptionalParams(param2+".booking", scInfo[k].booking, null)
			}
		}
		else checkOptionalParams(param+".serviceCase", scInfo, [])
	}
}
else checkOptionalParams("recipeService", rsInfo, null )

// проверка bookingAvailable
options=pLLO.options
baLLO= options.entry.find{ it.'@key' == "get_booking_availability"}.toBoolean()
checkOptionalParams("bookingAvailable", pInfo.bookingAvailable, baLLO )

// проверка drugAvailabilityСheck
drugAvailabilityCheck=false
if( expDate >= currentDate && pLLO.prescriptionType.toString() == "benefit" && codeLLO=="active") drugAvailabilityCheck=true
checkOptionalParams("drugAvailabilityCheck", pInfo.drugAvailabilityCheck, drugAvailabilityCheck )
]]></script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>5541984121623250</con:value></con:property><con:property><con:name>n</con:name><con:value>0</con:value></con:property><con:property><con:name>number</con:name><con:value>01Э4519356954</con:value></con:property></con:properties></con:testCase><con:testCase id="94f18c6f-ee36-4294-b8da-b045027a532b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1 PRESCRIPTION_NOT_FOUND" searchProperties="true"><con:settings/><con:testStep type="request" name="PIDetails" id="f83f911f-7f18-4afa-b35d-1173e7f13ea6"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piDetails</con:operation><con:request name="PIDetails" id="821938b7-6349-4d95-9769-5bf23e3c730c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
 <soapenv:Body>
      <typ:piDetailsRequest>
         <typ:getQR>true</typ:getQR>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:options>
            <typ:entry key="notifications">true</typ:entry>
         </typ:options>
         <typ:prescriptionNumber>1</typ:prescriptionNumber>
      </typ:piDetailsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="fa03adfd-f1df-4b96-81a6-5bdd1f34fbc4"/><con:assertion type="SOAP Fault Assertion" id="6e77e29b-338a-4a5f-b8a4-14e8ba5f680b"/><con:assertion type="XPath Match" id="ba4115a9-4160-4c3a-8ba6-d57212594b8d" name="Код ошибки 2145"><con:configuration><path>//*:resultCode</path><content>2145</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="GET prescription/number" id="6f28281b-9836-446a-8117-780708142462"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/prescription/prescription/{number}" methodName="get prescription number" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET prescription/number" id="0e6f6eff-0263-4df6-8377-1674f5178ecf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescription/00%D0%944500000519</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0a57a60a-3549-43f3-bc26-699c01d3a7b1" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a6975977-89ba-4519-afbf-980ba66b335e" name="error.code"><con:configuration><path>error.code</path><content>LLO_PRESCRIPTION_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d5d62cb3-8291-4a71-a6f8-46cef5a63f94" name="error.description"><con:configuration><path>error.description</path><content>Рецепт или заказ не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="84bd898e-f736-4eff-b76f-3f26c1d35f23" name="error.type"><con:configuration><path>error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="number" value="1"/>
  <con:entry key="oms" value=""/>
  <con:entry key="EI-token" value=""/>
</con:parameters><con:parameterOrder><con:entry>number</con:entry><con:entry>EI-token</con:entry><con:entry>oms</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6a997d78-bd55-4fea-b4ea-1875b63e8a88" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга new" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Посмотреть привязанных пользователей" id="129ff1d2-2f17-4e82-bc25-0e978e127e48"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/internal/3/emc-permissions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Посмотреть привязанных пользователей" id="41600ef4-dbb4-46ce-81f3-fbc8d75231db" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/internal/3/emc-permissions</con:originalUri><con:assertion type="Simple Contains" id="5636a380-bc1a-4484-8e5c-63221a606362" name="Contains"><con:configuration><token>policyNum</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ssoId" value="${#Project#guid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ssoId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="получить все emiasid из ответа" id="466e08af-dd82-4ee4-9f1c-4357c3136bd1" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

response = context.expand('${Посмотреть привязанных пользователей#Response}')
parsedResponse = new JsonSlurper().parseText(response)

ids=parsedResponse.permissions.emiasId
log.info ids.toString().replace("[","(").replace("]",")")

id=10133820
for(int i=0; i&lt;parsedResponse.permissions.size(); i++){

	if(parsedResponse.permissions[i].emiasId == id){ log.info parsedResponse.permissions[i].policyNum; break}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="получить все омс из ответа" id="70f51c78-bbd4-461b-a871-600dac0ba6f6"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

response = context.expand('${Посмотреть привязанных пользователей#Response}')
parsedResponse = new JsonSlurper().parseText(response)

policyNum=parsedResponse.permissions.policyNum
log.info policyNum.toString().replace("[","(").replace("]",")")

id=10133820
for(int i=0; i&lt;parsedResponse.permissions.size(); i++){

	if(parsedResponse.permissions[i].emiasId == id){ log.info parsedResponse.permissions[i].policyNum; break}
}
n=testRunner.testCase.getPropertyValue("n").toInteger()
k=0
d=10
for(int i=n; i&lt;policyNum.size(); i++ ){
	testRunner.testCase.setPropertyValue("oms", policyNum[i].toString())
	def tCase = testRunner.testCase.testSuite.testCases["Проверка маппинга new"]
	def tStep = tCase.testSteps["get prescriptions"]
	tStep.run(testRunner, context)
	sleep(500)
	def httpResponseHeaders = testRunner.testCase.getTestStepByName("get prescriptions").testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	if(httpStatusCode =="200" ){
		response2 = context.expand('${get prescriptions#Response}')
		parsedResponse2 = new JsonSlurper().parseText(response2)
		numbers=parsedResponse2.payload.activePrescription.number
		log.info numbers
		//j=numbers.size()
		//success=false
		for(int j=0; j&lt;numbers.size();j++ ){
			log.info "проверяю рецепт " +k
			testRunner.testCase.setPropertyValue("number", numbers[j].toString())
			def tStep2 = tCase.testSteps["PIDetails"]
			def tStep3 = tCase.testSteps["prescription/number"]
			def tStep4 = tCase.testSteps["Проверка маппинга основных параметров"]
			tStep2.run(testRunner, context)
			tStep3.run(testRunner, context)
			tStep4.run(testRunner, context)
//			prescriptionXmlResponse = context.expand('${PIDetails#Response}')
//			prescriptionXmlParsed = new XmlSlurper().parseText(prescriptionXmlResponse)
//			pharmacy = prescriptionXmlParsed.Body.piDetailsResponse.pharmacy
//			log.info pharmacy.toString()
//			if(pharmacy !="" ){
//				log.info "Найден рецепт с pharmacy "
//				success=true
//				break
//			}
				k=k+1
		}
		n=i+1
		testRunner.testCase.setPropertyValue("n", n.toString())
		if (k>d) break
		
		//break
	}

}
</script></con:config></con:testStep><con:testStep type="restrequest" name="get prescriptions" id="5d4a175d-c1c3-4d6b-82cd-1c844ea442f8"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="get prescriptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get prescriptions" id="c0b87c92-0a54-47c5-8daa-7ddd2dcdfdeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/prescriptions</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="false"/>
  <con:entry key="EI-token" value="${#Project#sudirToken}"/>
  <con:entry key="Mock-llo" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="PIDetails" id="add4149c-8384-4240-b758-164cc2f7fdbd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piDetails</con:operation><con:request name="PIDetails" id="821938b7-6349-4d95-9769-5bf23e3c730c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
	<soap:Header>
		<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
			<wsse:UsernameToken wsu:Id="UsernameToken-eaf08221-df80-4f88-9b36-8c5e8adbccf1">
				<wsse:Username>EIM/ssoId/EIM/ssoId</wsse:Username>
			</wsse:UsernameToken>
		</wsse:Security>
	</soap:Header>
	<soap:Body>
		<piDetailsRequest xmlns="http://emias2.gov.ru/business/llo/v4/types">
			<getQR>true</getQR>
			<ident>EMIASINFO</ident>
			<options>
				<entry key="get_sale">true</entry>
				<entry key="get_booking_availability">true</entry>
			</options>
			<prescriptionNumber>${#TestCase#number}</prescriptionNumber>
		</piDetailsRequest>
	</soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="fa03adfd-f1df-4b96-81a6-5bdd1f34fbc4"/><con:assertion type="SOAP Fault Assertion" id="6e77e29b-338a-4a5f-b8a4-14e8ba5f680b"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="prescription/number" id="9dcf9472-ed87-469b-847d-0a51b95dc827"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v4/prescription/prescription/{number}" methodName="get prescription number" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescription/number" id="0e6f6eff-0263-4df6-8377-1674f5178ecf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescription/00%D0%944500000519</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0a57a60a-3549-43f3-bc26-699c01d3a7b1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="number" value="${#TestCase#number}"/>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="false"/>
  <con:entry key="EI-token" value="${#Project#sudirToken}"/>
  <con:entry key="Mock-llo" value="https://7ace18c5-ca3f-452e-8c4d-56133596f245.mock.pstmn.io"/>
</con:parameters><con:parameterOrder><con:entry>number</con:entry><con:entry>EI-token</con:entry><con:entry>oms</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга основных параметров" id="97eae935-878b-4e1a-927b-b2fd86f4cb3b"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.text.SimpleDateFormat
import groovy.xml.XmlSlurper

prescriptionResponse = context.expand('${prescription/number#Response}')
prescriptionParsed = new JsonSlurper().parseText(prescriptionResponse)

prescriptionXmlResponse = context.expand('${PIDetails#Response}')
prescriptionXmlParsed = new XmlSlurper().parseText(prescriptionXmlResponse)

pLLO = prescriptionXmlParsed.Body.piDetailsResponse
pInfo = prescriptionParsed.payload

// общая функция логирования ошибки
def logError(String paramName , def  infoValue, def otherValue){
	testRunner.fail("Значение параметра "+paramName+" отличается от ожидаемового")
	log.info "Полученное значение = "+infoValue
	log.info "Ожидаемое  значение ="+otherValue
}

// общая функция для проверки соответствия двухх значений
def checkParams(String paramName , def  infoValue, def otherValue){
	if (infoValue != otherValue) logError(paramName, infoValue, otherValue )
}

//общая функция для проверки необязательного параметра
def checkOptionalParams(String paramName , def  infoValue, def otherValue){
	if(otherValue.toString() !=""){
		checkParams(paramName, infoValue, otherValue )
	}
	else{
		if (infoValue != null && infoValue != "null") logError(paramName, infoValue, otherValue )
	}
}
// .А_ВА_06 Формирование подсказок для графика обслуживания длинных рецептов
def getNote(String periodType, Boolean isCompleted, Boolean isAllowed, String codeLLO, def types, String douseTitle){
	note=[ title : null , text : null , type : "other"]
	found=false
	if(isCompleted ){
		note.title="Препарат получен"
		note.type="success"
		found=true
	}
	else{
		//log.info periodType
		if(isAllowed ){
			switch(codeLLO) {
				case "inprogress":
					note.title="Ожидается поступление препарата"
					note.type="wait"
					found=true
					break
				case "delivered":
					note.title="Препарат поступил в аптеку"
					note.type="delivered"
					found=true
					break
				case "active":
					note.title="Получите "+douseTitle
					note.type="normal"
					found=true
					break
				default:
					break
			}
		}
		else{
			if(codeLLO == "active" && periodType == "currentPeriod"){
				note.title="Обслуживание не возможно"
				note.text="Обратитесь к выписавшему врачу"
				note.type="error"
				found=true
			}
			if(periodType == "pastPeriod"){
				note.title="Просрочен"
				note.type="expired"
				found=true
			}
		}
	}
	if (!found){
		n= i >0 ? i-1 : 0
		if(i > 0 &&  types[n] == "error"){
			note.title="Обслуживание не возможно"
			note.type="errorOnFuture"
		}
		else{
			if(periodType == "futurePeriod" ){
				note.title=douseTitle
				note.type="normalOnFuture"
			}
		}
	}
	return note
}

def date = new Date()
def sdf = new SimpleDateFormat("yyyy-MM-dd")
def currentDateString=sdf.format(date)
currentDate=sdf.parse(currentDateString)
oms=testRunner.testCase.getPropertyValue("oms")
log.info "Проверяю рецепт номер "+pInfo.number+" пациента с омс =  "+oms
// проверка number
checkParams("number", pInfo.number,pLLO.prescriptionNumber.toString())

//проверка type
checkOptionalParams("type", pInfo.type, pLLO.prescriptionType.toString() )

// проверка medicine
medInfo=pInfo.medicine
medLLO=pLLO.medicine
if(medLLO.toString() !=""){
	//проверка rp
	checkOptionalParams("rp" , medInfo.rp, medLLO.rp.toString())
	//проверка medicineRus
	checkOptionalParams("medicineRus" , medInfo.medicineRus, medLLO.medicineRus.toString())
	//проверка qty
	checkOptionalParams("qty" , medInfo.qty, medLLO.qty.toString())
	//проверка dosage
	checkOptionalParams("dosage" , medInfo.dosage, medLLO.dosage.toString())
	//проверка usage
	checkOptionalParams("usage" , medInfo.usage, medLLO.usage.toString())
	//проверка usageDetails
	if(medLLO.usageDetails.toString() !=""){
		udInfo=medInfo.usageDetails
		udLLO=medLLO.usageDetails
		// проверить couponMethod
		checkOptionalParams("couponMethod" , udInfo.couponMethod, udLLO.couponMethod.toString())
		// проверить couponLength
		checkOptionalParams("couponLength" , udInfo.couponLength.toString(), udLLO.couponLength.toString())
		// проверить couponPerDay
		checkOptionalParams("couponPerDay" , udInfo.couponPerDay.toString(), udLLO.couponPer_day.toString())
		// проверить couponDose
		checkOptionalParams("couponDose" , udInfo.couponDose, udLLO.couponDose.toString())
		// проверить couponUnit
		checkOptionalParams("couponUnit" , udInfo.couponUnit, udLLO.couponUnit.toString())
	}
	else{
		if (medInfo.usageDetails.toString() != "{}") logError("usageDetails", medInfo.usageDetails, medLLO.usageDetails )
	}
}
else{
	if (medInfo != null) logError("medicine", medInfo, medLLO )
}

// проверка issuedBy
issuedByInfo=pInfo.issuedBy
issuedByLLO=pLLO.issuedBy
if(issuedByLLO.toString() !=""){
	// проверить organizationStamp
	checkOptionalParams("organizationStamp" , issuedByInfo.organizationStamp, issuedByLLO.organizationStamp.toString())
	// проверить doctorName
	checkOptionalParams("doctorName" , issuedByInfo.doctorName, issuedByLLO.doctorName.toString())
}
else{
	if (medInfo != null) logError("issuedBy", issuedByInfo, issuedByLLO )
}

//проверка registrationDate
checkOptionalParams("registrationDate", pInfo.registrationDate.toString(), pLLO.registrationDate.toString().split("T")[0] )

//проверка expirationDate
checkOptionalParams("expirationDate", pInfo.expirationDate.toString(), pLLO.expirationDate.toString().split("T")[0] )
def expDate
//проверка daysLeft
if(pLLO.expirationDate.toString() != ""){
	expDateString=pLLO.expirationDate.toString().split("T")[0]
	expDate=sdf.parse(expDateString)
	if(expDate >= currentDate){
		long milliseconds = expDate.getTime()-currentDate.getTime()
		dif = milliseconds / (24 * 60 * 60 * 1000)+1
		checkOptionalParams("daysLeft", pInfo.daysLeft, dif )
	}
	else{
		checkOptionalParams("daysLeft", pInfo.daysLeft, null )
	}
}
else checkParams("daysLeft", pInfo.type,null)
//проверка term
checkOptionalParams("term", pInfo.term, pLLO.prescriptionTerm.toString() )

//проверка prohibited
checkOptionalParams("prohibited", pInfo.prohibited, pLLO.prohibited.toBoolean() )

// проверка state
code=pInfo.state.code
title=pInfo.state.title
codeLLO=pLLO.prescriptionState.toString()
if( codeLLO != ""){
	checkOptionalParams("state.code", code, codeLLO )
	switch(code) {
		case "active":
			checkOptionalParams("state.title", title, "Действующий" )
			break
		case "inprogress":
			checkOptionalParams("state.title", title, "Ожидается поступление в аптеку" )
			break
		case "delivered":
			checkOptionalParams("state.title", title, "Препарат поступил в аптеку" )
			break
		case "completed":
			checkOptionalParams("state.title", title, "Обслужен" )
			break
		case "expired":
			checkOptionalParams("state.title", title, "Просрочен" )
			break
		default:
			testRunner.fail("Для значения параметра state.code = "+code+" нет значения маппинга параметра state.title")
			break
	}
}
// проверка отсутствия pharmacy
checkOptionalParams("pharmacy", pInfo.pharmacy, null )

//проверка QRstring
checkOptionalParams("QRstring", pInfo.qRstring, pLLO.QRstring.toString() )

// проверка state
codeCT=pInfo.controlType.code
titleCT=pInfo.controlType.title
controlTypeLLO=pLLO.controlType.toString()
if( codeLLO != ""){
	checkOptionalParams("controlType.code", codeCT, controlTypeLLO )
	switch(codeCT) {
		case "narcotic":
			checkOptionalParams("controlType.title", titleCT, "Наркотический лекарственный препарат, недоступен для бронирования" )
			break
		case "drastic":
			checkOptionalParams("controlType.title", titleCT, "Сильнодействующий лекарственный препарат, недоступен для бронирования" )
			break
		case "devices":
			checkOptionalParams("controlType.title", titleCT, "Изделие медицинского назначения, недоступно для бронирования" )
			break
		case "normal":
			checkOptionalParams("controlType.title", titleCT, null )
			break
		default:
			testRunner.fail("Для значения параметра controlType.code = "+codeCT+" нет значения маппинга параметра controlType.title")
			break
	}
}

// проверка serviceMessage
smLLO=pLLO.recipeService.serviceMessage
smInfo=pInfo.serviceMessage
//log.info smLLO.toString()
if(smLLO.toString() != ""){
	checkOptionalParams("serviceMessage.title", smInfo.title, smLLO.title.toString() )
	checkOptionalParams("serviceMessage.text", smInfo.text, smLLO.details.toString() )
	switch(smLLO.colorMark.toString()) {
		case "no_info":
			checkOptionalParams("serviceMessage.type", smInfo.type, "info" )
			break
		case "ok":
			if(code == "delivered") checkOptionalParams("serviceMessage.type", smInfo.type, "delivered" )
			else checkOptionalParams("serviceMessage.type", smInfo.type, "success" )
			break
		case "warning":
			checkOptionalParams("serviceMessage.type", smInfo.type, "wait" )
			break
		case "alert":
			checkOptionalParams("serviceMessage.type", smInfo.type, "error" )
			break
		case "infо":
			checkOptionalParams("serviceMessage.type", smInfo.type, "other" )
			break
		case "other":
			checkOptionalParams("serviceMessage.type", smInfo.type, "other" )
			break
		default:
			checkOptionalParams("serviceMessage.type", smInfo.type, "other" )
			break
	}
}
else{
	checkOptionalParams("serviceMessage", smInfo, null )
}

// проверка recipeService
rsLLO=pLLO.recipeService
rsInfo=pInfo.recipeService
if(rsLLO.toString() != "" ){
	checkParams("recipeService.periodsQty", rsInfo.periodsQty.toString(),rsLLO.periodsQty.toString())
	checkOptionalParams("recipeService.periodicity", rsInfo.periodicity.toString(),rsLLO.periodicity.toString())
	checkOptionalParams("recipeService.periodicityUnit", rsInfo.periodicityUnit,rsLLO.periodicityUnit.toString())
	//проверка firstOpenPeriodNumber
	def number
	spLLO=rsLLO.servicePeriod
	spInfo=rsInfo.servicePeriod
	if(code=="inprogress" ||  code=="delivered"){
		for(int i=0; i<spLLO.size(); i++){
			if(spLLO[i].isAllowed.toBoolean() ){
				number=spLLO[i].periodNumber.toInteger()
				break
			}
		}
	}
	else{
		found=false
		for(int i=0; i<spLLO.size(); i++){
			d1=spLLO[i].periodTerm.start.toString()
			d2=spLLO[i].periodTerm.end.toString()
			start=sdf.parse(d1)
			end=sdf.parse(d2)
			if(start <= currentDate && end >= currentDate ){
				number=spLLO[i].periodNumber.toInteger()
				found=true
				break
			}
		}
		if(!found) number = null
	}
	checkOptionalParams("recipeService.firstOpenPeriodNumber", rsInfo.firstOpenPeriodNumber,number)
	// проверка servicePeriod
	types=[]
	for(int i=0; i<spLLO.size(); i++){
		param="recipeService.servicePeriod"
		d1=spLLO[i].periodTerm.start.toString()
		d2=spLLO[i].periodTerm.end.toString()
		start=sdf.parse(d1)
		end=sdf.parse(d2)
		String periodType
		if ( end < currentDate ) periodType="pastPeriod"
		if ( start <= currentDate && end >= currentDate ) periodType="currentPeriod"
		if ( start > currentDate ) periodType="futurePeriod"
		checkParams(param+".periodNumber", spInfo[i].periodNumber.toString(),spLLO[i].periodNumber.toString())
		checkParams(param+".drugAmount", spInfo[i].drugAmount.toString(),spLLO[i].drugAmount.toString())
		checkOptionalParams(param+".periodTerm.start", spInfo[i].periodTerm.startDate.toString(),spLLO[i].periodTerm.start.toString())
		checkOptionalParams(param+".periodTerm.end", spInfo[i].periodTerm.endDate.toString(),spLLO[i].periodTerm.end.toString())
		checkOptionalParams(param+".isCompleted", spInfo[i].isCompleted,spLLO[i].isCompleted.toBoolean())
		checkOptionalParams(param+".isAllowed", spInfo[i].isAllowed,spLLO[i].isAllowed.toBoolean())
		// .А_ВА_06 Формирование подсказок для графика обслуживания длинных рецептов
		if(rsLLO.periodsQty.toInteger() >1 ){
			//log.info "periodsQty "+ rsLLO.periodsQty.toInteger()
			douseTitle=rsLLO.periodDrugAmount.toString()+" "+medLLO.usageDetails.couponUnit.toString()
			note=getNote(periodType, spLLO[i].isCompleted.toBoolean(),spLLO[i].isAllowed.toBoolean(),codeLLO,types,douseTitle)
			types << note.type
			//log.info note
			checkOptionalParams(param+".note.title", spInfo[i].note.title, note.title)
			checkOptionalParams(param+".note.text", spInfo[i].note.text, note.text)
			checkOptionalParams(param+".note.type", spInfo[i].note.type, note.type)
			checkParams(param+".periodType", spInfo[i].periodType,periodType)
		}
		else{ 
			checkOptionalParams(param+".note", spInfo[i].note, null)
			checkOptionalParams(param+".periodType", spInfo[i].periodType,null)
		}
		// проверка serviceCase
		scLLO=spLLO[i].serviceCase
		scInfo=spInfo[i].serviceCase
		param2=param+".serviceCase"
		if( scLLO.toString() != ""){
			countLLO=scLLO.size()
			countInfo=scInfo.size()
			checkParams(param2+"(количество элементов)", countInfo,countLLO)
			for(int k=0; k<countLLO; k++){
				checkParams(param2+".saleDate", scInfo[k].saleDate.toString(),scLLO[k].saleDate.toString())
				if( scLLO[k].pharmacy.toString() != ""){
					checkParams(param2+".pharmacy.title", scInfo[k].pharmacy.title, scInfo[k].pharmacy.title.toString())
					checkParams(param2+".pharmacy.ident", scInfo[k].pharmacy.ident, scInfo[k].pharmacy.ident.toString())
					checkOptionalParams(param2+".pharmacy.address", scInfo[k].pharmacy.address, scInfo[k].pharmacy.address.toString())
					if( scLLO[k].pharmacy.phone.toString() != ""){
						for(int g=0; g< scLLO[k].pharmacy.phone.size(); g++){
							checkOptionalParams(param2+".pharmacy.phone", scInfo[k].pharmacy.phone[g], scInfo[k].pharmacy.phone[g].toString())
						}
					}
					else checkOptionalParams(param2+".pharmacy.phone", scInfo[k].pharmacy.phone, null)
				}
				else checkOptionalParams(param2+".pharmacy", scInfo[k].pharmacy, null)
				for(int g=0; g< scLLO[k].drugSold.size(); g++){
					checkOptionalParams(param2+".drugSold.fullTradeName", scInfo[k].drugSold[g].fullTradeName, scInfo[k].drugSold[g].fullTradeName.toString())
					checkOptionalParams(param2+".drugSold.packQty", scInfo[k].drugSold[g].packQty, scInfo[k].drugSold[g].packQty.toInteger())
				}
				if( scLLO[k].booking.toString() != ""){
					checkParams(param2+".booking.title", scInfo[k].booking.title, scInfo[k].booking.title.toString())
					checkParams(param2+".booking.ident", scInfo[k].booking.ident, scInfo[k].booking.ident.toString())
					checkOptionalParams(param2+".booking.address", scInfo[k].booking.address, scInfo[k].booking.address.toString())
					if( scLLO[k].booking.phone.toString() != ""){
						for(int g=0; g< scLLO[k].booking.phone.size(); g++){
							checkOptionalParams(param2+".booking.phone", scInfo[k].booking.phone[g], scInfo[k].booking.phone[g].toString())
						}
					}
					else checkOptionalParams(param2+".booking.phone", scInfo[k].booking.phone, null)
				}
				else checkOptionalParams(param2+".booking", scInfo[k].booking, null)
			}
		}
		else checkOptionalParams(param+".serviceCase", scInfo, [])
	}
}
else checkOptionalParams("recipeService", rsInfo, null )

// проверка bookingAvailable
options=pLLO.options
baLLO= options.entry.find{ it.'@key' == "get_booking_availability"}.toBoolean()
checkOptionalParams("bookingAvailable", pInfo.bookingAvailable, baLLO )

// проверка drugAvailabilityСheck
drugAvailabilityCheck=false
if( expDate >= currentDate && pLLO.prescriptionType.toString() == "benefit" && codeLLO=="active") drugAvailabilityCheck=true
checkOptionalParams("drugAvailabilityCheck", pInfo.drugAvailabilityCheck, drugAvailabilityCheck )
]]></script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>n</con:name><con:value>59</con:value></con:property><con:property><con:name>number</con:name><con:value>01Э4519357971</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>prescriptionNumber</con:name><con:value/></con:property></con:properties></con:testSuite><con:testSuite id="8026b6d7-5c42-4f74-b160-170998ce8535" name="GET aggregators v2"><con:description>TestSuite generated for REST Service [http://emiasinfo-application.test.emias.mos.ru]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="aa473fd1-91de-4483-9320-be027ff2fa38" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение списка агрегаторов. Основной алгоритм _ID202102" searchProperties="true"><con:description>TestCase generated for REST Resource [Aggregators] located at [/api/v2/prescription/aggregators]</con:description><con:settings/><con:testStep type="restrequest" name="GET aggregators" id="587efc54-8b31-4e62-b380-4e6bbff0f4bf"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/aggregators" methodName="get aggregators" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET aggregators" id="139a4271-83b7-4084-a4ec-e0dffb240875" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/aggregators</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5e24b145-4b7e-4d1b-aec3-c6be57e96b8c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a84588fe-15cd-4ad1-b6c6-03a9a706c091" name="в ответе не пустой список аггрегаторов"><con:configuration><path>$.payload.aggregator[*]</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" name="piPharmacyAuxiliary" id="de939fcb-18b6-4da5-923b-09b8297097d1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piPharmacyAuxiliary</con:operation><con:request name="piPharmacyAuxiliary" id="ace78049-9735-48af-be00-dfcd453c43e8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>\r
      <typ:piPharmacyAuxiliaryRequest>\r
         <typ:ident>${#TestSuite#ident}</typ:ident>\r
      </typ:piPharmacyAuxiliaryRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="b5536cb8-5561-4651-acd3-f9b41bbb0bbd"/><con:assertion type="SOAP Fault Assertion" id="f68af56b-9cb1-4c77-ba24-de5e92c3dcca"/><con:assertion type="Valid HTTP Status Codes" id="d831049f-5ef5-4f19-b835-991157fe762a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="967673a2-1625-4a45-841a-881d701a6537" name="В ответе есть хотя бы 1 agregator"><con:configuration><token>agregator</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Сравнение piPharmacyAuxiliary и aggregators" id="d45bafdc-8b32-4942-96fa-8093ba463bcf"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

//получить ответ GET aggregators и спарсить
def getAggregatorsResponse = context.expand('${GET aggregators#Response}')
def slurperJson = new JsonSlurper()
aggregators = slurperJson.parseText(getAggregatorsResponse)

//получить ответ piPharmacyAuxiliary и спарсить
def getAggregatorsXMLResponse = context.expand('${piPharmacyAuxiliary#Response}')
aggregatorsXML = new XmlSlurper().parseText(getAggregatorsXMLResponse)

//записать все аггрегаторы и их количество
aggregatorsLLO=aggregatorsXML.Body.piPharmacyAuxiliaryResponse.agregator
lloSize=aggregatorsLLO.size()
aggregatorsINFO=aggregators.payload.aggregator
infoSize=aggregatorsINFO.size()

//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize!=infoSize){
	errorText="В методе GET aggregators возвращено "+infoSize+" элементов, а в методе piPharmacyAuxiliary - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
for(int i=0; i<lloSize; i++){
	if( aggregatorsINFO[i].shortName!=aggregatorsLLO[i].shortName.toString()){
		errorText="В ответе GET aggregators  у элемента "+i+" значение параметра shortName= "+ aggregatorsINFO[i].shortName+", а в методе piPharmacyAuxiliary  значение параметра shortName= "+ aggregatorsLLO[i].shortName
		errorsList << errorText
		errors=errors+1
	}
		if( aggregatorsINFO[i].bookingLink!=aggregatorsLLO[i].bookingLink.toString()){
		errorText="В ответе GET aggregators  у элемента "+i+" значение параметра bookingLink= "+ aggregatorsINFO[i].bookingLink+", а в методе piPharmacyAuxiliary  значение параметра bookingLink= "+ aggregatorsLLO[i].bookingLink
		errorsList << errorText
		errors=errors+1
	}
	if(aggregatorsLLO[i].website.toString() != ""){
		if( aggregatorsINFO[i].website!=aggregatorsLLO[i].website.toString()){
			errorText="В ответе GET aggregators  у элемента "+i+" значение параметра website= "+ aggregatorsINFO[i].website+", а в методе piPharmacyAuxiliary  значение параметра website= "+ aggregatorsLLO[i].website
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(aggregatorsINFO[i].website != null){
			errorText="В ответе GET aggregators  у элемента "+i+" значение параметра website= "+ aggregatorsINFO[i].website+", а в методе piPharmacyAuxiliary  значение параметра website= "+ aggregatorsLLO[i].website
			errorsList << errorText
			errors=errors+1
		}
	}
	if(aggregatorsLLO[i].logo.toString() != ""){
		if( aggregatorsINFO[i].logo!=aggregatorsLLO[i].logo.toString()){
			errorText="В ответе GET aggregators  у элемента "+i+" значение параметра logo= "+ aggregatorsINFO[i].logo+", а в методе piPharmacyAuxiliary  значение параметра logo= "+ aggregatorsLLO[i].logo
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(aggregatorsINFO[i].logo != null){
			errorText="В ответе GET aggregators  у элемента "+i+" значение параметра logo= "+ aggregatorsINFO[i].logo+", а в методе piPharmacyAuxiliary  значение параметра logo= "+ aggregatorsLLO[i].logo
			errorsList << errorText
			errors=errors+1
		}
	}
}

//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}
]]></script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>ident</con:name><con:value>EMIASINFO</con:value></con:property></con:properties></con:testSuite><con:testSuite id="25b52234-cadd-43a7-9c30-7f5745a0978b" name="GET aggregators v3"><con:description>TestSuite generated for REST Service [http://emiasinfo-application.test.emias.mos.ru]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="5de304fd-3d9b-49c1-ab53-db2990be7b96" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение списка агрегаторов. Основной алгоритм _ID278008" searchProperties="true"><con:description>TestCase generated for REST Resource [Aggregators] located at [/api/v2/prescription/aggregators]</con:description><con:settings/><con:testStep type="restrequest" name="GET aggregators" id="681b693b-ef6c-4ba4-aa3e-eb34755c739b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/aggregators" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET aggregators" id="0598e2e1-ec59-4f9f-882a-12a6cb60574a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/prescription/aggregators</con:originalUri><con:assertion type="Simple Contains" id="d6564435-e3db-44fd-996a-a07efb4d347f" name="Contains"><con:configuration><token>aggregator</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="0008bfd5-a765-47f1-a702-1522ae400f22" name="Not Contains"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" id="5fe45c7e-87c8-4a20-ae3e-df07b547ded6" name="piPharmacyAuxiliaryNew"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piPharmacyAuxiliaryNew</con:operation><con:request name="piPharmacyAuxiliaryNew" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="6799d81b-e989-4658-8e2a-b1696f945189"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>\r
      <typ:piPharmacyAuxiliaryNewRequest>\r
         <typ:ident>${#TestSuite#ident}</typ:ident>\r
      </typ:piPharmacyAuxiliaryNewRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="6f227305-4cf3-4624-af79-aed0b05913d2" name="SOAP Response"/><con:assertion type="Simple Contains" id="bc7a10fa-07a6-4c43-9b23-08b432172c74" name="Contains"><con:configuration><token>agregator</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="bcf3b971-d9e4-4673-82b9-f09943378a71" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="piPharmacyAuxiliaryNew"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Сравнение piPharmacyAuxiliaryNew и aggregators" id="8d7d7c4f-db4d-46ac-9c7c-fe130bcc5df5"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

//получить ответ GET aggregators и спарсить
def getAggregatorsResponse = context.expand('${GET aggregators#Response}')
def slurperJson = new JsonSlurper()
aggregators = slurperJson.parseText(getAggregatorsResponse)

//получить ответ piPharmacyAuxiliaryNew и спарсить
def getAggregatorsXMLResponse = context.expand('${piPharmacyAuxiliaryNew#Response}')
aggregatorsXML = new XmlSlurper().parseText(getAggregatorsXMLResponse)

//записать все аггрегаторы и их количество
aggregatorsLLO=aggregatorsXML.Body.piPharmacyAuxiliaryNewResponse.agregator
lloSize=aggregatorsLLO.size()
aggregatorsINFO=aggregators.payload.aggregator
infoSize=aggregatorsINFO.size()

//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize!=infoSize){
	errorText="В методе GET aggregators возвращено "+infoSize+" элементов, а в методе piPharmacyAuxiliaryNew - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
for(int i=0; i<lloSize; i++){
	if( aggregatorsINFO[i].shortName!=aggregatorsLLO[i].shortName.toString()){
		errorText="В ответе GET aggregators  у элемента "+i+" значение параметра shortName= "+ aggregatorsINFO[i].shortName+", а в методе piPharmacyAuxiliaryNew  значение параметра shortName= "+ aggregatorsLLO[i].shortName
		errorsList << errorText
		errors=errors+1
	}
		if( aggregatorsINFO[i].bookingLink!=aggregatorsLLO[i].bookingLink.toString()){
		errorText="В ответе GET aggregators  у элемента "+i+" значение параметра bookingLink= "+ aggregatorsINFO[i].bookingLink+", а в методе piPharmacyAuxiliaryNew  значение параметра bookingLink= "+ aggregatorsLLO[i].bookingLink
		errorsList << errorText
		errors=errors+1
	}
	if(aggregatorsLLO[i].website.toString() != ""){
		if( aggregatorsINFO[i].website!=aggregatorsLLO[i].website.toString()){
			errorText="В ответе GET aggregators  у элемента "+i+" значение параметра website= "+ aggregatorsINFO[i].website+", а в методе piPharmacyAuxiliaryNew  значение параметра website= "+ aggregatorsLLO[i].website
			errorsList << errorText
			errors=errors+1
		}
	}
	if(aggregatorsLLO[i].logo.toString() != ""){
		if( aggregatorsINFO[i].logo!=aggregatorsLLO[i].logo.toString()){
			errorText="В ответе GET aggregators  у элемента "+i+" значение параметра logo= "+ aggregatorsINFO[i].logo+", а в методе piPharmacyAuxiliaryNew  значение параметра logo= "+ aggregatorsLLO[i].logo
			errorsList << errorText
			errors=errors+1
		}
	}
	if(aggregatorsLLO[i].isBooking.toString() != ""){
		if( aggregatorsINFO[i].isBooking!=aggregatorsLLO[i].isBooking.toString()){
			errorText="В ответе GET aggregators  у элемента "+i+" значение параметра isBooking= "+ aggregatorsINFO[i].isBooking+", а в методе piPharmacyAuxiliaryNew  значение параметра isBooking= "+ aggregatorsLLO[i].isBooking
			errorsList << errorText
			errors=errors+1
		}
	}
}

//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}

]]></script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>ident</con:name><con:value>EMIASINFO</con:value></con:property></con:properties></con:testSuite><con:testSuite id="f8e3ff13-1460-4b94-bd0b-5b374bbb6fb3" name="GET order"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="98a03a14-ab41-46c9-afac-af7bf1c2cec7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. HasMark=true, state.code = completed" searchProperties="true" disabled="true"><con:settings/><con:testStep type="jdbc" name="Получение order_id(hasMark=true)" id="79974a8e-72b0-468a-a621-6b27066f6e1b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString>${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT ORD_ID FROM
(SELECT DRUG_ORDER_ITEM.ORDER_ID AS ORD_ID from DRUG_ORDER_ITEM inner join DRUG_ORDER ON DRUG_ORDER_ITEM.ORDER_ID = DRUG_ORDER.ID 
INNER JOIN SERVICE_RATE ON DRUG_ORDER_ITEM.ORDER_ID = SERVICE_RATE.ORDER_ID WHERE STORAGE_CONDITION is not NULL AND DRUG_ORDER.LINK is not null
AND DRUG_ORDER.FINAL_STATUS = :completed
ORDER BY dbms_random.value)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="7f152946-2611-4ca8-9ec3-5471d36321cb" name="JDBC Status"/><con:properties><con:property><con:name>completed</con:name><con:value>152</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Запись orderId" id="4943286d-f95f-4291-bba3-fd60c31ba348"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>order_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id(hasMark=true)</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>orderID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>order_id to project</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id(hasMark=true)</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>order_id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получение patientId" id="99b8b86d-25bf-4d8e-bbd1-da42103a15c3"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString>${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_EMIAS_ID FROM DRUG_ORDER WHERE ID = ${#TestCase#orderID}</con:query><con:assertion type="JDBC Status" id="dc86c34b-36a4-4222-9d4c-48189ed9900d" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись patientId" id="054bad58-7261-4429-b8b5-28746f133509"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId</con:sourceStep><con:sourcePath>//PATIENT_EMIAS_ID[1]</con:sourcePath><con:targetType>PatientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Поиск ОМС" id="5590699e-ffe6-46de-8fff-f1b67f4bf10f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, BIRTH_DATE FROM PATIENT WHERE PATIENT_ID = ${#TestCase#PatientId}</con:query><con:assertion type="JDBC Status" id="b15e345c-1161-4c45-af61-829381038fe2" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Запись ОМС" id="edd93847-5a3a-4e66-82a9-f74c84b26e6b"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Поиск ОМС#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 3
}

</script></con:config></con:testStep><con:testStep type="request" name="PIGetDrugOrders" id="6b59cdb7-ebfb-46bb-a74e-ae0f105e2458"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetDrugOrders</con:operation><con:request name="PIGetDrugOrders" id="6bc166b8-3c36-466a-af9a-d03407d3e2e0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
<soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetDrugOrdersRequest>
         <typ:ident>EMIASINFO</typ:ident>
         <!--Optional:-->
         <typ:oms>${#TestCase#oms}</typ:oms>
      </typ:piGetDrugOrdersRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" id="7a0a2a4f-3830-4aa0-8b8b-5a4985a8ea80" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1e3cfbef-5428-4b41-adc4-cea5706012bc" name="В ответе есть заказ"><con:configuration><token>order</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="piGetMarkPharmacy" id="75d83789-8a2d-4325-bff8-2edd50ee2f94"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetMarkPharmacy</con:operation><con:request name="piGetMarkPharmacy" id="a7b15e01-57d1-4f05-af36-8c15089e710b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
  <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetMarkPharmacyRequest>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:markedObject>
            <!--Optional:-->
            <typ:orderID>${#TestCase#OrderID}</typ:orderID>
         </typ:markedObject>
      </typ:piGetMarkPharmacyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dabc3b0c-1144-4c76-8b65-d91aeaad57f4"/><con:assertion type="Simple Contains" id="8a2291b9-9a71-4520-bd93-a2554c8fb950" name="В ответе есть оценка"><con:configuration><token>mark</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getOrder" id="af4cb72a-2432-4b86-a8bf-0b04c7bca757"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" methodName="Method 1" resourcePath="/api/v3/prescription/order/{orderId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getOrder" id="e3e1fe49-03fc-454c-92a9-dd4a18c74dc4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/42</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="246a2b37-68a6-49ed-8f91-4748472ac04f" name="Valid HTTP Status Code 200"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cf18678-cf7e-4f7d-bf0b-118a5ce1adea" name="Содержит корректный orderId"><con:configuration><path>$.payload.orderId</path><content>${#TestCase#orderID}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="127973ac-807d-4d02-b710-f6ed34e0b8d4"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter

//JSON Slurper
def orderResponse = context.expand('${getOrder#Response}')
def slurperJson = new JsonSlurper()
def getOrder = slurperJson.parseText(orderResponse)

//XML Slurper
def PIGetDrugOrdersResponse = context.expand('${PIGetDrugOrders#Response}')
PIGetDrugOrders = new XmlSlurper().parseText(PIGetDrugOrdersResponse)

def piGetMarkPharmacyResponse = context.expand('${piGetMarkPharmacy#Response}')
piGetMarkPharmacy = new XmlSlurper().parseText(piGetMarkPharmacyResponse)

//Подсчет количества order
suppOrderCount =PIGetDrugOrders.Body.piGetDrugOrdersResponse.order ?  PIGetDrugOrders.Body.piGetDrugOrdersResponse.order.size(): 0
log.info suppOrderCount

suppOrder=PIGetDrugOrders.Body.piGetDrugOrdersResponse.order
infoOrder=getOrder.payload


//Поиск необходимого order
for (int i=0; i&lt;suppOrderCount; i++){
	suppOrderN =suppOrder[i].orderID.toString()
	if (suppOrderN == testRunner.testCase.getPropertyValue("orderID")){
		numOrder = i
		break
	}
}

//////////////////////Обязательные параметры//////////////////////
//Проверка QR кода
suppQR =suppOrder.QRCode[numOrder].toString()
infoQR =infoOrder.qRCode.toString()
assert  suppQR==infoQR

//Проверка aggregator.name
suppAggregatorName =suppOrder.agregatorName[numOrder].toString()
infoAggregatorName =infoOrder.aggregator.name.toString()
assert  suppAggregatorName==infoAggregatorName

//Проверка orderNumber
suppOrderNumber =suppOrder[numOrder].externalID.toString()
infoOrderNumber =infoOrder.orderNumber.toString()
assert  suppOrderNumber==infoOrderNumber

//Проверка createDate
suppCreateDate =suppOrder[numOrder].createDate.toString()
suppCreateDate = suppCreateDate
infoCreateDate =infoOrder.createDate.toString()
assert  suppCreateDate==infoCreateDate

//Проверка state.code
suppStateCode =suppOrder[numOrder].statusCode.toString()
infoStateCode =infoOrder.state.code.toString()
assert  suppStateCode==infoStateCode

////Проверка state.name
suppStateCode =suppOrder[numOrder].statusCode.toString()
if (suppStateCode == "cancelled"){
	suppStateName = "Отменён"
}
if (suppStateCode == "completed"){
	suppStateName = "Исполнен"
}
if (suppStateCode == "executed"){
	suppStateName = "В работе"
}
infoStateName =infoOrder.state.name.toString()
assert  suppStateName==infoStateName

//Количество prescription(JSON - drug)
suppOrderDrugCount =suppOrder[numOrder].prescription ?  suppOrder[numOrder].prescription.size(): 0

//Провека каждого prescription (JSON - drug)
for (int j=0; j&lt;suppOrderDrugCount; j++){
	//Проверка title
	suppDrugTitle =suppOrder[numOrder].prescription.drug[j].title.toString()
	infoDrugTitle =infoOrder.drugs[j].title.toString()
	log.info infoDrugTitle
	log.info suppDrugTitle
	assert  suppDrugTitle==infoDrugTitle

	//Проверка qty
	suppQty =suppOrder[numOrder].prescription.drug[j].qty.toString()
	infoQty =infoOrder.drugs[j].qty.toString()
	assert  suppQty==infoQty

	//Проверка prescriptionNumber
	suppPrescriptionNumber =suppOrder[numOrder].prescription[j].prescriptionNumber.toString()
	infoPrescriptionNumber =infoOrder.drugs[j].prescriptionNumber.toString()
	assert  suppPrescriptionNumber==infoPrescriptionNumber

	//Проверка prescriptionType.code
	suppPrescriptionTypeCode =suppOrder[numOrder].prescription[j].type.toString()
	infoPrescriptionTypeCode =infoOrder.drugs[j].prescriptionType.code.toString()
	assert  suppPrescriptionTypeCode==infoPrescriptionTypeCode

	////Проверка prescriptionType.name
	suppPrescriptionTypeCode =suppOrder[numOrder].prescription[j].type.toString()
	if (suppPrescriptionTypeCode == "benefit"){
		suppPrescriptionTypeName = "Льготный"
	}
	if (suppPrescriptionTypeCode == "commercial"){
		suppPrescriptionTypeName = "За полную стоимость"
	}
	infoPrescriptionTypeName =infoOrder.drugs[j].prescriptionType.name.toString()
	assert  suppPrescriptionTypeName==infoPrescriptionTypeName
}

//////////////////////Необязательные параметры//////////////////////
def checkParams(s,j){
	if (s=="" &amp; j=="null"){
		return false 
	}
	else{
		return true
	}
}

//Проверка aggregator.link
suppAggregatorLink =suppOrder[numOrder].link.toString()
infoAggregatorLink =infoOrder.aggregator.link.toString()
if (checkParams(suppAggregatorLink,infoAggregatorLink)){
	assert  suppAggregatorLink==infoAggregatorLink
	}
else{
	log.info "Параметра link не обнаружено"
}

//Проверка drug.drugId
for (int j=0; j&lt;suppOrderDrugCount; j++){
suppDrugId =suppOrder[numOrder].prescription.drug[j].drugID.toString()
infoDrugId =infoOrder.drugs[j].drugId.toString()
if (checkParams(suppDrugId,infoDrugId)){
	assert  suppDrugId==infoDrugId
	}
else{
	log.info "Параметра drugId не обнаружено"+" " + "drug = "+j
}
//Проверка drug.amount
suppDrugAmount =suppOrder[numOrder].prescription.drug[j].amount.toString()
infoDrugAmount =infoOrder.drugs[j].amount.toString()
if (checkParams(suppDrugAmount,infoDrugAmount)){
	assert  suppDrugAmount==infoDrugAmount
	}
else{
	log.info "Параметра amount не обнаружено"+" " + "drug = "+j
	}

//Проверка storageCondition
suppDrugStorageCondition =suppOrder[numOrder].prescription.drug[j].storageCondition.toString()
infoDrugStorageCondition =infoOrder.drugs[j].storageCondition.toString()
if (checkParams(suppDrugStorageCondition,infoDrugStorageCondition)){
	assert  suppDrugStorageCondition==infoDrugStorageCondition
	}
else{
	log.info "Параметра storageCondition не обнаружено"+" " + "drug = "+ j
	}
}

if (suppStateCode=="completed"){
	suppMark =piGetMarkPharmacy.Body.piGetMarkPharmacyResponse.mark.toString()
	infoMark =infoOrder.hasMark.toString()
	if (suppMark!=""){
		assert infoMark==true.toString()
	}
	else{
		assert infoMark==false.toString()
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>11272</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>2238373652</con:value></con:property><con:property><con:name>oms</con:name><con:value>7795489734001653</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2015-04-15</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/213806/internal/3/emc-permissions</con:value></con:property><con:property><con:name>code</con:name><con:value>200</con:value></con:property></con:properties></con:testCase><con:testCase id="5c4deda4-788c-47b7-89f3-0fad11cf3025" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. HasMark=false, state.code = completed" searchProperties="true" disabled="true"><con:settings/><con:testStep type="jdbc" name="Получение order_id(hasMark=False)" id="80aa5327-1be0-48a2-a546-d7fb9d49f262"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT ORD_ID FROM
(SELECT DRUG_ORDER_ITEM.ORDER_ID AS ORD_ID from DRUG_ORDER_ITEM inner join DRUG_ORDER ON DRUG_ORDER_ITEM.ORDER_ID = DRUG_ORDER.ID 
LEFT JOIN SERVICE_RATE ON DRUG_ORDER_ITEM.ORDER_ID = SERVICE_RATE.ORDER_ID WHERE STORAGE_CONDITION is not NULL AND DRUG_ORDER.LINK is not null
AND SERVICE_RATE.RATE IS NULL AND DRUG_ORDER.FINAL_STATUS = :completed
ORDER BY dbms_random.value)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="7f152946-2611-4ca8-9ec3-5471d36321cb" name="JDBC Status"/><con:properties><con:property><con:name>completed</con:name><con:value>152</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Запись orderId" id="e44367ef-fa0d-415e-818f-7f84cb1b968b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>order_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id(hasMark=False)</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>orderID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>order_id to project</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id(hasMark=False)</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>order_id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получение patientId" id="1fc1b21b-1177-4470-86ae-fe5963b0a514"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_EMIAS_ID FROM DRUG_ORDER WHERE ID = ${#TestCase#orderID}</con:query><con:assertion type="JDBC Status" id="dc86c34b-36a4-4222-9d4c-48189ed9900d" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись patientId" id="b928c5a7-0a22-4f62-b653-91cb309ed4b7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId</con:sourceStep><con:sourcePath>//PATIENT_EMIAS_ID[1]</con:sourcePath><con:targetType>PatientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Поиск ОМС" id="938f3c44-72ec-4dff-8b1f-5a2e2758501d"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER FROM PATIENT WHERE PATIENT_ID = ${#TestCase#PatientId}</con:query><con:assertion type="JDBC Status" id="b15e345c-1161-4c45-af61-829381038fe2" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Запись ОМС" id="8ccbd311-de31-47a6-8a68-2af07bb61c09"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Поиск ОМС#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 3
}</script></con:config></con:testStep><con:testStep type="request" name="PIGetDrugOrders" id="1c08af8b-45e7-411b-b3bc-3584f9256014"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetDrugOrders</con:operation><con:request name="PIGetDrugOrders" id="6bc166b8-3c36-466a-af9a-d03407d3e2e0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
<soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetDrugOrdersRequest>
         <typ:ident>EMIASINFO</typ:ident>
         <!--Optional:-->
         <typ:oms>${#TestCase#oms}</typ:oms>
      </typ:piGetDrugOrdersRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" id="7a0a2a4f-3830-4aa0-8b8b-5a4985a8ea80" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="piGetMarkPharmacy" id="41b4964b-8232-4bcb-97f6-d63f0ebdef85"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetMarkPharmacy</con:operation><con:request name="piGetMarkPharmacy" id="a7b15e01-57d1-4f05-af36-8c15089e710b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
  <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetMarkPharmacyRequest>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:markedObject>
            <!--Optional:-->
            <typ:orderID>${#TestCase#OrderID}</typ:orderID>
         </typ:markedObject>
      </typ:piGetMarkPharmacyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dabc3b0c-1144-4c76-8b65-d91aeaad57f4"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getOrder" id="48244d9d-8ef7-451b-abce-ab714f7170a8"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" methodName="Method 1" resourcePath="/api/v3/prescription/order/{orderId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getOrder" id="e3e1fe49-03fc-454c-92a9-dd4a18c74dc4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasinfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/42</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="246a2b37-68a6-49ed-8f91-4748472ac04f" name="Valid HTTP Status Code 200"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cf18678-cf7e-4f7d-bf0b-118a5ce1adea" name="Содержит корректный orderId"><con:configuration><path>$.payload.orderId</path><content>${#TestCase#orderID}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="eec8db35-f884-4076-b25a-f28ae68db7f6"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter

//JSON Slurper
def orderResponse = context.expand('${getOrder#Response}')
def slurperJson = new JsonSlurper()
def getOrder = slurperJson.parseText(orderResponse)

//XML Slurper
def PIGetDrugOrdersResponse = context.expand('${PIGetDrugOrders#Response}')
PIGetDrugOrders = new XmlSlurper().parseText(PIGetDrugOrdersResponse)

def piGetMarkPharmacyResponse = context.expand('${piGetMarkPharmacy#Response}')
piGetMarkPharmacy = new XmlSlurper().parseText(piGetMarkPharmacyResponse)

//Подсчет количества order
suppOrderCount =PIGetDrugOrders.Body.piGetDrugOrdersResponse.order ?  PIGetDrugOrders.Body.piGetDrugOrdersResponse.order.size(): 0
log.info suppOrderCount

suppOrder=PIGetDrugOrders.Body.piGetDrugOrdersResponse.order
infoOrder=getOrder.payload


//Поиск необходимого order
for (int i=0; i&lt;suppOrderCount; i++){
	suppOrderN =suppOrder[i].orderID.toString()
	if (suppOrderN == testRunner.testCase.getPropertyValue("orderID")){
		numOrder = i
		break
	}
}

//////////////////////Обязательные параметры//////////////////////
//Проверка QR кода
suppQR =suppOrder.QRCode[numOrder].toString()
infoQR =infoOrder.qRCode.toString()
assert  suppQR==infoQR

//Проверка aggregator.name
suppAggregatorName =suppOrder.agregatorName[numOrder].toString()
infoAggregatorName =infoOrder.aggregator.name.toString()
assert  suppAggregatorName==infoAggregatorName

//Проверка orderNumber
suppOrderNumber =suppOrder[numOrder].externalID.toString()
infoOrderNumber =infoOrder.orderNumber.toString()
assert  suppOrderNumber==infoOrderNumber

//Проверка createDate
suppCreateDate =suppOrder[numOrder].createDate.toString()
suppCreateDate = suppCreateDate
infoCreateDate =infoOrder.createDate.toString()
assert  suppCreateDate==infoCreateDate

//Проверка state.code
suppStateCode =suppOrder[numOrder].statusCode.toString()
infoStateCode =infoOrder.state.code.toString()
assert  suppStateCode==infoStateCode

////Проверка state.name
suppStateCode =suppOrder[numOrder].statusCode.toString()
if (suppStateCode == "cancelled"){
	suppStateName = "Отменён"
}
if (suppStateCode == "completed"){
	suppStateName = "Исполнен"
}
if (suppStateCode == "executed"){
	suppStateName = "В работе"
}
infoStateName =infoOrder.state.name.toString()
assert  suppStateName==infoStateName

//Количество prescription(JSON - drug)
suppOrderDrugCount =suppOrder[numOrder].prescription ?  suppOrder[numOrder].prescription.size(): 0

//Провека каждого prescription (JSON - drug)
for (int j=0; j&lt;suppOrderDrugCount; j++){
	//Проверка title
	suppDrugTitle =suppOrder[numOrder].prescription.drug[j].title.toString()
	infoDrugTitle =infoOrder.drugs[j].title.toString()
	log.info infoDrugTitle
	log.info suppDrugTitle
	assert  suppDrugTitle==infoDrugTitle

	//Проверка qty
	suppQty =suppOrder[numOrder].prescription.drug[j].qty.toString()
	infoQty =infoOrder.drugs[j].qty.toString()
	assert  suppQty==infoQty

	//Проверка prescriptionNumber
	suppPrescriptionNumber =suppOrder[numOrder].prescription[j].prescriptionNumber.toString()
	infoPrescriptionNumber =infoOrder.drugs[j].prescriptionNumber.toString()
	assert  suppPrescriptionNumber==infoPrescriptionNumber
	
	//Проверка prescriptionType.code
	suppPrescriptionTypeCode =suppOrder[numOrder].prescription[j].type.toString()
	infoPrescriptionTypeCode =infoOrder.drugs[j].prescriptionType.code.toString()
	assert  suppPrescriptionTypeCode==infoPrescriptionTypeCode

	////Проверка prescriptionType.name
	suppPrescriptionTypeCode =suppOrder[numOrder].prescription[j].type.toString()
	if (suppPrescriptionTypeCode == "benefit"){
		suppPrescriptionTypeName = "Льготный"
	}
	if (suppPrescriptionTypeCode == "commercial"){
		suppPrescriptionTypeName = "За полную стоимость"
	}
	infoPrescriptionTypeName =infoOrder.drugs[j].prescriptionType.name.toString()
	assert  suppPrescriptionTypeName==infoPrescriptionTypeName
}

//////////////////////Необязательные параметры//////////////////////
def checkParams(s,j){
	if (s=="" &amp; j=="null"){
		return false 
	}
	else{
		return true
	}
}

//Проверка aggregator.link
suppAggregatorLink =suppOrder[numOrder].link.toString()
infoAggregatorLink =infoOrder.aggregator.link.toString()
if (checkParams(suppAggregatorLink,infoAggregatorLink)){
	assert  suppAggregatorLink==infoAggregatorLink
	}
else{
	log.info "Параметра link не обнаружено"
}

//Проверка drug.drugId
for (int j=0; j&lt;suppOrderDrugCount; j++){
suppDrugId =suppOrder[numOrder].prescription.drug[j].drugID.toString()
infoDrugId =infoOrder.drugs[j].drugId.toString()
if (checkParams(suppDrugId,infoDrugId)){
	assert  suppDrugId==infoDrugId
	}
else{
	log.info "Параметра drugId не обнаружено"+" " + "drug = "+j
}
//Проверка drug.amount
suppDrugAmount =suppOrder[numOrder].prescription.drug[j].amount.toString()
infoDrugAmount =infoOrder.drugs[j].amount.toString()
if (checkParams(suppDrugAmount,infoDrugAmount)){
	assert  suppDrugAmount==infoDrugAmount
	}
else{
	log.info "Параметра amount не обнаружено"+" " + "drug = "+j
	}

//Проверка storageCondition
suppDrugStorageCondition =suppOrder[numOrder].prescription.drug[j].storageCondition.toString()
infoDrugStorageCondition =infoOrder.drugs[j].storageCondition.toString()
if (checkParams(suppDrugStorageCondition,infoDrugStorageCondition)){
	assert  suppDrugStorageCondition==infoDrugStorageCondition
	}
else{
	log.info "Параметра storageCondition не обнаружено"+" " + "drug = "+ j
	}
}

if (suppStateCode=="completed"){
	suppMark =piGetMarkPharmacy.Body.piGetMarkPharmacyResponse.mark.toString()
	infoMark =infoOrder.hasMark.toString()
	if (suppMark!=""){
		assert infoMark==true.toString()
	}
	else{
		assert infoMark==false.toString()
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>25663</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>19176323</con:value></con:property><con:property><con:name>oms</con:name><con:value>7758020846000146</con:value></con:property></con:properties></con:testCase><con:testCase id="ee305527-5340-439a-9974-44c82fb5385d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. state.code = executed" searchProperties="true" disabled="true"><con:settings/><con:testStep type="jdbc" name="Получение order_id" id="9555262f-fb92-44bb-b579-633a6dc881d9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT ORD_ID FROM
(SELECT DRUG_ORDER_ITEM.ORDER_ID AS ORD_ID from DRUG_ORDER_ITEM inner join DRUG_ORDER ON DRUG_ORDER_ITEM.ORDER_ID = DRUG_ORDER.ID 
WHERE STORAGE_CONDITION is not NULL AND DRUG_ORDER.LINK is not null
AND DRUG_ORDER.FINAL_STATUS = :executed
ORDER BY dbms_random.value)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="7f152946-2611-4ca8-9ec3-5471d36321cb" name="JDBC Status"/><con:properties><con:property><con:name>executed</con:name><con:value>151</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Запись orderId" id="e627e8bf-f6b3-4512-a08a-c601d0c402f6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>order_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>orderID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>order_id to project</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>order_id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получение patientId" id="8c2bd642-31eb-46a3-b58d-603e48b4682a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_EMIAS_ID FROM DRUG_ORDER WHERE ID = ${#TestCase#orderID}</con:query><con:assertion type="JDBC Status" id="dc86c34b-36a4-4222-9d4c-48189ed9900d" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись patientId" id="fd7a3867-6e03-42b7-882e-dc87f6660f3b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId</con:sourceStep><con:sourcePath>//PATIENT_EMIAS_ID[1]</con:sourcePath><con:targetType>PatientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Поиск ОМС" id="9788c243-c30f-4d98-a3b9-d7df6b53150f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER FROM PATIENT WHERE PATIENT_ID = ${#TestCase#PatientId}</con:query><con:assertion type="JDBC Status" id="b15e345c-1161-4c45-af61-829381038fe2" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Запись ОМС" id="ce5bf97b-cbb3-4fb2-8f3a-2729b6f59737"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Поиск ОМС#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 3
}</script></con:config></con:testStep><con:testStep type="request" name="PIGetDrugOrders" id="cb923f2b-6909-4e7b-83de-f146eef39b47"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetDrugOrders</con:operation><con:request name="PIGetDrugOrders" id="6bc166b8-3c36-466a-af9a-d03407d3e2e0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
<soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetDrugOrdersRequest>
         <typ:ident>EMIASINFO</typ:ident>
         <!--Optional:-->
         <typ:oms>${#TestCase#oms}</typ:oms>
      </typ:piGetDrugOrdersRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" id="7a0a2a4f-3830-4aa0-8b8b-5a4985a8ea80" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getOrder" id="abe8ae60-b2b3-4baf-aa4d-79e911dae044"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" methodName="Method 1" resourcePath="/api/v3/prescription/order/{orderId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getOrder" id="e3e1fe49-03fc-454c-92a9-dd4a18c74dc4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/42</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="246a2b37-68a6-49ed-8f91-4748472ac04f" name="Valid HTTP Status Code 200"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cf18678-cf7e-4f7d-bf0b-118a5ce1adea" name="Содержит корректный orderId"><con:configuration><path>$.payload.orderId</path><content>${#TestCase#orderID}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="19fdc8cd-6143-44ac-a0a3-34579b202081"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter

//JSON Slurper
def orderResponse = context.expand('${getOrder#Response}')
def slurperJson = new JsonSlurper()
def getOrder = slurperJson.parseText(orderResponse)

//XML Slurper
def PIGetDrugOrdersResponse = context.expand('${PIGetDrugOrders#Response}')
PIGetDrugOrders = new XmlSlurper().parseText(PIGetDrugOrdersResponse)

//Подсчет количества order
suppOrderCount =PIGetDrugOrders.Body.piGetDrugOrdersResponse.order ?  PIGetDrugOrders.Body.piGetDrugOrdersResponse.order.size(): 0
log.info suppOrderCount

suppOrder=PIGetDrugOrders.Body.piGetDrugOrdersResponse.order
infoOrder=getOrder.payload


//Поиск необходимого order
for (int i=0; i&lt;suppOrderCount; i++){
	suppOrderN =suppOrder[i].orderID.toString()
	if (suppOrderN == testRunner.testCase.getPropertyValue("orderID")){
		numOrder = i
		break
	}
}

//////////////////////Обязательные параметры//////////////////////
//Проверка QR кода
suppQR =suppOrder.QRCode[numOrder].toString()
infoQR =infoOrder.qRCode.toString()
assert  suppQR==infoQR

//Проверка aggregator.name
suppAggregatorName =suppOrder.agregatorName[numOrder].toString()
infoAggregatorName =infoOrder.aggregator.name.toString()
assert  suppAggregatorName==infoAggregatorName

//Проверка orderNumber
suppOrderNumber =suppOrder[numOrder].externalID.toString()
infoOrderNumber =infoOrder.orderNumber.toString()
assert  suppOrderNumber==infoOrderNumber

//Проверка createDate
suppCreateDate =suppOrder[numOrder].createDate.toString()
suppCreateDate = suppCreateDate
infoCreateDate =infoOrder.createDate.toString()
assert  suppCreateDate==infoCreateDate

//Проверка state.code
suppStateCode =suppOrder[numOrder].statusCode.toString()
infoStateCode =infoOrder.state.code.toString()
assert  suppStateCode==infoStateCode

////Проверка state.name
suppStateCode =suppOrder[numOrder].statusCode.toString()
if (suppStateCode == "cancelled"){
	suppStateName = "Отменён"
}
if (suppStateCode == "completed"){
	suppStateName = "Исполнен"
}
if (suppStateCode == "executed"){
	suppStateName = "В работе"
}
infoStateName =infoOrder.state.name.toString()
assert  suppStateName==infoStateName

//Количество prescription(JSON - drug)
suppOrderDrugCount =suppOrder[numOrder].prescription ?  suppOrder[numOrder].prescription.size(): 0

//Провека каждого prescription (JSON - drug)
for (int j=0; j&lt;suppOrderDrugCount; j++){
	//Проверка title
	suppDrugTitle =suppOrder[numOrder].prescription.drug[j].title.toString()
	infoDrugTitle =infoOrder.drugs[j].title.toString()
	log.info infoDrugTitle
	log.info suppDrugTitle
	assert  suppDrugTitle==infoDrugTitle

	//Проверка qty
	suppQty =suppOrder[numOrder].prescription.drug[j].qty.toString()
	infoQty =infoOrder.drugs[j].qty.toString()
	assert  suppQty==infoQty

	//Проверка prescriptionNumber
	suppPrescriptionNumber =suppOrder[numOrder].prescription[j].prescriptionNumber.toString()
	infoPrescriptionNumber =infoOrder.drugs[j].prescriptionNumber.toString()
	assert  suppPrescriptionNumber==infoPrescriptionNumber

	//Проверка prescriptionType.code
	suppPrescriptionTypeCode =suppOrder[numOrder].prescription[j].type.toString()
	infoPrescriptionTypeCode =infoOrder.drugs[j].prescriptionType.code.toString()
	assert  suppPrescriptionTypeCode==infoPrescriptionTypeCode

	////Проверка prescriptionType.name
	suppPrescriptionTypeCode =suppOrder[numOrder].prescription[j].type.toString()
	if (suppPrescriptionTypeCode == "benefit"){
		suppPrescriptionTypeName = "Льготный"
	}
	if (suppPrescriptionTypeCode == "commercial"){
		suppPrescriptionTypeName = "За полную стоимость"
	}
	infoPrescriptionTypeName =infoOrder.drugs[j].prescriptionType.name.toString()
	assert  suppPrescriptionTypeName==infoPrescriptionTypeName
}

//////////////////////Необязательные параметры//////////////////////
def checkParams(s,j){
	if (s=="" &amp; j=="null"){
		return false 
	}
	else{
		return true
	}
}

//Проверка aggregator.link
suppAggregatorLink =suppOrder[numOrder].link.toString()
infoAggregatorLink =infoOrder.aggregator.link.toString()
if (checkParams(suppAggregatorLink,infoAggregatorLink)){
	assert  suppAggregatorLink==infoAggregatorLink
	}
else{
	log.info "Параметра link не обнаружено"
}

//Проверка drug.drugId
for (int j=0; j&lt;suppOrderDrugCount; j++){
suppDrugId =suppOrder[numOrder].prescription.drug[j].drugID.toString()
infoDrugId =infoOrder.drugs[j].drugId.toString()
if (checkParams(suppDrugId,infoDrugId)){
	assert  suppDrugId==infoDrugId
	}
else{
	log.info "Параметра drugId не обнаружено"+" " + "drug = "+j
}
//Проверка drug.amount
suppDrugAmount =suppOrder[numOrder].prescription.drug[j].amount.toString()
infoDrugAmount =infoOrder.drugs[j].amount.toString()
if (checkParams(suppDrugAmount,infoDrugAmount)){
	assert  suppDrugAmount==infoDrugAmount
	}
else{
	log.info "Параметра amount не обнаружено"+" " + "drug = "+j
	}

//Проверка storageCondition
suppDrugStorageCondition =suppOrder[numOrder].prescription.drug[j].storageCondition.toString()
infoDrugStorageCondition =infoOrder.drugs[j].storageCondition.toString()
if (checkParams(suppDrugStorageCondition,infoDrugStorageCondition)){
	assert  suppDrugStorageCondition==infoDrugStorageCondition
	}
else{
	log.info "Параметра storageCondition не обнаружено"+" " + "drug = "+ j
	}
}

if (suppStateCode=="completed"){
	suppMark =piGetMarkPharmacy.Body.piGetMarkPharmacyResponse.mark.toString()
	infoMark =infoOrder.hasMark.toString()
	if (suppMark!=""){
		assert infoMark==true.toString()
	}
	else{
		assert infoMark==false.toString()
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>18244</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>16714321</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700005182060667</con:value></con:property></con:properties></con:testCase><con:testCase id="8ee436a6-094f-43ef-90ca-9ce1bb061304" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. state.code = cancelled" searchProperties="true" disabled="true"><con:settings/><con:testStep type="jdbc" name="Получение order_id" id="9e16ff60-3e09-40e6-8487-df366034ba6c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT ORD_ID FROM
(SELECT DRUG_ORDER_ITEM.ORDER_ID AS ORD_ID from DRUG_ORDER_ITEM inner join DRUG_ORDER ON DRUG_ORDER_ITEM.ORDER_ID = DRUG_ORDER.ID 
WHERE STORAGE_CONDITION is not NULL AND DRUG_ORDER.LINK is not null
AND DRUG_ORDER.FINAL_STATUS = :cancelled
ORDER BY dbms_random.value)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="7f152946-2611-4ca8-9ec3-5471d36321cb" name="JDBC Status"/><con:properties><con:property><con:name>cancelled</con:name><con:value>153</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Запись orderId" id="da539c8f-b968-481a-bae3-4701589ad601"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>order_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>orderID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>order_id to project</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>order_id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получение patientId" id="75dc08d5-b4ef-45eb-9a54-5fbb492ecfd5"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_EMIAS_ID FROM DRUG_ORDER WHERE ID = ${#TestCase#orderID}</con:query><con:assertion type="JDBC Status" id="dc86c34b-36a4-4222-9d4c-48189ed9900d" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись patientId" id="33617ebc-9134-496b-8fb9-177b01f868f7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId</con:sourceStep><con:sourcePath>//PATIENT_EMIAS_ID[1]</con:sourcePath><con:targetType>PatientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Поиск ОМС" id="95fa215b-0614-42a5-b358-cd5365c64ebf"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString> ${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER FROM PATIENT WHERE PATIENT_ID = ${#TestCase#PatientId}</con:query><con:assertion type="JDBC Status" id="b15e345c-1161-4c45-af61-829381038fe2" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Запись ОМС" id="a3c662cf-9975-4971-ac3c-efc2d8e36b92"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Поиск ОМС#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 3
}</script></con:config></con:testStep><con:testStep type="request" name="PIGetDrugOrders" id="9676a2f6-895b-4110-83cf-70cf41dc745a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetDrugOrders</con:operation><con:request name="PIGetDrugOrders" id="6bc166b8-3c36-466a-af9a-d03407d3e2e0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
<soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetDrugOrdersRequest>
         <typ:ident>EMIASINFO</typ:ident>
         <!--Optional:-->
         <typ:oms>${#TestCase#oms}</typ:oms>
      </typ:piGetDrugOrdersRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" id="7a0a2a4f-3830-4aa0-8b8b-5a4985a8ea80" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getOrder" id="f2d1c405-4983-493e-8b71-cb77e7fbeacd"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" methodName="Method 1" resourcePath="/api/v3/prescription/order/{orderId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getOrder" id="e3e1fe49-03fc-454c-92a9-dd4a18c74dc4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/42</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="246a2b37-68a6-49ed-8f91-4748472ac04f" name="Valid HTTP Status Code 200"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cf18678-cf7e-4f7d-bf0b-118a5ce1adea" name="Содержит корректный orderId"><con:configuration><path>$.payload.orderId</path><content>${#TestCase#orderID}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
  <con:entry key="EI-Token" value=""/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="dab3395e-beea-4f3c-8658-cf613d0cf1a7"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter

//JSON Slurper
def orderResponse = context.expand('${getOrder#Response}')
def slurperJson = new JsonSlurper()
def getOrder = slurperJson.parseText(orderResponse)

//XML Slurper
def PIGetDrugOrdersResponse = context.expand('${PIGetDrugOrders#Response}')
PIGetDrugOrders = new XmlSlurper().parseText(PIGetDrugOrdersResponse)

//Подсчет количества order
suppOrderCount =PIGetDrugOrders.Body.piGetDrugOrdersResponse.order ?  PIGetDrugOrders.Body.piGetDrugOrdersResponse.order.size(): 0
log.info suppOrderCount

suppOrder=PIGetDrugOrders.Body.piGetDrugOrdersResponse.order
infoOrder=getOrder.payload


//Поиск необходимого order
for (int i=0; i&lt;suppOrderCount; i++){
	suppOrderN =suppOrder[i].orderID.toString()
	if (suppOrderN == testRunner.testCase.getPropertyValue("orderID")){
		numOrder = i
		break
	}
}

//////////////////////Обязательные параметры//////////////////////
//Проверка QR кода
suppQR =suppOrder.QRCode[numOrder].toString()
infoQR =infoOrder.qRCode.toString()
assert  suppQR==infoQR

//Проверка aggregator.name
suppAggregatorName =suppOrder.agregatorName[numOrder].toString()
infoAggregatorName =infoOrder.aggregator.name.toString()
assert  suppAggregatorName==infoAggregatorName

//Проверка orderNumber
suppOrderNumber =suppOrder[numOrder].externalID.toString()
infoOrderNumber =infoOrder.orderNumber.toString()
assert  suppOrderNumber==infoOrderNumber

//Проверка createDate
suppCreateDate =suppOrder[numOrder].createDate.toString()
suppCreateDate = suppCreateDate
infoCreateDate =infoOrder.createDate.toString()
assert  suppCreateDate==infoCreateDate

//Проверка state.code
suppStateCode =suppOrder[numOrder].statusCode.toString()
infoStateCode =infoOrder.state.code.toString()
assert  suppStateCode==infoStateCode

////Проверка state.name
suppStateCode =suppOrder[numOrder].statusCode.toString()
if (suppStateCode == "cancelled"){
	suppStateName = "Отменён"
}
if (suppStateCode == "completed"){
	suppStateName = "Исполнен"
}
if (suppStateCode == "executed"){
	suppStateName = "В работе"
}
infoStateName =infoOrder.state.name.toString()
assert  suppStateName==infoStateName

//Количество prescription(JSON - drug)
suppOrderDrugCount =suppOrder[numOrder].prescription ?  suppOrder[numOrder].prescription.size(): 0

//Провека каждого prescription (JSON - drug)
for (int j=0; j&lt;suppOrderDrugCount; j++){
	//Проверка title
	suppDrugTitle =suppOrder[numOrder].prescription.drug[j].title.toString()
	infoDrugTitle =infoOrder.drugs[j].title.toString()
	log.info infoDrugTitle
	log.info suppDrugTitle
	assert  suppDrugTitle==infoDrugTitle

	//Проверка qty
	suppQty =suppOrder[numOrder].prescription.drug[j].qty.toString()
	infoQty =infoOrder.drugs[j].qty.toString()
	assert  suppQty==infoQty

	//Проверка prescriptionNumber
	suppPrescriptionNumber =suppOrder[numOrder].prescription[j].prescriptionNumber.toString()
	infoPrescriptionNumber =infoOrder.drugs[j].prescriptionNumber.toString()
	assert  suppPrescriptionNumber==infoPrescriptionNumber 

	//Проверка prescriptionType.code
	suppPrescriptionTypeCode =suppOrder[numOrder].prescription[j].type.toString()
	infoPrescriptionTypeCode =infoOrder.drugs[j].prescriptionType.code.toString()
	assert  suppPrescriptionTypeCode==infoPrescriptionTypeCode

	////Проверка prescriptionType.name
	suppPrescriptionTypeCode =suppOrder[numOrder].prescription[j].type.toString()
	if (suppPrescriptionTypeCode == "benefit"){
		suppPrescriptionTypeName = "Льготный"
	}
	if (suppPrescriptionTypeCode == "commercial"){
		suppPrescriptionTypeName = "За полную стоимость"
	}
	infoPrescriptionTypeName =infoOrder.drugs[j].prescriptionType.name.toString()
	assert  suppPrescriptionTypeName==infoPrescriptionTypeName
}

//////////////////////Необязательные параметры//////////////////////
def checkParams(s,j){
	if (s=="" &amp; j=="null"){
		return false 
	}
	else{
		return true
	}
}

//Проверка aggregator.link
suppAggregatorLink =suppOrder[numOrder].link.toString()
infoAggregatorLink =infoOrder.aggregator.link.toString()
if (checkParams(suppAggregatorLink,infoAggregatorLink)){
	assert  suppAggregatorLink==infoAggregatorLink
	}
else{
	log.info "Параметра link не обнаружено"
}

//Проверка drug.drugId
for (int j=0; j&lt;suppOrderDrugCount; j++){
suppDrugId =suppOrder[numOrder].prescription.drug[j].drugID.toString()
infoDrugId =infoOrder.drugs[j].drugId.toString()
if (checkParams(suppDrugId,infoDrugId)){
	assert  suppDrugId==infoDrugId
	}
else{
	log.info "Параметра drugId не обнаружено"+" " + "drug = "+j
}
//Проверка drug.amount
suppDrugAmount =suppOrder[numOrder].prescription.drug[j].amount.toString()
infoDrugAmount =infoOrder.drugs[j].amount.toString()
if (checkParams(suppDrugAmount,infoDrugAmount)){
	assert  suppDrugAmount==infoDrugAmount
	}
else{
	log.info "Параметра amount не обнаружено"+" " + "drug = "+j
	}

//Проверка storageCondition
suppDrugStorageCondition =suppOrder[numOrder].prescription.drug[j].storageCondition.toString()
infoDrugStorageCondition =infoOrder.drugs[j].storageCondition.toString()
if (checkParams(suppDrugStorageCondition,infoDrugStorageCondition)){
	assert  suppDrugStorageCondition==infoDrugStorageCondition
	}
else{
	log.info "Параметра storageCondition не обнаружено"+" " + "drug = "+ j
	}
}

if (suppStateCode=="completed"){
	suppMark =piGetMarkPharmacy.Body.piGetMarkPharmacyResponse.mark.toString()
	infoMark =infoOrder.hasMark.toString()
	if (suppMark!=""){
		assert infoMark==true.toString()
	}
	else{
		assert infoMark==false.toString()
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>16905</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>22814589</con:value></con:property><con:property><con:name>oms</con:name><con:value>7755320843003520</con:value></con:property></con:properties></con:testCase><con:testCase id="40836100-59a8-44af-971c-fa2747c2f3fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="203795_АС1 Невалидный идентификатор (LLO_ORDER_NOT_FOUND)" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получение order_id" id="dec01d5c-cd9e-431a-bc80-fc26a2ae8629" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT ORD_ID FROM
(SELECT DRUG_ORDER_ITEM.ORDER_ID AS ORD_ID from DRUG_ORDER_ITEM inner join DRUG_ORDER ON DRUG_ORDER_ITEM.ORDER_ID = DRUG_ORDER.ID 
LEFT JOIN SERVICE_RATE ON DRUG_ORDER_ITEM.ORDER_ID = SERVICE_RATE.ORDER_ID WHERE STORAGE_CONDITION is not NULL AND DRUG_ORDER.LINK is not null
AND SERVICE_RATE.RATE IS NULL AND DRUG_ORDER.FINAL_STATUS = :completed
ORDER BY dbms_random.value)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="7f152946-2611-4ca8-9ec3-5471d36321cb" name="JDBC Status"/><con:properties><con:property><con:name>completed</con:name><con:value>152</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Запись orderId" id="74f0d4f2-1ba9-4ab0-97fd-3031f930219e" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>order_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>orderID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>order_id to project</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>order_id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получение patientId" id="b305ad56-a587-4baa-b38e-d8cd8f2a4483" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_EMIAS_ID FROM DRUG_ORDER WHERE ID = ${#TestCase#orderID}</con:query><con:assertion type="JDBC Status" id="dc86c34b-36a4-4222-9d4c-48189ed9900d" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись patientId" id="d5053c4a-328a-4405-872d-16dad3f958c5" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId</con:sourceStep><con:sourcePath>//PATIENT_EMIAS_ID[1]</con:sourcePath><con:targetType>PatientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Поиск ОМС" id="b2f81ed2-9357-4a4e-b949-649ae11f979e" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER FROM PATIENT WHERE PATIENT_ID = ${#TestCase#PatientId}</con:query><con:assertion type="JDBC Status" id="b15e345c-1161-4c45-af61-829381038fe2" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Запись ОМС" id="61440d7c-58aa-4e4f-811d-7d9ae036d48d" disabled="true"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Поиск ОМС#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 3
}</script></con:config></con:testStep><con:testStep type="restrequest" name="order" id="24300224-6446-41db-9724-ec63b50ce488"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" methodName="Method 1" resourcePath="/api/v3/prescription/order/{orderId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="order" id="295161f0-af4d-4ec2-baba-5dd67df38485" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="257d2461-237f-4097-a92b-4bdf445b3721" name="Valid HTTP Status Code 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12316bde-d7c5-4b44-8139-5019dce1c6fa" name="Значение code = &quot;LLO_ORDER_NOT_FOUND&quot;"><con:configuration><path>$.error.code</path><content>${#TestCase#code}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="134b6822-fffe-423a-a34d-e4ca8d646b4a" name="Значение description = &quot;Заказ не найден&quot;"><con:configuration><path>$.error.description</path><content>${#TestCase#description}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4020d2b6-c9d9-4b76-ac47-8351c25004dd" name="Значение type = &quot;BUSINESS&quot;"><con:configuration><path>$.error.type</path><content>${#TestCase#type}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="orderId" value="${=Math.abs(new Random().nextInt())}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>code</con:name><con:value>LLO_ORDER_NOT_FOUND</con:value></con:property><con:property><con:name>description</con:name><con:value>Заказ не найден</con:value></con:property><con:property><con:name>type</con:name><con:value>BUSINESS</con:value></con:property><con:property><con:name>orderId</con:name><con:value>16880</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>10255639</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property></con:properties></con:testCase><con:testCase id="8ded67bc-9bb2-43b1-b7bb-e84253a27c4b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="203796_АС2 Невалидный ОМС (LLO_PATIENT_NOT_FOUND)" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получение order_id" id="14c7738c-aba1-4d05-a55d-2554a21692d5" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT ORD_ID FROM
(SELECT DRUG_ORDER_ITEM.ORDER_ID AS ORD_ID from DRUG_ORDER_ITEM inner join DRUG_ORDER ON DRUG_ORDER_ITEM.ORDER_ID = DRUG_ORDER.ID 
LEFT JOIN SERVICE_RATE ON DRUG_ORDER_ITEM.ORDER_ID = SERVICE_RATE.ORDER_ID WHERE STORAGE_CONDITION is not NULL AND DRUG_ORDER.LINK is not null
AND SERVICE_RATE.RATE IS NULL AND DRUG_ORDER.FINAL_STATUS = :completed
ORDER BY dbms_random.value)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="7f152946-2611-4ca8-9ec3-5471d36321cb" name="JDBC Status"/><con:properties><con:property><con:name>completed</con:name><con:value>152</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Запись orderId" id="62467f80-5b63-46d2-8ea2-958b61c4d5dd" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>order_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>orderID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>order_id to project</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>order_id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получение patientId" id="3f42bb2e-7dec-4e8d-aa06-175bbf93a823" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_EMIAS_ID FROM DRUG_ORDER WHERE ID = ${#TestCase#orderID}</con:query><con:assertion type="JDBC Status" id="dc86c34b-36a4-4222-9d4c-48189ed9900d" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись patientId" id="d158e93d-7907-404e-b70c-250a4bfd70e3" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId</con:sourceStep><con:sourcePath>//PATIENT_EMIAS_ID[1]</con:sourcePath><con:targetType>PatientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Поиск ОМС" id="1c32a25c-4255-4e66-a357-7f20555a6488" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER FROM PATIENT WHERE PATIENT_ID = ${#TestCase#PatientId}</con:query><con:assertion type="JDBC Status" id="b15e345c-1161-4c45-af61-829381038fe2" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Запись ОМС" id="1e0602ce-1df0-47af-a44f-9431a610d6de" disabled="true"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Поиск ОМС#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 3
}</script></con:config></con:testStep><con:testStep type="restrequest" name="order" id="2af55f16-4166-4d66-8be4-2f407a14e7b1"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" methodName="Method 1" resourcePath="/api/v3/prescription/order/{orderId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="order" id="295161f0-af4d-4ec2-baba-5dd67df38485" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-llo" value="${#Project#Mock-url}/203796" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="257d2461-237f-4097-a92b-4bdf445b3721" name="Valid HTTP Status Code 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12316bde-d7c5-4b44-8139-5019dce1c6fa" name="Значение code = &quot;LLO_PATIENT_NOT_FOUND&quot;"><con:configuration><path>$.error.code</path><content>${#TestCase#code}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="134b6822-fffe-423a-a34d-e4ca8d646b4a" name="Значение description = &quot;Пациент не найден&quot;"><con:configuration><path>$.error.description</path><content>${#TestCase#description}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4020d2b6-c9d9-4b76-ac47-8351c25004dd" name="Значение type = &quot;BUSINESS&quot;"><con:configuration><path>$.error.type</path><content>${#TestCase#type}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="orderId" value="${=Math.abs(new Random().nextInt())}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>code</con:name><con:value>LLO_PATIENT_NOT_FOUND</con:value></con:property><con:property><con:name>description</con:name><con:value>Пациент не найден</con:value></con:property><con:property><con:name>type</con:name><con:value>BUSINESS</con:value></con:property><con:property><con:name>orderId</con:name><con:value>11992</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>20383969</con:value></con:property><con:property><con:name>oms</con:name><con:value>7771660868000392</con:value></con:property></con:properties></con:testCase><con:testCase id="bf07d5c6-ef95-4d84-a3ba-e7c2721cacc2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="203797_АС3 Не передан ОМС (LLO_BAD_REQUEST)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Получение данных" id="e17e0124-7169-416d-a208-230daa1e0fe9"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/order/{orderId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение данных" id="9490a53c-1210-44c8-bb8d-b097297fac3b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-llo" value="${#Project#Mock-url}/203797" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/3842</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="423318f3-bf64-46ac-a835-1c319d6d9454" name="Valid HTTP Status Code 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d4204f4-4782-47fb-8c2c-b2dd1d6a2cc9" name="Значение code = &quot;LLO_BAD_REQUEST&quot;"><con:configuration><path>$.error.code</path><content>${#TestCase#code}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="05c7dbcb-25c8-414d-b95e-201b8d4e8f69" name="Значение description = &quot;Указаны неверные форматы входных параметров или переданы не все обязательные поля&quot;"><con:configuration><path>$.error.description</path><content>${#TestCase#description}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da4ecad3-8b7d-41a3-a5b7-9485dfcb4435" name="Значение type = &quot;BUSINESS&quot;"><con:configuration><path>$.error.type</path><content>${#TestCase#type}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="orderId" value="${=Math.abs(new Random().nextInt())}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>code</con:name><con:value>LLO_BAD_REQUEST</con:value></con:property><con:property><con:name>description</con:name><con:value>Указаны неверные форматы входных параметров или переданы не все обязательные поля</con:value></con:property><con:property><con:name>type</con:name><con:value>BUSINESS</con:value></con:property><con:property><con:name>oms</con:name><con:value>7771660868000392</con:value></con:property></con:properties></con:testCase><con:testCase id="0d2c07ac-b455-417f-b442-cabe86256cbe" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="393558_statusCode=executed, statusDetail !=Null, statusDescription !=Null" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET order" id="29fa77fc-3c0f-41f9-9010-68b32af39d45"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/order/{orderId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET order" id="3396d4d2-2fac-4008-9d9c-71df71795e71" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-llo" value="${#Project#Mock-url}/393558" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/prescription/order/30001</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="eeea6ec7-1d96-4cab-bd81-b71908912187" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.code = executed"><con:configuration><path>$.payload.state.code</path><content>executed</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.name = В работе"><con:configuration><path>$.payload.state.name</path><content>В работе</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="aa175cab-2854-4888-8954-d2363ba3ae71" name="Contains detail"><con:configuration><token>detail</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="aa175cab-2854-4888-8954-d2363ba3ae71" name="Contains description"><con:configuration><token>description</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="b514b768-4560-4194-a538-8b00336e85e8"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import groovy.sql.Sql

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getPiGetDrugOrdersMock = new XmlSlurper().parseText(response)

def getOrderResponse = context.expand('${GET order#Response}')
def slurperJson = new JsonSlurper()
def getOrder = slurperJson.parseText(getOrderResponse)

assert getOrder.payload.orderId.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.orderID.toString() //Сверяем orderId
assert getOrder.payload.state.code.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.statusCode.toString() //Сверяем state.code
assert getOrder.payload.state.name.toString() == "В работе" //Сверяем state.name
assert getOrder.payload.state.detail.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.statusDetail.toString() //Сверяем state.detail
assert getOrder.payload.state.description.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.statusDescription.toString() //Сверяем state.detail</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7795489734001653</con:value></con:property><con:property><con:name>orderId</con:name><con:value>30001</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/393558/piGetDrugOrders</con:value></con:property></con:properties></con:testCase><con:testCase id="cba12b0d-ce3e-40b1-8245-1f58bf753a38" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="393559_statusCode=executed, statusDetail =Null, statusDescription =Null" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET order" id="cf95b6f2-e97f-4b5e-bfc5-558fef1421bc"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/order/{orderId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET order" id="3396d4d2-2fac-4008-9d9c-71df71795e71" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-llo" value="${#Project#Mock-url}/393559" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/prescription/order/30001</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="eeea6ec7-1d96-4cab-bd81-b71908912187" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.code = executed"><con:configuration><path>$.payload.state.code</path><content>executed</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.name = В работе"><con:configuration><path>$.payload.state.name</path><content>В работе</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="eb6fd438-5be0-4e2a-a94b-df2657744657" name="Not Contains state.detail"><con:configuration><token>detail</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="eb6fd438-5be0-4e2a-a94b-df2657744657" name="Not Contains state.description"><con:configuration><token>description</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="c308e9d1-ea8d-4cec-b737-4402f08e5b56"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import groovy.sql.Sql

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getPiGetDrugOrdersMock = new XmlSlurper().parseText(response)

def getOrderResponse = context.expand('${GET order#Response}')
def slurperJson = new JsonSlurper()
def getOrder = slurperJson.parseText(getOrderResponse)

assert getOrder.payload.orderId.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.orderID.toString() //Сверяем orderId
assert getOrder.payload.state.code.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.statusCode.toString() //Сверяем state.code
assert getOrder.payload.state.name.toString() == "В работе" //Сверяем state.name</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7795489734001653</con:value></con:property><con:property><con:name>orderId</con:name><con:value>30002</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/393559/piGetDrugOrders</con:value></con:property></con:properties></con:testCase><con:testCase id="936953d8-f624-4b84-8737-5f1bc407322c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="393564_statusCode=cancelled, statusDetail !=Null, statusDescription !=Null" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET order" id="fa399e56-cd2b-4037-ac73-d3d0ff76ec8e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/order/{orderId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET order" id="3396d4d2-2fac-4008-9d9c-71df71795e71" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-llo" value="${#Project#Mock-url}/393564" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/prescription/order/30001</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="eeea6ec7-1d96-4cab-bd81-b71908912187" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.code = cancelled"><con:configuration><path>$.payload.state.code</path><content>cancelled</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.name = Отменён"><con:configuration><path>$.payload.state.name</path><content>Отменён</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="fb00f34b-bcb5-433d-a414-57afe8d73d32" name="Contains detail"><con:configuration><token>detail</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="fb00f34b-bcb5-433d-a414-57afe8d73d32" name="Contains description"><con:configuration><token>description</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="66eae1ea-c598-4fc8-b48c-21a46fe4e89f"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import groovy.sql.Sql

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getPiGetDrugOrdersMock = new XmlSlurper().parseText(response)

def getOrderResponse = context.expand('${GET order#Response}')
def slurperJson = new JsonSlurper()
def getOrder = slurperJson.parseText(getOrderResponse)

assert getOrder.payload.orderId.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.orderID.toString() //Сверяем orderId
assert getOrder.payload.state.code.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.statusCode.toString() //Сверяем state.code
assert getOrder.payload.state.name.toString() == "Отменён" //Сверяем state.name
assert getOrder.payload.state.detail.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.statusDetail.toString() //Сверяем state.detail
assert getOrder.payload.state.description.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.statusDescription.toString() //Сверяем state.detail</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7795489734001653</con:value></con:property><con:property><con:name>orderId</con:name><con:value>30003</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/393564/piGetDrugOrders</con:value></con:property></con:properties></con:testCase><con:testCase id="a737369d-2159-4b63-8e61-12a62078a74d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="393569_statusCode=cancelled, statusDetail =Null, statusDescription =Null" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET order" id="818951d2-2843-49ed-8780-04419db21c38"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/order/{orderId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET order" id="3396d4d2-2fac-4008-9d9c-71df71795e71" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-llo" value="${#Project#Mock-url}/393569" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/prescription/order/30001</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="eeea6ec7-1d96-4cab-bd81-b71908912187" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.code = cancelled"><con:configuration><path>$.payload.state.code</path><content>cancelled</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.name = Отменён"><con:configuration><path>$.payload.state.name</path><content>Отменён</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="eb6fd438-5be0-4e2a-a94b-df2657744657" name="Not Contains state.detail"><con:configuration><token>detail</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="eb6fd438-5be0-4e2a-a94b-df2657744657" name="Not Contains state.description"><con:configuration><token>description</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="4a2e35ba-0e71-427c-891e-2a554673953a"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import groovy.sql.Sql

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getPiGetDrugOrdersMock = new XmlSlurper().parseText(response)

def getOrderResponse = context.expand('${GET order#Response}')
def slurperJson = new JsonSlurper()
def getOrder = slurperJson.parseText(getOrderResponse)

assert getOrder.payload.orderId.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.orderID.toString() //Сверяем orderId
assert getOrder.payload.state.code.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.statusCode.toString() //Сверяем state.code
assert getOrder.payload.state.name.toString() == "Отменён" //Сверяем state.name</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7795489734001653</con:value></con:property><con:property><con:name>orderId</con:name><con:value>30004</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/393569/piGetDrugOrders</con:value></con:property></con:properties></con:testCase><con:testCase id="eff5a371-cf52-40f4-b1fd-5a44dcef57aa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="203794_Статус completed. С оценкой. Есть statusDescription" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET order" id="776f9ea0-ee45-4395-b1f2-6fe81feb88c7"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/order/{orderId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET order" id="3396d4d2-2fac-4008-9d9c-71df71795e71" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-llo" value="${#Project#Mock-url}/203794" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/prescription/order/30001</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="eeea6ec7-1d96-4cab-bd81-b71908912187" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.code = completed"><con:configuration><path>$.payload.state.code</path><content>completed</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.name = Исполнен"><con:configuration><path>$.payload.state.name</path><content>Исполнен</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="41ebcd69-323d-40ae-ab56-1fa582d781ce" name="Not Contains detail"><con:configuration><token>detail</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="41ebcd69-323d-40ae-ab56-1fa582d781ce" name="Not Contains description"><con:configuration><token>description</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ee92c50-862e-414b-b5c0-f1f5aab2d2b2" name="hasMark = true"><con:configuration><path>$.payload.hasMark</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="4840b357-822e-47f6-a9f4-7ec85b4c7e47"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import groovy.sql.Sql

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getPiGetDrugOrdersMock = new XmlSlurper().parseText(response)

def getOrderResponse = context.expand('${GET order#Response}')
def slurperJson = new JsonSlurper()
def getOrder = slurperJson.parseText(getOrderResponse)

assert getOrder.payload.orderId.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.orderID.toString() //Сверяем orderId
assert getOrder.payload.qRCode.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.QRCode.toString() //Сверяем QRCode
assert getOrder.payload.aggregator.name.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.agregatorName.toString() //Сверяем aggregator.name
assert getOrder.payload.aggregator.link.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.link.toString() //Сверяем aggregator.link
assert getOrder.payload.orderNumber.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.externalID.toString() //Сверяем orderNumber
assert getOrder.payload.createDate.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.createDate.toString() //Сверяем createDate
assert getOrder.payload.state.code.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.statusCode.toString() //Сверяем state.code
assert getOrder.payload.state.name.toString() == "Исполнен" //Сверяем state.name
assert getOrder.payload.drugs[0].title.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.drug.title.toString() //Сверяем drugs.title
assert getOrder.payload.drugs[0].qty.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.drug.qty.toString() //Сверяем drugs.qty
assert getOrder.payload.drugs[0].amount.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.drug.amount.toString() //Сверяем drugs.qty
assert getOrder.payload.drugs[0].storageCondition.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.drug.storageCondition.toString() //Сверяем drugs.qty
assert getOrder.payload.drugs[0].prescriptionNumber.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.prescriptionNumber.toString() //Сверяем prescriptionNumber
assert getOrder.payload.drugs[0].prescriptionType.code.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.type.toString() //Сверяем prescriptionType
assert getOrder.payload.drugs[0].prescriptionType.name.toString() == "Льготный" //Проверяем prescriptionType.name</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7795489734001653</con:value></con:property><con:property><con:name>orderId</con:name><con:value>30005</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/203794/piGetDrugOrders</con:value></con:property></con:properties></con:testCase><con:testCase id="aca3bc2b-f1e2-4673-808d-3c511c3a9568" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213797_Статус completed. Без оценки. Есть statusDetail" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET order" id="d2d7b0e7-82b5-48fe-b926-cd823d84cc68"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/order/{orderId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET order" id="3396d4d2-2fac-4008-9d9c-71df71795e71" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-llo" value="${#Project#Mock-url}/213797" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/prescription/order/30001</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="eeea6ec7-1d96-4cab-bd81-b71908912187" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.code = completed"><con:configuration><path>$.payload.state.code</path><content>completed</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="759bb82b-4997-4a3a-9661-29786b695414" name="state.name = Исполнен"><con:configuration><path>$.payload.state.name</path><content>Исполнен</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="41ebcd69-323d-40ae-ab56-1fa582d781ce" name="Not Contains detail"><con:configuration><token>detail</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="41ebcd69-323d-40ae-ab56-1fa582d781ce" name="Not Contains description"><con:configuration><token>description</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ccc39b46-1b4b-4b0b-b23c-1d6ae73f2ced" name="hasMark = false"><con:configuration><path>$.payload.hasMark</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="b4a37a8f-2818-4f99-9c34-a6a3b49d4eb9"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import groovy.sql.Sql

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

getPiGetDrugOrdersMock = new XmlSlurper().parseText(response)

def getOrderResponse = context.expand('${GET order#Response}')
def slurperJson = new JsonSlurper()
def getOrder = slurperJson.parseText(getOrderResponse)

assert getOrder.payload.orderId.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.orderID.toString() //Сверяем orderId
assert getOrder.payload.qRCode.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.QRCode.toString() //Сверяем QRCode
assert getOrder.payload.aggregator.name.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.agregatorName.toString() //Сверяем aggregator.name
assert getOrder.payload.aggregator.link.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.link.toString() //Сверяем aggregator.link
assert getOrder.payload.orderNumber.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.externalID.toString() //Сверяем orderNumber
assert getOrder.payload.createDate.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.createDate.toString() //Сверяем createDate
assert getOrder.payload.state.code.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.statusCode.toString() //Сверяем state.code
assert getOrder.payload.state.name.toString() == "Исполнен" //Сверяем state.name
assert getOrder.payload.drugs[0].drugId.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.drug.drugID.toString() //Сверяем drugs.drugId
assert getOrder.payload.drugs[0].title.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.drug.title.toString() //Сверяем drugs.title
assert getOrder.payload.drugs[0].qty.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.drug.qty.toString() //Сверяем drugs.qty
assert getOrder.payload.drugs[0].amount.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.drug.amount.toString() //Сверяем drugs.qty
assert getOrder.payload.drugs[0].storageCondition.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.drug.storageCondition.toString() //Сверяем drugs.qty
assert getOrder.payload.drugs[0].prescriptionNumber.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.prescriptionNumber.toString() //Сверяем prescriptionNumber
assert getOrder.payload.drugs[0].prescriptionType.code.toString() == getPiGetDrugOrdersMock.Body.piGetDrugOrdersResponse.order.prescription.type.toString() //Сверяем prescriptionType
assert getOrder.payload.drugs[0].prescriptionType.name.toString() == "За полную стоимость" //Проверяем prescriptionType.name



</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7795489734001653</con:value></con:property><con:property><con:name>orderId</con:name><con:value>30006</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/213797/piGetDrugOrders</con:value></con:property></con:properties></con:testCase><con:testCase id="1436943e-572c-4e1c-b85c-f827209d2a70" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="213806_ОС. (Интеграционный)" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получение order_id(hasMark=true)" id="5a0b7f76-233f-49be-963c-9ee7615f34f3"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString>${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT ORD_ID FROM
(SELECT DRUG_ORDER_ITEM.ORDER_ID AS ORD_ID from DRUG_ORDER_ITEM inner join DRUG_ORDER ON DRUG_ORDER_ITEM.ORDER_ID = DRUG_ORDER.ID 
INNER JOIN SERVICE_RATE ON DRUG_ORDER_ITEM.ORDER_ID = SERVICE_RATE.ORDER_ID WHERE STORAGE_CONDITION is not NULL AND DRUG_ORDER.LINK is not null
AND DRUG_ORDER.FINAL_STATUS = :completed
ORDER BY dbms_random.value)
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="7f152946-2611-4ca8-9ec3-5471d36321cb" name="JDBC Status"/><con:properties><con:property><con:name>completed</con:name><con:value>152</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Запись orderId" id="e0007cfb-1087-400f-845a-85edfd67360a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>order_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id(hasMark=true)</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>orderID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>order_id to project</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение order_id(hasMark=true)</con:sourceStep><con:sourcePath>//ORD_ID[1]</con:sourcePath><con:targetType>order_id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получение patientId" id="dcd8e1fd-e65c-4f25-8a33-f18be2ab5b8e"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString>${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT PATIENT_EMIAS_ID FROM DRUG_ORDER WHERE ID = ${#TestCase#orderID}</con:query><con:assertion type="JDBC Status" id="dc86c34b-36a4-4222-9d4c-48189ed9900d" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись patientId" id="2babea93-000b-4214-a85f-941b850bb974"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId</con:sourceStep><con:sourcePath>//PATIENT_EMIAS_ID[1]</con:sourcePath><con:targetType>PatientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Поиск ОМС и даты рождения" id="1034bb5a-14ce-4325-a3aa-c57e360b2cf9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, OMS_REGION_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_NUMBER, OMS_NEW_ASSURANCE_NUMBER, BIRTH_DATE FROM PATIENT WHERE PATIENT_ID = ${#TestCase#PatientId}</con:query><con:assertion type="JDBC Status" id="b15e345c-1161-4c45-af61-829381038fe2" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Запись ОМС и дату рождения" id="34895dc6-eb95-448f-b822-f797b1a6d8d2"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Поиск ОМС и даты рождения#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
//BIRTH_DATE = PatientOms.ResultSet.Row.BIRTH_DATE
//log.info BIRTH_DATE

def birthDate = PatientOms.ResultSet.Row.BIRTH_DATE
birthDate = birthDate.toString()
newBirthDate = birthDate.substring(0 , 10)
testRunner.testCase.setPropertyValue("birthDate", newBirthDate.toString())
log.info newBirthDate

log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 3
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Изменить response мока из текста внутри скрипта" id="1e3acc74-fd5b-4f03-aa21-362d88420f3b"><con:settings/><con:config><script>import groovy.sql.Sql

//получить из свойств кейса данные мока
path = testRunner.testCase.getPropertyValue("path")
code = testRunner.testCase.getPropertyValue("code")
oms = testRunner.testCase.getPropertyValue("oms")
PatientId = testRunner.testCase.getPropertyValue("PatientId")
birthDate = testRunner.testCase.getPropertyValue("birthDate")

//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

// Сформировать тело ответа от getPlanExtension, заменив даты
response="""{
   "permissions":    [
            {
         "name": "Ирина Ивановна З.",
         "emiasId": """+PatientId+""",
         "policyNum": \""""+oms+"""\",
         "birthday": \""""+birthDate+"""\",
         "permissionType": "CHILD",
         "ehrId": "4938de79-0ce4-4a22-bd5d-7b11a000b9ec",
         "gender": "FEMALE"
      },
            {
         "name": "Яна Михайловна В.",
         "emiasId": 25517322,
         "policyNum": "7700003027090482",
         "birthday": "1982-04-09",
         "permissionType": "PERSONAL",
         "ehrId": "78c3f6ee-e387-4b98-abe8-8f9332fe2401",
         "gender": "FEMALE"
      }
   ]
   "phoneNum": "79265209207"
}"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
//log.info query
sql.execute(query)

</script></con:config></con:testStep><con:testStep type="request" name="PIGetDrugOrders" id="62f43b72-9bad-4954-b61e-d9a664de4091"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetDrugOrders</con:operation><con:request name="PIGetDrugOrders" id="6bc166b8-3c36-466a-af9a-d03407d3e2e0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
<soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetDrugOrdersRequest>
         <typ:ident>EMIASINFO</typ:ident>
         <!--Optional:-->
         <typ:oms>${#TestCase#oms}</typ:oms>
      </typ:piGetDrugOrdersRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" id="7a0a2a4f-3830-4aa0-8b8b-5a4985a8ea80" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1e3cfbef-5428-4b41-adc4-cea5706012bc" name="В ответе есть заказ"><con:configuration><token>order</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="piGetMarkPharmacy" id="e2ebf0f3-d43e-400f-9840-053c7331791f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetMarkPharmacy</con:operation><con:request name="piGetMarkPharmacy" id="a7b15e01-57d1-4f05-af36-8c15089e710b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
  <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetMarkPharmacyRequest>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:markedObject>
            <!--Optional:-->
            <typ:orderID>${#TestCase#OrderID}</typ:orderID>
         </typ:markedObject>
      </typ:piGetMarkPharmacyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dabc3b0c-1144-4c76-8b65-d91aeaad57f4"/><con:assertion type="Simple Contains" id="8a2291b9-9a71-4520-bd93-a2554c8fb950" name="В ответе есть оценка"><con:configuration><token>mark</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getOrder" id="4fa4f1eb-71c5-4690-8bef-05488b5651f0"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" methodName="Method 1" resourcePath="/api/v3/prescription/order/{orderId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getOrder" id="e3e1fe49-03fc-454c-92a9-dd4a18c74dc4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-lk" value="${#Project#Mock-url}/213806" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/42</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="246a2b37-68a6-49ed-8f91-4748472ac04f" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cf18678-cf7e-4f7d-bf0b-118a5ce1adea" name="Содержит корректный orderId"><con:configuration><path>$.payload.orderId</path><content>${#TestCase#orderID}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="fc3a714d-43d9-4bf4-9d1c-d49b2dcc03a4"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter

//JSON Slurper
def orderResponse = context.expand('${getOrder#Response}')
def slurperJson = new JsonSlurper()
def getOrder = slurperJson.parseText(orderResponse)

//XML Slurper
def PIGetDrugOrdersResponse = context.expand('${PIGetDrugOrders#Response}')
PIGetDrugOrders = new XmlSlurper().parseText(PIGetDrugOrdersResponse)

def piGetMarkPharmacyResponse = context.expand('${piGetMarkPharmacy#Response}')
piGetMarkPharmacy = new XmlSlurper().parseText(piGetMarkPharmacyResponse)

//Подсчет количества order
suppOrderCount =PIGetDrugOrders.Body.piGetDrugOrdersResponse.order ?  PIGetDrugOrders.Body.piGetDrugOrdersResponse.order.size(): 0
log.info suppOrderCount

suppOrder=PIGetDrugOrders.Body.piGetDrugOrdersResponse.order
infoOrder=getOrder.payload


//Поиск необходимого order
for (int i=0; i&lt;suppOrderCount; i++){
	suppOrderN =suppOrder[i].orderID.toString()
	if (suppOrderN == testRunner.testCase.getPropertyValue("orderID")){
		numOrder = i
		break
	}
}

//////////////////////Обязательные параметры//////////////////////
//Проверка QR кода
suppQR =suppOrder.QRCode[numOrder].toString()
infoQR =infoOrder.qRCode.toString()
assert  suppQR==infoQR

//Проверка aggregator.name
suppAggregatorName =suppOrder.agregatorName[numOrder].toString()
infoAggregatorName =infoOrder.aggregator.name.toString()
assert  suppAggregatorName==infoAggregatorName

//Проверка orderNumber
suppOrderNumber =suppOrder[numOrder].externalID.toString()
infoOrderNumber =infoOrder.orderNumber.toString()
assert  suppOrderNumber==infoOrderNumber

//Проверка createDate
suppCreateDate =suppOrder[numOrder].createDate.toString()
suppCreateDate = suppCreateDate
infoCreateDate =infoOrder.createDate.toString()
assert  suppCreateDate==infoCreateDate

//Проверка state.code
suppStateCode =suppOrder[numOrder].statusCode.toString()
infoStateCode =infoOrder.state.code.toString()
assert  suppStateCode==infoStateCode

////Проверка state.name
suppStateCode =suppOrder[numOrder].statusCode.toString()
if (suppStateCode == "cancelled"){
	suppStateName = "Отменён"
}
if (suppStateCode == "completed"){
	suppStateName = "Исполнен"
}
if (suppStateCode == "executed"){
	suppStateName = "В работе"
}
infoStateName =infoOrder.state.name.toString()
assert  suppStateName==infoStateName

//Количество prescription(JSON - drug)
suppOrderDrugCount =suppOrder[numOrder].prescription ?  suppOrder[numOrder].prescription.size(): 0

//Провека каждого prescription (JSON - drug)
for (int j=0; j&lt;suppOrderDrugCount; j++){
	//Проверка title
	suppDrugTitle =suppOrder[numOrder].prescription.drug[j].title.toString()
	infoDrugTitle =infoOrder.drugs[j].title.toString()
	log.info infoDrugTitle
	log.info suppDrugTitle
	assert  suppDrugTitle==infoDrugTitle

	//Проверка qty
	suppQty =suppOrder[numOrder].prescription.drug[j].qty.toString()
	infoQty =infoOrder.drugs[j].qty.toString()
	assert  suppQty==infoQty

	//Проверка prescriptionNumber
	suppPrescriptionNumber =suppOrder[numOrder].prescription[j].prescriptionNumber.toString()
	infoPrescriptionNumber =infoOrder.drugs[j].prescriptionNumber.toString()
	assert  suppPrescriptionNumber==infoPrescriptionNumber

	//Проверка prescriptionType.code
	suppPrescriptionTypeCode =suppOrder[numOrder].prescription[j].type.toString()
	infoPrescriptionTypeCode =infoOrder.drugs[j].prescriptionType.code.toString()
	assert  suppPrescriptionTypeCode==infoPrescriptionTypeCode

	////Проверка prescriptionType.name
	suppPrescriptionTypeCode =suppOrder[numOrder].prescription[j].type.toString()
	if (suppPrescriptionTypeCode == "benefit"){
		suppPrescriptionTypeName = "Льготный"
	}
	if (suppPrescriptionTypeCode == "commercial"){
		suppPrescriptionTypeName = "За полную стоимость"
	}
	infoPrescriptionTypeName =infoOrder.drugs[j].prescriptionType.name.toString()
	assert  suppPrescriptionTypeName==infoPrescriptionTypeName
}

//////////////////////Необязательные параметры//////////////////////
def checkParams(s,j){
	if (s=="" &amp; j=="null"){
		return false 
	}
	else{
		return true
	}
}

//Проверка aggregator.link
suppAggregatorLink =suppOrder[numOrder].link.toString()
infoAggregatorLink =infoOrder.aggregator.link.toString()
if (checkParams(suppAggregatorLink,infoAggregatorLink)){
	assert  suppAggregatorLink==infoAggregatorLink
	}
else{
	log.info "Параметра link не обнаружено"
}

//Проверка drug.drugId
for (int j=0; j&lt;suppOrderDrugCount; j++){
suppDrugId =suppOrder[numOrder].prescription.drug[j].drugID.toString()
infoDrugId =infoOrder.drugs[j].drugId.toString()
if (checkParams(suppDrugId,infoDrugId)){
	assert  suppDrugId==infoDrugId
	}
else{
	log.info "Параметра drugId не обнаружено"+" " + "drug = "+j
}
//Проверка drug.amount
suppDrugAmount =suppOrder[numOrder].prescription.drug[j].amount.toString()
infoDrugAmount =infoOrder.drugs[j].amount.toString()
if (checkParams(suppDrugAmount,infoDrugAmount)){
	assert  suppDrugAmount==infoDrugAmount
	}
else{
	log.info "Параметра amount не обнаружено"+" " + "drug = "+j
	}

//Проверка storageCondition
suppDrugStorageCondition =suppOrder[numOrder].prescription.drug[j].storageCondition.toString()
infoDrugStorageCondition =infoOrder.drugs[j].storageCondition.toString()
if (checkParams(suppDrugStorageCondition,infoDrugStorageCondition)){
	assert  suppDrugStorageCondition==infoDrugStorageCondition
	}
else{
	log.info "Параметра storageCondition не обнаружено"+" " + "drug = "+ j
	}
}

if (suppStateCode=="completed"){
	suppMark =piGetMarkPharmacy.Body.piGetMarkPharmacyResponse.mark.toString()
	infoMark =infoOrder.hasMark.toString()
	if (suppMark!=""){
		assert infoMark==true.toString()
	}
	else{
		assert infoMark==false.toString()
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>11384</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>2238373652</con:value></con:property><con:property><con:name>oms</con:name><con:value>7795489734001653</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2015-04-15</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/213806/internal/3/emc-permissions</con:value></con:property><con:property><con:name>code</con:name><con:value>200</con:value></con:property></con:properties></con:testCase><con:testCase id="97aa4c43-f671-4e57-a598-5693996b2a2c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="393888_АС4. hasMark = Null при ошибке от PIGetMarkPharmacy" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Получение данных" id="086a7884-10cc-4d52-9f96-806474aad140"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/order/{orderId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение данных" id="9490a53c-1210-44c8-bb8d-b097297fac3b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-llo" value="${#Project#Mock-url}/393888" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/3842</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="423318f3-bf64-46ac-a835-1c319d6d9454" name="Valid HTTP Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>code</con:name><con:value>LLO_BAD_REQUEST</con:value></con:property><con:property><con:name>description</con:name><con:value>Указаны неверные форматы входных параметров или переданы не все обязательные поля</con:value></con:property><con:property><con:name>type</con:name><con:value>BUSINESS</con:value></con:property><con:property><con:name>oms</con:name><con:value>7771660868000392</con:value></con:property><con:property><con:name>orderId</con:name><con:value>30005</con:value></con:property></con:properties></con:testCase><con:testCase id="c882025b-31f2-4e8e-adff-08bd676b2912" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="275116_Проверка авторизации. SUDIR_TOKEN_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Получение данных" id="d6d67dfd-9c2a-4181-94b0-69a1a18c3e25"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/order/{orderId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение данных" id="9490a53c-1210-44c8-bb8d-b097297fac3b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/3842</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="423318f3-bf64-46ac-a835-1c319d6d9454" name="Valid HTTP Status Code = 403"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbd2b57f-6eaa-4d1f-82e4-f5551f5da1b1" name="error.code = ACCESS_DENIED"><con:configuration><path>$.error.code</path><content>ACCESS_DENIED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbd2b57f-6eaa-4d1f-82e4-f5551f5da1b1" name="error.description = Доступ к запрошенной медкарте отсутствует"><con:configuration><path>$.error.description</path><content>Доступ к запрошенной медкарте отсутствует</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbd2b57f-6eaa-4d1f-82e4-f5551f5da1b1" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="123456"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
  <con:entry key="EI-Token" value="${#Project#sudirToken}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>code</con:name><con:value>LLO_BAD_REQUEST</con:value></con:property><con:property><con:name>description</con:name><con:value>Указаны неверные форматы входных параметров или переданы не все обязательные поля</con:value></con:property><con:property><con:name>type</con:name><con:value>BUSINESS</con:value></con:property><con:property><con:name>oms</con:name><con:value>7771660868000392</con:value></con:property><con:property><con:name>orderId</con:name><con:value>30005</con:value></con:property></con:properties></con:testCase><con:testCase id="6cab9f52-9384-43e9-bb3a-f4c37ba79315" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="394234_Проверка авторизации. ACCESS_DENIED" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Получение данных" id="fbd2757b-17b0-4f25-825d-5f9d87d6c8bf"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/order/{orderId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение данных" id="9490a53c-1210-44c8-bb8d-b097297fac3b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Mock-llo" value="${#Project#Mock-url}/393888" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders/3842</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="423318f3-bf64-46ac-a835-1c319d6d9454" name="Valid HTTP Status Code = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbd2b57f-6eaa-4d1f-82e4-f5551f5da1b1" name="error.code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbd2b57f-6eaa-4d1f-82e4-f5551f5da1b1" name="error.description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbd2b57f-6eaa-4d1f-82e4-f5551f5da1b1" name="error.type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="orderId" value="${#TestCase#orderId}"/>
  <con:entry key="EI-Token" value="1231}"/>
</con:parameters><con:parameterOrder><con:entry>orderId</con:entry><con:entry>oms</con:entry><con:entry>EI-Token</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>code</con:name><con:value>LLO_BAD_REQUEST</con:value></con:property><con:property><con:name>description</con:name><con:value>Указаны неверные форматы входных параметров или переданы не все обязательные поля</con:value></con:property><con:property><con:name>type</con:name><con:value>BUSINESS</con:value></con:property><con:property><con:name>oms</con:name><con:value>7771660868000392</con:value></con:property><con:property><con:name>orderId</con:name><con:value>30005</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>orderId</con:name></con:property></con:properties></con:testSuite><con:testSuite id="09900770-ee7a-4582-b0f5-8bd26de97c39" name="POST rate"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="133d82b8-3757-4156-9e69-43b1ccb01874" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="post Rate ОС Идентификатор заказа" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Поиск количества записей" id="ee3f7a90-0fd3-44cc-93c2-ac40c447cd46"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="JDBC Status" id="d2767c66-3ce3-4b19-bd9a-6e60b8ea6e70" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Сохранение количества записей" id="7f712e7a-6574-49e4-9f41-8ee3ee9e643e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Перевод значений</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Поиск количества записей</con:sourceStep><con:sourcePath>//COUNT[1]</con:sourcePath><con:targetType>count</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Добавление отзыва к аптеке. ID заказа" id="c3e46060-b639-4d5a-8a81-512817827ac2"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/rate" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Добавление отзыва к аптеке. ID заказа" id="ce1da031-e799-4052-9810-faefc8ca6359" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "mark": "${#TestCase#mark}",
  "comment": "${#TestCase#comment}",
  "orderId": ${#TestCase#orderId}
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/rate</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8e33fa7b-1b67-4fb0-be55-b184eeaf4157" name="Valid HTTP Status Code 204"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Поиск количества записей после добавления" id="a4272d89-77e0-48dc-9a12-dec795186692"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="JDBC Status" id="6a9b4b66-1b4d-428c-90c3-203eea5aec1a" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Проверка количества записей" id="74fdc7cc-2ccc-450e-9cc5-6fb7cf964531"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>count_last > count</con:name><con:type>XPATH</con:type><con:expression>//COUNT[1] > ${#TestCase#count}</con:expression><con:targetStep>Проверка записи в таблице</con:targetStep></con:condition><con:condition><con:name>count_last &lt;=count</con:name><con:type>XPATH</con:type><con:expression>//COUNT[1] &lt;= ${#TestCase#count}</con:expression><con:targetStep>Поиск количества записей</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="jdbc" name="Проверка записи в БД" id="65fc075b-e430-4ad7-85db-4c00336eb9ce"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT * FROM
(SELECT * FROM SERVICE_RATE WHERE ORDER_ID = ${#TestCase#orderId} ORDER BY ID DESC)
WHERE ROWNUM&lt;2</con:query><con:assertion type="XPath Match" id="e92abc18-5c28-496e-8774-2054c8be53d9" name="RATE Correct"><con:configuration><path>//RATE[1]</path><content>${#TestCase#mark}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="ac936365-5d9d-4a6c-b196-a13007c649ee" name="COMMENT_ Correct"><con:configuration><path>//COMMENT_[1]</path><content>${#TestCase#comment}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="23aea8df-00cb-49be-b53d-e376d753520d" name="ORDER_ID Correct"><con:configuration><path>//ORDER_ID[1]</path><content>${#TestCase#orderId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="8dd9d251-a94b-4249-8852-cf81c54d505b" name="PRESCRIPTION_ID NOT"><con:configuration><path>//PRESCRIPTION_ID[1]</path><content>&lt;PRESCRIPTION_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>comment</con:name><con:value>Test_comment</con:value></con:property><con:property><con:name>orderId</con:name><con:value>7655</con:value></con:property><con:property><con:name>mark</con:name><con:value>5</con:value></con:property><con:property><con:name>count</con:name><con:value>84</con:value></con:property></con:properties></con:testCase><con:testCase id="77ac570f-2c9f-4d8c-b0f3-7f28fd0ad03f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="post Rate ОС2 Номер рецепта" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Поиск количества записей" id="babbde88-194c-4086-834f-57904ecaad40"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="JDBC Status" id="756c31d6-ebdb-4678-a652-f4a76fae2d24" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Сохранение количества записей" id="9acee86f-fe7e-48b0-ab55-d992674948d3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Перевод значений</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Поиск количества записей</con:sourceStep><con:sourcePath>//COUNT[1]</con:sourcePath><con:targetType>count</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Добавление отзыва к аптеке. Номер рецепта" id="d61a8090-5f0d-4aee-af04-86730a135bd0"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/rate" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Добавление отзыва к аптеке. Номер рецепта" id="ce1da031-e799-4052-9810-faefc8ca6359" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "mark": "${#TestCase#mark}",
  "comment": "${#TestCase#comment}",
  "prescriptionNumber": "${#TestCase#prescriptionNumber}"
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/rate</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8e33fa7b-1b67-4fb0-be55-b184eeaf4157" name="Valid HTTP Status Code 204"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Поиск PRESCRIPTION_ID" id="22a14b3f-92ab-4c1d-b4a9-d76539dc348d"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT ID FROM PRESCRIPTION WHERE NUMBER_='${#TestCase#prescriptionNumber}'</con:query><con:assertion type="JDBC Status" id="b10bd7fa-1ace-4408-a5de-05076d44bb27" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись PRESCRIPTION_ID" id="0c8f2e67-9dad-4de7-9fa0-fbbcc2aeabd8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Prescription_id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Поиск PRESCRIPTION_ID</con:sourceStep><con:sourcePath>//ID[1]/text()[1]</con:sourcePath><con:targetType>PRESCRIPTION_ID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Поиск количества записей после добавления" id="457694d3-2a21-4997-813f-e3ce73498296"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="JDBC Status" id="33b0e1cd-7768-4771-a531-0e3ce885ac0d" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="goto" name="Проверка количества записей" id="8ea1a4f0-c67c-4a9a-8e7b-c7551689d2fd"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>count_last > count</con:name><con:type>XPATH</con:type><con:expression>//COUNT[1] > ${#TestCase#count}</con:expression><con:targetStep>Проверка записи в таблице</con:targetStep></con:condition><con:condition><con:name>count_last &lt;=count</con:name><con:type>XPATH</con:type><con:expression>//COUNT[1] &lt;= ${#TestCase#count}</con:expression><con:targetStep>Поиск количества записей</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="jdbc" name="Проверка записи в БД" id="289fef39-07a1-4caf-9967-2751311020a0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT * FROM
(SELECT * FROM SERVICE_RATE  WHERE PRESCRIPTION_ID = ${#TestCase#PRESCRIPTION_ID} ORDER BY ID DESC)
WHERE ROWNUM&lt;2</con:query><con:assertion type="XPath Match" id="e92abc18-5c28-496e-8774-2054c8be53d9" name="RATE Correct"><con:configuration><path>//RATE[1]</path><content>${#TestCase#mark}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="ac936365-5d9d-4a6c-b196-a13007c649ee" name="COMMENT_ Correct"><con:configuration><path>//COMMENT_[1]</path><content>${#TestCase#comment}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="23aea8df-00cb-49be-b53d-e376d753520d" name="ORDER_ID Correct"><con:configuration><path>//ORDER_ID[1]</path><content>&lt;ORDER_ID/></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="8dd9d251-a94b-4249-8852-cf81c54d505b" name="PRESCRIPTION_ID NOT"><con:configuration><path>//PRESCRIPTION_ID[1]</path><content>${#TestCase#PRESCRIPTION_ID}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>comment</con:name><con:value>Test_comment</con:value></con:property><con:property><con:name>prescriptionNumber</con:name><con:value>01Э4519351403</con:value></con:property><con:property><con:name>mark</con:name><con:value>5</con:value></con:property><con:property><con:name>PRESCRIPTION_ID</con:name><con:value>450196001</con:value></con:property><con:property><con:name>count</con:name><con:value>85</con:value></con:property></con:properties></con:testCase><con:testCase id="02693cc3-a03e-45dd-9ddb-0f590a517d70" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="post Rate АС1 Некорректный идентификатор заказа" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Поиск количества записей" id="f0747b09-6340-4fa1-9c3a-8600cd08018a"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="JDBC Status" id="aa4793ad-a433-4b40-8baf-0208e5fde497" name="Запрос выполнился"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Сохранение количества записей" id="57cc855d-e04f-42a7-ae54-5f2507c35ce6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Перевод значений</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Поиск количества записей</con:sourceStep><con:sourcePath>//COUNT[1]</con:sourcePath><con:targetType>count</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Добавление отзыва в аптеке. ID заказа" id="7904cd0c-8fac-4ee4-aaa8-b1d2276ecaa8"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/rate" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Добавление отзыва в аптеке. ID заказа" id="ce1da031-e799-4052-9810-faefc8ca6359" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "mark": "${#TestCase#mark}",
  "comment": "${#TestCase#comment}",
  "orderId": ${#TestCase#orderId}
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/rate</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8e33fa7b-1b67-4fb0-be55-b184eeaf4157" name="Valid HTTP Status Code 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="71414dab-04a7-4d79-8c8a-a9e7ca209df9" name="code Correct"><con:configuration><path>$.error.code</path><content>LLO_PRESCRIPTION_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e2012414-c135-410e-8785-d50ee126c22f" name="description correct"><con:configuration><path>$.error.description</path><content>Рецепт или заказ не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df9c69cb-0bf5-45b7-8c86-d1c4a7103bf3" name="type correct"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Поиск количества записей после добавления" id="36321164-7aee-4399-ae92-01e6c65c08af"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="XPath Match" id="b6cc2460-bd9f-4c8f-a235-983d7111ae02" name="Количество записей в таблице не увеличилось"><con:configuration><path>//COUNT[1]</path><content>${#TestCase#count}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>comment</con:name><con:value>Test_comment_АС1</con:value></con:property><con:property><con:name>orderId</con:name><con:value>76557</con:value></con:property><con:property><con:name>mark</con:name><con:value>5</con:value></con:property><con:property><con:name>count</con:name><con:value>86</con:value></con:property></con:properties></con:testCase><con:testCase id="1af6416c-3f90-4830-b06b-9162702f736c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="post Rate АС1 Некорректный номер рецепта" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Поиск количества записей" id="d2b4aec1-892a-4f4a-bbf9-1e6391cee931"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="JDBC Status" id="f7492ad1-1bbb-4ad0-bb84-a16052ef0a8f" name="Запрос выполнился"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Сохранение количества записей" id="833ef799-3c7e-4bda-aa4e-9e4cf7841ece"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Перевод значений</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Поиск количества записей</con:sourceStep><con:sourcePath>//COUNT[1]</con:sourcePath><con:targetType>count</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Добавление отзыва в аптеке. Номер рецепта" id="e785c1ab-1c98-4e97-aa2f-64e6745161ad"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/rate" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Добавление отзыва в аптеке. Номер рецепта" id="ce1da031-e799-4052-9810-faefc8ca6359" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "mark": "${#TestCase#mark}",
  "comment": "${#TestCase#comment}",
  "prescriptionNumber": "${#TestCase#prescriptionNumber}"
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/rate</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8e33fa7b-1b67-4fb0-be55-b184eeaf4157" name="Valid HTTP Status Code 404"><con:configuration><codes>404
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="82d480d6-bd47-4859-bb7a-22918829e441" name="code correct"><con:configuration><path>$.error.code</path><content>LLO_PRESCRIPTION_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2d85e4c7-3abf-4086-b8e6-b0c50db4be6c" name="description correct"><con:configuration><path>$.error.description</path><content>Рецепт или заказ не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf250cd2-8ac2-425c-baa1-2151d8c7e562" name="type correct"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Поиск количества записей после добавления" id="281fdfa3-4736-4b57-b218-ab9969bda384"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="XPath Match" id="b6cc2460-bd9f-4c8f-a235-983d7111ae02" name="Количество записей в таблице не увеличилось"><con:configuration><path>//COUNT[1]</path><content>${#TestCase#count}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>comment</con:name><con:value>Test_comment_АС1_invalid_prescription</con:value></con:property><con:property><con:name>prescriptionNumber</con:name><con:value>76557</con:value></con:property><con:property><con:name>mark</con:name><con:value>5</con:value></con:property><con:property><con:name>count</con:name><con:value>86</con:value></con:property></con:properties></con:testCase><con:testCase id="d9d35795-4c4c-406b-804a-35165c4f2a13" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="post Rate АС2 Не передана оценка" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Поиск количества записей" id="e7b67df9-1365-453f-8f28-27cb7dc469c5"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="JDBC Status" id="f7492ad1-1bbb-4ad0-bb84-a16052ef0a8f" name="Запрос выполнился"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Сохранение количества записей" id="0b7078be-dba2-40db-8845-34c5c5de9aac"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Перевод значений</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Поиск количества записей</con:sourceStep><con:sourcePath>//COUNT[1]</con:sourcePath><con:targetType>count</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Добавление отзыва в аптеке. Номер заказа" id="b0694d42-eb99-425f-b259-2577a0d53c91"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/rate" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Добавление отзыва в аптеке. Номер заказа" id="ce1da031-e799-4052-9810-faefc8ca6359" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "mark": "",
  "comment": "${#TestCase#comment}",
  "orderId": ${#TestCase#orderId}
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/rate</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8e33fa7b-1b67-4fb0-be55-b184eeaf4157" name="Valid HTTP Status Code 400"><con:configuration><codes>400
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f8eeddb4-bced-4c45-b579-e604b39b5e1b" name="code correct"><con:configuration><path>$.error.code</path><content>LLO_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="36a757f2-7351-45e7-a583-381607637f03" name="description correct"><con:configuration><path>$.error.description</path><content>Указаны неверные форматы входных параметров или переданы не все обязательные поля</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2932ea2d-3229-4420-acde-0afa79920230" name="type correct"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Поиск количества записей после добавления" id="b5eb5624-7c70-4cee-a796-5332345b3651"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="XPath Match" id="b6cc2460-bd9f-4c8f-a235-983d7111ae02" name="Количество записей в таблице не увеличилось"><con:configuration><path>//COUNT[1]</path><content>${#TestCase#count}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>comment</con:name><con:value>Test_comment_АС1</con:value></con:property><con:property><con:name>orderId</con:name><con:value>76557</con:value></con:property><con:property><con:name>mark</con:name><con:value>5</con:value></con:property><con:property><con:name>count</con:name><con:value>86</con:value></con:property></con:properties></con:testCase><con:testCase id="288ce34e-fef8-4dd2-913c-4f980d87be87" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="post Rate АС2 Не передан номер заказа" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Поиск количества записей" id="13a5b999-96b1-4419-83e4-0184e562f16d"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="JDBC Status" id="f7492ad1-1bbb-4ad0-bb84-a16052ef0a8f" name="Запрос выполнился"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Сохранение количества записей" id="74288504-43a3-4967-8571-170e79b981b8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Перевод значений</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Поиск количества записей</con:sourceStep><con:sourcePath>//COUNT[1]</con:sourcePath><con:targetType>count</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Добавление отзыва в аптеке. Номер заказа" id="a91fb83b-288e-4360-b4ab-e4321757ce57"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/rate" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Добавление отзыва в аптеке. Номер заказа" id="ce1da031-e799-4052-9810-faefc8ca6359" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "mark": "${#TestCase#mark}",
  "comment": "${#TestCase#comment}",
  "orderId": ""
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/rate</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8e33fa7b-1b67-4fb0-be55-b184eeaf4157" name="Valid HTTP Status Code 404"><con:configuration><codes>404
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d0817b9-4341-4b1b-b063-d18a4e6260d9" name="code correct"><con:configuration><path>$.error.code</path><content>LLO_PRESCRIPTION_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="08aeaf69-54bb-40dc-9f25-f66511b7c46f" name="description correct"><con:configuration><path>$.error.description</path><content>Рецепт или заказ не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0443c12-5605-4742-9d45-10f6af02e5fa" name="type correct"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="Поиск количества записей после добавления" id="7adbbea3-b56d-4d87-8295-5eaed3ed6c35"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString> ${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT COUNT(*) FROM SERVICE_RATE</con:query><con:assertion type="XPath Match" id="b6cc2460-bd9f-4c8f-a235-983d7111ae02" name="Количество записей в таблице не увеличилось"><con:configuration><path>//COUNT[1]</path><content>${#TestCase#count}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>comment</con:name><con:value>Test_comment_АС1</con:value></con:property><con:property><con:name>orderId</con:name><con:value>76557</con:value></con:property><con:property><con:name>mark</con:name><con:value>5</con:value></con:property><con:property><con:name>count</con:name><con:value>86</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>endpoint</con:name><con:value>http://emiasinfo-application.test.emias.mos.ru</con:value></con:property><con:property><con:name>driver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>connect</con:name><con:value>jdbc:oracle:thin:EMIAS_LLO/EMIAS_LLO@10.2.172.241:1521/emiasdb</con:value></con:property></con:properties></con:testSuite><con:testSuite id="2d311591-7fc6-41e3-aad8-e11134d78d42" name="GET pharmaciesGeo"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="99cebef1-1835-44af-9769-9b69927d0f42" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга" searchProperties="true"><con:description>TestCase generated for REST Resource [pharmaciesGeo] located at [/api/v2/prescription/pharmaciesGeo]</con:description><con:settings/><con:testStep type="restrequest" name="GetPharmaciesGeo" id="109e1d97-0985-437f-9236-052fb7c81c9e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/pharmaciesGeo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetPharmaciesGeo" id="6cb6005a-fe8a-43cd-88af-6da8077310a1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/pharmaciesGeo</con:originalUri><con:assertion type="JsonPath Match" id="95d0dcd4-0541-4d74-ae54-160c67ef7cff" name="JsonPath [0].id"><con:configuration><path>$.payload.pharmacy[0].id</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95d0dcd4-0541-4d74-ae54-160c67ef7cff" name="JsonPath [0].shortName"><con:configuration><path>$.payload.pharmacy[0].shortName</path><content>ГБУЗ «ЦЛО ДЗМ» Аптека №11</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95d0dcd4-0541-4d74-ae54-160c67ef7cff" name="JsonPath [0].geoTag"><con:configuration><path>$.payload.pharmacy[0].geoTag</path><content>[55.798363, 37.546435]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95d0dcd4-0541-4d74-ae54-160c67ef7cff" name="JsonPath [0].address"><con:configuration><path>$.payload.pharmacy[0].address</path><content>г. Москва, ул. Красноармейская, д.9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95d0dcd4-0541-4d74-ae54-160c67ef7cff" name="JsonPath [0].stationId"><con:configuration><path>$.payload.pharmacy[0].nearestMetro[0].stationId</path><content>35</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95d0dcd4-0541-4d74-ae54-160c67ef7cff" name="JsonPath [0].metroTitle"><con:configuration><path>$.payload.pharmacy[0].nearestMetro[0].metroTitle</path><content>Аэропорт</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95d0dcd4-0541-4d74-ae54-160c67ef7cff" name="JsonPath [0].is24Hours"><con:configuration><path>$.payload.pharmacy[0].is24Hours</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95d0dcd4-0541-4d74-ae54-160c67ef7cff" name="JsonPath [0].type"><con:configuration><path>$.payload.pharmacy[0].type</path><content>benefit</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" name="PIGetPharmacyGeo" id="d57533d5-4aef-4c5b-ac6d-019970f2f282"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetPharmacyGeo</con:operation><con:request name="PIGetPharmacyGeo" id="73f28180-4094-4c8d-9405-bc4c26ad6f24"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
<soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetPharmacyGeoRequest>
         <!--Optional:-->
         <typ:ident>EMIASINFO</typ:ident>
         <!--Zero or more repetitions:-->
         <typ:options>
            <!--Zero or more repetitions:-->
            <typ:entry key="get_flag_commercial">true</typ:entry>
         </typ:options>
      </typ:piGetPharmacyGeoRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="22dae3f0-7e06-4706-ae5f-5f7160ab8e8c"/><con:assertion type="SOAP Fault Assertion" id="48b31818-21d8-4386-b163-8b18be39563e" name="Not SOAP Fault"/><con:assertion type="XPath Match" id="c2121ab3-8d2f-4573-a9ef-5dfb57548f1c" name="XPath [1].address"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace piGetPharmacyGeoResponse='http://emias2.gov.ru/business/llo/v4/types';

//*:piGetPharmacyGeoResponse/*:pharmacy[1]/*:address</path><content>г. Москва, ул. Красноармейская, д.9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="c2121ab3-8d2f-4573-a9ef-5dfb57548f1c" name="XPath [1].geoTag"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace piGetPharmacyGeoResponse='http://emias2.gov.ru/business/llo/v4/types';

//*:piGetPharmacyGeoResponse/*:pharmacy[1]/*:geoTag</path><content>[55.798363, 37.546435]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="c2121ab3-8d2f-4573-a9ef-5dfb57548f1c" name="XPath [1].ID"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace piGetPharmacyGeoResponse='http://emias2.gov.ru/business/llo/v4/types';

//*:piGetPharmacyGeoResponse/*:pharmacy[1]/*:ID</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="c2121ab3-8d2f-4573-a9ef-5dfb57548f1c" name="XPath [1].is24Hours"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace piGetPharmacyGeoResponse='http://emias2.gov.ru/business/llo/v4/types';

//*:piGetPharmacyGeoResponse/*:pharmacy[1]/*:is24Hours</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="c2121ab3-8d2f-4573-a9ef-5dfb57548f1c" name="XPath [1].metroTitle"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace piGetPharmacyGeoResponse='http://emias2.gov.ru/business/llo/v4/types';

//*:piGetPharmacyGeoResponse/*:pharmacy[1]/*:nearestMetro/*:metroTitle</path><content>Аэропорт</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="c2121ab3-8d2f-4573-a9ef-5dfb57548f1c" name="XPath [1].stationID"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace piGetPharmacyGeoResponse='http://emias2.gov.ru/business/llo/v4/types';

//*:piGetPharmacyGeoResponse/*:pharmacy[1]/*:nearestMetro/*:stationID</path><content>35</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="c2121ab3-8d2f-4573-a9ef-5dfb57548f1c" name="XPath [1].shortName"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace piGetPharmacyGeoResponse='http://emias2.gov.ru/business/llo/v4/types';

//*:piGetPharmacyGeoResponse/*:pharmacy[1]/*:shortName</path><content>ГБУЗ «ЦЛО ДЗМ» Аптека №11</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="c2121ab3-8d2f-4573-a9ef-5dfb57548f1c" name="XPath [1].type"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace piGetPharmacyGeoResponse='http://emias2.gov.ru/business/llo/v4/types';

//*:piGetPharmacyGeoResponse/*:pharmacy[1]/*:type</path><content>benefit</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Сравнить количество объектов в ответах" id="f29e981b-045a-4cfb-a39e-82ffa210fab3"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def restResponse = context.expand( '${GetPharmaciesGeo#Response}' ).toString()
def json =  new JsonSlurper().parseText(restResponse)
def jsonObects = json.payload.pharmacy

def soapResponse = context.expand('${PIGetPharmacyGeo#Response}')
def xml = new XmlSlurper().parseText(soapResponse)
def xmlObjects=xml.Body.piGetPharmacyGeoResponse.pharmacy

log.info("json: "+jsonObects.size())
log.info("xml: "+xmlObjects.size())
assert jsonObects.size() == xmlObjects.size()</script></con:config></con:testStep><con:testStep type="groovy" name="Маппинг" id="6c65c4c0-406b-4aa8-9f96-3c0840c75310"><con:description/><con:settings/><con:config><script>import groovy.json.JsonSlurper

def restResponse = context.expand( '${GetPharmaciesGeo#Response}' ).toString()
def json =  new JsonSlurper().parseText(restResponse)
def jsonObects = json.payload.pharmacy

def soapResponse = context.expand('${PIGetPharmacyGeo#Response}')
def xml = new XmlSlurper().parseText(soapResponse)
xmlObjects=xml.Body.piGetPharmacyGeoResponse.pharmacy

for (i=0;i&lt;jsonObects.size();i++)
{
	log.info(i)
	def jsonObject = jsonObects[i]
	def xmlObject = xmlObjects[i]

	assert jsonObject.id == xmlObject.ID.toLong()
	assert jsonObject.shortName == xmlObject.shortName.toString()

	if (jsonObject.geoTag != null)
	{
		assert jsonObject.geoTag == xmlObject.geoTag.toString()
	}
	else
	{
		assert  xmlObject.geoTag.text() == ""
	}
	
	assert jsonObject.address == xmlObject.address.toString()
	
	if (jsonObject.nearestMetro.size() > 0)
	{
		for(def i = 0; i &lt; jsonObject.nearestMetro.size(); i++)
		{
			assert jsonObject.nearestMetro[i].stationId == xmlObject.nearestMetro[i].stationID.toLong()
			assert jsonObject.nearestMetro[i].metroTitle == xmlObject.nearestMetro[i].metroTitle.toString()
		}
	}
	
	if (jsonObject.is24Hours != null)
	{
		assert jsonObject.is24Hours == xmlObject.is24Hours.toBoolean()
	}
	else
	{
		assert   xmlObject.is24Hours.text() == ""
	}
	
	if (jsonObject.type != null)
	{
		assert jsonObject.type == xmlObject.type.toString()
	}
	else
	{
		assert   xmlObject.type.text() == ""
	}
	
	if (jsonObject.isCommercial != null)
	{
		assert jsonObject.isCommercial == xmlObject.isCommercial.toBoolean()
	}
	else
	{
		assert  xmlObject.isCommercial.text() == ""
	}
}

</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>InfoEndpointURL</con:name><con:value>http://emiasinfo1.emias.solit-clouds.ru/</con:value></con:property><con:property><con:name>LLOEndpointURL</con:name><con:value>http://esbcamelvv.test.emias.mos.ru//proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:value></con:property></con:properties></con:testSuite><con:testSuite id="20a51fff-b3e8-4d87-a339-4b5fc5feaac6" name="POST pharmacies"><con:description>TestSuite generated for REST Service [http://emiasinfo-application.test.emias.mos.ru]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="37cbd161-f022-47cb-bae2-600604348886" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="маппинг" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Запрос аптек" id="473dcd44-809e-452f-878c-026ecb4be81c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString>${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT ID FROM PHARMACY 
WHERE ADDRESS IS NOT NULL
AND SHORT_NAME IS NOT NULL
AND NAME_ IS NOT NULL
AND IS_24H  IS NOT NULL
ORDER BY ID DESC</con:query><con:assertion type="JDBC Status" id="50f8f6c3-82ba-44e6-8062-29f339e60970" name="JDBC Status"/><con:assertion type="Simple Contains" id="1c6d6a15-39cf-4bb8-913d-3fa62c6300e1" name="Contains"><con:configuration><token>ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="fff227a4-7915-4997-97a0-8db141d836b7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ID1</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Запрос аптек</con:sourceStep><con:sourcePath>//Row[1]/ID</con:sourcePath><con:targetType>pharmacyId0</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ID2</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Запрос аптек</con:sourceStep><con:sourcePath>//Row[2]/ID</con:sourcePath><con:targetType>pharmacyId1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ID3</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Запрос аптек</con:sourceStep><con:sourcePath>//Row[3]/ID</con:sourcePath><con:targetType>pharmacyId2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ID4</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Запрос аптек</con:sourceStep><con:sourcePath>//Row[4]/ID</con:sourcePath><con:targetType>pharmacyId3</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Pharmacies1" id="01d34a86-3c2a-4080-a1ff-215a80ba0f1e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/pharmacies" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Pharmacies1" id="c431b4ec-4c1b-4886-bb0a-36d382c697e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "pharmacyId": [
    ${#TestCase#pharmacyId0},
    ${#TestCase#pharmacyId1},
    ${#TestCase#pharmacyId2},
    ${#TestCase#pharmacyId3}
  ],
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 2
  }
} </con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/pharmacies</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4b3d1ca0-e587-418e-b2cb-70aa1e5de5d6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a0828d47-4991-4bf1-bbf3-345067b5f7fb" name="Contains"><con:configuration><token>pharmacy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" name="GetPharmacyList1" id="320d0144-e5cf-40b3-b00d-733177759ccc"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetPharmacyList</con:operation><con:request name="GetPharmacyList1" id="64ab2399-c028-4d79-bb9e-6c7e4b3ff572"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lloEndpoint} </con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
<soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetPharmacyListRequest>
         <typ:filters>
            <typ:pharmacyID>${#TestCase#pharmacyId0}</typ:pharmacyID>
            <typ:pharmacyID>${#TestCase#pharmacyId1}</typ:pharmacyID>
            <typ:pharmacyID>${#TestCase#pharmacyId2}</typ:pharmacyID>
            <typ:pharmacyID>${#TestCase#pharmacyId3}</typ:pharmacyID>
         </typ:filters>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:pagingOptions>
            <typ:pageNumber>0</typ:pageNumber>
            <typ:pageSize>2</typ:pageSize>
         </typ:pagingOptions>
      </typ:piGetPharmacyListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="390a0bec-49b7-4d8f-a477-a8348598bc8d"/><con:assertion type="Simple Contains" id="84f3298d-868a-469d-ba57-1f1c736d7536" name="Contains"><con:configuration><token>pharmacy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="первая страница списка сравнение ИД" id="12e1cd54-c4e3-4cb4-b64d-49272cc7d69b"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def PharmaciesResponse = context.expand('${Pharmacies1#Response}')
def slurperJson = new JsonSlurper()
def Pharmacies = slurperJson.parseText(PharmaciesResponse)

def GetPharmacyListResponse = context.expand('${GetPharmacyList1#Response}')
GetPharmacyList = new XmlSlurper().parseText(GetPharmacyListResponse)

assert Pharmacies.payload.pharmacy[0].id == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy.id[0].toLong()
assert Pharmacies.payload.pharmacy[1].id == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy.id[1].toLong()
</script></con:config></con:testStep><con:testStep type="restrequest" name="Pharmacies2" id="b10c801a-1b18-4c9f-9b3c-c6a7a16ff9e5"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/pharmacies" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Pharmacies2" id="c431b4ec-4c1b-4886-bb0a-36d382c697e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "pharmacyId": [
    ${#TestCase#pharmacyId0},
    ${#TestCase#pharmacyId1},
    ${#TestCase#pharmacyId2},
    ${#TestCase#pharmacyId3}
  ],
  "pagingOptions": {
    "pageNumber": 1,
    "pageSize": 2
  }
} </con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/pharmacies</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4b3d1ca0-e587-418e-b2cb-70aa1e5de5d6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a0828d47-4991-4bf1-bbf3-345067b5f7fb" name="Contains"><con:configuration><token>pharmacy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" name="GetPharmacyList2" id="7df330ec-12f5-4e0c-a7b0-a3ac1e93787a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetPharmacyList</con:operation><con:request name="GetPharmacyList2" id="79ab004c-734c-4e90-9450-3779115a8446"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lloEndpoint} </con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
<soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetPharmacyListRequest>
         <typ:filters>
            <typ:pharmacyID>${#TestCase#pharmacyId0}</typ:pharmacyID>
            <typ:pharmacyID>${#TestCase#pharmacyId1}</typ:pharmacyID>
            <typ:pharmacyID>${#TestCase#pharmacyId2}</typ:pharmacyID>
            <typ:pharmacyID>${#TestCase#pharmacyId3}</typ:pharmacyID>
         </typ:filters>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:pagingOptions>
            <typ:pageNumber>1</typ:pageNumber>
            <typ:pageSize>2</typ:pageSize>
         </typ:pagingOptions>
      </typ:piGetPharmacyListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="76768910-d273-4b9d-bcd1-16cd31da3f58"/><con:assertion type="Simple Contains" id="7ef58d84-01af-4990-b49f-1deabb077f33" name="Contains"><con:configuration><token>pharmacy</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="вторая страница списка сравнение ИД" id="3689eabe-4850-4fa5-8c40-18a1932f3b20"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def PharmaciesResponse = context.expand('${Pharmacies2#Response}')
def slurperJson = new JsonSlurper()
def Pharmacies = slurperJson.parseText(PharmaciesResponse)

def GetPharmacyListResponse = context.expand('${GetPharmacyList2#Response}')
GetPharmacyList = new XmlSlurper().parseText(GetPharmacyListResponse)

assert Pharmacies.payload.pharmacy[0].id == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy.id[0].toLong()
assert Pharmacies.payload.pharmacy[1].id == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy.id[1].toLong()</script></con:config></con:testStep><con:testStep type="groovy" name="Сравнение параметров" id="ad4de0a1-08b4-41b1-a3ee-64e73f05a853"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def PharmaciesResponse = context.expand('${Pharmacies2#Response}')
def slurperJson = new JsonSlurper()
def Pharmacies = slurperJson.parseText(PharmaciesResponse)

def GetPharmacyListResponse = context.expand('${GetPharmacyList2#Response}')
GetPharmacyList = new XmlSlurper().parseText(GetPharmacyListResponse)

assert Pharmacies.payload.pharmacy[0].id == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].id.toLong()
assert Pharmacies.payload.pharmacy[0].name == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].name.toString()
assert Pharmacies.payload.pharmacy[0].shortName == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].shortName.toString()
assert Pharmacies.payload.pharmacy[0].address == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].address.toString()
assert Pharmacies.payload.pharmacy[0].is24Hours == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].is24Hours.toBoolean()

if (Pharmacies.payload.pharmacy[0].schedule != null)
{
	assert Pharmacies.payload.pharmacy[0].schedule.interval[0] == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].schedule.toString()
}

if (Pharmacies.payload.pharmacy[0].schedule != null)
{
	assert Pharmacies.payload.pharmacy[0].schedule.interval[0] == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].schedule.toString()
}	

if (Pharmacies.payload.pharmacy[0].website != null)
{
	assert Pharmacies.payload.pharmacy[0].website == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].contacts.website.toString()
}	

if (Pharmacies.payload.pharmacy[0].rate != null)
{
	assert Pharmacies.payload.pharmacy[0].rate == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].rate.toString()
}

if (Pharmacies.payload.pharmacy[0].geoTag != null)
{
	assert Pharmacies.payload.pharmacy[0].geoTag == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].geoTag.toString()
}

if (Pharmacies.payload.pharmacy[0].phones != null)
{
	assert Pharmacies.payload.pharmacy[0].phones.phone[0] == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].contacts.phone[0].toString()
}


if (Pharmacies.payload.pharmacy[0].nearestMetro[0] != null)
{
	assert Pharmacies.payload.pharmacy[0].nearestMetro.stationId[0] == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].nearestMetro.stationID.toInteger()
}


if (Pharmacies.payload.pharmacy[0].nearestMetro[0] != null)
{
	assert Pharmacies.payload.pharmacy[0].nearestMetro.metroTitle[0] == GetPharmacyList.Body.piGetPharmacyListResponse.pharmacy[0].nearestMetro.metroTitle.toString()
}



</script></con:config></con:testStep><con:properties><con:property><con:name>pharmacyId0</con:name><con:value>1782845782</con:value></con:property><con:property><con:name>pageNumber0</con:name><con:value>0</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>2</con:value></con:property><con:property><con:name>pharmacyId1</con:name><con:value>793761495</con:value></con:property><con:property><con:name>pharmacyId2</con:name><con:value>793761020</con:value></con:property><con:property><con:name>pageNumber1</con:name><con:value>1</con:value></con:property><con:property><con:name>pharmacyId3</con:name><con:value>793759607</con:value></con:property></con:properties></con:testCase><con:testCase id="c9bd8ff4-51f8-45b5-bdfb-049d0ef3ad36" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AC2" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Некорректный тип данных" id="7ea2179f-0327-4cac-95ea-f85a8a578366"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/pharmacies" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Некорректный тип данных" id="c431b4ec-4c1b-4886-bb0a-36d382c697e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "pharmacyId": ["ergrg"]
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 1
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/pharmacies</con:originalUri><con:assertion type="JsonPath Match" id="6f1c6e9f-2be4-4656-8bb8-f346fda2b48c" name="code"><con:configuration><path>$.error.code</path><content>SERVER_ERROR_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30f720bb-8f11-4bf6-9cd5-0fc1660039ec" name="description"><con:configuration><path>$.error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e899e087-15dc-4199-81c3-77ad75d2596c" name="type"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Без параметра пагинации" id="b6b4cd84-25a6-4eb6-ac16-58b611973dc2"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/pharmacies" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Без параметра пагинации" id="c431b4ec-4c1b-4886-bb0a-36d382c697e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "pharmacyId": [
    ${#TestCase#pharmacyId0},
    ${#TestCase#pharmacyId1},
    ${#TestCase#pharmacyId2},
    ${#TestCase#pharmacyId3}
  ]
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/pharmacies</con:originalUri><con:assertion type="JsonPath Match" id="6f1c6e9f-2be4-4656-8bb8-f346fda2b48c" name="code"><con:configuration><path>$.error.code</path><content>SERVER_ERROR_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30f720bb-8f11-4bf6-9cd5-0fc1660039ec" name="description"><con:configuration><path>$.error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e899e087-15dc-4199-81c3-77ad75d2596c" name="type"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Без параметра ИД" id="b7a255f1-6974-4ec7-b043-da9d7816491f"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/pharmacies" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Без параметра ИД" id="c431b4ec-4c1b-4886-bb0a-36d382c697e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "pagingOptions": {
    "pageNumber": 0,
    "pageSize": 2
  }
} </con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/pharmacies</con:originalUri><con:assertion type="JsonPath Match" id="6f1c6e9f-2be4-4656-8bb8-f346fda2b48c" name="code"><con:configuration><path>$.error.code</path><content>SERVER_ERROR_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30f720bb-8f11-4bf6-9cd5-0fc1660039ec" name="description"><con:configuration><path>$.error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e899e087-15dc-4199-81c3-77ad75d2596c" name="type"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>pharmacyId</con:name><con:value>["ergrg"]</con:value></con:property><con:property><con:name>pageNumber</con:name><con:value>0</con:value></con:property><con:property><con:name>pageSize</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="5ee28b7e-6f84-4d18-9d11-7375e166b05b" name="GET orders"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="be008e34-3aff-4071-bb3e-edb0d31c713f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Проверка маппинга полученного списка заказов" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET orders" id="318d9cd9-d97f-4a70-8652-81c1b49493db"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false" timeout="29906"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value=""/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="piGetDrugOrders" id="06ae4d73-ca53-4dda-a2fd-53b7becf04b8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetDrugOrders</con:operation><con:request name="piGetDrugOrders" id="47cfd122-801f-49fe-8a8e-5e24c03c8be5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>\r
      <typ:piGetDrugOrdersRequest>\r
         <typ:ident>EMIASINFO</typ:ident>\r
         <typ:oms>${#TestCase#oms}</typ:oms>
      </typ:piGetDrugOrdersRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="6f2354fb-d7e9-4f02-8042-d39c432e6f14"/><con:assertion type="SOAP Fault Assertion" id="1906ef9e-0b55-426f-88d6-cdec8dcee7d0"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="PIGetMarkPharmacy" id="61902abb-3089-4b11-9a53-eeb2c4dda500"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetMarkPharmacy</con:operation><con:request name="PIGetMarkPharmacy" id="6977a275-65ec-4176-9a39-cb4809b15927"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>\r
      <typ:piGetMarkPharmacyRequest>\r
         <typ:ident>EMIASINFO</typ:ident>\r
         <typ:markedObject>\r
            <!--Optional:-->\r
            <typ:orderID>6779</typ:orderID>\r
         </typ:markedObject>\r
      </typ:piGetMarkPharmacyRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="6c3354ff-e826-4b4c-a96b-e82a3030f6fa"/><con:assertion type="SOAP Fault Assertion" id="d552aff3-14aa-4162-a689-700ebb276ea1"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга параметров" id="6833f274-93cb-4a6e-a6ee-635ba4045949"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def getOrdersResponse = context.expand('${GET orders#Response}')
orders = new JsonSlurper().parseText(getOrdersResponse)

def getOrdersXMLResponse = context.expand('${piGetDrugOrders#Response}')
ordersXml = new XmlSlurper().parseText(getOrdersXMLResponse)

orderXml=ordersXml.Body.piGetDrugOrdersResponse.order
sizeXml=orderXml.size()
order=orders.payload
sizeJson=order.size()

length = order[0].createDate.toString().size()

//assert sizeXml == sizeJson

//Проверяем правильность маппинга
for (int i = 0; i < sizeJson; i++){
	findedOrderXml = orderXml.find{it.orderID == order[i].orderId}
	assert order[i].qRCode.toString() == findedOrderXml.QRCode.toString()
	assert order[i].aggregatorName.toString() == findedOrderXml.agregatorName.toString()
	assert order[i].orderNumber.toString() == findedOrderXml.externalID.toString()
	
	String XmlDate = findedOrderXml.createDate.toString()
	assert order[i].createDate .toString() ==  findedOrderXml.createDate.toString().substring(0, length)

	assert order[i].state.code.toString() == findedOrderXml.statusCode.toString()
	if(findedOrderXml.statusCode.toString() == "executed")
		assert order[i].state.name.toString() == "В работе"
	
	if(findedOrderXml.statusCode.toString() == "completed"){
		assert order[i].state.name.toString() == "Исполнен"

		testRunner.testCase.setPropertyValue('orderID', order[i].orderId.toString())
		project = testRunner.testCase.testSuite.project
		testRunner.runTestStep(project.testSuites['GET orders'].testCases['ОС. Проверка маппинга полученного списка заказов'].testSteps['PIGetMarkPharmacy'])

		def getMarkXmlResponse = context.expand('${PIGetMarkPharmacy#Response}')
		markXml = new XmlSlurper().parseText(getMarkXmlResponse)

		mark = markXml.Body.piGetMarkPharmacyResponse.mark
		if(mark == null || mark == "")
			assert order[i].hasMark == false
	}
	
	if(findedOrderXml.statusCode.toString() == "cancelled")
		assert order[i].state.name.toString() == "Отменён"
}

//Проверяем правильность сортировки
boolean rightOrder = true
for (int i = 0; i < sizeJson - 1; i++){
	if(order[i].state.code.toString() == "executed" && order[i+1].state.code.toString()  == "cancelled")
		rightOrder = false
	if(order[i].state.code.toString() == "completed" && order[i+1].state.code.toString() == "executed")
		rightOrder = false
	if(order[i].state.code.toString() == "cancelled" && (order[i+1].state.code.toString() == "executed" || order[i+1].state.code.toString() == "completed") )
		rightOrder = false
	assert rightOrder
}

for (int i = 0; i < sizeJson - 1; i ++){
	if(order[i].state.code.toString() == order[i+1].state.code.toString()){
		DateFirst = Date.parse('yyyy-MM-dd', order[i].createDate .toString().substring(0, 10))
		DateSecond = Date.parse('yyyy-MM-dd', order[i+1].createDate .toString().substring(0, 10))
														
		assert (1 == DateSecond.compareTo(DateFirst)) || (0 == DateSecond.compareTo(DateFirst)) : "Объект: "+i+""
	}
	
}



log.info "end"]]></script></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>7179</con:value></con:property><con:property><con:name>oms</con:name><con:value>7755220898002957</con:value></con:property></con:properties></con:testCase><con:testCase id="c51159aa-34b9-4c87-a5ec-cc682f876585" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение списков заказа по рецептам пациента state.сode = executed_221889" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET orders" id="f48b3f01-ac19-478f-8335-9f8b33dbaf74"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false" timeout="29906"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга параметров" id="ed7977c5-750d-4204-bd80-1ee0f0f5c401"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def getOrdersResponse = context.expand('${GET orders#Response}')
orders = new JsonSlurper().parseText(getOrdersResponse)

def getOrdersXMLResponse = context.expand('${piGetDrugOrders#Response}')
ordersXml = new XmlSlurper().parseText(getOrdersXMLResponse)

orderXml=ordersXml.Body.piGetDrugOrdersResponse.order
sizeXml=orderXml.size()
order=orders.payload
sizeJson=order.size()

length = order[0].createDate.toString().size()

assert sizeXml == sizeJson

//Проверяем правильность маппинга
for (int i = 0; i < sizeJson; i++){
	findedOrderXml = orderXml.find{it.orderID == order[i].orderId}
	assert order[i].qRCode.toString() == findedOrderXml.QRCode.toString()
	assert order[i].aggregatorName.toString() == findedOrderXml.agregatorName.toString()
	assert order[i].orderNumber.toString() == findedOrderXml.externalID.toString()
	
	String XmlDate = findedOrderXml.createDate.toString()
	assert order[i].createDate .toString() ==  findedOrderXml.createDate.toString().substring(0, length)

	assert order[i].state.code.toString() == findedOrderXml.statusCode.toString()
	if(findedOrderXml.statusCode.toString() == "executed")
		assert order[i].state.name.toString() == "В работе"
	
	if(findedOrderXml.statusCode.toString() == "completed"){
		assert order[i].state.name.toString() == "Исполнен"

		testRunner.testCase.setPropertyValue('orderID', order[i].orderId.toString())
		project = testRunner.testCase.testSuite.project
		testRunner.runTestStep(project.testSuites['GET orders'].testCases['ОС. Проверка маппинга полученного списка заказов'].testSteps['PIGetMarkPharmacy'])

		def getMarkXmlResponse = context.expand('${PIGetMarkPharmacy#Response}')
		markXml = new XmlSlurper().parseText(getMarkXmlResponse)

		mark = markXml.Body.piGetMarkPharmacyResponse.mark
		if(mark == null || mark == "")
			assert order[i].hasMark == false
	}
	
	if(findedOrderXml.statusCode.toString() == "cancelled")
		assert order[i].state.name.toString() == "Отменён"
}

//Проверяем правильность сортировки
boolean rightOrder = true
for (int i = 0; i < sizeJson - 1; i++){
	if(order[i].state.code.toString() == "executed" && order[i+1].state.code.toString()  == "cancelled")
		rightOrder = false
	if(order[i].state.code.toString() == "completed" && order[i+1].state.code.toString() == "executed")
		rightOrder = false
	if(order[i].state.code.toString() == "cancelled" && (order[i+1].state.code.toString() == "executed" || order[i+1].state.code.toString() == "completed") )
		rightOrder = false
	assert rightOrder
}

for (int i = 0; i < sizeJson - 1; i ++){
	if(order[i].state.code.toString() == order[i+1].state.code.toString()){
		DateFirst = Date.parse('yyyy-MM-dd', order[i].createDate .toString().substring(0, 10))
		DateSecond = Date.parse('yyyy-MM-dd', order[i+1].createDate .toString().substring(0, 10))
														
		assert (1 == DateSecond.compareTo(DateFirst)) || (0 == DateSecond.compareTo(DateFirst)) : "Объект: "+i+""
	}
	
}



log.info "end"]]></script></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>7179</con:value></con:property><con:property><con:name>oms</con:name><con:value>7755220898002957</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/221889</con:value></con:property></con:properties></con:testCase><con:testCase id="3001a534-15a2-4900-9a60-2431cd1aaa9d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение списков заказа по рецептам пациента state.name = cancelled_393618" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Изменить дату в моке" id="5c6771c4-f8bb-4385-adf5-b76606693ebf"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="restrequest" name="GET orders" id="3a981a26-779c-42a9-8f32-7a816c2df605"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false" timeout="29906"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга параметров" id="5c396cef-e95a-41b3-a44c-6dcfb9fd7a52"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def getOrdersResponse = context.expand('${GET orders#Response}')
orders = new JsonSlurper().parseText(getOrdersResponse)

def getOrdersXMLResponse = context.expand('${piGetDrugOrders#Response}')
ordersXml = new XmlSlurper().parseText(getOrdersXMLResponse)

orderXml=ordersXml.Body.piGetDrugOrdersResponse.order
sizeXml=orderXml.size()
order=orders.payload
sizeJson=order.size()

length = order[0].createDate.toString().size()

assert sizeXml == sizeJson

//Проверяем правильность маппинга
for (int i = 0; i < sizeJson; i++){
	findedOrderXml = orderXml.find{it.orderID == order[i].orderId}
	assert order[i].qRCode.toString() == findedOrderXml.QRCode.toString()
	assert order[i].aggregatorName.toString() == findedOrderXml.agregatorName.toString()
	assert order[i].orderNumber.toString() == findedOrderXml.externalID.toString()
	
	String XmlDate = findedOrderXml.createDate.toString()
	assert order[i].createDate .toString() ==  findedOrderXml.createDate.toString().substring(0, length)

	assert order[i].state.code.toString() == findedOrderXml.statusCode.toString()
	if(findedOrderXml.statusCode.toString() == "executed")
		assert order[i].state.name.toString() == "В работе"
	
	if(findedOrderXml.statusCode.toString() == "completed"){
		assert order[i].state.name.toString() == "Исполнен"

		testRunner.testCase.setPropertyValue('orderID', order[i].orderId.toString())
		project = testRunner.testCase.testSuite.project
		testRunner.runTestStep(project.testSuites['GET orders'].testCases['ОС. Проверка маппинга полученного списка заказов'].testSteps['PIGetMarkPharmacy'])

		def getMarkXmlResponse = context.expand('${PIGetMarkPharmacy#Response}')
		markXml = new XmlSlurper().parseText(getMarkXmlResponse)

		mark = markXml.Body.piGetMarkPharmacyResponse.mark
		if(mark == null || mark == "")
			assert order[i].hasMark == false
	}
	
	if(findedOrderXml.statusCode.toString() == "cancelled")
		assert order[i].state.name.toString() == "Отменён"
}

//Проверяем правильность сортировки
boolean rightOrder = true
for (int i = 0; i < sizeJson - 1; i++){
	if(order[i].state.code.toString() == "executed" && order[i+1].state.code.toString()  == "cancelled")
		rightOrder = false
	if(order[i].state.code.toString() == "completed" && order[i+1].state.code.toString() == "executed")
		rightOrder = false
	if(order[i].state.code.toString() == "cancelled" && (order[i+1].state.code.toString() == "executed" || order[i+1].state.code.toString() == "completed") )
		rightOrder = false
	assert rightOrder
}

for (int i = 0; i < sizeJson - 1; i ++){
	if(order[i].state.code.toString() == order[i+1].state.code.toString()){
		DateFirst = Date.parse('yyyy-MM-dd', order[i].createDate .toString().substring(0, 10))
		DateSecond = Date.parse('yyyy-MM-dd', order[i+1].createDate .toString().substring(0, 10))
														
		assert (1 == DateSecond.compareTo(DateFirst)) || (0 == DateSecond.compareTo(DateFirst)) : "Объект: "+i+""
	}
	
}



log.info "end"]]></script></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>7179</con:value></con:property><con:property><con:name>oms</con:name><con:value>7755220898002957</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/393618</con:value></con:property></con:properties></con:testCase><con:testCase id="11409ff2-6efb-4c3f-b837-83a80e15e399" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение списков заказа по рецептам пациента state.code= completed. Без оценки_393641" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Изменить дату в моке" id="a2efd6a9-b6f1-45fa-bd9e-5d7cb59f51a7"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="restrequest" name="GET orders" id="949e9f3e-8fb7-4753-a154-3353f326a91c"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false" timeout="29906"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга параметров" id="3395ba82-04b9-4482-9075-007c85f35d14"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def getOrdersResponse = context.expand('${GET orders#Response}')
orders = new JsonSlurper().parseText(getOrdersResponse)

def getOrdersXMLResponse = context.expand('${piGetDrugOrders#Response}')
ordersXml = new XmlSlurper().parseText(getOrdersXMLResponse)

orderXml=ordersXml.Body.piGetDrugOrdersResponse.order
sizeXml=orderXml.size()
order=orders.payload
sizeJson=order.size()

length = order[0].createDate.toString().size()

assert sizeXml == sizeJson

//Проверяем правильность маппинга
for (int i = 0; i < sizeJson; i++){
	findedOrderXml = orderXml.find{it.orderID == order[i].orderId}
	assert order[i].qRCode.toString() == findedOrderXml.QRCode.toString()
	assert order[i].aggregatorName.toString() == findedOrderXml.agregatorName.toString()
	assert order[i].orderNumber.toString() == findedOrderXml.externalID.toString()
	
	String XmlDate = findedOrderXml.createDate.toString()
	assert order[i].createDate .toString() ==  findedOrderXml.createDate.toString().substring(0, length)

	assert order[i].state.code.toString() == findedOrderXml.statusCode.toString()
	if(findedOrderXml.statusCode.toString() == "executed")
		assert order[i].state.name.toString() == "В работе"
	
	if(findedOrderXml.statusCode.toString() == "completed"){
		assert order[i].state.name.toString() == "Исполнен"

		testRunner.testCase.setPropertyValue('orderID', order[i].orderId.toString())
		project = testRunner.testCase.testSuite.project
		testRunner.runTestStep(project.testSuites['GET orders'].testCases['ОС. Проверка маппинга полученного списка заказов'].testSteps['PIGetMarkPharmacy'])

		def getMarkXmlResponse = context.expand('${PIGetMarkPharmacy#Response}')
		markXml = new XmlSlurper().parseText(getMarkXmlResponse)

		mark = markXml.Body.piGetMarkPharmacyResponse.mark
		if(mark == null || mark == "")
			assert order[i].hasMark == false
	}
	
	if(findedOrderXml.statusCode.toString() == "cancelled")
		assert order[i].state.name.toString() == "Отменён"
}

//Проверяем правильность сортировки
boolean rightOrder = true
for (int i = 0; i < sizeJson - 1; i++){
	if(order[i].state.code.toString() == "executed" && order[i+1].state.code.toString()  == "cancelled")
		rightOrder = false
	if(order[i].state.code.toString() == "completed" && order[i+1].state.code.toString() == "executed")
		rightOrder = false
	if(order[i].state.code.toString() == "cancelled" && (order[i+1].state.code.toString() == "executed" || order[i+1].state.code.toString() == "completed") )
		rightOrder = false
	assert rightOrder
}

for (int i = 0; i < sizeJson - 1; i ++){
	if(order[i].state.code.toString() == order[i+1].state.code.toString()){
		DateFirst = Date.parse('yyyy-MM-dd', order[i].createDate .toString().substring(0, 10))
		DateSecond = Date.parse('yyyy-MM-dd', order[i+1].createDate .toString().substring(0, 10))
														
		assert (1 == DateSecond.compareTo(DateFirst)) || (0 == DateSecond.compareTo(DateFirst)) : "Объект: "+i+""
	}
	
}



log.info "end"]]></script></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>7179</con:value></con:property><con:property><con:name>oms</con:name><con:value>7755220898002957</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/393641</con:value></con:property></con:properties></con:testCase><con:testCase id="ed7d71ec-0640-4af1-aa71-416b56cd2bc3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение списков заказа по рецептам пациента state.code= completed. С оценкой_393614" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Изменить дату в моке" id="1b4d93d7-dd52-4c7a-8d6c-d1098744c0c2"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="restrequest" name="GET orders" id="14a4295b-6ffb-404a-aafb-a8289d95029d"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false" timeout="29906"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга параметров" id="b91ce7ef-9b20-43bb-8d0a-b09c7da40859"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def getOrdersResponse = context.expand('${GET orders#Response}')
orders = new JsonSlurper().parseText(getOrdersResponse)

def getOrdersXMLResponse = context.expand('${piGetDrugOrders#Response}')
ordersXml = new XmlSlurper().parseText(getOrdersXMLResponse)

orderXml=ordersXml.Body.piGetDrugOrdersResponse.order
sizeXml=orderXml.size()
order=orders.payload
sizeJson=order.size()

length = order[0].createDate.toString().size()

assert sizeXml == sizeJson

//Проверяем правильность маппинга
for (int i = 0; i < sizeJson; i++){
	findedOrderXml = orderXml.find{it.orderID == order[i].orderId}
	assert order[i].qRCode.toString() == findedOrderXml.QRCode.toString()
	assert order[i].aggregatorName.toString() == findedOrderXml.agregatorName.toString()
	assert order[i].orderNumber.toString() == findedOrderXml.externalID.toString()
	
	String XmlDate = findedOrderXml.createDate.toString()
	assert order[i].createDate .toString() ==  findedOrderXml.createDate.toString().substring(0, length)

	assert order[i].state.code.toString() == findedOrderXml.statusCode.toString()
	if(findedOrderXml.statusCode.toString() == "executed")
		assert order[i].state.name.toString() == "В работе"
	
	if(findedOrderXml.statusCode.toString() == "completed"){
		assert order[i].state.name.toString() == "Исполнен"

		testRunner.testCase.setPropertyValue('orderID', order[i].orderId.toString())
		project = testRunner.testCase.testSuite.project
		testRunner.runTestStep(project.testSuites['GET orders'].testCases['ОС. Проверка маппинга полученного списка заказов'].testSteps['PIGetMarkPharmacy'])

		def getMarkXmlResponse = context.expand('${PIGetMarkPharmacy#Response}')
		markXml = new XmlSlurper().parseText(getMarkXmlResponse)

		mark = markXml.Body.piGetMarkPharmacyResponse.mark
		if(mark == null || mark == "")
			assert order[i].hasMark == false
	}
	
	if(findedOrderXml.statusCode.toString() == "cancelled")
		assert order[i].state.name.toString() == "Отменён"
}

//Проверяем правильность сортировки
boolean rightOrder = true
for (int i = 0; i < sizeJson - 1; i++){
	if(order[i].state.code.toString() == "executed" && order[i+1].state.code.toString()  == "cancelled")
		rightOrder = false
	if(order[i].state.code.toString() == "completed" && order[i+1].state.code.toString() == "executed")
		rightOrder = false
	if(order[i].state.code.toString() == "cancelled" && (order[i+1].state.code.toString() == "executed" || order[i+1].state.code.toString() == "completed") )
		rightOrder = false
	assert rightOrder
}

for (int i = 0; i < sizeJson - 1; i ++){
	if(order[i].state.code.toString() == order[i+1].state.code.toString()){
		DateFirst = Date.parse('yyyy-MM-dd', order[i].createDate .toString().substring(0, 10))
		DateSecond = Date.parse('yyyy-MM-dd', order[i+1].createDate .toString().substring(0, 10))
														
		assert (1 == DateSecond.compareTo(DateFirst)) || (0 == DateSecond.compareTo(DateFirst)) : "Объект: "+i+""
	}
	
}



log.info "end"]]></script></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>7179</con:value></con:property><con:property><con:name>oms</con:name><con:value>7755220898002957</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/393614</con:value></con:property></con:properties></con:testCase><con:testCase id="dab2c5b5-43d0-467d-a3fc-21e21a58185c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Проверка сортировки заказов_393762" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Изменить дату в моке" id="8b4c5d43-5962-4a12-b96a-4c79196f297d"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="restrequest" name="GET orders" id="a184bdd0-bcfb-4c35-91bc-8561f6cf4a69"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false" timeout="29906"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга параметров" id="1625a13f-d912-48f4-ab5b-7f0fe39f0bef"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def getOrdersResponse = context.expand('${GET orders#Response}')
orders = new JsonSlurper().parseText(getOrdersResponse)

def getOrdersXMLResponse = context.expand('${piGetDrugOrders#Response}')
ordersXml = new XmlSlurper().parseText(getOrdersXMLResponse)

orderXml=ordersXml.Body.piGetDrugOrdersResponse.order
sizeXml=orderXml.size()
order=orders.payload
sizeJson=order.size()

length = order[0].createDate.toString().size()

assert sizeXml == sizeJson

//Проверяем правильность маппинга
for (int i = 0; i < sizeJson; i++){
	findedOrderXml = orderXml.find{it.orderID == order[i].orderId}
	assert order[i].qRCode.toString() == findedOrderXml.QRCode.toString()
	assert order[i].aggregatorName.toString() == findedOrderXml.agregatorName.toString()
	assert order[i].orderNumber.toString() == findedOrderXml.externalID.toString()
	
	String XmlDate = findedOrderXml.createDate.toString()
	assert order[i].createDate .toString() ==  findedOrderXml.createDate.toString().substring(0, length)

	assert order[i].state.code.toString() == findedOrderXml.statusCode.toString()
	if(findedOrderXml.statusCode.toString() == "executed")
		assert order[i].state.name.toString() == "В работе"
	
	if(findedOrderXml.statusCode.toString() == "completed"){
		assert order[i].state.name.toString() == "Исполнен"

		testRunner.testCase.setPropertyValue('orderID', order[i].orderId.toString())
		project = testRunner.testCase.testSuite.project
		testRunner.runTestStep(project.testSuites['GET orders'].testCases['ОС. Проверка маппинга полученного списка заказов'].testSteps['PIGetMarkPharmacy'])

		def getMarkXmlResponse = context.expand('${PIGetMarkPharmacy#Response}')
		markXml = new XmlSlurper().parseText(getMarkXmlResponse)

		mark = markXml.Body.piGetMarkPharmacyResponse.mark
		if(mark == null || mark == "")
			assert order[i].hasMark == false
	}
	
	if(findedOrderXml.statusCode.toString() == "cancelled")
		assert order[i].state.name.toString() == "Отменён"
}

//Проверяем правильность сортировки
boolean rightOrder = true
for (int i = 0; i < sizeJson - 1; i++){
	if(order[i].state.code.toString() == "executed" && order[i+1].state.code.toString()  == "cancelled")
		rightOrder = false
	if(order[i].state.code.toString() == "completed" && order[i+1].state.code.toString() == "executed")
		rightOrder = false
	if(order[i].state.code.toString() == "cancelled" && (order[i+1].state.code.toString() == "executed" || order[i+1].state.code.toString() == "completed") )
		rightOrder = false
	assert rightOrder
}

for (int i = 0; i < sizeJson - 1; i ++){
	if(order[i].state.code.toString() == order[i+1].state.code.toString()){
		DateFirst = Date.parse('yyyy-MM-dd', order[i].createDate .toString().substring(0, 10))
		DateSecond = Date.parse('yyyy-MM-dd', order[i+1].createDate .toString().substring(0, 10))
														
		assert (1 == DateSecond.compareTo(DateFirst)) || (0 == DateSecond.compareTo(DateFirst)) : "Объект: "+i+""
	}
	
}



log.info "end"]]></script></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>7179</con:value></con:property><con:property><con:name>oms</con:name><con:value>7755220898002957</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/393762</con:value></con:property></con:properties></con:testCase><con:testCase id="ce7ac2ec-4567-4bd0-99b6-8da26a5f9729" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1. У пациента отсутствуют заказы (вернулась ошибка 2740 от ЛЛО)_393800" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET orders" id="bddc47a8-12a4-45d8-9e20-24a29284fb15"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Код ответа = 204"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>6779</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/393800</con:value></con:property></con:properties></con:testCase><con:testCase id="efdb8b6a-e7c5-433b-b7ff-6b801ea0fd4b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1. У пациента отсутствуют заказы (вернулся пустой список от ЛЛО)_393809" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET orders" id="cab3bdf1-aa8f-4955-8c39-a8ebc4d4146f"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Код ответа = 204"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>6779</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/393809</con:value></con:property></con:properties></con:testCase><con:testCase id="4b3bcfec-8a2b-436f-b51f-53782186fd75" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС2. Пациент не найден (LLO_PATIENT_NOT_FOUND)_393810" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET orders" id="f76e10c6-07da-46d6-a8db-41e3a1c886cf"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Код ответа = 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b42eacc-0b39-4b94-bc7d-0fceb8fef69f" name="code = LLO_PATIENT_NOT_FOUND"><con:configuration><path>$error.code</path><content>LLO_PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b42eacc-0b39-4b94-bc7d-0fceb8fef69f" name="description = Пациент не найден"><con:configuration><path>$error.description</path><content>Пациент не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b42eacc-0b39-4b94-bc7d-0fceb8fef69f" name="type = BUSINESS"><con:configuration><path>$error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>6779</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/393810</con:value></con:property></con:properties></con:testCase><con:testCase id="7a0d68cc-7a7f-484f-a550-0851cbe34acf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС3. Ошибка выполнения метода (LLO_BAD_REQUEST)_393811" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET orders" id="c9fae235-1679-46d9-8879-f2a323e0de5e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Код ответа = 404"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b42eacc-0b39-4b94-bc7d-0fceb8fef69f" name="code = LLO_BAD_REQUEST"><con:configuration><path>$error.code</path><content>LLO_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b42eacc-0b39-4b94-bc7d-0fceb8fef69f" name="description = Указаны неверные форматы входных параметров или переданы не все обязательные поля"><con:configuration><path>$error.description</path><content>Указаны неверные форматы входных параметров или переданы не все обязательные поля</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b42eacc-0b39-4b94-bc7d-0fceb8fef69f" name="type = BUSINESS"><con:configuration><path>$error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>6779</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/393811</con:value></con:property></con:properties></con:testCase><con:testCase id="d8ff94da-e415-460f-a10f-b06c374b73c8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС4. Ошибка проверки оценки по обслуженному рецепту_393411" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET orders" id="611e1c69-b5e6-4537-9f2e-fd72636e18df"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="fffa5c35-e3fa-4650-a7e4-790f30060095" name="Not Contains"><con:configuration><token>hasMark</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>6779</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/393411</con:value></con:property></con:properties></con:testCase><con:testCase id="00d795d9-1c1a-4ab2-ae70-78e1f58837cb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС5. Передан устаревший токен СУДИР (SUDIR_TOKEN_EXPIRED)_273671" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET orders" id="5831b722-8a38-47b7-b235-d07f27168377"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET orders" id="ea47350d-7b83-42c7-8453-55c40226aa8b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="be98101e-7f96-4865-bbdd-1448db5bf1c6" name="Код ответа = 200"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f20d1817-6c7d-466f-8c98-b605b1a26ab9" name="code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f20d1817-6c7d-466f-8c98-b605b1a26ab9" name="description = Время действия токена в СУДИР истекло"><con:configuration><path>$error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f20d1817-6c7d-466f-8c98-b605b1a26ab9" name="type = BUSINESS"><con:configuration><path>$error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-Token" value="jnFQhfH7PzYZxQaO7cm3C5QJOwArKAV9Hitwn2Rxl4"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
  <con:entry key="Mock-sudir" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>EI-Token</con:entry><con:entry>Mock-llo</con:entry><con:entry>Mock-sudir</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>orderID</con:name><con:value>6779</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700003027090482</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/393411</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>prescriptionNumber</con:name><con:value/></con:property></con:properties></con:testSuite><con:testSuite id="0be5bbff-7500-40a0-b6cd-c0fd309917ce" name="orderState"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="6cf780e8-988b-466d-b054-4d0603dce92b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение состояния заказа. serviced = true" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получить ID пациента с исполненными заказами" id="19e7611f-feef-4f9b-aab0-9f8050dcede0"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString>${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT * FROM
( SELECT PATIENT_EMIAS_ID, id FROM DRUG_ORDER
WHERE FINAL_STATUS=152
ORDER BY dbms_random.value )
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="456ead8b-6595-47dd-8c12-c719071d110a" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="91b480fe-0786-4949-959a-1a44f49870fa"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить ID пациента с исполненными заказами</con:sourceStep><con:sourcePath>//*:PATIENT_EMIAS_ID</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить ID пациента с исполненными заказами</con:sourceStep><con:sourcePath>//*:ID</con:sourcePath><con:targetType>orderId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить ОМС пациента" id="42df1321-ffb4-4e12-ad40-e33eb34017fc"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_ASSURANCE_SERIES,OMS_ASSURANCE_NUMBER,OMS_REGION_ASSURANCE_SERIES,OMS_REGION_ASSURANCE_NUMBER,OMS_NEW_ASSURANCE_NUMBER,OMS_TEMP_ASSURANCE_NUMBER
FROM PATIENT 
WHERE PATIENT_ID = ${#TestCase#patientId}</con:query><con:assertion type="JDBC Status" id="441d1070-212a-4089-99e8-b58941e0ac4c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС пациента" id="c97d16ed-7fc3-4ec1-8e95-51e93bf8facf"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить ОМС пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="restrequest" name="orders" id="5fd62df1-a9f1-4c5b-9714-ec41b289e7e8"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="orders" id="92885f69-13f9-4dfd-9cce-0e754f25c8d3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c22fdfbb-dc65-4228-bae8-aa89c1e8b2d0" name="Значение Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="oms" value="${#TestCase#oms}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>oms</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" name="PIGetDrugOrders" id="c38df0fa-07d3-4d6b-a59e-4ba179d917c9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piGetDrugOrders</con:operation><con:request name="PIGetDrugOrders" id="6bc166b8-3c36-466a-af9a-d03407d3e2e0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
<soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piGetDrugOrdersRequest>
         <typ:ident>EMIASINFO</typ:ident>
         <!--Optional:-->
         <typ:oms>${#TestCase#oms}</typ:oms>
      </typ:piGetDrugOrdersRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" id="7a0a2a4f-3830-4aa0-8b8b-5a4985a8ea80" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="1e3cfbef-5428-4b41-adc4-cea5706012bc" name="В ответе есть заказ"><con:configuration><token>order</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Выбрать случайный исполненный заказ" id="9a823790-dea3-40ba-9480-3a7fc3083353"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
import java.util.Random
def getOrdersResponse = context.expand('${PIGetDrugOrders#Response}')
def orders = new XmlSlurper().parseText(getOrdersResponse)

orders = orders.Body.piGetDrugOrdersResponse.order

qRArray =[]
for (int i = 0; i&lt;orders.size(); i++){
	if (orders[i].statusCode == "completed"){
		//log.info orders[i].qRCode
		qRArray&lt;&lt; orders[i].QRCode.toString()
	}
}

Random rnd = new Random()
n = rnd.nextInt(qRArray.size())

testRunner.testCase.setPropertyValue("qRCode", qRArray[n])
log.info qRArray
log.info qRArray[n]
</script></con:config></con:testStep><con:testStep type="request" name="PICheckOrder" id="0f415d66-903a-4c9b-9981-912788ab8ac7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piCheckOrder</con:operation><con:request name="PICheckOrder" id="555ec0c1-3c7b-4459-a639-fde8123b386e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lloEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
	<soapenv:Header>
   	<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   		<wsse:UsernameToken>
      		<wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      		<wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    		</wsse:UsernameToken>
  	</wsse:Security>
	</soapenv:Header>
   <soapenv:Body>\r
      <typ:piCheckOrderRequest>\r
         <typ:ident>EMIASINFO</typ:ident>\r
         <typ:QRCode>${#TestCase#qRCode}</typ:QRCode>\r
      </typ:piCheckOrderRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="781e6334-0490-42cd-83e1-fd851d00cd1c"/><con:assertion type="XPath Match" id="5c417433-9693-4e80-9c0c-f61066889678" name="Значение resulCode = 2853"><con:configuration><path>//*:resultCode</path><content>2853</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="orderState" id="13874d66-93af-423f-888f-61afadd1f06b"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/orderState" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="orderState" id="62e11a3c-bebb-4b4e-a088-502090e052ee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/orderState</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b4f26cc4-8821-4515-b50c-b0c6a036718a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21e85c74-8bb6-485d-b1c2-b96ab9a3993d" name="Значени serviced = true"><con:configuration><path>$.payload.serviced</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="qRCode" value="${#TestCase#qRCode}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>qRCode</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>21264626</con:value></con:property><con:property><con:name>oms</con:name><con:value>7758020846000146</con:value></con:property><con:property><con:name>qRCode</con:name><con:value>DO:00000001145405DCF0D61B02E4B2C9134A2F5724E3C5</con:value></con:property><con:property><con:name>orderId</con:name><con:value>11470</con:value></con:property></con:properties></con:testCase><con:testCase id="ea4720a4-8c01-42a4-8c3a-55374919b15a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. Получение состояния заказа. serviced = false" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получить ID пациента с заказами" id="ac137b75-020e-4cf1-92b9-6c5d18563c21"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString>${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT * FROM
( SELECT PATIENT_EMIAS_ID, ID 
FROM DRUG_ORDER
WHERE DELIVERING = 1 AND FINAL_STATUS = 151
ORDER BY dbms_random.value )
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="456ead8b-6595-47dd-8c12-c719071d110a" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId и orderId" id="6e32443a-5a21-4b2d-893e-ab1e313924fb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить ID пациента с заказами</con:sourceStep><con:sourcePath>//*:PATIENT_EMIAS_ID</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить ID пациента с заказами</con:sourceStep><con:sourcePath>//*:ID</con:sourcePath><con:targetType>orderId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить ОМС пациента" id="04b4795f-54e6-43e0-89e0-77bd4dfc7055"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_ASSURANCE_SERIES,OMS_ASSURANCE_NUMBER,OMS_REGION_ASSURANCE_SERIES,OMS_REGION_ASSURANCE_NUMBER,OMS_NEW_ASSURANCE_NUMBER,OMS_TEMP_ASSURANCE_NUMBER
FROM PATIENT 
WHERE PATIENT_ID = ${#TestCase#patientId}</con:query><con:assertion type="JDBC Status" id="441d1070-212a-4089-99e8-b58941e0ac4c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС пациента" id="fd16e34f-dbc3-4737-bfbe-4d8d3b778b3f"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить ОМС пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="restrequest" name="orders" id="6940c278-8312-4190-a0fa-1a7d913d2e3f"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="orders" id="92885f69-13f9-4dfd-9cce-0e754f25c8d3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c22fdfbb-dc65-4228-bae8-aa89c1e8b2d0" name="Значение Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="oms" value="${#TestCase#oms}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>oms</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Найти qRCode заказа" id="cba27393-9cb9-4dc7-8087-a736e986219d"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import java.util.Random
def getOrdersResponse = context.expand('${orders#Response}')
def slurperJson = new JsonSlurper()
def orders = slurperJson.parseText(getOrdersResponse)

orders = orders.payload
qRArray =[]
orderId = testRunner.TestCase.getPropertyValue("orderId")
for (int i = 0; i&lt;orders.size(); i++){
	if (orders[i].orderId == orderId.toInteger()){
		testRunner.testCase.setPropertyValue("qRCode", orders[i].qRCode)
		log.info orders[i].qRCode
		break
	}
}
</script></con:config></con:testStep><con:testStep type="request" name="PICheckOrder" id="7d52c68b-308f-41ec-96ad-34a84423e13f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piCheckOrder</con:operation><con:request name="PICheckOrder" id="555ec0c1-3c7b-4459-a639-fde8123b386e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lloEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
	<soapenv:Header>
   	<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   		<wsse:UsernameToken>
      		<wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      		<wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    		</wsse:UsernameToken>
  	</wsse:Security>
	</soapenv:Header>
   <soapenv:Body>\r
      <typ:piCheckOrderRequest>\r
         <typ:ident>EMIASINFO</typ:ident>\r
         <typ:QRCode>${#TestCase#qRCode}</typ:QRCode>\r
      </typ:piCheckOrderRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="781e6334-0490-42cd-83e1-fd851d00cd1c"/><con:assertion type="XPath Match" id="5c417433-9693-4e80-9c0c-f61066889678" name="Значение resulCode = 0"><con:configuration><path>//*:resultCode</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="orderState" id="a3edd4bf-29a3-47b6-9572-3782e99c0821"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/orderState" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="orderState" id="62e11a3c-bebb-4b4e-a088-502090e052ee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/orderState</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b4f26cc4-8821-4515-b50c-b0c6a036718a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21e85c74-8bb6-485d-b1c2-b96ab9a3993d" name="Значени serviced = false"><con:configuration><path>$.payload.serviced</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="qRCode" value="${#TestCase#qRCode}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>qRCode</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>24059845</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700003097180466</con:value></con:property><con:property><con:name>qRCode</con:name><con:value>DO:000000007701E3848F813F6A94664033B59017C9D791</con:value></con:property><con:property><con:name>orderId</con:name><con:value>7701</con:value></con:property></con:properties></con:testCase><con:testCase id="060870e3-a6be-4925-ae61-fefd3443e5c9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1. Заказ не найден (LLO_ORDER_NOT_FOUND)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Сгенерировать случайный qRCode" id="df5b783a-4b48-4f1d-ac33-85dd079e5356"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils

String charset = (('A'..'Z') + ('0'..'9')).join()
Integer length = 44
String randomString = RandomStringUtils.random(length, charset.toCharArray())

testRunner.TestCase.setPropertyValue("qRCode","DO:"+randomString)
log.info "DO:"+randomString</script></con:config></con:testStep><con:testStep type="request" name="PICheckOrder" id="27621b0e-fe3a-4286-b542-3cc97c604613"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piCheckOrder</con:operation><con:request name="PICheckOrder" id="555ec0c1-3c7b-4459-a639-fde8123b386e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lloEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
	<soapenv:Header>
   	<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   		<wsse:UsernameToken>
      		<wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      		<wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    		</wsse:UsernameToken>
  	</wsse:Security>
	</soapenv:Header>
   <soapenv:Body>\r
      <typ:piCheckOrderRequest>\r
         <typ:ident>EMIASINFO</typ:ident>\r
         <typ:QRCode>${#TestCase#qRCode}</typ:QRCode>\r
      </typ:piCheckOrderRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="781e6334-0490-42cd-83e1-fd851d00cd1c"/><con:assertion type="XPath Match" id="5c417433-9693-4e80-9c0c-f61066889678" name="Значение resulCode = 2840"><con:configuration><path>//*:resultCode</path><content>2840</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="orderState" id="b9cd397f-abdc-45d1-b99c-d4880f1f1498"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/orderState" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="orderState" id="62e11a3c-bebb-4b4e-a088-502090e052ee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/orderState</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b4f26cc4-8821-4515-b50c-b0c6a036718a" name="Значение Status Code = 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bad55478-3001-4b2d-8a6c-2d5c963d58d9" name="Значение code = LLO_ORDER_NOT_FOUND"><con:configuration><path>$.error.code</path><content>LLO_ORDER_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68136c9c-ad92-444d-8063-6e8b9db608e4" name="Значение description = &quot;Заказ не найден&quot;"><con:configuration><path>$.error.description</path><content>Заказ не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ff01b2f-fb65-4b77-9fa3-02d2d874a163" name="Значение type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="qRCode" value="${#TestCase#qRCode}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>qRCode</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>qRCode</con:name><con:value>DO:R97JLZNUDHJM5FKA5VSSPMWAWNNDURFYXSOD2DD0CAWP</con:value></con:property></con:properties></con:testCase><con:testCase id="fed13317-427d-4e92-a6ef-87704381afd9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС2. Ошибка выполнения метода (LLO_BAD_REQUEST)" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получить ID пациента с заказами" id="d11609e2-733f-4a5a-b6d2-a18167912c1b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString>${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT * FROM
( SELECT PATIENT_EMIAS_ID
FROM DRUG_ORDER
WHERE DELIVERING = 1 AND FINAL_STATUS = 151
ORDER BY dbms_random.value )
WHERE rownum = 1</con:query><con:assertion type="JDBC Status" id="456ead8b-6595-47dd-8c12-c719071d110a" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать patientId" id="81fe8b2c-3856-4173-83e3-76a4ae486e2c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получить ID пациента с заказами</con:sourceStep><con:sourcePath>//*:PATIENT_EMIAS_ID</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Получить ОМС пациента" id="462c463e-1775-447d-95e5-7127bca93bb9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_ASSURANCE_SERIES,OMS_ASSURANCE_NUMBER,OMS_REGION_ASSURANCE_SERIES,OMS_REGION_ASSURANCE_NUMBER,OMS_NEW_ASSURANCE_NUMBER,OMS_TEMP_ASSURANCE_NUMBER
FROM PATIENT 
WHERE PATIENT_ID = ${#TestCase#patientId}</con:query><con:assertion type="JDBC Status" id="441d1070-212a-4089-99e8-b58941e0ac4c" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать ОМС пациента" id="3c9b230f-47ae-4b3d-9ad2-631dc5190348"><con:settings/><con:config><script>import groovy.xml.XmlSlurper
def PatientOmsResponse = context.expand('${Получить ОМС пациента#ResponseAsXml}')
PatientOms = new XmlSlurper().parseText(PatientOmsResponse)

OMS_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_SERIES:null
OMS_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_ASSURANCE_NUMBER: null
OMS_REGION_ASSURANCE_SERIES = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_SERIES:null
OMS_REGION_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_REGION_ASSURANCE_NUMBER:null
OMS_NEW_ASSURANCE_NUMBER = PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER !="" ? PatientOms.ResultSet.Row.OMS_NEW_ASSURANCE_NUMBER:null
log.info OMS_NEW_ASSURANCE_NUMBER
log.info OMS_ASSURANCE_SERIES
log.info OMS_ASSURANCE_NUMBER
log.info OMS_REGION_ASSURANCE_SERIES
log.info OMS_REGION_ASSURANCE_NUMBER
if (OMS_NEW_ASSURANCE_NUMBER){
	oms = OMS_NEW_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 1
}

if (OMS_ASSURANCE_SERIES &amp;&amp; OMS_ASSURANCE_NUMBER){
	oms = OMS_ASSURANCE_SERIES.toString() + OMS_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 2
}

if (OMS_REGION_ASSURANCE_SERIES &amp;&amp; OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_SERIES.toString() + OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 3
}
if (OMS_REGION_ASSURANCE_NUMBER){
	oms = OMS_REGION_ASSURANCE_NUMBER.toString()
	testRunner.testCase.setPropertyValue( "oms",oms)
	return 4
}</script></con:config></con:testStep><con:testStep type="restrequest" name="orders" id="8ea36b0a-c15c-4a7f-8d0a-aa564f3aa42e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/orders" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="orders" id="92885f69-13f9-4dfd-9cce-0e754f25c8d3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/orders</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c22fdfbb-dc65-4228-bae8-aa89c1e8b2d0" name="Значение Status Code = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="oms" value="${#TestCase#oms}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>oms</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Найти qRCode любого заказа" id="1a6176ae-74aa-4a0e-8aff-074176727c7c"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import java.util.Random
def getOrdersResponse = context.expand('${orders#Response}')
def slurperJson = new JsonSlurper()
def orders = slurperJson.parseText(getOrdersResponse)

orders = orders.payload

Random rnd = new Random()
n = rnd.nextInt(orders.size())

testRunner.testCase.setPropertyValue("qRCode", orders[n].qRCode+"A")
log.info orders[n].qRCode+"A"</script></con:config></con:testStep><con:testStep type="request" name="PICheckOrder" id="fc8e5822-2521-418e-bbae-66a3a955fd8f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piCheckOrder</con:operation><con:request name="PICheckOrder" id="555ec0c1-3c7b-4459-a639-fde8123b386e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lloEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
	<soapenv:Header>
   	<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   		<wsse:UsernameToken>
      		<wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      		<wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    		</wsse:UsernameToken>
  	</wsse:Security>
	</soapenv:Header>
   <soapenv:Body>\r
      <typ:piCheckOrderRequest>\r
         <typ:ident>EMIASINFO</typ:ident>\r
         <typ:QRCode>${#TestCase#qRCode}</typ:QRCode>\r
      </typ:piCheckOrderRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="781e6334-0490-42cd-83e1-fd851d00cd1c"/><con:assertion type="XPath Match" id="5c417433-9693-4e80-9c0c-f61066889678" name="Значение resulCode = 2851"><con:configuration><path>//*:resultCode</path><content>2851</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="orderState" id="84a91778-7d42-40ff-b6ef-ba3905ec343e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/orderState" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="orderState" id="62e11a3c-bebb-4b4e-a088-502090e052ee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/orderState</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b4f26cc4-8821-4515-b50c-b0c6a036718a" name="Значение Status Code = 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bad55478-3001-4b2d-8a6c-2d5c963d58d9" name="Значение code = LLO_BAD_REQUEST"><con:configuration><path>$.error.code</path><content>LLO_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68136c9c-ad92-444d-8063-6e8b9db608e4" name="Значение description = &quot;Указаны неверные форматы входных параметров или переданы не все обязательные поля&quot;"><con:configuration><path>$.error.description</path><content>Указаны неверные форматы входных параметров или переданы не все обязательные поля</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ff01b2f-fb65-4b77-9fa3-02d2d874a163" name="Значение type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="qRCode" value="${#TestCase#qRCode}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>qRCode</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>qRCode</con:name><con:value>DO:00000001118327DE4C79F0230950FE7E3EDC4FB13DF5A</con:value></con:property><con:property><con:name>oms</con:name><con:value>7754730882000941</con:value></con:property><con:property><con:name>patientId</con:name><con:value>16640966</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="c96e360f-ca25-4871-907e-e42175787ff8" name="POST DrugsAvailability"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="357f5ed9-1063-455e-905b-6b69a97477ef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС.Маппинг параметров аптек + проверка фильтров" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postDrugsAvailability" id="53f36ecb-f130-4a74-9b5d-2bb7f7c81f69"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/drugsAvailability" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postDrugsAvailability" id="9c42939c-dbce-4d09-9b51-5383a9fa7316" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request>{
  "prescriptionNumber":  ["${#TestCase#prescriptionNumber}"]
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/drugsAvailability</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4cac7ee8-5478-4af3-81fc-e59a6aa14261" name="HTTP Status Codes = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="21d3fff6-e156-4117-a1ef-4abf14f1d7c6" name="В ответе есть хотя бы одна аптека"><con:configuration><token>pharmacyId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" name="piMultiplyDrugsAvailability" id="6b4ad488-119e-452e-84bc-12dfb52b0e87"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piMultiplyDrugsAvailability</con:operation><con:request name="piMultiplyDrugsAvailability" id="0230a1c8-57ce-4660-b534-34910591d3c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
<soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piMultiplyDrugsAvailabilityRequest>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:prescriptionNumber>${#TestCase#prescriptionNumber}</typ:prescriptionNumber>
      </typ:piMultiplyDrugsAvailabilityRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3fed2e24-a56b-4664-857c-a7f585124664"/><con:assertion type="SOAP Fault Assertion" id="78c828ca-0da9-42b8-ae1b-5e0e904805a6" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="02057bef-05ee-4e26-8804-32dc6d43feec" name="В ответе есть хотя бы одна аптека"><con:configuration><token>pharmacyID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Маппинг параметров аптек" id="5ddce088-f1a9-49be-b97c-933d6c34d77c"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def jsonDrugsAvailabilityResponse = context.expand('${postDrugsAvailability#Response}') //парсинг ответа от ИНФО
def slurperJson = new JsonSlurper()
def jsonDrugsAvailability = slurperJson.parseText(jsonDrugsAvailabilityResponse)

def piMultiplyDrugsAvailabilityResponse = context.expand('${piMultiplyDrugsAvailability#Response}') //парсинг ответа от ЛЛО
piMultiplyDrugsAvailability = new XmlSlurper().parseText(piMultiplyDrugsAvailabilityResponse)

def PharmacyCount =  jsonDrugsAvailability.payload.pharmacy.size() //записываем в переменную количество аптек в ответе

for (int i  = 0; i &lt; PharmacyCount; i++){ //проходимся циклом по всем аптекам в ответах от сервисов
	for (int j  = 0; j &lt; PharmacyCount; j++){
		if ( jsonDrugsAvailability.payload.pharmacy[i].pharmacyId == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].pharmacyID.toLong() ) { //если совпадают ИД у аптек - сравниваем все параметры
			 
			 //обязательные парметры
			 assert jsonDrugsAvailability.payload.pharmacy[i].pharmacyId == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].pharmacyID.toLong()
			 assert jsonDrugsAvailability.payload.pharmacy[i].name == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].name.toString()
			 assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].prescriptionNumber == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].prescriptionNumber.toString()
			 assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].medicineTitle == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].medicineTitle.toString()
			 assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].amount == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].amount.toInteger()
			 assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].qty == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].qty.toInteger()
			 assert jsonDrugsAvailability.payload.pharmacy[i].type == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].type.toString()


			//необязательные параметры
			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].shortName != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].shortName == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].shortName.toString()
			 }
			if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].address != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].address == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].address.toString()
			 }
			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].website != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].website	 == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].website.toString()
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].rate != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].rate == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].rate.toString()
			 }

			  if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].geoTag != ""){
			  	def geoTag = jsonDrugsAvailability.payload.pharmacy[i].geoTag
			 	 testRunner.testCase.setPropertyValue("geoTag", geoTag.toString()) //записываем геотег в проперти тест-кейса, чтобы потом проверить фильтр
			 	assert jsonDrugsAvailability.payload.pharmacy[i].geoTag == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].geoTag.toString()
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].phone != ""){
			 	
			 	//при проверки телефона необходимо разбить строку, которая пришла от ЛЛО, до разделителя
			 	def PhoneString =  piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].phone.toString()
			 	 def PhoneNum = PhoneString.indexOf(",")
			 	 if (PhoneNum>0){
			 	 def Phone1= PhoneString.substring(0 , PhoneNum)
			 	 assert jsonDrugsAvailability.payload.pharmacy[i].phones.phone[0] == Phone1
			 	 } else{
			 	assert jsonDrugsAvailability.payload.pharmacy[i].phones.phone[0] == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].phone.toString()
			 	 }
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].nearestMetro[0]  != ""){
			 	def stationId = jsonDrugsAvailability.payload.pharmacy[i].nearestMetro[0].stationId
			 	 testRunner.testCase.setPropertyValue("stationId", stationId.toString()) //записываем ИД метро в проперти тест-кейса, чтобы проверить работу фильтра
			 	assert jsonDrugsAvailability.payload.pharmacy[i].nearestMetro[0].stationId == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].nearestMetro[0].stationID.toLong()
			 	assert jsonDrugsAvailability.payload.pharmacy[i].nearestMetro[0].metroTitle == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].nearestMetro[0].metroTitle.toString()
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].is24Hours != ""){
			 	def is24Hours = jsonDrugsAvailability.payload.pharmacy[i].is24Hours
			 	 testRunner.testCase.setPropertyValue("is24Hours", is24Hours.toString())//записываем режим работы в проперти тест-кейса, чтобы проверить работу фильтра
			 	assert jsonDrugsAvailability.payload.pharmacy[i].is24Hours == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].is24Hours.toBoolean()
			 }
			 
			if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].isCommercial != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].isCommercial == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].isCommercial.toBoolean()
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].INNName != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].INNName == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].INNName.toString()
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0] != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].medicineTitle == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].medicineTitle.toString()
			 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].qty == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].qty.toInteger()
			 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].price == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].price.toInteger()
			 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].surcharge == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].surcharge.toInteger()

			 	 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].expiration != ""){
			 	 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].expiration == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].expiration.toString()
			 	 }
			 	  if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].manufacturer != ""){
			 	 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].manufacturer == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].manufacturer.toString()
			 	 }
			 	 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].origin != ""){
			 	 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].origin == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].origin.toString()
			 	 }
			 	 
			 }
			 
			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].schedule != ""){
			 		//чтобы сравнить расписание, необходимо рабить строку от ЛЛО, до разделителя
			 	 	def scheduleString =  piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].schedule.toString()
			 	 	def num = scheduleString.indexOf(";")
			 	 	if (num > 0){
			 	 	def interval= scheduleString.substring(0 , num)
			 	 	assert jsonDrugsAvailability.payload.pharmacy[i].schedule[0].interval == interval
			 	 	}else{
			 	 	assert jsonDrugsAvailability.payload.pharmacy[i].schedule[0].interval == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].schedule.toString()
			 	 	}
			 	 }

			 
		}
	}
}

log.info ('well done')


</script></con:config></con:testStep><con:testStep type="restrequest" name="postDrugsAvailability_filters_stationId" id="35af0870-df76-46a5-ac5f-be2b974dd2ed"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/drugsAvailability" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postDrugsAvailability_filters_stationId" id="9c42939c-dbce-4d09-9b51-5383a9fa7316" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request>{
  "prescriptionNumber":  ["${#TestCase#prescriptionNumber}"],
  "filters": {
    "stationId": ${#TestCase#stationId}
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/drugsAvailability</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="941a0845-03bb-438b-b750-0dafebf88962" name="HTTP Status Codes = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="549c0370-bf29-4cd5-add0-28a20e94855c" name="В ответе содержиться хотя бы одна аптека"><con:configuration><token>pharmacyId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка фильтра метро" id="b613c7b7-6025-4009-8a49-9f9ea8fb39e7"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def RESTstationIDResponse = context.expand('${postDrugsAvailability_filters_stationId#Response}')
def slurperJson = new JsonSlurper()
def RESTstationID = slurperJson.parseText(RESTstationIDResponse)

def stationID = context.expand('${#TestCase#stationId}')
stationID = stationID.toLong()

def PharmacyCount =  RESTstationID.payload.pharmacy.size()

//для каждой аптеки в ответе проверяется параметр stationId, совпадает ли он с тем, который передавался на вход метода
for (int i  = 0; i &lt; PharmacyCount; i++){
	assert RESTstationID.payload.pharmacy[i].nearestMetro[0].stationId == stationID
}
log.info ('well done')</script></con:config></con:testStep><con:testStep type="restrequest" name="postDrugsAvailability_filters_is24Hours" id="d867a686-c268-44e8-ad8d-cac0d8119ad5"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/drugsAvailability" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postDrugsAvailability_filters_is24Hours" id="9c42939c-dbce-4d09-9b51-5383a9fa7316" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request>{
  "prescriptionNumber":  ["${#TestCase#prescriptionNumber}"],
  "filters": {
    "is24Hours": ${#TestCase#is24Hours}
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/drugsAvailability</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e820757b-03e9-4d57-860c-8bddcb5b1ea8" name="HTTP Status Codes = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8a00c65c-dad6-4e99-8e0c-79baab4b62f7" name="В ответе есть хотя бы одна аптека"><con:configuration><token>pharmacyId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка фильтра режим работы" id="6eaff222-cefb-4820-a684-bccb2310d178"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def RESTis24HoursResponse = context.expand('${postDrugsAvailability_filters_is24Hours#Response}')
def slurperJson = new JsonSlurper()
def RESTis24Hours = slurperJson.parseText(RESTis24HoursResponse)

def is24Hours = context.expand('${#TestCase#is24Hours}')
is24Hours = is24Hours.toBoolean()

def PharmacyCount =  RESTis24Hours.payload.pharmacy.size()

//для каждой аптеки в ответе проверяется параметр is24Hours, совпадает ли он с тем, который передавался на вход метода
for (int i  = 0; i &lt; PharmacyCount; i++){
	assert RESTis24Hours.payload.pharmacy[i].is24Hours == is24Hours
}

log.info ("well done")</script></con:config></con:testStep><con:testStep type="restrequest" name="postDrugsAvailability_filters_geotag" id="4739a79c-e775-4edc-9826-d4989f24ecc3"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/drugsAvailability" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postDrugsAvailability_filters_geotag" id="9c42939c-dbce-4d09-9b51-5383a9fa7316" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request>{
  "prescriptionNumber":  ["${#TestCase#prescriptionNumber}"],
  "filters": {
        "searchRadius": {
      "geoTag": "${#TestCase#geoTag}",
      "distance": 1
    }
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/drugsAvailability</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fac65803-22ed-4256-aa06-bc2675b21da9" name="HTTP Status Codes = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c1f8267e-78f5-4bab-adda-ba4f6d4c1f9d" name="В ответе есть хотя бы одна аптека"><con:configuration><token>pharmacyId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка фильтра геотег" id="f42c117b-8345-433f-a731-f1f4f4d4a7cf"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def RESTgeotagResponse = context.expand('${postDrugsAvailability_filters_geotag#Response}')
def slurperJson = new JsonSlurper()
def RESTgeotag = slurperJson.parseText(RESTgeotagResponse)

def geoTag = context.expand('${#TestCase#geoTag}')
geoTag = geoTag.toString()

def PharmacyCount =  RESTgeotag.payload.pharmacy.size()

//для каждой аптеки в ответе проверяется параметр geoTag, совпадает ли он с тем, который передавался на вход метода
for (int i  = 0; i &lt; PharmacyCount; i++){
	assert RESTgeotag.payload.pharmacy[i].geoTag == geoTag
}

log.info("well done")</script></con:config></con:testStep><con:testStep type="restrequest" name="postDrugsAvailability_filters_type" id="6a29fc00-d468-4d6f-83e0-1b7fdcde6dcf"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/drugsAvailability" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postDrugsAvailability_filters_type" id="9c42939c-dbce-4d09-9b51-5383a9fa7316" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request>{
  "prescriptionNumber":  ["${#TestCase#prescriptionNumber}"],
  "filters": {
		"type": "${#TestCase#type}"
  }
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/drugsAvailability</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2bacf262-6f79-4dbe-bd58-893d01f3ad95" name="HTTP Status Codes = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="32179ed3-1945-4eeb-ade8-9abf7b76c8b1" name="В ответе есть хотя бы одна аптека"><con:configuration><token>pharmacyId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" name="piMultiplyDrugsAvailability_filters_type" id="55d00213-0642-4188-8fb7-0047eb1bf170"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piMultiplyDrugsAvailability</con:operation><con:request name="piMultiplyDrugsAvailability_filters_type" id="f50882d8-bcf8-4926-9b43-617f4f5b1ee0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
<soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piMultiplyDrugsAvailabilityRequest>
         <typ:ident>EMIASINFO</typ:ident>
          <typ:filters>
            <typ:type>${#TestCase#type}</typ:type>
         </typ:filters>
         <typ:prescriptionNumber>${#TestCase#prescriptionNumber}</typ:prescriptionNumber>
      </typ:piMultiplyDrugsAvailabilityRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e43e82dd-f64b-4326-9fc7-5d78f67ebf0b"/><con:assertion type="SOAP Fault Assertion" id="5f2a74a6-6281-4b3a-b60f-44bd9ff08a29" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="32be16bd-ff65-40de-bfb6-fc176e1e90da" name="Вернулась хотя бы одна аптека"><con:configuration><token>pharmacyID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Маппинг параметров аптек с фильтром тип" id="54a5bb43-1241-4fcd-aeb9-f257795b65f0"><con:settings/><con:config><script>//в случаем проверки фильтра type необходимо свериться с ответом от ЛЛО с таким же фильтром

import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def jsonDrugsAvailabilityResponse = context.expand('${postDrugsAvailability_filters_type#Response}')
def slurperJson = new JsonSlurper()
def jsonDrugsAvailability = slurperJson.parseText(jsonDrugsAvailabilityResponse)

def piMultiplyDrugsAvailabilityResponse = context.expand('${piMultiplyDrugsAvailability_filters_type#Response}')
piMultiplyDrugsAvailability = new XmlSlurper().parseText(piMultiplyDrugsAvailabilityResponse)

def PharmacyCount =  jsonDrugsAvailability.payload.pharmacy.size()

for (int i  = 0; i &lt; PharmacyCount; i++){
	for (int j  = 0; j &lt; PharmacyCount; j++){
		if ( jsonDrugsAvailability.payload.pharmacy[i].pharmacyId == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].pharmacyID.toLong() ) {
			 assert jsonDrugsAvailability.payload.pharmacy[i].pharmacyId == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].pharmacyID.toLong()
			 assert jsonDrugsAvailability.payload.pharmacy[i].name == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].name.toString()
			 assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].prescriptionNumber == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].prescriptionNumber.toString()
			 assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].medicineTitle == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].medicineTitle.toString()
			 assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].amount == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].amount.toInteger()
			 assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].qty == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].qty.toInteger()
			 assert jsonDrugsAvailability.payload.pharmacy[i].type == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].type.toString()

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].shortName != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].shortName == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].shortName.toString()
			 }
			if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].address != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].address == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].address.toString()
			 }
			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].website != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].website	 == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].website.toString()
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].rate != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].rate == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].rate.toString()
			 }

			  if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].geoTag != ""){
			  	def geoTag = jsonDrugsAvailability.payload.pharmacy[i].geoTag
			 	 testRunner.testCase.setPropertyValue("geoTag", geoTag.toString())
			 	assert jsonDrugsAvailability.payload.pharmacy[i].geoTag == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].geoTag.toString()
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].phone != ""){
			 	def PhoneString =  piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].phone.toString()
			 	 def PhoneNum = PhoneString.indexOf(",")
			 	 if (PhoneNum>0){
			 	 def Phone1= PhoneString.substring(0 , PhoneNum)
			 	 assert jsonDrugsAvailability.payload.pharmacy[i].phones.phone[0] == Phone1
			 	 } else{
			 	assert jsonDrugsAvailability.payload.pharmacy[i].phones.phone[0] == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].phone.toString()
			 	 }
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].nearestMetro[0]  != ""){
			 	def stationId = jsonDrugsAvailability.payload.pharmacy[i].nearestMetro[0].stationId
			 	 testRunner.testCase.setPropertyValue("stationId", stationId.toString())
			 	assert jsonDrugsAvailability.payload.pharmacy[i].nearestMetro[0].stationId == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].nearestMetro[0].stationID.toLong()
			 	assert jsonDrugsAvailability.payload.pharmacy[i].nearestMetro[0].metroTitle == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].nearestMetro[0].metroTitle.toString()
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].is24Hours != ""){
			 	def is24Hours = jsonDrugsAvailability.payload.pharmacy[i].is24Hours
			 	 testRunner.testCase.setPropertyValue("is24Hours", is24Hours.toString())
			 	assert jsonDrugsAvailability.payload.pharmacy[i].is24Hours == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].is24Hours.toBoolean()
			 }
			 
			if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].isCommercial != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].isCommercial == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].isCommercial.toBoolean()
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].INNName != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].INNName == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].INNName.toString()
			 }

			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0] != ""){
			 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].medicineTitle == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].medicineTitle.toString()
			 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].qty == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].qty.toInteger()
			 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].price == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].price.toInteger()
			 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].surcharge == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].surcharge.toInteger()

			 	 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].expiration != ""){
			 	 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].expiration == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].expiration.toString()
			 	 }
			 	  if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].manufacturer != ""){
			 	 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].manufacturer == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].manufacturer.toString()
			 	 }
			 	 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].origin != ""){
			 	 	assert jsonDrugsAvailability.payload.pharmacy[i].prescription[0].available[0].origin == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].prescription[0].available[0].origin.toString()
			 	 }
			 	 
			 }
			 
			 if (piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].schedule != ""){
			 	 	def scheduleString =  piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].schedule.toString()
			 	 	def num = scheduleString.indexOf(";")
			 	 	if (num > 0){
			 	 	def interval= scheduleString.substring(0 , num)
			 	 	assert jsonDrugsAvailability.payload.pharmacy[i].schedule[0].interval == interval
			 	 	}else{
			 	 	assert jsonDrugsAvailability.payload.pharmacy[i].schedule[0].interval == piMultiplyDrugsAvailability.Body.piMultiplyDrugsAvailabilityResponse.pharmacy[j].schedule.toString()
			 	 	}
			 	 }

			 
		}
	}
}


log.info("well done")</script></con:config></con:testStep><con:properties><con:property><con:name>prescriptionNumber</con:name><con:value>01Э4519352756</con:value></con:property><con:property><con:name>geoTag</con:name><con:value>[55.759334, 37.404905]</con:value></con:property><con:property><con:name>stationId</con:name><con:value>56</con:value></con:property><con:property><con:name>is24Hours</con:name><con:value>false</con:value></con:property><con:property><con:name>type</con:name><con:value>benefit</con:value></con:property></con:properties></con:testCase><con:testCase id="63e572c6-8c54-4a38-8674-07b9c36db2d7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1.Аптеки не найдены(пустой ответ)" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получение номера рецепта, который не вернет ни одной аптеки" id="94fd1034-542b-452b-a415-d9d0cdb645b1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString>${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT DISTINCT EMIAS_LLO.PRESCRIPTION.NUMBER_ FROM EMIAS_LLO.PRESCRIPTION
INNER JOIN EMIAS_LLO.PRESCRIPTION_ROW ON EMIAS_LLO.PRESCRIPTION_ROW.PRESCRIPTION_ID = EMIAS_LLO.PRESCRIPTION.ID 
INNER JOIN EMIAS_LLO.PHARMACY_MEDICINE_REMAINS ON EMIAS_LLO.PRESCRIPTION_ROW.TRADE_NAME_ID = EMIAS_LLO.PHARMACY_MEDICINE_REMAINS.TRADE_FNAME_ID  
INNER JOIN EMIAS_LLO.PHARMACY ON EMIAS_LLO.PHARMACY_MEDICINE_REMAINS.PHARMACY_ID = EMIAS_LLO.PHARMACY.ID 
INNER JOIN EMIAS_LLO.PHARMACY_METRO ON EMIAS_LLO.PHARMACY_METRO.PHARMACY_ID  = EMIAS_LLO.PHARMACY.ID 
WHERE EMIAS_LLO.PRESCRIPTION.EXPIRATION_DATE >= SYSDATE  
AND EMIAS_LLO.PHARMACY.IS_ACTUAL = 0
AND EMIAS_LLO.PRESCRIPTION.STATE = 21
AND EMIAS_LLO.PRESCRIPTION.TYPE_ = 'benefit'
</con:query><con:assertion type="JDBC Status" id="3a45f832-8e64-489d-8dc0-6909431b04ef" name="JDBC Status"/><con:assertion type="Simple Contains" id="64856348-954f-4c35-b048-ab55d6593ff1" name="Вернулся номер рецепта"><con:configuration><token>NUMBER_</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись номера рецепта в проперти тест-кейса" id="9fbf9438-3759-4e72-adc4-eaa9a110240b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>pre</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение номера рецепта, который не вернет ни одной аптеки</con:sourceStep><con:sourcePath>//Row[1]/NUMBER_</con:sourcePath><con:targetType>prescriptionNumber</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="postDrugsAvailability" id="c6575a02-e185-458f-8fac-2103a74f0bbd"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/drugsAvailability" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postDrugsAvailability" id="9c42939c-dbce-4d09-9b51-5383a9fa7316" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request>{
  "prescriptionNumber":  ["${#TestCase#prescriptionNumber}"]
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/drugsAvailability</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="217abfee-c803-4cc2-9d38-4e837c68db51" name="HTTP Status Codes = 204"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>prescriptionNumber</con:name><con:value>01Э4519351752</con:value></con:property></con:properties></con:testCase><con:testCase id="ae65d039-d904-4955-a86d-7f5b4a909df4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AC2. Не валидный рецепт (LLO_PRESCRIPTION_NOT_VALID)" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получение не валидного номера рецепта" id="b8ca02ad-dacf-4e1a-a612-fb474949339b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#lloDBDriver}</con:driver><con:connectionString>${#Project#lloFullDbConnection}</con:connectionString><con:query>SELECT EMIAS_LLO.PRESCRIPTION.NUMBER_ 
FROM  EMIAS_LLO.PRESCRIPTION
WHERE EMIAS_LLO.PRESCRIPTION.EXPIRATION_DATE &lt; SYSDATE 
AND ROWNUM &lt;= 1 </con:query><con:assertion type="JDBC Status" id="3a45f832-8e64-489d-8dc0-6909431b04ef" name="JDBC Status"/><con:assertion type="Simple Contains" id="64856348-954f-4c35-b048-ab55d6593ff1" name="Вернулся номер рецепта"><con:configuration><token>NUMBER_</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись номера рецепта в проперти тест-кейса" id="837f27f5-c221-412c-941e-075edd7132b6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>prescriptionNumber</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение не валидного номера рецепта</con:sourceStep><con:sourcePath>//Row[1]/NUMBER_</con:sourcePath><con:targetType>prescriptionNumber</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="postDrugsAvailability" id="7f036f9c-cf0f-4fee-97ee-cd28a2b9fc5a"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/drugsAvailability" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postDrugsAvailability" id="9c42939c-dbce-4d09-9b51-5383a9fa7316" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request>{
  "prescriptionNumber":  ["${#TestCase#prescriptionNumber}"]
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/drugsAvailability</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="217abfee-c803-4cc2-9d38-4e837c68db51" name="HTTP Status Codes = 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85777bfd-7e0a-4168-b4b0-2d7a3e8f23f4" name="Значение code = &quot;LLO_PRESCRIPTION_NOT_VALID&quot;"><con:configuration><path>$error.code</path><content>LLO_PRESCRIPTION_NOT_VALID</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a1a166e0-1851-487e-b734-c06d19830bca" name="Згначение description = &quot;Передан не валидный рецепт для данного запроса&quot;"><con:configuration><path>$error.description</path><content>Передан не валидный рецепт для данного запроса</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="266fb61a-f429-40eb-ac48-d7c537bfc920" name="Значение type = &quot;BUSINESS&quot;"><con:configuration><path>$error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>prescriptionNumber</con:name><con:value>00Э4500003778</con:value></con:property></con:properties></con:testCase><con:testCase id="ce17bb53-eda1-4c8f-9dd9-a4fcd6f6d7ee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AC3. Рецепт не найден (LLO_PRESCRIPTION_NOT_FOUND)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postDrugsAvailability" id="3ef8c56f-1657-40a3-a717-7b07ddf87155"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/drugsAvailability" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postDrugsAvailability" id="9c42939c-dbce-4d09-9b51-5383a9fa7316" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request>{
  "prescriptionNumber":  ["01o02910"]
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/drugsAvailability</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="217abfee-c803-4cc2-9d38-4e837c68db51" name="HTTP Status Codes = 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85777bfd-7e0a-4168-b4b0-2d7a3e8f23f4" name="Значение code = &quot;LLO_PRESCRIPTION_NOT_FOUND&quot;"><con:configuration><path>$error.code</path><content>LLO_PRESCRIPTION_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a1a166e0-1851-487e-b734-c06d19830bca" name="Значение description = &quot;Заказ не найден&quot;"><con:configuration><path>$error.description</path><content>Рецепт или заказ не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="266fb61a-f429-40eb-ac48-d7c537bfc920" name="Значение type = &quot;BUSINESS&quot;"><con:configuration><path>$error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3e2cb972-c626-4900-9720-b5f615ad080f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Некорректные входные данные (SERVER_ERROR_BAD_REQUEST)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postDrugsAvailability" id="d04ace7a-ae26-4591-be43-3413a30bbd82"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/prescription/drugsAvailability" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postDrugsAvailability" id="9c42939c-dbce-4d09-9b51-5383a9fa7316" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOEndpoint}</con:endpoint><con:request>{
  "prescriptionNumber":  [ 01Э4519352796 ]
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/prescription/drugsAvailability</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="217abfee-c803-4cc2-9d38-4e837c68db51" name="HTTP Status Codes = 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85777bfd-7e0a-4168-b4b0-2d7a3e8f23f4" name="Значение code = &quot;SERVER_ERROR_BAD_REQUEST&quot;"><con:configuration><path>$error.code</path><content>SERVER_ERROR_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a1a166e0-1851-487e-b734-c06d19830bca" name="Значение description = &quot;Некорректные входные данные&quot;"><con:configuration><path>$error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="266fb61a-f429-40eb-ac48-d7c537bfc920" name="Значение type = &quot;TECHNICAL&quot;"><con:configuration><path>$error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="ba6076b9-56ad-4de1-a60e-8251b166c2d4" name="GET prescriptions v2" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="30176a02-24f6-41a2-833b-263120e1d5bc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение только активных рецептов" searchProperties="true"><con:settings/><con:testStep type="request" name="PIList" id="8264a51d-36fe-48db-a3b9-27c0e6399101"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piList</con:operation><con:request name="PIList" id="6c9dd178-5dee-4002-a195-54e6bff4d413"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piListRequest>
         <typ:getForm>true</typ:getForm>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:oms>${#TestCase#oms}</typ:oms>
         <typ:options>
            <typ:entry key="get_sale_date">true</typ:entry>
            <typ:entry key="check_periodical">true</typ:entry>
            <typ:entry key="get_booking_availability">true</typ:entry>
            <typ:entry key="get_guid">true</typ:entry>
         </typ:options>
      </typ:piListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="97af5eb8-846a-46e7-b8c0-6a9107c63f74"/><con:assertion type="SOAP Fault Assertion" id="45ca15c4-b4d2-4bc4-bb58-80c542f6e908"/><con:assertion type="Simple Contains" id="61fc4bdc-95d3-49a3-af45-ad77ce31fa61" name="Contains prescriptionList"><con:configuration><token>prescriptionList</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="eeb1b3a7-f8cf-422a-ac6a-16aa3bc123c6"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="get prescriptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Contains activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value=""/>
  <con:entry key="Mock-llo" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг только активных рецептов" id="a85fd87e-fc22-46fd-a995-e165ad322c21"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${PIList#Response}')
prescriptionsXml = new XmlSlurper().parseText(ResponseXml)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()
presLLoList=prescriptionsXml.Body.piListResponse.prescriptionList
presLLo = []


for(object in presLLoList){
	if(object.state.equals("inprogress") || 
		object.state.equals("active") || 
		object.state.equals("delivered"))
	presLLo << object
}
lloSize=presLLo.size()
//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize != infoSize){
	errorText="В методе GET prescriptions возвращено "+infoSize+" элементов, а в методе PIList - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
//для обязательных параметров просто сравниваются значения соответствующих параметров из ответа ЛЛО
//для необязательных параметров: если параметр есть в ответе ЛЛО, то сравнивается соответствующее значение параметра, если нет, проверяется отсутствие элемента в ответе инфо
for(int i=0; i<lloSize; i++){
	if( presInfo[i].number != presLLo[i].number.toString()){
		errorText="В ответе GET prescriptions  у элемента "+i+" значение параметра shortName= "+ presInfo[i].number+", а в методе PIList  значение параметра shortName= "+ presLLo[i].number.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].rp != presLLo[i].rp.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра rp= "+ presInfo[i].rp+", а в методе PIList  значение параметра rp= "+ presLLo[i].rp.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].type != presLLo[i].type.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра type= "+ presInfo[i].type+", а в методе PIList  значение параметра type= "+ presLLo[i].type.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].term != presLLo[i].term.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра term= "+ presInfo[i].term+", а в методе PIList  значение параметра term= "+ presLLo[i].term.toString()
		errorsList << errorText
		errors=errors+1
	}
	expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[i].expirationDate )
	expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
	if( expirationDateInfo != expirationDateLlo){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра expirationDate= "+ presInfo[i].expirationDate+", а в методе PIList  значение параметра expirationDate= "+ presLLo[i].expirationDate.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].state.code  != presLLo[i].state.toString()){
		code=presInfo[i].state.code
		title=presInfo[i].state.title
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ presInfo[i].state.code+", а в методе PIList  значение параметра state= "+ presLLo[i].state.toString()
		errorsList << errorText
		errors=errors+1
		if (code == "active" && title  !=  "Действующий"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Действующий\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "inprogress" && title  !=  "Ожидается поступление в аптеку"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Ожидается поступление в аптеку\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "delivered" && title  !=  "Препарат поступил в аптеку"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Препарат поступил в аптеку\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		
	}
	if(presLLo[i].prescriptionGUID.toString()  !=  ""){
		if( presInfo[i].prescriptionGUID != presLLo[i].prescriptionGUID.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра prescriptionGUID= "+ presInfo[i].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		log.info "рецепт без prescriptionGUID "+presInfo[i].number
		if(presInfo[i].prescriptionGUID != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра prescriptionGUID= "+ presInfo[i].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].form.toString()  !=  ""){
		if( presInfo[i].form != presLLo[i].form.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра form= "+ presInfo[i].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].form != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра form= "+ presInfo[i].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].medicineRus.toString()  !=  ""){
		if( presInfo[i].medicineRus != presLLo[i].medicineRus.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра medicineRus= "+ presInfo[i].medicineRus+", а в методе PIList  значение параметра form= "+ presLLo[i].medicineRus.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].medicineRus != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра medicineRus= "+ presInfo[i].medicineRus+", а в методе PIList  значение параметра medicineRus= "+ presLLo[i].medicineRus.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].bookingAvailable.toString()  !=  ""){
		if( presInfo[i].bookingAvailable  != presLLo[i].bookingAvailable.toBoolean()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра bookingAvailable= "+ presInfo[i].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].bookingAvailable != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра bookingAvailable= "+ presInfo[i].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].controlType.toString()  !=  ""){
		code=presInfo[i].controlType.code
		title=presInfo[i].controlType.title
		if( code  !=  presLLo[i].controlType.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а в методе PIList  значение параметра controlType= "+ presLLo[i].controlType.toString()
			errorsList << errorText
			errors=errors+1
		}
		if (code == "narcotic" && title  !=  "Наркотический лекарственный препарат, недоступен для бронирования"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Наркотический лекарственный препарат, недоступен для бронирования\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "drastic" && title  !=  "Сильнодействующий лекарственный препарат, недоступен для бронирования"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Сильнодействующий лекарственный препарат, недоступен для бронирования\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "devices" && title  !=  "Изделие медицинского назначения, недоступно для бронирования"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Изделие медицинского назначения, недоступно для бронирования\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "normal" && title  !=  null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не null, а "+ title
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].controlType != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType= "+ presInfo[i].controlType+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].controlType.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
}





//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>true</con:value></con:property><con:property><con:name>oms</con:name><con:value>7758020846000146</con:value></con:property></con:properties></con:testCase><con:testCase id="127321c1-3b63-4247-b30d-233c9465e826" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение всех рецептов с onlyActive=false" searchProperties="true"><con:settings/><con:testStep type="request" name="PIList" id="192ac7b2-e3c3-4bbd-b38f-d1cf40e53359"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piList</con:operation><con:request name="PIList" id="6c9dd178-5dee-4002-a195-54e6bff4d413"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piListRequest>
         <typ:getForm>true</typ:getForm>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:oms>${#TestCase#oms}</typ:oms>
         <typ:options>
            <typ:entry key="get_sale_date">true</typ:entry>
            <typ:entry key="check_periodical">true</typ:entry>
            <typ:entry key="get_booking_availability">true</typ:entry>
            <typ:entry key="get_guid">true</typ:entry>
         </typ:options>
      </typ:piListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="97af5eb8-846a-46e7-b8c0-6a9107c63f74"/><con:assertion type="SOAP Fault Assertion" id="45ca15c4-b4d2-4bc4-bb58-80c542f6e908"/><con:assertion type="Simple Contains" id="60f17b0b-338c-4c8a-b768-0273f4106b91" name="Contains prescriptionList"><con:configuration><token>prescriptionList</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="ea347cc4-0f20-482e-89b6-378da265e431"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="get prescriptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="74d7f36b-c5a2-4119-bedc-16515dcd0e0d" name="Contains archivePrescription"><con:configuration><token>archivePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3d0f0d18-2731-43d5-a531-41194e1dffb7" name="Contains activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value=""/>
  <con:entry key="Mock-llo" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг активных рецептов" id="e9095cbe-29a8-4546-85af-038f442b50b8"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${PIList#Response}')
prescriptionsXml = new XmlSlurper().parseText(ResponseXml)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()
presLLoList=prescriptionsXml.Body.piListResponse.prescriptionList
presLLo = []


for(object in presLLoList){
	if(object.state.equals("inprogress") || 
		object.state.equals("active") || 
		object.state.equals("delivered"))
	presLLo << object
}
lloSize=presLLo.size()
//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize != infoSize){
	errorText="В методе GET prescriptions возвращено "+infoSize+" элементов, а в методе PIList - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
//для обязательных параметров просто сравниваются значения соответствующих параметров из ответа ЛЛО
//для необязательных параметров: если параметр есть в ответе ЛЛО, то сравнивается соответствующее значение параметра, если нет, проверяется отсутствие элемента в ответе инфо
for(int i=0; i<lloSize; i++){
	if( presInfo[i].number != presLLo[i].number.toString()){
		errorText="В ответе GET prescriptions  у элемента "+i+" значение параметра shortName= "+ presInfo[i].number+", а в методе PIList  значение параметра shortName= "+ presLLo[i].number.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].rp != presLLo[i].rp.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра rp= "+ presInfo[i].rp+", а в методе PIList  значение параметра rp= "+ presLLo[i].rp.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].type != presLLo[i].type.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра type= "+ presInfo[i].type+", а в методе PIList  значение параметра type= "+ presLLo[i].type.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].term != presLLo[i].term.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра term= "+ presInfo[i].term+", а в методе PIList  значение параметра term= "+ presLLo[i].term.toString()
		errorsList << errorText
		errors=errors+1
	}
	expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[i].expirationDate )
	expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
	if( expirationDateInfo != expirationDateLlo){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра expirationDate= "+ presInfo[i].expirationDate+", а в методе PIList  значение параметра expirationDate= "+ presLLo[i].expirationDate.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].state.code  != presLLo[i].state.toString()){
		code=presInfo[i].state.code
		title=presInfo[i].state.title
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ presInfo[i].state.code+", а в методе PIList  значение параметра state= "+ presLLo[i].state.toString()
		errorsList << errorText
		errors=errors+1
		if (code == "active" && title  !=  "Действующий"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Действующий\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "inprogress" && title  !=  "Ожидается поступление в аптеку"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Ожидается поступление в аптеку\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "delivered" && title  !=  "Препарат поступил в аптеку"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Препарат поступил в аптеку\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		
	}
	if(presLLo[i].prescriptionGUID.toString()  !=  ""){
		if( presInfo[i].prescriptionGUID != presLLo[i].prescriptionGUID.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра prescriptionGUID= "+ presInfo[i].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].prescriptionGUID != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра prescriptionGUID= "+ presInfo[i].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].form.toString()  !=  ""){
		if( presInfo[i].form != presLLo[i].form.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра form= "+ presInfo[i].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].form != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра form= "+ presInfo[i].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].medicineRus.toString()  !=  ""){
		if( presInfo[i].medicineRus != presLLo[i].medicineRus.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра medicineRus= "+ presInfo[i].medicineRus+", а в методе PIList  значение параметра form= "+ presLLo[i].medicineRus.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].medicineRus != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра medicineRus= "+ presInfo[i].medicineRus+", а в методе PIList  значение параметра medicineRus= "+ presLLo[i].medicineRus.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].bookingAvailable.toString()  !=  ""){
		if( presInfo[i].bookingAvailable  != presLLo[i].bookingAvailable.toBoolean()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра bookingAvailable= "+ presInfo[i].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].bookingAvailable != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра bookingAvailable= "+ presInfo[i].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].controlType.toString()  !=  ""){
		code=presInfo[i].controlType.code
		title=presInfo[i].controlType.title
		if( code  !=  presLLo[i].controlType.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а в методе PIList  значение параметра controlType= "+ presLLo[i].controlType.toString()
			errorsList << errorText
			errors=errors+1
		}
		if (code == "narcotic" && title  !=  "Наркотический лекарственный препарат, недоступен для бронирования"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Наркотический лекарственный препарат, недоступен для бронирования\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "drastic" && title  !=  "Сильнодействующий лекарственный препарат, недоступен для бронирования"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Сильнодействующий лекарственный препарат, недоступен для бронирования\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "devices" && title  !=  "Изделие медицинского назначения, недоступно для бронирования"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Изделие медицинского назначения, недоступно для бронирования\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "normal" && title  !=  null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не null, а "+ title
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].controlType != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType= "+ presInfo[i].controlType+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].controlType.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
}





//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Маппинг не активных рецептов" id="867cd0b9-9c7a-4e3f-bc78-0e58d7dd1338"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${PIList#Response}')
prescriptionsXml = new XmlSlurper().parseText(ResponseXml)

presInfo = prescriptionsJson.payload.archivePrescription
infoSize=presInfo.size()
presLLoList=prescriptionsXml.Body.piListResponse.prescriptionList
presLLo = []


for(object in presLLoList){
	if(object.state.equals("completed") || 
		object.state.equals("expired"))
	presLLo << object
}
lloSize=presLLo.size()
//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize != infoSize){
	errorText="В методе GET prescriptions возвращено "+infoSize+" элементов, а в методе PIList - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
//для обязательных параметров просто сравниваются значения соответствующих параметров из ответа ЛЛО
//для необязательных параметров: если параметр есть в ответе ЛЛО, то сравнивается соответствующее значение параметра, если нет, проверяется отсутствие элемента в ответе инфо
for(int i=0; i<lloSize; i++){
	if( presInfo[i].number != presLLo[i].number.toString()){
		errorText="В ответе GET prescriptions  у элемента "+i+" значение параметра shortName= "+ presInfo[i].number+", а в методе PIList  значение параметра shortName= "+ presLLo[i].number.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].rp != presLLo[i].rp.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра rp= "+ presInfo[i].rp+", а в методе PIList  значение параметра rp= "+ presLLo[i].rp.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].type != presLLo[i].type.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра type= "+ presInfo[i].type+", а в методе PIList  значение параметра type= "+ presLLo[i].type.toString()
		errorsList << errorText
		errors=errors+1
	}
	expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[i].expirationDate )
	expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
	if( expirationDateInfo != expirationDateLlo){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра expirationDate= "+ presInfo[i].expirationDate+", а в методе PIList  значение параметра expirationDate= "+ presLLo[i].expirationDate.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].state.code  != presLLo[i].state.toString()){
		code=presInfo[i].state.code
		title=presInfo[i].state.title
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ presInfo[i].state.code+", а в методе PIList  значение параметра state= "+ presLLo[i].state.toString()
		errorsList << errorText
		errors=errors+1
		if (code == "completed" && title  !=  "Обслужен"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Обслужен\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "expired" && title  !=  "Просрочен"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Просрочен\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].form.toString()  !=  ""){
		if( presInfo[i].form != presLLo[i].form.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра form= "+ presInfo[i].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].form != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра form= "+ presInfo[i].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].medicineRus.toString()  !=  ""){
		if( presInfo[i].medicineRus != presLLo[i].medicineRus.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра medicineRus= "+ presInfo[i].medicineRus+", а в методе PIList  значение параметра form= "+ presLLo[i].medicineRus.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].medicineRus != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра medicineRus= "+ presInfo[i].medicineRus+", а в методе PIList  значение параметра medicineRus= "+ presLLo[i].medicineRus.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].saleDate.toString()  !=  ""){
		if( presInfo[i].saleDate.toString() != presLLo[i].saleDate.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра saleDate= "+ presInfo[i].saleDate+", а в методе PIList  значение параметра saleDate= "+ presLLo[i].saleDate.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].saleDate != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра saleDate= "+ presInfo[i].saleDate+", а в методе PIList  значение параметра saleDate= "+ presLLo[i].saleDate.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
}





//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>false</con:value></con:property><con:property><con:name>oms</con:name><con:value>7758020846000146</con:value></con:property></con:properties></con:testCase><con:testCase id="06740c20-9ca1-41e8-87c3-e6565076a445" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение всех рецептов без параметра onlyActive" searchProperties="true"><con:settings/><con:testStep type="request" name="PIList" id="20331752-df1b-4f73-ade4-d66e601836f1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piList</con:operation><con:request name="PIList" id="6c9dd178-5dee-4002-a195-54e6bff4d413"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piListRequest>
         <typ:getForm>true</typ:getForm>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:oms>${#TestCase#oms}</typ:oms>
         <typ:options>
            <typ:entry key="get_sale_date">true</typ:entry>
            <typ:entry key="check_periodical">true</typ:entry>
            <typ:entry key="get_booking_availability">true</typ:entry>
            <typ:entry key="get_guid">true</typ:entry>
         </typ:options>
      </typ:piListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="97af5eb8-846a-46e7-b8c0-6a9107c63f74"/><con:assertion type="SOAP Fault Assertion" id="45ca15c4-b4d2-4bc4-bb58-80c542f6e908"/><con:assertion type="Simple Contains" id="60f17b0b-338c-4c8a-b768-0273f4106b91" name="Contains prescriptionList"><con:configuration><token>prescriptionList</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="129f8ff4-ddaf-42bb-948c-a0f3e282aa57"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="get prescriptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="74d7f36b-c5a2-4119-bedc-16515dcd0e0d" name="Contains archivePrescription"><con:configuration><token>archivePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3d0f0d18-2731-43d5-a531-41194e1dffb7" name="Contains activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value=""/>
  <con:entry key="Mock-llo" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг активных рецептов" id="86fe595d-628b-4acf-b796-4ac66b0ed4c1"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${PIList#Response}')
prescriptionsXml = new XmlSlurper().parseText(ResponseXml)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()
presLLoList=prescriptionsXml.Body.piListResponse.prescriptionList
presLLo = []


for(object in presLLoList){
	if(object.state.equals("inprogress") || 
		object.state.equals("active") || 
		object.state.equals("delivered"))
	presLLo << object
}
lloSize=presLLo.size()
//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize != infoSize){
	errorText="В методе GET prescriptions возвращено "+infoSize+" элементов, а в методе PIList - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
//для обязательных параметров просто сравниваются значения соответствующих параметров из ответа ЛЛО
//для необязательных параметров: если параметр есть в ответе ЛЛО, то сравнивается соответствующее значение параметра, если нет, проверяется отсутствие элемента в ответе инфо
for(int i=0; i<lloSize; i++){
	if( presInfo[i].number != presLLo[i].number.toString()){
		errorText="В ответе GET prescriptions  у элемента "+i+" значение параметра shortName= "+ presInfo[i].number+", а в методе PIList  значение параметра shortName= "+ presLLo[i].number.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].rp != presLLo[i].rp.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра rp= "+ presInfo[i].rp+", а в методе PIList  значение параметра rp= "+ presLLo[i].rp.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].type != presLLo[i].type.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра type= "+ presInfo[i].type+", а в методе PIList  значение параметра type= "+ presLLo[i].type.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].term != presLLo[i].term.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра term= "+ presInfo[i].term+", а в методе PIList  значение параметра term= "+ presLLo[i].term.toString()
		errorsList << errorText
		errors=errors+1
	}
	expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[i].expirationDate )
	expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
	if( expirationDateInfo != expirationDateLlo){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра expirationDate= "+ presInfo[i].expirationDate+", а в методе PIList  значение параметра expirationDate= "+ presLLo[i].expirationDate.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].state.code  != presLLo[i].state.toString()){
		code=presInfo[i].state.code
		title=presInfo[i].state.title
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ presInfo[i].state.code+", а в методе PIList  значение параметра state= "+ presLLo[i].state.toString()
		errorsList << errorText
		errors=errors+1
		if (code == "active" && title  !=  "Действующий"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Действующий\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "inprogress" && title  !=  "Ожидается поступление в аптеку"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Ожидается поступление в аптеку\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "delivered" && title  !=  "Препарат поступил в аптеку"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Препарат поступил в аптеку\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		
	}
	if(presLLo[i].prescriptionGUID.toString()  !=  ""){
		if( presInfo[i].prescriptionGUID != presLLo[i].prescriptionGUID.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра prescriptionGUID= "+ presInfo[i].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].prescriptionGUID != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра prescriptionGUID= "+ presInfo[i].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].form.toString()  !=  ""){
		if( presInfo[i].form != presLLo[i].form.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра form= "+ presInfo[i].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].form != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра form= "+ presInfo[i].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].medicineRus.toString()  !=  ""){
		if( presInfo[i].medicineRus != presLLo[i].medicineRus.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра medicineRus= "+ presInfo[i].medicineRus+", а в методе PIList  значение параметра form= "+ presLLo[i].medicineRus.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].medicineRus != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра medicineRus= "+ presInfo[i].medicineRus+", а в методе PIList  значение параметра medicineRus= "+ presLLo[i].medicineRus.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].bookingAvailable.toString()  !=  ""){
		if( presInfo[i].bookingAvailable  != presLLo[i].bookingAvailable.toBoolean()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра bookingAvailable= "+ presInfo[i].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].bookingAvailable != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра bookingAvailable= "+ presInfo[i].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].controlType.toString()  !=  ""){
		code=presInfo[i].controlType.code
		title=presInfo[i].controlType.title
		if( code  !=  presLLo[i].controlType.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а в методе PIList  значение параметра controlType= "+ presLLo[i].controlType.toString()
			errorsList << errorText
			errors=errors+1
		}
		if (code == "narcotic" && title  !=  "Наркотический лекарственный препарат, недоступен для бронирования"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Наркотический лекарственный препарат, недоступен для бронирования\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "drastic" && title  !=  "Сильнодействующий лекарственный препарат, недоступен для бронирования"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Сильнодействующий лекарственный препарат, недоступен для бронирования\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "devices" && title  !=  "Изделие медицинского назначения, недоступно для бронирования"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Изделие медицинского назначения, недоступно для бронирования\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "normal" && title  !=  null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType.code= "+ code+", а controlType.title не null, а "+ title
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].controlType != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра controlType= "+ presInfo[i].controlType+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].controlType.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
}





//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Маппинг не активных рецептов" id="dc8655ab-6d99-47dc-9e92-029497076059"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${PIList#Response}')
prescriptionsXml = new XmlSlurper().parseText(ResponseXml)

presInfo = prescriptionsJson.payload.archivePrescription
infoSize=presInfo.size()
presLLoList=prescriptionsXml.Body.piListResponse.prescriptionList
presLLo = []


for(object in presLLoList){
	if(object.state.equals("completed") || 
		object.state.equals("expired"))
	presLLo << object
}
lloSize=presLLo.size()
//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize != infoSize){
	errorText="В методе GET prescriptions возвращено "+infoSize+" элементов, а в методе PIList - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
//для обязательных параметров просто сравниваются значения соответствующих параметров из ответа ЛЛО
//для необязательных параметров: если параметр есть в ответе ЛЛО, то сравнивается соответствующее значение параметра, если нет, проверяется отсутствие элемента в ответе инфо
for(int i=0; i<lloSize; i++){
	if( presInfo[i].number != presLLo[i].number.toString()){
		errorText="В ответе GET prescriptions  у элемента "+i+" значение параметра shortName= "+ presInfo[i].number+", а в методе PIList  значение параметра shortName= "+ presLLo[i].number.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].rp != presLLo[i].rp.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра rp= "+ presInfo[i].rp+", а в методе PIList  значение параметра rp= "+ presLLo[i].rp.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].type != presLLo[i].type.toString()){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра type= "+ presInfo[i].type+", а в методе PIList  значение параметра type= "+ presLLo[i].type.toString()
		errorsList << errorText
		errors=errors+1
	}
	expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[i].expirationDate )
	expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
	if( expirationDateInfo != expirationDateLlo){
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра expirationDate= "+ presInfo[i].expirationDate+", а в методе PIList  значение параметра expirationDate= "+ presLLo[i].expirationDate.toString()
		errorsList << errorText
		errors=errors+1
	}
	if( presInfo[i].state.code  != presLLo[i].state.toString()){
		code=presInfo[i].state.code
		title=presInfo[i].state.title
		errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ presInfo[i].state.code+", а в методе PIList  значение параметра state= "+ presLLo[i].state.toString()
		errorsList << errorText
		errors=errors+1
		if (code == "completed" && title  !=  "Обслужен"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Обслужен\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
		if (code == "expired" && title  !=  "Просрочен"){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра state.code= "+ code+", а state.title не \"Просрочен\", а "+ title
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].form.toString()  !=  ""){
		if( presInfo[i].form != presLLo[i].form.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра form= "+ presInfo[i].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].form != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра form= "+ presInfo[i].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].medicineRus.toString()  !=  ""){
		if( presInfo[i].medicineRus != presLLo[i].medicineRus.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра medicineRus= "+ presInfo[i].medicineRus+", а в методе PIList  значение параметра form= "+ presLLo[i].medicineRus.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].medicineRus != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра medicineRus= "+ presInfo[i].medicineRus+", а в методе PIList  значение параметра medicineRus= "+ presLLo[i].medicineRus.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	if(presLLo[i].saleDate.toString()  !=  ""){
		if( presInfo[i].saleDate.toString() != presLLo[i].saleDate.toString()){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра saleDate= "+ presInfo[i].saleDate+", а в методе PIList  значение параметра saleDate= "+ presLLo[i].saleDate.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
	else{
		if(presInfo[i].saleDate != null){
			errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[i].number+" значение параметра saleDate= "+ presInfo[i].saleDate+", а в методе PIList  значение параметра saleDate= "+ presLLo[i].saleDate.toString()
			errorsList << errorText
			errors=errors+1
		}
	}
}





//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>false</con:value></con:property><con:property><con:name>oms</con:name><con:value>7758020846000146</con:value></con:property></con:properties></con:testCase><con:testCase id="acd8a0dd-3a25-40ce-a33f-51206e216fbb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС3  LLO_PATIENT_NOT_FOUND" searchProperties="true"><con:settings/><con:testStep type="request" name="PIList" id="c567551e-398c-4360-900b-903e18129105"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piList</con:operation><con:request name="PIList" id="6c9dd178-5dee-4002-a195-54e6bff4d413"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#lloEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piListRequest>
         <typ:getForm>true</typ:getForm>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:oms>${#TestCase#oms}</typ:oms>
         <typ:options>
           <typ:entry key="get_sale_date">true</typ:entry>
            <typ:entry key="check_periodical">true</typ:entry>
            <typ:entry key="get_booking_availability">true</typ:entry>
            <typ:entry key="get_guid">true</typ:entry>
         </typ:options>
      </typ:piListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="97af5eb8-846a-46e7-b8c0-6a9107c63f74"/><con:assertion type="SOAP Fault Assertion" id="45ca15c4-b4d2-4bc4-bb58-80c542f6e908"/><con:assertion type="XPath Match" id="4440465e-8af3-4327-8435-f9bc61849123" name="Код ошибки 2046"><con:configuration><path>//*:resultCode</path><content>2046</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="4262526d-46ec-4bd8-9c3a-6376e02dd764"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="get prescriptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="JsonPath Match" id="95dcfe33-084c-4d6c-b807-4035f2a3e006" name="error.code"><con:configuration><path>error.code</path><content>LLO_PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="562419cf-41b8-408e-9a45-9d7cc55a0906" name="error.description"><con:configuration><path>error.description</path><content>Пациент не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee47a931-49cf-4ccd-a8cc-04c5b1147fa0"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="562419cf-41b8-408e-9a45-9d7cc55a0906" name="error.type"><con:configuration><path>error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value=""/>
  <con:entry key="Mock-llo" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>770000710271440</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="2cec75ec-4d16-426b-a90c-11e01380850d" name="GET prescriptions v3"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="fbef896d-090e-44f0-b427-5b343102e664" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Интеграционный сценарий. Получение всех рецептов с onlyActive=false_205459" searchProperties="true"><con:settings/><con:testStep type="request" name="PIList" id="ac4bc66c-6c53-4dd7-8c9a-4d8b4814675a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piList</con:operation><con:request name="PIList" id="6c9dd178-5dee-4002-a195-54e6bff4d413"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piListRequest>
         <typ:getForm>true</typ:getForm>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:oms>${#TestCase#oms}</typ:oms>
         <typ:options>
            <typ:entry key="get_sale_date">true</typ:entry>
            <typ:entry key="check_periodical">true</typ:entry>
            <typ:entry key="get_booking_availability">true</typ:entry>
            <typ:entry key="get_guid">true</typ:entry>
         </typ:options>
      </typ:piListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="97af5eb8-846a-46e7-b8c0-6a9107c63f74"/><con:assertion type="SOAP Fault Assertion" id="45ca15c4-b4d2-4bc4-bb58-80c542f6e908"/><con:assertion type="Simple Contains" id="60f17b0b-338c-4c8a-b768-0273f4106b91" name="Contains prescriptionList"><con:configuration><token>prescriptionList</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="bdde9890-6ac7-48d5-b828-fc8ff72b3501"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="74d7f36b-c5a2-4119-bedc-16515dcd0e0d" name="Содержится archivePrescription"><con:configuration><token>archivePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3d0f0d18-2731-43d5-a531-41194e1dffb7" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг активных рецептов" id="d6195504-fdee-4707-8cbd-3d16c0889f94"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat
import java.util.ArrayList

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${PIList#Response}')
prescriptionsXml = new XmlSlurper().parseText(ResponseXml)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()
presLLoList=prescriptionsXml.Body.piListResponse.prescriptionList
presLLo = []

def currentDate = new Date() // получаем текущую дату
def sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSS+03:00")
def sdf1 = new SimpleDateFormat("MMM")
def sdf2 = new SimpleDateFormat("d")
def currentTime = sdf.format(currentDate)

for(object in presLLoList){
	if(object.state.equals("inprogress") || 
		object.state.equals("active") || 
		object.state.equals("delivered"))
	presLLo << object
}
lloSize=presLLo.size()
//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize != infoSize){
	errorText="В методе GET prescriptions возвращено "+infoSize+" элементов, а в методе PIList - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
//для обязательных параметров просто сравниваются значения соответствующих параметров из ответа ЛЛО
//для необязательных параметров: если параметр есть в ответе ЛЛО, то сравнивается соответствующее значение параметра, если нет, проверяется отсутствие элемента в ответе инфо
for(int i=0; i<lloSize; i++){
	for (int y=0; y<infoSize; y++){
		if (presInfo[y].number == presLLo[i].number.toString()){
			
			if( presInfo[y].number != presLLo[i].number.toString()){
				errorText="В ответе GET prescriptions  у элемента "+i+" значение параметра shortName= "+ presInfo[y].number+", а в методе PIList  значение параметра shortName= "+ presLLo[i].number.toString()
				errorsList << errorText
				errors=errors+1
			}
			cTimeInfo = Date.parse('yyyy-MM-dd', presInfo[y].ctime )
			cTimeLlo = Date.parse('yyyy-MM-dd', presLLo[i].ctime.toString())
			if(cTimeInfo != cTimeLlo){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра cTime= "+ presInfo[y].ctime+", а в методе PIList  значение параметра cTime= "+ presLLo[i].ctime.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].rp != presLLo[i].rp.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра rp= "+ presInfo[y].rp+", а в методе PIList  значение параметра rp= "+ presLLo[i].rp.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].type != presLLo[i].type.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра type= "+ presInfo[y].type+", а в методе PIList  значение параметра type= "+ presLLo[i].type.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].term != presLLo[i].term.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра term= "+ presInfo[y].term+", а в методе PIList  значение параметра term= "+ presLLo[i].term.toString()
				errorsList << errorText
				errors=errors+1
			}
			expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[y].expirationDate )
			expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())			
			if( expirationDateInfo != expirationDateLlo){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра expirationDate= "+ presInfo[y].expirationDate+", а в методе PIList  значение параметра expirationDate= "+ presLLo[i].expirationDate.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].state.code != presLLo[i].state.toString()){
				code=presInfo[y].state.code
				title=presInfo[y].state.title
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ presInfo[y].state.code+", а в методе PIList  значение параметра state= "+ presLLo[i].state.toString()
				errorsList << errorText
				errors=errors+1
				if (code == "active" && title  !=  "Действующий"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Действующий\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "inprogress" && title  !=  "Ожидается поступление в аптеку"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Ожидается поступление в аптеку\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "delivered" && title  !=  "Препарат поступил в аптеку"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Препарат поступил в аптеку\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].prescriptionGUID.toString()  !=  ""){
				if( presInfo[y].prescriptionGUID != presLLo[i].prescriptionGUID.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра prescriptionGUID= "+ presInfo[y].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].prescriptionGUID != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра prescriptionGUID= "+ presInfo[y].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].form.toString()  !=  ""){
				if( presInfo[y].form != presLLo[i].form.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра form= "+ presInfo[y].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].form != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра form= "+ presInfo[y].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].medicineRus.toString()  !=  ""){
				if( presInfo[y].medicineRus != presLLo[i].medicineRus.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра medicineRus= "+ presInfo[y].medicineRus+", а в методе PIList  значение параметра form= "+ presLLo[i].medicineRus.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].medicineRus != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра medicineRus= "+ presInfo[y].medicineRus+", а в методе PIList  значение параметра medicineRus= "+ presLLo[i].medicineRus.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presInfo[y].longPrescriptionInfo != null){
				if(presLLo[i].state.toString() == "active" && presLLo[i].periodical.periodNumber != "" && presLLo[i].periodical.keyDate != ""){
					keyDate = Date.parse('yyyy-MM-dd', presLLo[i].periodical.keyDate.toString())
					def parsedMonth = sdf1.format(keyDate).substring(0,3)
					def parsedDay = sdf2.format(keyDate)
					if(presInfo[y].longPrescriptionInfo.code != "periodUnFinished"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.code= "+ presInfo[y].longPrescriptionInfo.code+", а должен быть periodUnFinished"
					errorsList << errorText
					errors=errors+1				
					}
					if(presInfo[y].longPrescriptionInfo.title != "Получите до"+" "+parsedDay+" "+parsedMonth){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.title = "+ presInfo[y].longPrescriptionInfo.title+", а должен быть Получите до"+" "+parsedDay+" "+parsedMonth - "."
					errorsList << errorText
					errors=errors+1				
					}
				}
				if(presLLo[i].state.toString() == "active" && presLLo[i].periodical.periodNumber == "" && presLLo[i].periodical.keyDate != ""){
					keyDate = Date.parse('yyyy-MM-dd', presLLo[i].periodical.keyDate.toString())
					def parsedMonth = sdf1.format(keyDate).substring(0,3)
					def parsedDay = sdf2.format(keyDate)
					if(presInfo[y].longPrescriptionInfo.code != "periodFinished"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.code= "+ presInfo[y].longPrescriptionInfo.code+", а должен быть periodFinished"
					errorsList << errorText
					errors=errors+1				
					}
					if(presInfo[y].longPrescriptionInfo.title != "Получите c"+" "+parsedDay+" "+parsedMonth){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.title = "+ presInfo[y].longPrescriptionInfo.title+", а должен быть Получите c"+" "+parsedDay+" "+parsedMonth - "."
					errorsList << errorText
					errors=errors+1				
					}
				}
				if(presLLo[i].state.toString() == "active" && presLLo[i].periodical.keyDate == ""){
					if(presInfo[y].longPrescriptionInfo.code != "prohibited"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.code= "+ presInfo[y].longPrescriptionInfo.code+", а должен быть prohibited"
					errorsList << errorText
					errors=errors+1				
					}
					if(presInfo[y].longPrescriptionInfo.title != "Обслуживание невозможно"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.title = "+ presInfo[y].longPrescriptionInfo.title+", а должен быть Обслуживание невозможно"
					errorsList << errorText
					errors=errors+1				
					}
				}
			}
			if(presLLo[i].bookingAvailable.toString()  !=  ""){
				if( presInfo[y].bookingAvailable  != presLLo[i].bookingAvailable.toBoolean()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра bookingAvailable= "+ presInfo[y].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].bookingAvailable != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра bookingAvailable= "+ presInfo[y].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].bookingAvailable.toString()  !=  ""){
				if(presLLo[i].bookingAvailable.toBoolean() == false){
					if(presLLo[i].periodical.periodsQty != ""){
						if (presLLo[i].periodical.periodsQty.toInteger() > 1){
							if(presInfo[y].reasonUnavailabilityBooking != "Препарат, отпускаемый по графику обслуживания, недоступен для бронирования"){
								errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Препарат, отпускаемый по графику обслуживания, недоступен для бронирования"
								errorsList << errorText
								errors=errors+1
							}
						}
					}
					else{
						if(presLLo[i].controlType.toString() == "narcotic"){
							if(presInfo[y].reasonUnavailabilityBooking != "Наркотический лекарственный препарат, недоступен для бронирования"){
									errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Наркотический лекарственный препарат, недоступен для бронирования"
									errorsList << errorText
									errors=errors+1					
							}
						}
						if(presLLo[i].controlType.toString() == "drastic"){
							if(presInfo[y].reasonUnavailabilityBooking != "Сильнодействующий лекарственный препарат, недоступен для бронирования"){
									errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Сильнодействующий лекарственный препарат, недоступен для бронирования"
									errorsList << errorText
									errors=errors+1					
							}
						}
						if(presLLo[i].controlType.toString() == "devices"){
							if(presInfo[y].reasonUnavailabilityBooking != "Изделие медицинского назначения, недоступно для бронирования"){
									errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Изделие медицинского назначения, недоступно для бронирования"
									errorsList << errorText
									errors=errors+1				
							}
						}
					}
				}
				else{
					if(presInfo[y].reasonUnavailabilityBooking != null){
						errorText="В ответе GET prescriptions не должно быть параметра reasonUnavailabilityBooking со значением"+ presInfo[y].reasonUnavailabilityBooking
						errorsList << errorText
						errors=errors+1
					}
				}
			}
			if(presInfo[y].drugAvailabilityCheck != null){
				if(presLLo[i].state.toString() == "active" && presLLo[i].type.toString() == "benefit" && currentTime <= presLLo[i].expirationDate.toString()){
					if(presInfo[y].drugAvailabilityCheck != true){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра drugAvailabilityCheck= "+ presInfo[y].drugAvailabilityCheck+", а должно быть true"
					errorsList << errorText
					errors=errors+1
					}
				}
				else {
					if(presInfo[y].drugAvailabilityCheck != false){
						errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра drugAvailabilityCheck= "+ presInfo[y].drugAvailabilityCheck+", а должно быть false"
						errorsList << errorText
						errors=errors+1
					}
				}
			}
			else{
				errorText="В ответе GET prescriptions  отсутствует обязательный параметр drugAvailabilityCheck"
				errorsList << errorText
				errors=errors+1
			}
			if(presLLo[i].controlType.toString()  !=  ""){
				code=presInfo[y].controlType.code
				title=presInfo[y].controlType.title
				if( code  !=  presLLo[i].controlType.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а в методе PIList  значение параметра controlType= "+ presLLo[i].controlType.toString()
					errorsList << errorText
					errors=errors+1
				}
				if (code == "narcotic" && title  !=  "Наркотический лекарственный препарат, недоступен для бронирования"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Наркотический лекарственный препарат, недоступен для бронирования\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "drastic" && title  !=  "Сильнодействующий лекарственный препарат, недоступен для бронирования"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Сильнодействующий лекарственный препарат, недоступен для бронирования\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "devices" && title  !=  "Изделие медицинского назначения, недоступно для бронирования"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Изделие медицинского назначения, недоступно для бронирования\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "normal" && title  !=  null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не null, а "+ title
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].controlType != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType= "+ presInfo[y].controlType+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].controlType.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
		}
	}
}


//проверка сортировки рецептов по возрастанию

DateArray_presInfo=[]
DateArray_presLLo=[]
	

for(int i=0; i<lloSize; i++){
	expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
	DateArray_presLLo<<expirationDateLlo
}

for (int y=0; y<infoSize; y++){
	expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[y].expirationDate)
	DateArray_presInfo<<expirationDateInfo
}

DateArray_presLLo.sort()

assert DateArray_presLLo.sort() == DateArray_presInfo


//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Маппинг не активных рецептов" id="c8b69297-e306-47ee-b2c2-6780f22fba31"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${PIList#Response}')
prescriptionsXml = new XmlSlurper().parseText(ResponseXml)

presInfo = prescriptionsJson.payload.archivePrescription
infoSize=presInfo.size()
presLLoList=prescriptionsXml.Body.piListResponse.prescriptionList
presLLo = []


for(object in presLLoList){
	if(object.state.equals("completed") || 
		object.state.equals("expired"))
	presLLo << object
}
lloSize=presLLo.size()
//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize != infoSize){
	errorText="В методе GET prescriptions возвращено "+infoSize+" элементов, а в методе PIList - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
//для обязательных параметров просто сравниваются значения соответствующих параметров из ответа ЛЛО
//для необязательных параметров: если параметр есть в ответе ЛЛО, то сравнивается соответствующее значение параметра, если нет, проверяется отсутствие элемента в ответе инфо
for(int i=0; i<lloSize; i++){
	for (int y=0; y<infoSize; y++){
		if (presInfo[y].number == presLLo[i].number.toString()){
			if( presInfo[y].number != presLLo[i].number.toString()){
				errorText="В ответе GET prescriptions  у элемента "+i+" значение параметра shortName= "+ presInfo[y].number+", а в методе PIList  значение параметра shortName= "+ presLLo[i].number.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].rp != presLLo[i].rp.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра rp= "+ presInfo[y].rp+", а в методе PIList  значение параметра rp= "+ presLLo[i].rp.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].type != presLLo[i].type.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра type= "+ presInfo[y].type+", а в методе PIList  значение параметра type= "+ presLLo[i].type.toString()
				errorsList << errorText
				errors=errors+1
			}
			expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[y].expirationDate )
			expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
			if( expirationDateInfo != expirationDateLlo){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра expirationDate= "+ presInfo[y].expirationDate+", а в методе PIList  значение параметра expirationDate= "+ presLLo[i].expirationDate.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].state.code  != presLLo[i].state.toString()){
				code=presInfo[y].state.code
				title=presInfo[y].state.title
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ presInfo[y].state.code+", а в методе PIList  значение параметра state= "+ presLLo[i].state.toString()
				errorsList << errorText
				errors=errors+1
				if (code == "completed" && title  !=  "Обслужен"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Обслужен\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "expired" && title !=  "Просрочен"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Просрочен\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].form.toString()  !=  ""){
				if( presInfo[y].form != presLLo[i].form.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра form= "+ presInfo[y].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].form != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра form= "+ presInfo[y].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].medicineRus.toString()  !=  ""){
				if( presInfo[y].medicineRus != presLLo[i].medicineRus.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра medicineRus= "+ presInfo[y].medicineRus+", а в методе PIList  значение параметра form= "+ presLLo[i].medicineRus.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].medicineRus != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра medicineRus= "+ presInfo[y].medicineRus+", а в методе PIList  значение параметра medicineRus= "+ presLLo[i].medicineRus.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].saleDate.toString()  !=  ""){
				if( presInfo[y].saleDate.toString() != presLLo[i].saleDate.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра saleDate= "+ presInfo[y].saleDate+", а в методе PIList  значение параметра saleDate= "+ presLLo[i].saleDate.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].saleDate != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра saleDate= "+ presInfo[y].saleDate+", а в методе PIList  значение параметра saleDate= "+ presLLo[i].saleDate.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
		}
	}
}


//проверка сортировки рецептов по убыванию

DateArray_presInfo=[]
DateArray_presLLo=[]
	

for(int i=0; i<lloSize; i++){
	expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
	DateArray_presLLo<<expirationDateLlo
}

for (int y=0; y<infoSize; y++){
	expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[y].expirationDate)
	DateArray_presInfo<<expirationDateInfo
}


assert DateArray_presLLo.sort().reverse() == DateArray_presInfo


//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>false</con:value></con:property><con:property><con:name>oms</con:name><con:value>7792189787001617</con:value></con:property></con:properties></con:testCase><con:testCase id="bb5be7ee-549f-4ade-a35f-01be46f1a6ad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Интеграционный сценарий. Получение только активных рецептов с onlyActive=true_205458" searchProperties="true"><con:settings/><con:testStep type="request" name="PIList" id="e2d09e08-c163-4e5d-8f66-d12875df6c26"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piList</con:operation><con:request name="PIList" id="6c9dd178-5dee-4002-a195-54e6bff4d413"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piListRequest>
         <typ:getForm>true</typ:getForm>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:oms>${#TestCase#oms}</typ:oms>
         <typ:options>
            <typ:entry key="get_sale_date">true</typ:entry>
            <typ:entry key="check_periodical">true</typ:entry>
            <typ:entry key="get_booking_availability">true</typ:entry>
            <typ:entry key="get_guid">true</typ:entry>
         </typ:options>
      </typ:piListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="97af5eb8-846a-46e7-b8c0-6a9107c63f74"/><con:assertion type="SOAP Fault Assertion" id="45ca15c4-b4d2-4bc4-bb58-80c542f6e908"/><con:assertion type="Simple Contains" id="61fc4bdc-95d3-49a3-af45-ad77ce31fa61" name="Contains prescriptionList"><con:configuration><token>prescriptionList</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="3ee1f24e-de32-44b2-b062-99cc7c23c489"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="07437882-d9ea-4258-8a5e-c30c56079620" name="Не содержится archivePrescription"><con:configuration><token>archivePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг только активных рецептов" id="1e08671a-bb79-4c1c-a7b9-ecc4fbab2965"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat
import java.util.ArrayList

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${PIList#Response}')
prescriptionsXml = new XmlSlurper().parseText(ResponseXml)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()
presLLoList=prescriptionsXml.Body.piListResponse.prescriptionList
presLLo = []

def currentDate = new Date() // получаем текущую дату
def sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSS+03:00")
def sdf1 = new SimpleDateFormat("MMM")
def sdf2 = new SimpleDateFormat("d")
def currentTime = sdf.format(currentDate)

for(object in presLLoList){
	if(object.state.equals("inprogress") || 
		object.state.equals("active") || 
		object.state.equals("delivered"))
	presLLo << object
}
lloSize=presLLo.size()
//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize != infoSize){
	errorText="В методе GET prescriptions возвращено "+infoSize+" элементов, а в методе PIList - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
//для обязательных параметров просто сравниваются значения соответствующих параметров из ответа ЛЛО
//для необязательных параметров: если параметр есть в ответе ЛЛО, то сравнивается соответствующее значение параметра, если нет, проверяется отсутствие элемента в ответе инфо
for(int i=0; i<lloSize; i++){
	for (int y=0; y<infoSize; y++){
		if (presInfo[y].number == presLLo[i].number.toString()){
			
			if( presInfo[y].number != presLLo[i].number.toString()){
				errorText="В ответе GET prescriptions  у элемента "+i+" значение параметра shortName= "+ presInfo[y].number+", а в методе PIList  значение параметра shortName= "+ presLLo[i].number.toString()
				errorsList << errorText
				errors=errors+1
			}
			cTimeInfo = Date.parse('yyyy-MM-dd', presInfo[y].ctime )
			cTimeLlo = Date.parse('yyyy-MM-dd', presLLo[i].ctime.toString())
			if(cTimeInfo != cTimeLlo){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра cTime= "+ presInfo[y].ctime+", а в методе PIList  значение параметра cTime= "+ presLLo[i].ctime.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].rp != presLLo[i].rp.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра rp= "+ presInfo[y].rp+", а в методе PIList  значение параметра rp= "+ presLLo[i].rp.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].type != presLLo[i].type.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра type= "+ presInfo[y].type+", а в методе PIList  значение параметра type= "+ presLLo[i].type.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].term != presLLo[i].term.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра term= "+ presInfo[y].term+", а в методе PIList  значение параметра term= "+ presLLo[i].term.toString()
				errorsList << errorText
				errors=errors+1
			}
			expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[y].expirationDate )
			expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())			
			if( expirationDateInfo != expirationDateLlo){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра expirationDate= "+ presInfo[y].expirationDate+", а в методе PIList  значение параметра expirationDate= "+ presLLo[i].expirationDate.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].state.code != presLLo[i].state.toString()){
				code=presInfo[y].state.code
				title=presInfo[y].state.title
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ presInfo[y].state.code+", а в методе PIList  значение параметра state= "+ presLLo[i].state.toString()
				errorsList << errorText
				errors=errors+1
				if (code == "active" && title  !=  "Действующий"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Действующий\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "inprogress" && title  !=  "Ожидается поступление в аптеку"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Ожидается поступление в аптеку\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "delivered" && title  !=  "Препарат поступил в аптеку"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Препарат поступил в аптеку\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].prescriptionGUID.toString()  !=  ""){
				if( presInfo[y].prescriptionGUID != presLLo[i].prescriptionGUID.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра prescriptionGUID= "+ presInfo[y].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].prescriptionGUID != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра prescriptionGUID= "+ presInfo[y].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].form.toString()  !=  ""){
				if( presInfo[y].form != presLLo[i].form.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра form= "+ presInfo[y].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].form != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра form= "+ presInfo[y].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].medicineRus.toString()  !=  ""){
				if( presInfo[y].medicineRus != presLLo[i].medicineRus.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра medicineRus= "+ presInfo[y].medicineRus+", а в методе PIList  значение параметра form= "+ presLLo[i].medicineRus.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].medicineRus != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра medicineRus= "+ presInfo[y].medicineRus+", а в методе PIList  значение параметра medicineRus= "+ presLLo[i].medicineRus.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presInfo[y].longPrescriptionInfo != null){
				if(presLLo[i].state.toString() == "active" && presLLo[i].periodical.periodNumber != "" && presLLo[i].periodical.keyDate != ""){
					keyDate = Date.parse('yyyy-MM-dd', presLLo[i].periodical.keyDate.toString())
					def parsedMonth = sdf1.format(keyDate).substring(0,3)
					def parsedDay = sdf2.format(keyDate)
					if(presInfo[y].longPrescriptionInfo.code != "periodUnFinished"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.code= "+ presInfo[y].longPrescriptionInfo.code+", а должен быть periodUnFinished"
					errorsList << errorText
					errors=errors+1				
					}
					if(presInfo[y].longPrescriptionInfo.title != "Получите до"+" "+parsedDay+" "+parsedMonth){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.title = "+ presInfo[y].longPrescriptionInfo.title+", а должен быть Получите до"+" "+parsedDay+" "+parsedMonth - "."
					errorsList << errorText
					errors=errors+1				
					}
				}
				if(presLLo[i].state.toString() == "active" && presLLo[i].periodical.periodNumber == "" && presLLo[i].periodical.keyDate != ""){
					keyDate = Date.parse('yyyy-MM-dd', presLLo[i].periodical.keyDate.toString())
					def parsedMonth = sdf1.format(keyDate).substring(0,3)
					def parsedDay = sdf2.format(keyDate)
					if(presInfo[y].longPrescriptionInfo.code != "periodFinished"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.code= "+ presInfo[y].longPrescriptionInfo.code+", а должен быть periodFinished"
					errorsList << errorText
					errors=errors+1				
					}
					if(presInfo[y].longPrescriptionInfo.title != "Получите c"+" "+parsedDay+" "+parsedMonth){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.title = "+ presInfo[y].longPrescriptionInfo.title+", а должен быть Получите c"+" "+parsedDay+" "+parsedMonth - "."
					errorsList << errorText
					errors=errors+1				
					}
				}
				if(presLLo[i].state.toString() == "active" && presLLo[i].periodical.keyDate == ""){
					if(presInfo[y].longPrescriptionInfo.code != "prohibited"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.code= "+ presInfo[y].longPrescriptionInfo.code+", а должен быть prohibited"
					errorsList << errorText
					errors=errors+1				
					}
					if(presInfo[y].longPrescriptionInfo.title != "Обслуживание невозможно"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.title = "+ presInfo[y].longPrescriptionInfo.title+", а должен быть Обслуживание невозможно"
					errorsList << errorText
					errors=errors+1				
					}
				}
			}
			if(presLLo[i].bookingAvailable.toString()  !=  ""){
				if( presInfo[y].bookingAvailable  != presLLo[i].bookingAvailable.toBoolean()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра bookingAvailable= "+ presInfo[y].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].bookingAvailable != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра bookingAvailable= "+ presInfo[y].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].bookingAvailable.toString()  !=  ""){
				if(presLLo[i].bookingAvailable.toBoolean() == false){
					if(presLLo[i].periodical.periodsQty != ""){
						if (presLLo[i].periodical.periodsQty.toInteger() > 1){
							if(presInfo[y].reasonUnavailabilityBooking != "Препарат, отпускаемый по графику обслуживания, недоступен для бронирования"){
								errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Препарат, отпускаемый по графику обслуживания, недоступен для бронирования"
								errorsList << errorText
								errors=errors+1
							}
						}
					}
					else{
						if(presLLo[i].controlType.toString() == "narcotic"){
							if(presInfo[y].reasonUnavailabilityBooking != "Наркотический лекарственный препарат, недоступен для бронирования"){
									errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Наркотический лекарственный препарат, недоступен для бронирования"
									errorsList << errorText
									errors=errors+1					
							}
						}
						if(presLLo[i].controlType.toString() == "drastic"){
							if(presInfo[y].reasonUnavailabilityBooking != "Сильнодействующий лекарственный препарат, недоступен для бронирования"){
									errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Сильнодействующий лекарственный препарат, недоступен для бронирования"
									errorsList << errorText
									errors=errors+1					
							}
						}
						if(presLLo[i].controlType.toString() == "devices"){
							if(presInfo[y].reasonUnavailabilityBooking != "Изделие медицинского назначения, недоступно для бронирования"){
									errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Изделие медицинского назначения, недоступно для бронирования"
									errorsList << errorText
									errors=errors+1				
							}
						}
					}
				}
				else{
					if(presInfo[y].reasonUnavailabilityBooking != null){
						errorText="В ответе GET prescriptions не должно быть параметра reasonUnavailabilityBooking со значением"+ presInfo[y].reasonUnavailabilityBooking
						errorsList << errorText
						errors=errors+1
					}
				}
			}
			if(presInfo[y].drugAvailabilityCheck != null){
				if(presLLo[i].state.toString() == "active" && presLLo[i].type.toString() == "benefit" && currentTime <= presLLo[i].expirationDate.toString()){
					if(presInfo[y].drugAvailabilityCheck != true){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра drugAvailabilityCheck= "+ presInfo[y].drugAvailabilityCheck+", а должно быть true"
					errorsList << errorText
					errors=errors+1
					}
				}
				else {
					if(presInfo[y].drugAvailabilityCheck != false){
						errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра drugAvailabilityCheck= "+ presInfo[y].drugAvailabilityCheck+", а должно быть false"
						errorsList << errorText
						errors=errors+1
					}
				}
			}
			else{
				errorText="В ответе GET prescriptions  отсутствует обязательный параметр drugAvailabilityCheck"
				errorsList << errorText
				errors=errors+1
			}
			if(presLLo[i].controlType.toString()  !=  ""){
				code=presInfo[y].controlType.code
				title=presInfo[y].controlType.title
				if( code  !=  presLLo[i].controlType.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а в методе PIList  значение параметра controlType= "+ presLLo[i].controlType.toString()
					errorsList << errorText
					errors=errors+1
				}
				if (code == "narcotic" && title  !=  "Наркотический лекарственный препарат, недоступен для бронирования"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Наркотический лекарственный препарат, недоступен для бронирования\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "drastic" && title  !=  "Сильнодействующий лекарственный препарат, недоступен для бронирования"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Сильнодействующий лекарственный препарат, недоступен для бронирования\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "devices" && title  !=  "Изделие медицинского назначения, недоступно для бронирования"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Изделие медицинского назначения, недоступно для бронирования\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "normal" && title  !=  null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не null, а "+ title
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].controlType != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType= "+ presInfo[y].controlType+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].controlType.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
		}
	}
}


//проверка сортировки рецептов по возрастанию

DateArray_presInfo=[]
DateArray_presLLo=[]
	

for(int i=0; i<lloSize; i++){
	expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
	DateArray_presLLo<<expirationDateLlo
}

for (int y=0; y<infoSize; y++){
	expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[y].expirationDate)
	DateArray_presInfo<<expirationDateInfo
}

DateArray_presLLo.sort()

assert DateArray_presLLo.sort() == DateArray_presInfo

//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>true</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property></con:properties></con:testCase><con:testCase id="60787d13-4da9-462e-bc49-918de5614011" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Интеграционный сценарий. Выполнение запроса без параметра onlyActive_205509" searchProperties="true"><con:settings/><con:testStep type="request" name="PIList" id="132eaae3-384a-4769-8b76-344022fb156f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PrescriptionInfoServiceV4SoapBinding</con:interface><con:operation>piList</con:operation><con:request name="PIList" id="6c9dd178-5dee-4002-a195-54e6bff4d413"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#LLOendpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://emias2.gov.ru/business/llo/v4/types">\r
   <soapenv:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM/4c2f03d5-5c41-4c79-acd0-fe36faa92104</wsse:Username>
      <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"/>
    </wsse:UsernameToken>
  </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <typ:piListRequest>
         <typ:getForm>true</typ:getForm>
         <typ:ident>EMIASINFO</typ:ident>
         <typ:oms>${#TestCase#oms}</typ:oms>
         <typ:options>
            <typ:entry key="get_sale_date">true</typ:entry>
            <typ:entry key="check_periodical">true</typ:entry>
            <typ:entry key="get_booking_availability">true</typ:entry>
            <typ:entry key="get_guid">true</typ:entry>
         </typ:options>
      </typ:piListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="97af5eb8-846a-46e7-b8c0-6a9107c63f74"/><con:assertion type="SOAP Fault Assertion" id="45ca15c4-b4d2-4bc4-bb58-80c542f6e908"/><con:assertion type="Simple Contains" id="60f17b0b-338c-4c8a-b768-0273f4106b91" name="Contains prescriptionList"><con:configuration><token>prescriptionList</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="da180ef6-fa00-4976-bf1f-bfbbc59dc21f"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="Код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="74d7f36b-c5a2-4119-bedc-16515dcd0e0d" name="Содержится archivePrescription"><con:configuration><token>archivePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3d0f0d18-2731-43d5-a531-41194e1dffb7" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value=""/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг активных рецептов" id="9c49f3d9-6fb6-413e-964b-291b56a2cfa0"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat
import java.util.ArrayList

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${PIList#Response}')
prescriptionsXml = new XmlSlurper().parseText(ResponseXml)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()
presLLoList=prescriptionsXml.Body.piListResponse.prescriptionList
presLLo = []

def currentDate = new Date() // получаем текущую дату
def sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSS+03:00")
def sdf1 = new SimpleDateFormat("MMM")
def sdf2 = new SimpleDateFormat("d")
def currentTime = sdf.format(currentDate)

for(object in presLLoList){
	if(object.state.equals("inprogress") || 
		object.state.equals("active") || 
		object.state.equals("delivered"))
	presLLo << object
}
lloSize=presLLo.size()
//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize != infoSize){
	errorText="В методе GET prescriptions возвращено "+infoSize+" элементов, а в методе PIList - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
//для обязательных параметров просто сравниваются значения соответствующих параметров из ответа ЛЛО
//для необязательных параметров: если параметр есть в ответе ЛЛО, то сравнивается соответствующее значение параметра, если нет, проверяется отсутствие элемента в ответе инфо
for(int i=0; i<lloSize; i++){
	for (int y=0; y<infoSize; y++){
		if (presInfo[y].number == presLLo[i].number.toString()){
			
			if( presInfo[y].number != presLLo[i].number.toString()){
				errorText="В ответе GET prescriptions  у элемента "+i+" значение параметра shortName= "+ presInfo[y].number+", а в методе PIList  значение параметра shortName= "+ presLLo[i].number.toString()
				errorsList << errorText
				errors=errors+1
			}
			cTimeInfo = Date.parse('yyyy-MM-dd', presInfo[y].ctime )
			cTimeLlo = Date.parse('yyyy-MM-dd', presLLo[i].ctime.toString())
			if(cTimeInfo != cTimeLlo){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра cTime= "+ presInfo[y].ctime+", а в методе PIList  значение параметра cTime= "+ presLLo[i].ctime.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].rp != presLLo[i].rp.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра rp= "+ presInfo[y].rp+", а в методе PIList  значение параметра rp= "+ presLLo[i].rp.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].type != presLLo[i].type.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра type= "+ presInfo[y].type+", а в методе PIList  значение параметра type= "+ presLLo[i].type.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].term != presLLo[i].term.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра term= "+ presInfo[y].term+", а в методе PIList  значение параметра term= "+ presLLo[i].term.toString()
				errorsList << errorText
				errors=errors+1
			}
			expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[y].expirationDate )
			expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())			
			if( expirationDateInfo != expirationDateLlo){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра expirationDate= "+ presInfo[y].expirationDate+", а в методе PIList  значение параметра expirationDate= "+ presLLo[i].expirationDate.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].state.code != presLLo[i].state.toString()){
				code=presInfo[y].state.code
				title=presInfo[y].state.title
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ presInfo[y].state.code+", а в методе PIList  значение параметра state= "+ presLLo[i].state.toString()
				errorsList << errorText
				errors=errors+1
				if (code == "active" && title  !=  "Действующий"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Действующий\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "inprogress" && title  !=  "Ожидается поступление в аптеку"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Ожидается поступление в аптеку\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "delivered" && title  !=  "Препарат поступил в аптеку"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Препарат поступил в аптеку\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].prescriptionGUID.toString()  !=  ""){
				if( presInfo[y].prescriptionGUID != presLLo[i].prescriptionGUID.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра prescriptionGUID= "+ presInfo[y].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].prescriptionGUID != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра prescriptionGUID= "+ presInfo[y].prescriptionGUID+", а в методе PIList  значение параметра prescriptionGUID= "+ presLLo[i].prescriptionGUID.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].form.toString()  !=  ""){
				if( presInfo[y].form != presLLo[i].form.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра form= "+ presInfo[y].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].form != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра form= "+ presInfo[y].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].medicineRus.toString()  !=  ""){
				if( presInfo[y].medicineRus != presLLo[i].medicineRus.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра medicineRus= "+ presInfo[y].medicineRus+", а в методе PIList  значение параметра form= "+ presLLo[i].medicineRus.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].medicineRus != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра medicineRus= "+ presInfo[y].medicineRus+", а в методе PIList  значение параметра medicineRus= "+ presLLo[i].medicineRus.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presInfo[y].longPrescriptionInfo != null){
				if(presLLo[i].state.toString() == "active" && presLLo[i].periodical.periodNumber != "" && presLLo[i].periodical.keyDate != ""){
					keyDate = Date.parse('yyyy-MM-dd', presLLo[i].periodical.keyDate.toString())
					def parsedMonth = sdf1.format(keyDate).substring(0,3)
					def parsedDay = sdf2.format(keyDate)
					if(presInfo[y].longPrescriptionInfo.code != "periodUnFinished"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.code= "+ presInfo[y].longPrescriptionInfo.code+", а должен быть periodUnFinished"
					errorsList << errorText
					errors=errors+1				
					}
					if(presInfo[y].longPrescriptionInfo.title != "Получите до"+" "+parsedDay+" "+parsedMonth){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.title = "+ presInfo[y].longPrescriptionInfo.title+", а должен быть Получите до"+" "+parsedDay+" "+parsedMonth - "."
					errorsList << errorText
					errors=errors+1				
					}
				}
				if(presLLo[i].state.toString() == "active" && presLLo[i].periodical.periodNumber == "" && presLLo[i].periodical.keyDate != ""){
					keyDate = Date.parse('yyyy-MM-dd', presLLo[i].periodical.keyDate.toString())
					def parsedMonth = sdf1.format(keyDate).substring(0,3)
					def parsedDay = sdf2.format(keyDate)
					if(presInfo[y].longPrescriptionInfo.code != "periodFinished"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.code= "+ presInfo[y].longPrescriptionInfo.code+", а должен быть periodFinished"
					errorsList << errorText
					errors=errors+1				
					}
					if(presInfo[y].longPrescriptionInfo.title != "Получите c"+" "+parsedDay+" "+parsedMonth){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.title = "+ presInfo[y].longPrescriptionInfo.title+", а должен быть Получите c"+" "+parsedDay+" "+parsedMonth - "."
					errorsList << errorText
					errors=errors+1				
					}
				}
				if(presLLo[i].state.toString() == "active" && presLLo[i].periodical.keyDate == ""){
					if(presInfo[y].longPrescriptionInfo.code != "prohibited"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.code= "+ presInfo[y].longPrescriptionInfo.code+", а должен быть prohibited"
					errorsList << errorText
					errors=errors+1				
					}
					if(presInfo[y].longPrescriptionInfo.title != "Обслуживание невозможно"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра longPrescriptionInfo.title = "+ presInfo[y].longPrescriptionInfo.title+", а должен быть Обслуживание невозможно"
					errorsList << errorText
					errors=errors+1				
					}
				}
			}
			if(presLLo[i].bookingAvailable.toString()  !=  ""){
				if( presInfo[y].bookingAvailable  != presLLo[i].bookingAvailable.toBoolean()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра bookingAvailable= "+ presInfo[y].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].bookingAvailable != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра bookingAvailable= "+ presInfo[y].bookingAvailable+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].bookingAvailable.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].bookingAvailable.toString()  !=  ""){
				if(presLLo[i].bookingAvailable.toBoolean() == false){
					if(presLLo[i].periodical.periodsQty != ""){
						if (presLLo[i].periodical.periodsQty.toInteger() > 1){
							if(presInfo[y].reasonUnavailabilityBooking != "Препарат, отпускаемый по графику обслуживания, недоступен для бронирования"){
								errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Препарат, отпускаемый по графику обслуживания, недоступен для бронирования"
								errorsList << errorText
								errors=errors+1
							}
						}
					}
					else{
						if(presLLo[i].controlType.toString() == "narcotic"){
							if(presInfo[y].reasonUnavailabilityBooking != "Наркотический лекарственный препарат, недоступен для бронирования"){
									errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Наркотический лекарственный препарат, недоступен для бронирования"
									errorsList << errorText
									errors=errors+1					
							}
						}
						if(presLLo[i].controlType.toString() == "drastic"){
							if(presInfo[y].reasonUnavailabilityBooking != "Сильнодействующий лекарственный препарат, недоступен для бронирования"){
									errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Сильнодействующий лекарственный препарат, недоступен для бронирования"
									errorsList << errorText
									errors=errors+1					
							}
						}
						if(presLLo[i].controlType.toString() == "devices"){
							if(presInfo[y].reasonUnavailabilityBooking != "Изделие медицинского назначения, недоступно для бронирования"){
									errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра reasonUnavailabilityBooking= "+ presInfo[y].reasonUnavailabilityBooking+", а должно быть - Изделие медицинского назначения, недоступно для бронирования"
									errorsList << errorText
									errors=errors+1				
							}
						}
					}
				}
				else{
					if(presInfo[y].reasonUnavailabilityBooking != null){
						errorText="В ответе GET prescriptions не должно быть параметра reasonUnavailabilityBooking со значением"+ presInfo[y].reasonUnavailabilityBooking
						errorsList << errorText
						errors=errors+1
					}
				}
			}
			if(presInfo[y].drugAvailabilityCheck != null){
				if(presLLo[i].state.toString() == "active" && presLLo[i].type.toString() == "benefit" && currentTime <= presLLo[i].expirationDate.toString()){
					if(presInfo[y].drugAvailabilityCheck != true){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра drugAvailabilityCheck= "+ presInfo[y].drugAvailabilityCheck+", а должно быть true"
					errorsList << errorText
					errors=errors+1
					}
				}
				else {
					if(presInfo[y].drugAvailabilityCheck != false){
						errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра drugAvailabilityCheck= "+ presInfo[y].drugAvailabilityCheck+", а должно быть false"
						errorsList << errorText
						errors=errors+1
					}
				}
			}
			else{
				errorText="В ответе GET prescriptions  отсутствует обязательный параметр drugAvailabilityCheck"
				errorsList << errorText
				errors=errors+1
			}
			if(presLLo[i].controlType.toString()  !=  ""){
				code=presInfo[y].controlType.code
				title=presInfo[y].controlType.title
				if( code  !=  presLLo[i].controlType.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а в методе PIList  значение параметра controlType= "+ presLLo[i].controlType.toString()
					errorsList << errorText
					errors=errors+1
				}
				if (code == "narcotic" && title  !=  "Наркотический лекарственный препарат, недоступен для бронирования"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Наркотический лекарственный препарат, недоступен для бронирования\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "drastic" && title  !=  "Сильнодействующий лекарственный препарат, недоступен для бронирования"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Сильнодействующий лекарственный препарат, недоступен для бронирования\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "devices" && title  !=  "Изделие медицинского назначения, недоступно для бронирования"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не \"Изделие медицинского назначения, недоступно для бронирования\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "normal" && title  !=  null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType.code= "+ code+", а controlType.title не null, а "+ title
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].controlType != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра controlType= "+ presInfo[y].controlType+", а в методе PIList  значение параметра bookingAvailable= "+ presLLo[i].controlType.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
		}
	}
}


//проверка сортировки рецептов по возрастанию

DateArray_presInfo=[]
DateArray_presLLo=[]
	

for(int i=0; i<lloSize; i++){
	expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
	DateArray_presLLo<<expirationDateLlo
}

for (int y=0; y<infoSize; y++){
	expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[y].expirationDate)
	DateArray_presInfo<<expirationDateInfo
}

DateArray_presLLo.sort()

assert DateArray_presLLo.sort() == DateArray_presInfo


//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Маппинг не активных рецептов" id="186ba97c-0ca5-46b9-b622-bc50e6899351"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${PIList#Response}')
prescriptionsXml = new XmlSlurper().parseText(ResponseXml)

presInfo = prescriptionsJson.payload.archivePrescription
infoSize=presInfo.size()
presLLoList=prescriptionsXml.Body.piListResponse.prescriptionList
presLLo = []


for(object in presLLoList){
	if(object.state.equals("completed") || 
		object.state.equals("expired"))
	presLLo << object
}
lloSize=presLLo.size()
//создать переменную с количеством ошибок и массивом ошибок
errors=0
errorsList=[]

//сравнить количество элеметнов в двух ответах
if( lloSize != infoSize){
	errorText="В методе GET prescriptions возвращено "+infoSize+" элементов, а в методе PIList - "+lloSize+" элементов"
	errorsList << errorText
	log.info errorText
	errors=errors+1
}
else {
	log.info "Количество элементов одинаковое"
}

//сравнить параметры элеметнов в двух ответах
//для обязательных параметров просто сравниваются значения соответствующих параметров из ответа ЛЛО
//для необязательных параметров: если параметр есть в ответе ЛЛО, то сравнивается соответствующее значение параметра, если нет, проверяется отсутствие элемента в ответе инфо
for(int i=0; i<lloSize; i++){
	for (int y=0; y<infoSize; y++){
		if (presInfo[y].number == presLLo[i].number.toString()){
			if( presInfo[y].number != presLLo[i].number.toString()){
				errorText="В ответе GET prescriptions  у элемента "+i+" значение параметра shortName= "+ presInfo[y].number+", а в методе PIList  значение параметра shortName= "+ presLLo[i].number.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].rp != presLLo[i].rp.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра rp= "+ presInfo[y].rp+", а в методе PIList  значение параметра rp= "+ presLLo[i].rp.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].type != presLLo[i].type.toString()){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра type= "+ presInfo[y].type+", а в методе PIList  значение параметра type= "+ presLLo[i].type.toString()
				errorsList << errorText
				errors=errors+1
			}
			expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[y].expirationDate )
			expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
			if( expirationDateInfo != expirationDateLlo){
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра expirationDate= "+ presInfo[y].expirationDate+", а в методе PIList  значение параметра expirationDate= "+ presLLo[i].expirationDate.toString()
				errorsList << errorText
				errors=errors+1
			}
			if( presInfo[y].state.code  != presLLo[i].state.toString()){
				code=presInfo[y].state.code
				title=presInfo[y].state.title
				errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ presInfo[y].state.code+", а в методе PIList  значение параметра state= "+ presLLo[i].state.toString()
				errorsList << errorText
				errors=errors+1
				if (code == "completed" && title  !=  "Обслужен"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Обслужен\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
				if (code == "expired" && title !=  "Просрочен"){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра state.code= "+ code+", а state.title не \"Просрочен\", а "+ title
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].form.toString()  !=  ""){
				if( presInfo[y].form != presLLo[i].form.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра form= "+ presInfo[y].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].form != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра form= "+ presInfo[y].form+", а в методе PIList  значение параметра form= "+ presLLo[i].form.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].medicineRus.toString()  !=  ""){
				if( presInfo[y].medicineRus != presLLo[i].medicineRus.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра medicineRus= "+ presInfo[y].medicineRus+", а в методе PIList  значение параметра form= "+ presLLo[i].medicineRus.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].medicineRus != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра medicineRus= "+ presInfo[y].medicineRus+", а в методе PIList  значение параметра medicineRus= "+ presLLo[i].medicineRus.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			if(presLLo[i].saleDate.toString()  !=  ""){
				if( presInfo[y].saleDate.toString() != presLLo[i].saleDate.toString()){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра saleDate= "+ presInfo[y].saleDate+", а в методе PIList  значение параметра saleDate= "+ presLLo[i].saleDate.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
			else{
				if(presInfo[y].saleDate != null){
					errorText="В ответе GET prescriptions  у элемента  c номером "+presInfo[y].number+" значение параметра saleDate= "+ presInfo[y].saleDate+", а в методе PIList  значение параметра saleDate= "+ presLLo[i].saleDate.toString()
					errorsList << errorText
					errors=errors+1
				}
			}
		}
	}
}


//проверка сортировки рецептов по убыванию

DateArray_presInfo=[]
DateArray_presLLo=[]
	

for(int i=0; i<lloSize; i++){
	expirationDateLlo = Date.parse('yyyy-MM-dd', presLLo[i].expirationDate.toString())
	DateArray_presLLo<<expirationDateLlo
}

for (int y=0; y<infoSize; y++){
	expirationDateInfo = Date.parse('yyyy-MM-dd', presInfo[y].expirationDate)
	DateArray_presInfo<<expirationDateInfo
}


assert DateArray_presLLo.sort().reverse() == DateArray_presInfo


//если были ошибки, уранить тест и вывести все ошибки
if(errors>0){
	testRunner.fail("Количетсво ошибок при сравнении ответов = " +errors)
	errorsList.each{it ->
		log.info it
	}
}
else {
	log.info "При сравнении ответов различий не обнаружено"
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>false</con:value></con:property><con:property><con:name>oms</con:name><con:value>7792189787001617</con:value></con:property></con:properties></con:testCase><con:testCase id="2c68128b-d59e-4bdd-bd01-abe9cdc92123" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка drugAvailabilityСheck (type = benefit, state = active, expirationDate =  текущая дата и время)_301153" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Изменить дату в моке" id="3ef804c4-a7f0-4e6d-9d5d-92e9b09f841d"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat

// Записать в переменную дату в формате yyyy-MM-dd
def DateForMock = new Date()
Calendar c = Calendar.getInstance(); 
c.setTime(DateForMock); 
c.add(Calendar.HOUR_OF_DAY, 1);
DateForMock = c.getTime();
sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS")
def DateForMock_format = sdf.format(DateForMock)

//получить из свойств кейса данные мока
path = testRunner.testCase.getPropertyValue("path")

//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

// Сформировать тело ответа от getPlanExtension, заменив даты
response="""<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <piListResponse xmlns="http://emias2.gov.ru/business/llo/v4/types">
         <prescriptionList>
            <bookingAvailable>false</bookingAvailable>
            <controlType>normal</controlType>
            <ctime>2023-11-23T18:30:00+03:00</ctime>
            <expirationDate>""" + DateForMock_format +  """</expirationDate>
            <form>electronic</form>
            <medicineRus>Аминофенилмасляная кислота</medicineRus>
            <number>00Э4500183728</number>
            <rp>Aminophenylbutyrici acidi tabl. 250mg</rp>
            <state>active</state>
            <term>90 дней</term>
            <type>benefit</type>
         </prescriptionList>
         <result>
            <resultCode>0</resultCode>
            <resultDescription>Запрос выполнен</resultDescription>
            <resultDetails>1709100115293,4872:d2cd91109e1c,llo-85c9cfbdf9-5md9g,3313</resultDetails>
         </result>
      </piListResponse>
   </soap:Body>
</soap:Envelope>"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
log.info query
sql.execute(query)

]]></script></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="5bf2fa4c-6d8e-4d73-ba65-ba88afefff65"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="76b4848d-8982-46cc-887a-d60ed0dde948" name="drugAvailabilityCheck = true"><con:configuration><path>$.payload.activePrescription[0].drugAvailabilityCheck</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>true</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/301153</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/301153/PIList</con:value></con:property></con:properties></con:testCase><con:testCase id="7da1a32c-7f37-4389-b7e3-7877db8c4d14" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка drugAvailabilityСheck (type = benefit, state = inprogress, expirationDate =  текущая дата и время)_301162" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Изменить дату в моке" id="d14b5d2a-d105-4c85-adfc-ca2a2280bce4"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat

// Записать в переменную дату в формате yyyy-MM-dd
def DateForMock = new Date()
Calendar c = Calendar.getInstance(); 
c.setTime(DateForMock); 
c.add(Calendar.HOUR_OF_DAY, 1);
DateForMock = c.getTime();
sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS")
def DateForMock_format = sdf.format(DateForMock)

//получить из свойств кейса данные мока
path = testRunner.testCase.getPropertyValue("path")

//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

// Сформировать тело ответа от getPlanExtension, заменив даты
response="""<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <piListResponse xmlns="http://emias2.gov.ru/business/llo/v4/types">
         <prescriptionList>
            <bookingAvailable>false</bookingAvailable>
            <controlType>normal</controlType>
            <ctime>2023-11-23T18:30:00+03:00</ctime>
            <expirationDate>""" + DateForMock_format +  """</expirationDate>
            <form>electronic</form>
            <medicineRus>Аминофенилмасляная кислота</medicineRus>
            <number>00Э4500183728</number>
            <rp>Aminophenylbutyrici acidi tabl. 250mg</rp>
            <state>inprogress</state>
            <term>90 дней</term>
            <type>benefit</type>
         </prescriptionList>
         <result>
            <resultCode>0</resultCode>
            <resultDescription>Запрос выполнен</resultDescription>
            <resultDetails>1709100115293,4872:d2cd91109e1c,llo-85c9cfbdf9-5md9g,3313</resultDetails>
         </result>
      </piListResponse>
   </soap:Body>
</soap:Envelope>"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
log.info query
sql.execute(query)

]]></script></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="4f8e949d-34e8-466b-9056-8054516ca1e3"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="909bf3bb-965a-4257-95cd-d674e1b5a846" name="drugAvailabilityCheck = false"><con:configuration><path>$.payload.activePrescription[0].drugAvailabilityCheck</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>true</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/301162</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/301162/PIList</con:value></con:property></con:properties></con:testCase><con:testCase id="33532bb5-3d37-4cfc-a06d-778f1764e778" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка drugAvailabilityСheck (type = benefit, state = expired, expirationDate =  текущая дата и время)_301166" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Изменить дату в моке" id="09b009e1-b19a-4e57-8444-ff2559cae574"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat

// Записать в переменную дату в формате yyyy-MM-dd
def DateForMock = new Date()
Calendar c = Calendar.getInstance(); 
c.setTime(DateForMock); 
c.add(Calendar.HOUR_OF_DAY, 1);
DateForMock = c.getTime();
sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS")
def DateForMock_format = sdf.format(DateForMock)

//получить из свойств кейса данные мока
path = testRunner.testCase.getPropertyValue("path")

//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

// Сформировать тело ответа от getPlanExtension, заменив даты
response="""<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <piListResponse xmlns="http://emias2.gov.ru/business/llo/v4/types">
         <prescriptionList>
            <bookingAvailable>false</bookingAvailable>
            <controlType>normal</controlType>
            <ctime>2023-11-23T18:30:00+03:00</ctime>
            <expirationDate>""" + DateForMock_format +  """</expirationDate>
            <form>electronic</form>
            <medicineRus>Аминофенилмасляная кислота</medicineRus>
            <number>00Э4500183728</number>
            <rp>Aminophenylbutyrici acidi tabl. 250mg</rp>
            <state>delivered</state>
            <term>90 дней</term>
            <type>benefit</type>
         </prescriptionList>
         <result>
            <resultCode>0</resultCode>
            <resultDescription>Запрос выполнен</resultDescription>
            <resultDetails>1709100115293,4872:d2cd91109e1c,llo-85c9cfbdf9-5md9g,3313</resultDetails>
         </result>
      </piListResponse>
   </soap:Body>
</soap:Envelope>"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
log.info query
sql.execute(query)

]]></script></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="3f1ace9e-6e40-4312-a952-c75c1fd67754"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="909bf3bb-965a-4257-95cd-d674e1b5a846" name="drugAvailabilityCheck = false"><con:configuration><path>$.payload.activePrescription[0].drugAvailabilityCheck</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>true</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/301166</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/301166/PIList</con:value></con:property></con:properties></con:testCase><con:testCase id="dc7c1602-0506-4bf6-b87d-f51a789236b9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка drugAvailabilityСheck (type = benefit, state = active, expirationDate =  текущая дата и время - 1 минута)_301170" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Изменить дату в моке" id="dd68333a-a4c8-47f7-b964-d8093f54f83c"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat

// Записать в переменную дату в формате yyyy-MM-dd
def DateForMock = new Date()
Calendar c = Calendar.getInstance(); 
c.setTime(DateForMock); 
c.roll(Calendar.MINUTE, -1);
DateForMock = c.getTime();
sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS")
def DateForMock_format = sdf.format(DateForMock)

//получить из свойств кейса данные мока
path = testRunner.testCase.getPropertyValue("path")

//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

// Сформировать тело ответа от getPlanExtension, заменив даты
response="""<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <piListResponse xmlns="http://emias2.gov.ru/business/llo/v4/types">
         <prescriptionList>
            <bookingAvailable>false</bookingAvailable>
            <controlType>normal</controlType>
            <ctime>2023-11-23T18:30:00+03:00</ctime>
            <expirationDate>""" + DateForMock_format +  """</expirationDate>
            <form>electronic</form>
            <medicineRus>Аминофенилмасляная кислота</medicineRus>
            <number>00Э4500183728</number>
            <rp>Aminophenylbutyrici acidi tabl. 250mg</rp>
            <state>active</state>
            <term>90 дней</term>
            <type>benefit</type>
         </prescriptionList>
         <result>
            <resultCode>0</resultCode>
            <resultDescription>Запрос выполнен</resultDescription>
            <resultDetails>1709100115293,4872:d2cd91109e1c,llo-85c9cfbdf9-5md9g,3313</resultDetails>
         </result>
      </piListResponse>
   </soap:Body>
</soap:Envelope>"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
log.info query
sql.execute(query)

]]></script></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="2ae85253-1847-46d7-9a6e-79c52c31e271"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="909bf3bb-965a-4257-95cd-d674e1b5a846" name="drugAvailabilityCheck = false"><con:configuration><path>$.payload.activePrescription[0].drugAvailabilityCheck</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>true</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/301170</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/301170/PIList</con:value></con:property></con:properties></con:testCase><con:testCase id="e37c75c5-4386-427c-a64d-fc6c88614891" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка drugAvailabilityСheck (type = commercial, state = active, expirationDate =  текущая дата и время)_301164" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Изменить дату в моке" id="50d48dd3-2461-41c7-83db-265bc1261ac3"><con:settings/><con:config><script><![CDATA[import groovy.sql.Sql
import java.text.SimpleDateFormat

// Записать в переменную дату в формате yyyy-MM-dd
def DateForMock = new Date()
Calendar c = Calendar.getInstance(); 
c.setTime(DateForMock); 
c.add(Calendar.HOUR_OF_DAY, 1);
DateForMock = c.getTime();
sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS")
def DateForMock_format = sdf.format(DateForMock)

//получить из свойств кейса данные мока
path = testRunner.testCase.getPropertyValue("path")

//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

// Сформировать тело ответа от getPlanExtension, заменив даты
response="""<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <piListResponse xmlns="http://emias2.gov.ru/business/llo/v4/types">
         <prescriptionList>
            <bookingAvailable>false</bookingAvailable>
            <controlType>normal</controlType>
            <ctime>2023-11-23T18:30:00+03:00</ctime>
            <expirationDate>""" + DateForMock_format +  """</expirationDate>
            <form>electronic</form>
            <medicineRus>Аминофенилмасляная кислота</medicineRus>
            <number>00Э4500183728</number>
            <rp>Aminophenylbutyrici acidi tabl. 250mg</rp>
            <state>active</state>
            <term>90 дней</term>
            <type>commercial</type>
         </prescriptionList>
         <result>
            <resultCode>0</resultCode>
            <resultDescription>Запрос выполнен</resultDescription>
            <resultDetails>1709100115293,4872:d2cd91109e1c,llo-85c9cfbdf9-5md9g,3313</resultDetails>
         </result>
      </piListResponse>
   </soap:Body>
</soap:Envelope>"""

//изменить запись
query="update template_response set response=' "+response+"' where \"path\"= '"+path+"'"
log.info query
sql.execute(query)

]]></script></con:config></con:testStep><con:testStep type="restrequest" name="prescriptions" id="386d0941-a3fd-409e-87a2-1979b6b9b755"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="909bf3bb-965a-4257-95cd-d674e1b5a846" name="drugAvailabilityCheck = false"><con:configuration><path>$.payload.activePrescription[0].drugAvailabilityCheck</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>true</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/301164</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/301164/PIList</con:value></con:property></con:properties></con:testCase><con:testCase id="dff96e6e-ab87-406d-b741-69af9a0fe2b2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг state.title_205501" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="cd54e33e-4e52-41d5-a6c9-aec5553a5438"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="909bf3bb-965a-4257-95cd-d674e1b5a846" name="drugAvailabilityCheck = false"><con:configuration><path>$.payload.activePrescription[0].drugAvailabilityCheck</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка параметра state.title для всех статусов" id="6602ae65-0aa7-47a0-a034-d32c3c0ccfeb"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()


//маппинг state.title в активных рецептах
for (int y=0; y&lt;infoSize; y++){
	if (presInfo[y].state.code == "active"){
		log.info(y)
		assert presInfo[y].state.title	== "Действующий"
	}else if (presInfo[y].state.code == "inprogress"){
		assert presInfo[y].state.title	== "Ожидается поступление в аптеку"
	}else if (presInfo[y].state.code == "delivered"){
		assert presInfo[y].state.title	== "Препарат поступил в аптеку"
	}else{
			assert 1 == 0	
	}
}

presInfo = prescriptionsJson.payload.archivePrescription
infoSize=presInfo.size()


//маппинг state.title в архивных рецептах
for (int y=0; y&lt;infoSize; y++){
	if (presInfo[y].state.code == "completed"){
		assert presInfo[y].state.title	== "Обслужен"
	}else if (presInfo[y].state.code == "expired"){
		assert presInfo[y].state.title	== "Просрочен"
	}else{
			assert 1 == 0	
	}
}



</script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>false</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/205501</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/205501/PIList</con:value></con:property></con:properties></con:testCase><con:testCase id="f01b3bf3-39c5-47ca-880b-8e67281ff1e3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг controlType.title_205462" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="cea7c264-a132-40a4-9777-cf7d73dfa915"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="909bf3bb-965a-4257-95cd-d674e1b5a846" name="drugAvailabilityCheck = false"><con:configuration><path>$.payload.activePrescription[0].drugAvailabilityCheck</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка параметра controlType.title для всех статусов" id="1bbda8fa-3536-4995-b7e0-b5de61dc11d5"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()


//маппинг state.title в активных рецептах
for (int y=0; y&lt;infoSize; y++){
	if (presInfo[y].controlType.code == "narcotic"){
		assert presInfo[y].controlType.title	== "Наркотический лекарственный препарат, недоступен для бронирования"
	}else if (presInfo[y].controlType.code == "drastic"){
		assert presInfo[y].controlType.title	== "Сильнодействующий лекарственный препарат, недоступен для бронирования"
	}else if (presInfo[y].controlType.code == "devices"){
		assert presInfo[y].controlType.title	== "Изделие медицинского назначения, недоступно для бронирования"
	}else if (presInfo[y].controlType.code == "normal"){
		assert presInfo[y].controlType.title == null
	}else{
			assert 1 == 0	
	}
}


</script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>false</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/205462</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/205462/PIList</con:value></con:property></con:properties></con:testCase><con:testCase id="4679b5fc-94bd-4a2b-b3f4-cc0d665d26f3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг longPrescriptionInfo.code и title (longPrescriptionInfo.code = periodUnFinished)_237893" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="9b446914-a7d2-4e65-85d6-4739b887dced"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка параметра longPrescriptionInfo" id="f7d5ea24-e5f2-4675-a7d4-fe73ca9733a9"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
import java.text.SimpleDateFormat

def currentDate = new Date() // получаем текущую дату
def sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSS+03:00")
def sdf1 = new SimpleDateFormat("MMM")
def sdf2 = new SimpleDateFormat("d")
def currentTime = sdf.format(currentDate)

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

prescriptionsXml = new XmlSlurper().parseText(response)


ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()
presLLo = prescriptionsXml.Body.piListResponse.prescriptionList


keyDate = Date.parse('yyyy-MM-dd', presLLo[0].periodical.keyDate.toString())
def parsedMonth = sdf1.format(keyDate).substring(0,3)
def parsedDay = sdf2.format(keyDate)

assert presLLo[0].state.toString() == "active" &amp;&amp; presLLo[0].periodical.periodNumber.toString() != "" &amp;&amp; presLLo[0].periodical.keyDate.toString() != ""
assert presInfo[0].longPrescriptionInfo.code == "periodUnFinished"
assert presInfo[0].longPrescriptionInfo.title ==  "Получите до"+" "+parsedDay+" "+parsedMonth
</script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>false</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/237893</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/237893/PIList</con:value></con:property></con:properties></con:testCase><con:testCase id="40990acf-da0a-4f57-ade9-3ecbd13ddaa9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг longPrescriptionInfo.code и title (longPrescriptionInfo.code = periodFinished)_237894" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="1262b730-5cc9-4c92-b390-28bcb24bcb82"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка параметра longPrescriptionInfo" id="ceadf21b-8f6a-41a7-b9e6-0f567efd642c"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
import java.text.SimpleDateFormat

def currentDate = new Date() // получаем текущую дату
def sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSS+03:00")
def sdf1 = new SimpleDateFormat("MMM")
def sdf2 = new SimpleDateFormat("d")
def currentTime = sdf.format(currentDate)

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

prescriptionsXml = new XmlSlurper().parseText(response)


ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()
presLLo = prescriptionsXml.Body.piListResponse.prescriptionList


keyDate = Date.parse('yyyy-MM-dd', presLLo[0].periodical.keyDate.toString())
def parsedMonth = sdf1.format(keyDate).substring(0,3)
def parsedDay = sdf2.format(keyDate)

assert presLLo[0].state.toString() == "active" &amp;&amp; presLLo[0].periodical.periodNumber.toString() == "" &amp;&amp; presLLo[0].periodical.keyDate.toString() != ""
assert presInfo[0].longPrescriptionInfo.code == "periodFinished"
assert presInfo[0].longPrescriptionInfo.title ==  "Получите с 16 мар"
</script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>false</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/237894</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/237894/PIList</con:value></con:property></con:properties></con:testCase><con:testCase id="337cefac-4884-48b0-a047-6ce93e78f1d6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг longPrescriptionInfo.code и title (longPrescriptionInfo.code = prohibited)_237895" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="982a7902-8e0c-4e52-bf6a-d5dc662cc80a"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка параметра longPrescriptionInfo" id="221d22c2-f7fe-469c-9be1-28e7b9ca3f54"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql
import java.text.SimpleDateFormat

def currentDate = new Date() // получаем текущую дату
def sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSS+03:00")
def sdf1 = new SimpleDateFormat("MMM")
def sdf2 = new SimpleDateFormat("d")
def currentTime = sdf.format(currentDate)

path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

prescriptionsXml = new XmlSlurper().parseText(response)


ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()
presLLo = prescriptionsXml.Body.piListResponse.prescriptionList


assert presLLo[0].state.toString() == "active" &amp;&amp; presLLo[0].periodical.periodNumber.toString() == "" &amp;&amp; presLLo[0].periodical.keyDate.toString() == ""
assert presInfo[0].longPrescriptionInfo.code == "prohibited"
assert presInfo[0].longPrescriptionInfo.title == "Обслуживание невозможно"
</script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>false</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/237895</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/237895/PIList</con:value></con:property></con:properties></con:testCase><con:testCase id="cf62eebc-4e9b-4611-8698-1bda435021f8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг reasonUnavailabilityBooking_310568" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="34648e10-02f2-4ccc-806c-279622f8871f"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b699616-3633-44d5-b6ba-095c69369347" name="код ответа = 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="49b16cfc-ffbf-4256-8e7d-bf2d6aa6c793" name="Содержится activePrescription"><con:configuration><token>activePrescription</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="909bf3bb-965a-4257-95cd-d674e1b5a846" name="drugAvailabilityCheck = false"><con:configuration><path>$.payload.activePrescription[0].drugAvailabilityCheck</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="onlyActive" value="${#TestCase#onlyActive}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка параметра reasonUnavailabilityBooking для всех типов" id="645e7d3d-af8b-439d-9e34-ab5e76e5578e"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import groovy.sql.Sql


path = testRunner.testCase.getPropertyValue("path")
//подключиться к бд 
connection =testRunner.testCase.testSuite.project.getPropertyValue("mockDbFullConnection")
sql = Sql.newInstance(connection)

query="select response from template_response where \"path\"= '"+path+"'"
def response = sql.firstRow(query).response

prescriptionsXml = new XmlSlurper().parseText(response)

ResponseJson = context.expand('${prescriptions#Response}')
prescriptionsJson = new JsonSlurper().parseText(ResponseJson)

presInfo = prescriptionsJson.payload.activePrescription
infoSize=presInfo.size()
presLLo = prescriptionsXml.Body.piListResponse.prescriptionList
LLoSize=presLLo.size()


for (int y=0; y&lt;infoSize; y++){
	for (int i=0; i&lt;LLoSize; i++){
		if (presInfo[y].number == presLLo[i].number.toString()){
			if (presInfo[y].controlType.code == "narcotic"){
				assert presInfo[y].reasonUnavailabilityBooking == "Наркотический лекарственный препарат, недоступен для бронирования"
			}else if (presInfo[y].controlType.code == "drastic"){
				assert presInfo[y].reasonUnavailabilityBooking	== "Сильнодействующий лекарственный препарат, недоступен для бронирования"
			}else if (presInfo[y].controlType.code == "devices"){
				assert presInfo[y].reasonUnavailabilityBooking == "Изделие медицинского назначения, недоступно для бронирования"
			}
		
			if (presLLo[i].periodical.periodsQty.toInteger() > 1){
				log.info(y)
				assert presInfo[y].reasonUnavailabilityBooking == "Препарат, отпускаемый по графику обслуживания, недоступен для бронирования"
			}
		}
	}
}



</script></con:config></con:testStep><con:properties><con:property><con:name>onlyActive</con:name><con:value>false</con:value></con:property><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/310568</con:value></con:property><con:property><con:name>path</con:name><con:value>/mock/310568/PIList</con:value></con:property></con:properties></con:testCase><con:testCase id="1d738648-df70-4289-960c-9a3aab555125" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1. Ошибка от ЛЛО LLO_BAD_REQUEST (ошибка ЛЛО 2001)_396886" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="365dda74-c4b1-40e2-8da1-0b14e356aa1d"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ac484e61-3f8d-4810-b1f0-d06e2683bf1e" name="Код ответа = 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="code = LLO_BAD_REQUEST"><con:configuration><path>$.error.code</path><content>LLO_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="description = Указаны неверные форматы входных параметров или переданы не все обязательные поля"><con:configuration><path>$.error.description</path><content>Указаны неверные форматы входных параметров или переданы не все обязательные поля</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/396886</con:value></con:property></con:properties></con:testCase><con:testCase id="291018f9-0c63-4d1f-9a2e-bf9c094d9910" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1. Ошибка от ЛЛО LLO_BAD_REQUEST (ошибка ЛЛО 2002)_396887" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="7f2b7361-a6a8-4e41-b29a-4376322ce735"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ac484e61-3f8d-4810-b1f0-d06e2683bf1e" name="Код ответа = 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="code = LLO_BAD_REQUEST"><con:configuration><path>$.error.code</path><content>LLO_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="description = Указаны неверные форматы входных параметров или переданы не все обязательные поля"><con:configuration><path>$.error.description</path><content>Указаны неверные форматы входных параметров или переданы не все обязательные поля</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/396887</con:value></con:property></con:properties></con:testCase><con:testCase id="7392544f-bcd1-46a7-a410-d6a85e82093c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1. Ошибка от ЛЛО LLO_BAD_REQUEST (ошибка ЛЛО 2003)_396888" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="dcfbc80f-e0d0-4ee9-80b1-7c5d64558799"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ac484e61-3f8d-4810-b1f0-d06e2683bf1e" name="Код ответа = 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="code = LLO_BAD_REQUEST"><con:configuration><path>$.error.code</path><content>LLO_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="description = Указаны неверные форматы входных параметров или переданы не все обязательные поля"><con:configuration><path>$.error.description</path><content>Указаны неверные форматы входных параметров или переданы не все обязательные поля</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/396888</con:value></con:property></con:properties></con:testCase><con:testCase id="6b1751b3-38fd-43e9-8c01-20bc5911fd8c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС2. Ситсема ЕРП не отвечает LLO_ERP_NOT_FOUND (ошибка ЛЛО 2081)_396885" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="c734ce4e-576b-47e0-9a5b-eeeeb384534d"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ac484e61-3f8d-4810-b1f0-d06e2683bf1e" name="Код ответа = 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="code = LLO_ERP_NOT_FOUND"><con:configuration><path>$.error.code</path><content>LLO_ERP_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="description = Система ЕРП не отвечает на запрос"><con:configuration><path>$.error.description</path><content>Система ЕРП не отвечает на запрос</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/396885</con:value></con:property></con:properties></con:testCase><con:testCase id="419269da-a071-4e64-a886-aed394e75536" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС3. Пациент не найден LLO_PATIENT_NOT_FOUND (ошибка ЛЛО 2046)_396889" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="b74ea836-5864-45ea-b85c-877d49739484"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ac484e61-3f8d-4810-b1f0-d06e2683bf1e" name="Код ответа = 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="code = LLO_PATIENT_NOT_FOUND"><con:configuration><path>$.error.code</path><content>LLO_PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="description = Пациент не найден"><con:configuration><path>$.error.description</path><content>Пациент не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9c5957-16ab-41ac-ad84-e80ccff58f5b" name="type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/396889</con:value></con:property></con:properties></con:testCase><con:testCase id="42c1b420-61c8-427e-bf84-47608f9ebd5a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС4. Получение пустого списка рецептов (ошибка 2045)_344956" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="97125a44-8b4c-491a-ae6e-771f055adfa4"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ac484e61-3f8d-4810-b1f0-d06e2683bf1e" name="Код ответа = 204"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700007178231039</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/344956</con:value></con:property></con:properties></con:testCase><con:testCase id="3cc23826-c27e-4be1-9170-00558782ed14" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС5. Ошибка от ЛК (ACCESS_DENIED)_275224" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="c6132179-1831-4a1a-8278-fe323cb1322d"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ac484e61-3f8d-4810-b1f0-d06e2683bf1e" name="Код ответа = 403"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c46d3ba7-5cc3-4f4e-85f8-4301d3baa899" name="code = ACCESS_DENIED"><con:configuration><path>$.error.code</path><content>ACCESS_DENIED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c46d3ba7-5cc3-4f4e-85f8-4301d3baa899" name="description = Доступ к запрошенной медкарте отсутствует"><con:configuration><path>$.error.description</path><content>Доступ к запрошенной медкарте отсутствует</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c46d3ba7-5cc3-4f4e-85f8-4301d3baa899" name="type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value="${#Project#EI-token}"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700007178231030</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/344956</con:value></con:property></con:properties></con:testCase><con:testCase id="bb232087-6534-4a09-8ba8-485d76f738f3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС5. Ошибка от ЛК (SUDIR_TOKEN_EXPIRED)_344953" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="prescriptions" id="348e37c4-2c69-45a6-9e04-7cc44bf589e8"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/prescription/prescriptions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="prescriptions" id="32e2349a-4ff5-4fbc-8a2c-54f82beb6a3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/prescription/prescriptions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ac484e61-3f8d-4810-b1f0-d06e2683bf1e" name="Код ответа = 401"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c46d3ba7-5cc3-4f4e-85f8-4301d3baa899" name="code = SUDIR_TOKEN_EXPIRED"><con:configuration><path>$.error.code</path><content>SUDIR_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c46d3ba7-5cc3-4f4e-85f8-4301d3baa899" name="description = Время действия токена в СУДИР истекло"><con:configuration><path>$.error.description</path><content>Время действия токена в СУДИР истекло</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c46d3ba7-5cc3-4f4e-85f8-4301d3baa899" name="type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oms" value="${#TestCase#oms}"/>
  <con:entry key="EI-token" value="LWvPO4B8LQ9rTBGPijj5lSdY4ht7n6QvBnrWNdEzNoRjN2RiYzU3NC1lY2RjLTQ0Y2ItYTBlNS0zM2YxN2FlYzNiZmQ"/>
  <con:entry key="Mock-llo" value="${#TestCase#Mock-llo}"/>
</con:parameters><con:parameterOrder><con:entry>oms</con:entry><con:entry>onlyActive</con:entry><con:entry>EI-token</con:entry><con:entry>Mock-llo</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700007178231030</con:value></con:property><con:property><con:name>Mock-llo</con:name><con:value>${#Project#Mock-url}/344956</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="52e4f464-00b9-4c66-9613-3acab17d0dd2" name="Получение токена СУДИР и токена ЛК" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b02e6062-d2f3-47a3-b12f-cd8efcaf7ddc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение токена СУДИР и токена ЛК" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Получение client_Id client_secret (шаг 1)" id="7f453cc0-b10a-4f3a-96b9-499c9174752e"><con:settings/><con:config service="https://login-tech.mos.ru" resourcePath="/sps/oauth/register" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение client_Id client_secret (шаг 1)" id="1acba04c-b558-4b14-94b3-193346516e38" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer jIeAUJjALkvjRcU_wAcASnNNc9ovLxhApSnJfqt2JLcRw_jCyugGxXfMdPVBayeiPj0pmufDqQxmE9ofd8Rnww" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request>{
"software_id": "CSI",
 "device_type": "android_phone",
 "software_statement": "eyJ0eXAiOiJKV1QiLCJibGl0ejpraW5kIjoiU09GVF9TVE0iLCJhbGciOiJSUzI1NiJ9.eyJncmFudF90eXBlcyI6WyJhdXRob3JpemF0aW9uX2NvZGUiLCJjbGllbnRfY3JlZGVudGlhbHMiLCJyZWZyZXNoX3Rva2VuIl0sInNjb3BlIjoib3BlbmlkIGNvbnRhY3RzIHByb2ZpbGUiLCJqdGkiOiJmYjg2NDcwMS1mZGNkLTRjZjctODg1Mi01ZTVmNDY3N2ZjZTYiLCJzb2Z0d2FyZV9pZCI6ImVtaWFzLmluZm8iLCJzb2Z0d2FyZV92ZXJzaW9uIjoiMSIsInJlc3BvbnNlX3R5cGVzIjpbImNvZGUiXSwiaWF0IjoxNjM1MTczODIyLCJpc3MiOiJodHRwczovL2xvZ2luLXRlY2gubW9zLnJ1IiwicmVkaXJlY3RfdXJpcyI6WyJodHRwczovL2VtaWFzLmluZm8vc3VkaXItbW9iaWxlIl0sImF1ZCI6WyJlbWlhcy5pbmZvIl19.glfjJb7PXa7l3O3CMIOrbw_N0Cd5y-kyn5lklyVGLXDAFv8MqC85MfgqEE86buaTAsOwEAqqoTwLpOXodN9ds_q7zcDyLQoDcILHhgg9G3-DoLu9XxpPbaRNFBjzpgZrjKZCGJCSqdjnQJzNv2-oySD_xTKHfXFjy62SITRnUjJCyxhmbrtckjJX6RckCqv3Y3WFgr8nmMcjh-OFgquklokVlo3cfRl4R1JwEe5kiya7ZfqsNhwhx_iaG4SHYICtzYboToAfiLYbJsJ-H89I7FspusOhidkrt23BteNUnjzT3Jx3_OuWauK4aLkaBXQzFVksaoDiuRHmHn6uOzFihQ"
}</con:request><con:originalUri>https://login-tech.mos.ru/sps/oauth/register</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c2013d0e-b347-454d-bc12-f33e5b820ccc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись client_id client_secret" id="4b813f41-3f0f-4383-8353-bf1ae98e0848"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>client_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение client_Id client_secret (шаг 1)</con:sourceStep><con:sourcePath>$.client_id</con:sourcePath><con:targetType>client_id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>client_secret</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение client_Id client_secret (шаг 1)</con:sourceStep><con:sourcePath>$.client_secret</con:sourcePath><con:targetType>client_secret</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Кодирование в base64 + составление запроса" id="4b400a95-910e-4423-926e-72d1ed23c24f"><con:settings/><con:config><script>import java.util.Base64

def Encoder = Base64.getEncoder()

client_id = testRunner.testCase.getPropertyValue("client_id")
client_secret = testRunner.testCase.getPropertyValue("client_secret")

auth = Encoder.encodeToString((client_id + ":" + client_secret).getBytes())
testRunner.testCase.testSuite.setPropertyValue("base64",auth)

////////////Составление запроса. Ссылка для авторизации///////////

link = "https://login-tech.mos.ru/sps/oauth/ae?client_id=$client_id&amp;response_type=code&amp;redirect_uri=https://emias.info/sudir-mobile&amp;access_type=offline&amp;scope=openid+profile"
testRunner.testCase.setPropertyValue("link",link)
</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Действия со ссылкой" id="599ddc16-4dce-4b60-b603-6f8dace1711a"><con:description>1. Скопировать ссылку из проперти кейса (link)
2. Открыть консоль разработчика в браузере (F12)
3. Вставить скопированную ссылку
4. Ввести логин/пароль и капчу (логин: yar.promo.zapov.a@gmail.com пароль:Hibmavy3Pitnico9 )
5. Нажать войти
</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="delay" name="Delay" id="b69c4536-864d-4fa4-a788-7dcacd56bdf7" disabled="true"><con:settings/><con:config><delay>50000</delay></con:config></con:testStep><con:testStep type="manualTestStep" name="Подтверждение и копирование кода" id="4d422011-8330-43a8-9d98-a91dc224f290" disabled="true"><con:description>1. Нажать кнопку "Подтвердить"
После получения данного кода есть минута, чтобы отправить следующий запрос
2.Скопировать код из консоли разработчика
3. Вставить код в проперти кейса (code)</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="restrequest" name="Получение токена СУДИР" id="e93fd32b-de81-4892-b306-310a4cfd890c"><con:settings/><con:config service="https://login-tech.mos.ru" resourcePath="/sps/oauth/te" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение токена СУДИР" id="26f90063-1811-4565-b889-d93e4d165864" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic ${#TestSuite#base64}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request/><con:originalUri>https://login-tech.mos.ru/sps/oauth/te</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fd19a4af-366b-4fed-8e55-939a693dbce6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="code" value="${#TestCase#code}"/>
  <con:entry key="grant_type" value="authorization_code"/>
  <con:entry key="redirect_uri" value="https://emias.info/sudir-mobile"/>
</con:parameters><con:parameterOrder><con:entry>grant_type</con:entry><con:entry>code</con:entry><con:entry>redirect_uri</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись токена СУДИР и refresh" id="4c320b89-e4c5-458f-b457-552a606fd08c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>access_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение токена СУДИР</con:sourceStep><con:sourcePath>$.access_token</con:sourcePath><con:targetType>sudirToken</con:targetType><con:targetStep>#Project#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>refresh_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение токена СУДИР</con:sourceStep><con:sourcePath>$.refresh_token</con:sourcePath><con:targetType>refreshToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Получение данных о пользователе" id="963085ac-a866-4863-86ae-fa22b856e81c"><con:settings/><con:config service="https://login-tech.mos.ru" resourcePath="/sps/oauth/me" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получение данных о пользователе" id="e34c85f0-463c-454a-bb0f-a0f8070e9b0a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#Project#sudirToken}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request/><con:originalUri>https://login-tech.mos.ru/sps/oauth/me</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a895841-cf20-40c7-a34a-86a7e5719b50" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Cache-control</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись guid" id="a255a60c-af12-4215-aeaf-0622035439f3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>guid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Получение данных о пользователе</con:sourceStep><con:sourcePath>$.guid</con:sourcePath><con:targetType>guid</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Зарегистрировать инстант" id="7b10856e-99e2-4aa9-9165-aa6c6daf6ec7"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/2/mobile/auth/instance" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Зарегистрировать инстант" id="60261039-b4ea-4d59-9649-f46e0fc1f793" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "instanceToken": "${#TestCase#client_id}",
  "sudirToken": "${#Project#sudirToken}"
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/2/mobile/auth/instance</con:originalUri><con:assertion type="Simple Contains" id="ca95a9e3-62a6-424f-a200-baaf7d074f58" name="Contains"><con:configuration><token>attemptToken</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Users с доступом к ЭМК2" id="729ec4c1-6dac-42d8-98ea-9c0310a2214f" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/2/profile" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Users с доступом к ЭМК2" id="7afb73ec-356a-499b-a3dd-566e7c239c30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru./api/internal/3/emc-permissions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ef35c434-94e6-4c3e-b7f2-acf1722fa3ad" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ssoId" value="${#TestCase#guid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ssoId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение attemp-access" id="ac5b5238-d49f-4ff2-be53-8484c477f8f3"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def httpResponseHeaders = context.testCase.testSteps["Зарегистрировать инстант"].testRequest.response.responseHeaders
testRunner.testCase.setPropertyValue("x-otp", httpResponseHeaders.'x-otp'[0])

ResponseJson = context.expand('${Зарегистрировать инстант#Response}')
attempt_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("attempt_token", attempt_token.attemptToken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Аутентификация в ЛК" id="340eb456-2151-4ee0-9436-1abeac214604" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/2/mobile/auth/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Аутентификация в ЛК" id="3435ccf5-b61f-4975-8dea-11db3165cc3d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "instanceToken": "{#TestCase#client_id}",
  "refreshTokenTTLSeconds": 0,
  "sudirToken": "{#Project#sudirToken}",
  "accessTokenTTLSeconds": 0
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/2/mobile/auth/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Подтвердить токен" id="f307b4e5-949d-4c8e-8153-9af18578436c"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/2/mobile/auth/confirm-instance" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Подтвердить токен" id="33cd7c74-7696-4e79-b652-2c604d7a36bb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
    "otpCode": "${#TestCase#x-otp}",
    "attemptToken": "${#TestCase#attempt_token}"
 }</con:request><con:originalUri>https://lkservice.test.emias.mos.ru./api/2/mobile/auth/confirm-instance</con:originalUri><con:assertion type="Simple Contains" id="3d630dca-8dc0-493c-ba56-a3d039abaa84" name="Contains"><con:configuration><token>accessToken</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение X-Access-JWT" id="2f73c5a8-4217-4b58-b846-8a90f69c4c9a"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${Подтвердить токен#Response}')
access_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.testSuite.setPropertyValue("X-Acces-JWT", access_token.accessToken)

testRunner.testCase.testSuite.project.setPropertyValue("X-Acces-JWT", access_token.accessToken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Users с доступом к ЭМК" id="84c6831b-a819-47b2-a9d9-4cb630c943e6"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/2/profile" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Users с доступом к ЭМК" id="7afb73ec-356a-499b-a3dd-566e7c239c30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#Project#X-Acces-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru./api/internal/3/emc-permissions</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ef35c434-94e6-4c3e-b7f2-acf1722fa3ad" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ssoId" value="${#TestCase#guid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ssoId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Посмотреть привязанных пользователей" id="40742ae5-b62c-4a83-86e5-e51196a94ca6"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/internal/3/emc-permissions" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Посмотреть привязанных пользователей" id="41600ef4-dbb4-46ce-81f3-fbc8d75231db" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/internal/3/emc-permissions</con:originalUri><con:assertion type="Simple Contains" id="5636a380-bc1a-4484-8e5c-63221a606362" name="Contains"><con:configuration><token>policyNum</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ssoId" value="${#TestCase#guid}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>client_id</con:name><con:value>dyn~emias.info~eb453e7d-f261-400a-acc8-b6059f149e06</con:value></con:property><con:property><con:name>client_secret</con:name><con:value>8g4QD045NW4gLj8</con:value></con:property><con:property><con:name>link</con:name><con:value>https://login-tech.mos.ru/sps/oauth/ae?client_id=dyn~emias.info~eb453e7d-f261-400a-acc8-b6059f149e06&amp;response_type=code&amp;redirect_uri=https://emias.info/sudir-mobile&amp;access_type=offline&amp;scope=openid+profile</con:value></con:property><con:property><con:name>code</con:name><con:value>zUnQ_retPU1J57_7amXS4X0Fnrt22AX2zVOScBQyizTMCfgJVkjUtdxejYMgyetjIhtrrXoLcE4SuB2QVV-EcM4MHnNFJtagGwL4HkBv5iY</con:value></con:property><con:property><con:name>access_token</con:name><con:value>Q-F5iygkgbwX82WAwlrw9VZtIRJo23IeTI8M_38uh19jZWJhYThlZC0yNThhLTQ2ZWYtYTZiZC1lZjEzZDdiZWM1MjI</con:value></con:property><con:property><con:name>guid</con:name><con:value>af3e4ac5-96dd-4167-afb3-244eb7187aba</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>98630</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiI4MjcxZjg0Zi02OWY3LTRkNmItOGJhOC1hMjJiYzJhOTVhMDciLCJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2ODI1MTg4OTgsInN1YiI6ImMzN2VhZTlkLWE5MmEtNGY5My04OWFjLTkyMjg2NTcyMzZhYSIsImhjbiI6NDE4OCwiYXVkIjoiUEFUSUVOVCIsInNzb19pZCI6ImFmM2U0YWM1LTk2ZGQtNDE2Ny1hZmIzLTI0NGViNzE4N2FiYSIsInBheWxvYWQiOnsiaW5zdGFuY2VfdG9rZW4iOiJkeW5-ZW1pYXMuaW5mb35lYjQ1M2U3ZC1mMjYxLTQwMGEtYWNjOC1iNjA1OWYxNDllMDYifX0.g3aLivfIj-aijMuwILus9iK6w2r2rb8MWdUjFPsBOd3qDt_tRCTGNF9poOdPj8jyIswQRn0NAp_4JW98Mgd0xK9M_jNmOX7qWIrlML5cMcJjDEa8A5OzeJmtyO7-aDSOG8hldQMSqTAuQLG1x4dYb4fb584PDwfNB_5R1lVYhvA25EtcAaB3d81DGOn5MMqDs2hgJKKM8ZFB-tYEGFFXDyIPR44UuKNSv4sZ8OQ7bumQUHt7Pn1p7OJkYGKVrAXR_Hl_8oJUIGrpQWXOaDZNFNNFbCr_Aplu9r3PVmoWXacVz_EorZNeneZy0fjDnfaSg63kZA2wQEWQcDLWEPKxw4rq9NMX_EjFmxM9MvvJT2jpseJk-ZbTrzrccdDFLbQLEcPoDHpfEumm4V6MV9JHSwFkBssy95hdHwV97RWRfwUSUfabeIFJ6tUVzkoaXT9cALvsvvmKQhmbfZiTZFfYdUq4k87_Zhz2j-quEX9toho69IIFqC26u4qAjJPHkKTiJ7ejf0RashApR2grJ4Ne0XywOTyEWExTE8FCXbhBDOqwW7ftXgpI_0KYS8n-e2kzSL9h__Us_ZnAialv4RgBqMWY4l84ihLOG6ahk8NvI080PSxN5HbVmBJ4mwRJ3fm7sJNt9t4ud0Avhm7jgZQjhBuOLBoYQXW4ObpRHwJMMeM</con:value></con:property></con:properties></con:testCase><con:testCase id="9ab07867-972d-407c-be6e-48e4ef92bd7f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Найти пациента и добавить в медкарту" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Найти пациента в базе СУПП по омс" id="23974fc3-2386-4163-ae3c-20a8cba9a344"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT  OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, PATIENT_ID,
LAST_NAME, FIRST_NAME, SECOND_NAME, 
to_char(BIRTH_DATE, 'YYYY-MM-DD') as birth_date  FROM PATIENT  
WHERE (OMS_ASSURANCE_SERIES=${#TestCase#series} 
and OMS_ASSURANCE_NUMBER=${#TestCase#omsNumber})
or OMS_NEW_ASSURANCE_NUMBER=${#TestCase#oms}</con:query><con:assertion type="Simple Contains" id="02691c48-cd7a-430a-8519-337b2ccbcbe5" name="Contains"><con:configuration><token>row</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать в свойства" id="f042d369-2f2b-45c5-9181-658cd6351bb2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>birthDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/BIRTH_DATE</con:sourcePath><con:targetType>birthDay</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/PATIENT_ID</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>lastNAme</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/LAST_NAME</con:sourcePath><con:targetType>lastName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>firstName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/FIRST_NAME</con:sourcePath><con:targetType>name</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>middleName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/SECOND_NAME</con:sourcePath><con:targetType>middleName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="Записать в свойства второго пациента" id="32a831ba-8f9a-4ed6-a5f7-b368051e51a7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>birthDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[2]/BIRTH_DATE</con:sourcePath><con:targetType>birthDay</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[2]/PATIENT_ID</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>lastNAme</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[2]/LAST_NAME</con:sourcePath><con:targetType>lastName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>firstName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[2]/FIRST_NAME</con:sourcePath><con:targetType>name</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>middleName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[2]/SECOND_NAME</con:sourcePath><con:targetType>middleName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Найти пациента в базе СУПП по patient_id" id="b7ba9461-4b6f-47d2-9ece-6f204cf92a43"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT  OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, 
LAST_NAME, FIRST_NAME, SECOND_NAME, 
to_char(BIRTH_DATE, 'YYYY-MM-DD') as birth_date  FROM PATIENT  
WHERE PATIENT_ID=${#TestCase#patientId} </con:query><con:assertion type="Simple Contains" id="02691c48-cd7a-430a-8519-337b2ccbcbe5" name="Contains"><con:configuration><token>row</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="Найти рандомного пациента в СУПП" id="5d32edad-227b-45df-a1af-fe542421e34c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT  OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER,OMS_NEW_ASSURANCE_NUMBER, PATIENT_ID,
LAST_NAME, FIRST_NAME, SECOND_NAME, 
to_char(BIRTH_DATE, 'YYYY-MM-DD') as birth_date  FROM PATIENT  
WHERE ((OMS_ASSURANCE_SERIES is not null and OMS_ASSURANCE_NUMBER is not null) or OMS_NEW_ASSURANCE_NUMBER is not null )
AND ROWNUM&lt;50
ORDER BY DBMS_RANDOM.VALUE</con:query><con:assertion type="Simple Contains" id="02691c48-cd7a-430a-8519-337b2ccbcbe5" name="Contains"><con:configuration><token>row</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Добавить пациента в медкарту" id="d3d75e9a-a697-4a79-98b4-4a9ccd5b83ec"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/internal/1/user/grant-permission" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Добавить пациента в медкарту" id="a5f68023-dec0-442a-9721-e4a177894c76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "documentId": "string",
 "id": "string",
 "permissionType": "CHILD",
 "userInfo": {
  "userName": "Яна Михайловна В.",
  "phoneNum": "79265209207",
  "ssoId": "af3e4ac5-96dd-4167-afb3-244eb7187aba"
  },
  "createDate": "2023-04-18",
  "patientInfo": {
    "patientName": "${#TestCase#name} ${#TestCase#middleName} ${#TestCase#lastName}",
    "birthday": "${#TestCase#birthDay}",
    "emiasId": ${#TestCase#patientId},
    "policyNum": "${#TestCase#series} ${#TestCase#omsNumber}"
  }
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/internal/1/user/grant-permission</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f30d0dd7-89eb-41cc-b7ae-8e3a80e283a0" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Получить токен" id="7ba1f108-f379-42e8-820b-cba65adafb3c" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получить токен" id="3b40c73f-e9cf-4762-8875-d5f43b1bb979" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "med_test_2022@bk.ru"
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/login</con:originalUri><con:assertion type="Simple NotContains" id="2b30274b-96a2-4696-981c-a6342eba3ef7" name="Not Contains error"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="5812c462-9482-4e8d-b95f-4ad1d19e6230" name="Valid HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получить attemp-access" id="d4ca5124-cbd1-48ad-bfed-c863c78cb509" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def httpResponseHeaders = context.testCase.testSteps["Получить токен"].testRequest.response.responseHeaders
testRunner.testCase.setPropertyValue("x-otp", httpResponseHeaders.'x-otp'[0])

ResponseJson = context.expand('${Получить токен#Response}')
attempt_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("attempt_token", attempt_token.attempt_token)</script></con:config></con:testStep><con:testStep type="restrequest" name="Подтвердить токен" id="95b68f0f-cc8d-49b4-a344-b49c59841cdc" disabled="true"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Подтвердить токен" id="3827440b-59d7-4e3f-82f2-7e31523ea53c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "otp_code": "${#TestCase#x-otp}",
  "refresh_token_ttl_seconds": 0,
  "access_token_ttl_seconds": 0,
  "attempt_token": "${#TestCase#attempt_token}"
}</con:request><con:originalUri>https://lkservice.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:assertion type="Simple Contains" id="aef0c267-6bdb-4264-9f13-e58bac6df0a6" name="Contains"><con:configuration><token>access_token</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Записать токен в свойства" id="e84d9944-add1-4020-b6ba-c52931fbe46c" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Подтвердить токен</con:sourceStep><con:sourcePath>$.access_token</con:sourcePath><con:targetType>token</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Получить список прикрепленных" id="9cb2ff1c-be3f-4ae1-a81d-3110b0d5286c"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/2/profile" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получить список прикрепленных" id="31babd50-0726-4247-bc7a-7409f01fa367" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/2/profile</con:originalUri><con:assertion type="Simple Contains" id="ab8aa89d-e818-47d9-b829-7850fe93c133" name="Contains"><con:configuration><token>relatives</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#Project#X-Acces-JWT}"/>
  <con:entry key="ehrId" value="8d075820-b3cb-4fbe-9666-3106776652d2"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получить ehrId пациента" id="1c24c8f6-5bdd-4f09-9dbc-059edb4c4952"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${Получить список прикрепленных#Response}')
d = new JsonSlurper().parseText(ResponseJson)
birthDay = testRunner.testCase.getPropertyValue("birthDay")
oms = testRunner.testCase.getPropertyValue("oms")
lastName = testRunner.testCase.getPropertyValue("lastName")
name = testRunner.testCase.getPropertyValue("name")
middleName = testRunner.testCase.getPropertyValue("middleName")

fullName=name+" "+middleName+" "+lastName[0]+"."

for(def elem : d.relatives){
	if(elem.birthDate ==birthDay &amp;&amp; oms==elem.policyNum &amp;&amp; elem.firstName==fullName){
		log.info elem.profileId
		testRunner.testCase.setPropertyValue("ehrId", elem.profileId)
		break
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7066630284</con:value></con:property><con:property><con:name>series</con:name><con:value>770000</con:value></con:property><con:property><con:name>patientId</con:name><con:value>31110819</con:value></con:property><con:property><con:name>oms</con:name><con:value>7791889720000557</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Сафрошкин</con:value></con:property><con:property><con:name>name</con:name><con:value>Олег</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Юрьевич</con:value></con:property><con:property><con:name>birthDay</con:name><con:value>1984-02-13</con:value></con:property><con:property><con:name>token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2Nzk0OTk1NjgsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMjBlMWJmNC0yZWNjLTRlYTMtOTRjZi1iMTliMzc3ZDYyY2QiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoidzlzMGZSVEFXVE9VRWQ5VisremF0c3NsdFVXZnI5UFBIUEhoR1hzYzU3U05QL0ZwcGlOZWo2RzlhaVdXRmdielhHdVcyai9mdk5CalY3WkhlTDRjbGVPVTVEODRjT0RjSk5FNjhKSzBFNnJyT3o0bG8rZnM4cVZIc09rM3hyS1FaZmJUM3NweGgvUUdaaUMvU2JhMjQ3T1MvdVN1VnVYTVVySjUyM1RwSlJNd3RLRnliNXljQXU4b3h5dlYwTXVDVHhZSElOKy9OTU9ubnhvckRFMnIycW05YmwvTjV1QWE4c1B3Lyt6TXJYT1FXdm1PVXZWaUVvbHJXeXkwaS95Z215bjk3TWNtQVRnQ1JLQlE1MmJpTG5PbE41VVRiRi9lc1JCY3Mzb1FVVjc5YTlXTkMxTC9RakxtajdoVUJaY0tkbXJLL2JKaXhMQmp0bW0vL2ZFV1hBPT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIyIn0.U56ljjFNsiTlPAubVFSPnALoKcdCCkugqFUNKowxR1CAPe32wlLylF-iTmNF1NqjUm2iVwdV1gIOAZQPl5wKGKYNlAESK59wVfgNDlvuNaHhSLvkZbUtVXHDoSN_HROBiNcGpgrTYvK3X4yXJpXjnif_mehsnuQpn9PLR5hcCg-SXiZ4pbH_ovdhd1YI-d5lNM-IBG6WURBwCU7St7SjjxojxcR8Dtq6HmvsfGtgYBkwu13keryRjRUuWkuWizK5aNHmyxlhsN77IXTVLF-TbfbOZ-BeYFNZXqoMVeImGWVoMUsK3sKc0QpYy1ma81lZvjYBLBYMiCOK8NoY84ZOFd0-xRQ7XdXauDy0-HsQfPxab6pxigvKkx8mgbRkucLhWS_xM0dEVmY5CG7rSB0kNVgmyA4HZufTHHysr1En_a7HE_flx4odcnyQyO1nMKm_dYqzAOFFyYuYHhOJjE_x-FBsfybDSLxKeBiGXbRUTnhGPlmUus_Gs0dVYL0ZyD9aBl8Yh0uiWBMe_yz2KEdTZ__h6bX-RbgAi0lWs3OTQF19XXa5PRZ2w2ftvoJD5JhVvYl-Uf6Lagzox9i8_loWD4GxczbPCU8-dktpmWe-N_fb5O41G6zWcnOvIdOQB8k2u4K89dLr8hNHzcxYlmNNqMm9Em1mYQbzqDHXOxhFFSE</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>19674</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6IjdlMjVhYjIzLWUwYTMtNGUxOC05MDNlLWI3MmMwNjYzNjQyNCIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY3OTQxNjQ1Miwic3ViIjoiYmI1ZWI4NTgtZWY3Ni00Mjk1LTk4NTktYzlkNmEyNTFiMzUwIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiQ3Bwb3hwbE56b3M0L2h6RmEycm91S0lORXRQWnpiYkpTNmxlYmRJTDBTbHNNdDgyOEJDYXNMbGRWZHJ1TmZ2S0t2T0J4Ujd1V09RNjdCenpWSkM5aXpNaFd1akVTWnlrczhyb2FqL2VxNEZESnhTakR5aHdNYlo5UFNVam1xdCtyRUJjUHBGV3RRYVdWQk1UQlN1VldoN01xSzc4MHBlL283MGpIZUcxYUpveWlIZU5XaCtsUUhoUy94RHUzUXFKbEFhMEU5S3A3TTk3KzdLR1FoWFVEWVJ5eE1GMm5nZC91MXdCbXdhWkZjeXZkY003TWFRNTBRdUhmeUVORnQwZjRpS0lWL1pIQ0F0QS9qRTdwODRkMFFobXJudmc1TzgrZHZSS1hRb3htdzFWS3RkUVBPckJDMVltd2xtNTNWUU1ac0tRbFZJY2FCSkJEcTFpK2RycnlnPT0ifQ.hZxYie4xivThXf9tN1KLaYunCHqYJIq5XtQ6w24ku2JlVIV75hK54L0ZTtOsMyfOZe-epPyWsOQJBoDM7Z1-l55-Il-AEzjDtM-GBa_uiTiGkB3uvLhHoevWfFil5rwl7-ZEAxldIh5KkL8DzoXQ5K5XLACGgLQpEWPIdGiaWtlD_J3ZX9mfnFKgtPrDbKA-RGIWR9gsk9Kyxm8M_r5zeD-WCAVUNp-veEsGfOrzk2s6u-wOy72nzS97utiaulPEDNvsU7E-zsrBqn3YdRSXgnd4fR3NpwiXTTcSQ8K-D9e1JfNUVbNXpTf6OqiR24sFVH4gaJgsdmfuGT-4byfiygv9RZVhPbint3llTk2Rn15wNoAZJqe3hWgO--gJ7GPKfb_RFhUjquZliI3SI42jcySQRbSVXioJfObmo4LVrJwioyV8IBgsrJKDJ66RFeHPCABek_ktAh_GwAB17FlnXU3dDJ3WSv_jUq3R0-eyx5nAVhlxFqWqdTN5ladfGbOrMebF5IiIGFtxzUNxe1rQGe_1_2f8jumEDDsgkBlaIHQa8O52M1KwVMDDeW-OaL4jnG9OYDcX-1R1iG9jvXpiJh9fsx9Ng5eiYP8OYJsNojczD9vzizyjSxBh6qwze03fXDy5G9rqytp0CpwpcxvNYpi6msgjbF7JoDLuM6SBUuU</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>95706443-b316-4442-894c-748da1962c80</con:value></con:property><con:property><con:name>sixMonthsAgo</con:name><con:value>2022-09-24</con:value></con:property><con:property><con:name>lastNameFirstLetter</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="7e460c50-7ea8-43e7-a2d7-6382ddcb173f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Найти пациента по омс" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Найти пациента в базе СУПП по омс" id="47f6df3f-b676-4b56-b256-707b0bf0c634"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT  OMS_ASSURANCE_SERIES, OMS_ASSURANCE_NUMBER, PATIENT_ID,
LAST_NAME, FIRST_NAME, SECOND_NAME, 
to_char(BIRTH_DATE, 'YYYY-MM-DD') as birth_date  FROM PATIENT  
WHERE (OMS_ASSURANCE_SERIES=${#TestCase#series} 
and OMS_ASSURANCE_NUMBER=${#TestCase#omsNumber})
or OMS_NEW_ASSURANCE_NUMBER=${#TestCase#oms}</con:query><con:assertion type="Simple Contains" id="02691c48-cd7a-430a-8519-337b2ccbcbe5" name="Contains"><con:configuration><token>row</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать в свойства" id="5e63e10c-8418-4726-abe8-cd34933623eb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>birthDate</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/BIRTH_DATE</con:sourcePath><con:targetType>birthDate</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/PATIENT_ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>lastNAme</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/LAST_NAME</con:sourcePath><con:targetType>lastName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>firstName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/FIRST_NAME</con:sourcePath><con:targetType>name</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>middleName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти пациента в базе СУПП по омс</con:sourceStep><con:sourcePath>//Row[1]/SECOND_NAME</con:sourcePath><con:targetType>middleName</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>710271440</con:value></con:property><con:property><con:name>series</con:name><con:value>770000</con:value></con:property><con:property><con:name>id</con:name><con:value/></con:property><con:property><con:name>oms</con:name><con:value>770000710271440</con:value></con:property><con:property><con:name>lastName</con:name><con:value/></con:property><con:property><con:name>name</con:name><con:value/></con:property><con:property><con:name>middleName</con:name><con:value/></con:property><con:property><con:name>birthDate</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="b70a8f14-3a50-4543-899c-b3223de1b284" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Обновить токен СУДИР" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Обновить токен СУДИР" id="309ab3e6-3e1f-4ed7-a9a0-cecf8fc3e222"><con:settings/><con:config service="https://login-tech.mos.ru" methodName="Обновить токен" resourcePath="/sps/oauth/te" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Обновить токен СУДИР" id="793942aa-3f63-4200-ad97-16a44c94594a" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic ${#TestSuite#base64}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#loginEndpoint}</con:endpoint><con:request/><con:originalUri>https://login-tech.mos.ru/sps/oauth/te</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="refresh_token" value="${#TestSuite#refreshToken}"/>
  <con:entry key="grant_type" value="refresh_token"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись токена СУДИР и refresh" id="f9654796-093d-4ac3-a2ea-cad98fe2855f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>access_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Обновить токен СУДИР</con:sourceStep><con:sourcePath>$.access_token</con:sourcePath><con:targetType>sudirToken</con:targetType><con:targetStep>#Project#</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>refresh_token</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Обновить токен СУДИР</con:sourceStep><con:sourcePath>$.refresh_token</con:sourcePath><con:targetType>refreshToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>X-Acces-JWT</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2ODI1MTg5MTEsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJjMzdlYWU5ZC1hOTJhLTRmOTMtODlhYy05MjI4NjU3MjM2YWEiLCJzaWQiOiI1Yjg0OTA5OC1mNmE4LTQ4ZjEtODNhMS0yZWQ3MDkzY2FjMDQiLCJwaG9uZSI6Ijc5MjY1MjA5MjA3Iiwic3NvX2lkIjoidHZCN2ZyN2YrelJ4Q1pXYk5BSDE2RXVqT3VJTEtyaXZsd1ZoR2JsS0lvWWY4dWxNNTk2M281NTI0NVQyYU1wOFczOTdiR0lBaHQwRUhibFUwUzlwZTRERHdlRzliM0V3RUxYeEkyZ0ZZbXN6RFpWZnhWV1JGWGVEb2VCU0FCUmJ2QlNvbHl2V20zVEZ0Um1Rc1JFOEJxV0hhUVpXanUrdXdFcC9MeE9vN3JFWkthMC8vQUlQSVl1ZTEvMHl6Qjc5clNIYjRPQXNjaXdCQVhEQ0E0azMra2pnb3d2elZLcmJjTVpNdEJvcHA5ODJtUFpkR1B4d0dnSEFwdzF3dDJkdnNuZ0twSnFhWHhFZDJQU3pVc093UXM3N0kyeVIzaWl3bUpoZGRnU29LM05ZS3ZDd2ZieC9QaEFJaXFmQ2w3ZXlzQ0F6TTRSZHQwcHh6NGY4T09zSWx3PT0iLCJlbWFpbCI6IiIsImZpcnN0X25hbWUiOiJcdTA0MmZcdTA0M2RcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzOFx1MDQ0NVx1MDQzMFx1MDQzOVx1MDQzYlx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIxOTgyLTA0LTA5In0.U0F34EeoPvi2iUyg3mqLrw-kEURRSnyL4cNEQA-N1AOCm3lYUAvNDG_n14tp-x514YANNo-zRaNy-5xKiiyQzALE5vPw1DOS7DTuCBlGEVyEfw3eNbYHA0_ydUsng-5dyX5dQR__zhdH2-IXoHtm4_vPS8XTjINtRmG8Vp224fLcXgLaHsgkE5SX2N4dPJGjEJC-Dn2MTGDu9feX57SOiEFf8tRFBnmAYdZJwAlJ9P-5WgLDUzBH3dVSTfewb6HwfA7BXjZIRA9X7pu6jYEAxXsmxXyBchvVbMwDyhJB9AMxuKeRSMATopaIPHjdjHNbknuM6y5IQqHt5Iz8QC9Znvgk7fXXPkizlvnvDsjx95EWIZGXv1CAWl5607yOdMJk0HxMVSXSBeMYl0uWe6QwKcFcpbvmI0pAWCig6VgPo2OVHtzBAd43k892Y1s-UrqXJR35a4DYutgdFwbvMrcd_bw0lHoEpU-szXeukhjPheG410R3TB_Y0AwncfXUgcSZnC1DLBBWbZTt1XQ3m3neYhvPUHxLtlSPQ0uHVNAegLvvjljwK8NgEUa-w0zy6NiZx3IhyI4RlZ1iDGtbeNyiiZIUI2ksSbwUjN0_eJaQHfHtaB5as2UkXKBou_nc-6WAEGN6hKloL8CRYQ0gkIDkbPopa-8OyKlyzzXKaQPYFD8</con:value></con:property><con:property><con:name>base64</con:name><con:value>ZHlufmVtaWFzLmluZm9+ZWI0NTNlN2QtZjI2MS00MDBhLWFjYzgtYjYwNTlmMTQ5ZTA2OjhnNFFEMDQ1Tlc0Z0xqOA==</con:value></con:property><con:property><con:name>refreshToken</con:name><con:value>EGax3TL8dOg4_ZlGCdwTOKkcBYlol7W91EW4TMBWN1EGoAjKkYEjsuPKZKByXK_3xjpeur-2T5nNp5ghzEeTtw</con:value></con:property><con:property><con:name>lkEndpoint</con:name><con:value>https://lkservice.test.emias.mos.ru</con:value></con:property></con:properties></con:testSuite><con:testSuite id="6a9cfb8a-d515-4915-8b22-db99ab800c76" name="Сохранить токены из глобалных свойств в свойства проекта"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="78d5a0c7-696a-496e-b6a7-c3d3a05e819a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Сохранить" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Сохранить" id="d297399a-1052-46f2-849f-0ec8d724a8a9"><con:settings/><con:config><script>def sudirToken =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "sudirToken" )
def accessToken =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "X-Access-JWT" )
def guid =com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "guid" )
log.info sudirToken
log.info accessToken
testRunner.testCase.testSuite.project.setPropertyValue("sudirToken", sudirToken)
testRunner.testCase.testSuite.project.setPropertyValue("X-Access-JWT", accessToken)
testRunner.testCase.testSuite.project.setPropertyValue("guid", guid)</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>emiasInfoDbConnection</con:name><con:value>172.17.5.11:29102/emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoDBDriver</con:name><con:value>org.postgresql.Driver</con:value></con:property><con:property><con:name>emiasInfoDbLogin</con:name><con:value>emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoDbPassword</con:name><con:value>emiasinfoapp</con:value></con:property><con:property><con:name>emiasInfoEndpoint</con:name><con:value>http://application-emiasinfo1.emias.solit-clouds.ru/</con:value></con:property><con:property><con:name>emiasInfoFullDbConnection</con:name><con:value>jdbc:postgresql://172.17.5.11:29102/emiasinfoapp?user=emiasinfoapp&amp;password=emiasinfoapp</con:value></con:property><con:property><con:name>guid</con:name><con:value>10d59080-73a2-4587-9931-c18fb90831b2</con:value></con:property><con:property><con:name>lkDbConnection</con:name><con:value/></con:property><con:property><con:name>lkDBDriver</con:name><con:value/></con:property><con:property><con:name>lkDbLogin</con:name><con:value/></con:property><con:property><con:name>lkDbPassword</con:name><con:value/></con:property><con:property><con:name>lkEndpoint</con:name><con:value>https://lkservice.test.emias.mos.ru</con:value></con:property><con:property><con:name>lkFullDbConnection</con:name><con:value/></con:property><con:property><con:name>lloDbConnection</con:name><con:value>@//10.2.172.241:1521/emiasdb</con:value></con:property><con:property><con:name>lloDBDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>lloDbLogin</con:name><con:value>EMIAS_LLO</con:value></con:property><con:property><con:name>lloDbPassword</con:name><con:value>EMIAS_LLO</con:value></con:property><con:property><con:name>lloEndpoint</con:name><con:value>http://esbcamelvv.test.emias.mos.ru/proxy/LLO/PrescriptionInfo/v4S/ProxyService</con:value></con:property><con:property><con:name>lloFullDbConnection</con:name><con:value> jdbc:oracle:thin:EMIAS_LLO/EMIAS_LLO@//10.2.172.241:1521/emiasdb</con:value></con:property><con:property><con:name>loginEndpoint</con:name><con:value>https://login-tech.mos.ru</con:value></con:property><con:property><con:name>sudirToken</con:name><con:value>hNFgwg0fViwWBiTUdDJ7xGiU6itLoLxuJw6iQFoi4Qs</con:value></con:property><con:property><con:name>suppDbConnection</con:name><con:value>@//10.2.172.242:1521/emiasdb</con:value></con:property><con:property><con:name>suppDBDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>suppDbLogin</con:name><con:value>EMIAS_CLUSTER</con:value></con:property><con:property><con:name>suppDbPassword</con:name><con:value>EMIAS_CLUSTER</con:value></con:property><con:property><con:name>suppFullDbConnection</con:name><con:value> jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:value></con:property><con:property><con:name>X-Access-JWT</con:name><con:value>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE3MDk2NDc3MzAsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiI3NTgzNWNiNy05ZTI3LTRhY2ItYTk1ZC1hOWRiMzRlOTY0MWUiLCJzaWQiOiJhMzA2ZTA3OC0zYjYzLTQ2MzgtYjY3ZS04ZDI0MjBiMzk5MzAiLCJwaG9uZSI6Ijc5MTUwMDQ5NzY2Iiwic3NvX2lkIjoiU0FuTVpXbjJDOVc3Y0hKeHFBY0g3Z3hSelJmQzVwcnY3OTRQQk1OZjRia21kekdJVlNlUWJZdFB6ZWNNdHRwTlppczVvRUFpZnk2VEV0REo2QXhzNXZOeGN5WjBSSVFxOWJibTRyTnFPWXZvYW82K3FEbVFCdk84cjgxdklCL2d3TjMvU0dHdStOZ3JFYmhiWnEyZlhldFk1c2FBcFBYdHZZeTh5c1JVNm5sWmdqZXkvN1l0ajdIQVpwVkx0U24zaVY3ak1VbUoyRHhnc3o2M0ZwZ1UxbW1WV09PamMrZ3dWVDN0aTBMb1FPWExWeUpsaDZsYkZobjMvWnREQlRCckJGaWZBWGtuem82aTdlWEg1emVmbW92SWVvUHVpVUlCT25zcS9tY3VvMlhXSlBqOThCeENQeUZ5QUo5YnpSVzg5NjYzZW54eFdGcExjak8rMHVxMWFnPT0iLCJlbWFpbCI6IiIsImZpcnN0X25hbWUiOiJcdTA0MjVcdTA0MzBcdTA0M2RcdTA0NDNcdTA0M2MiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMC4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxN1x1MDQzOFx1MDQ0MFx1MDQzMFx1MDQzY1x1MDQ0M1x1MDQ0Mlx1MDQzNFx1MDQzOFx1MDQzZFx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIyMDAxLTA2LTA2IiwiYW1yIjpbXX0.ARdIid1yRFUC_R16_sisbO16aDL4ADuAcLYA8NQk2o8iRmq9CzwOoGXksfn35ENuW5imu2wD7PGxL5LhHtKq-f3ooVc5vtvFAJJI6V-OHhjKD4R_3kYTtJW5dfgRPhXTLp7a7-idfD2BmH7ulgpNotBeFxYFBF5jjFryCy2l8WmbUm_aUMpUdc9W2AY6e8zWviyFvECLI7DY4s_g44FM2za7LPt5MF8XRLl6ugIOUQn1GIhIe287PuCt1JaGbYTMdEQ0IcSEXBMjg0sU_H8MCNy_mW_EQzv0kS16cBNB0-Jz8Sai9zCupKjCYZbx0JdEiaPvP06rdJwzxK_vtASlcZhk3uDgYQz92Uvy9jsn9g6GteOgYfmJpVbA68DpmsY8GMbHchmlmRoFZpAX-iLoAJ8HvJfp42NIdhP3Dj_8sVZwsSvb7oNC3RT7bHUyBfQfBX8aAIlGnIKaQyTDtYvUt0Kth8Y5X6skWnQt3IqqjGFxQEh2tmWUq81TsPhuQNHy2LEYxhLAAhIeWCmWq9A4zeyLlWdG0ocp5bF4odMAvwDQEQKA6mtXE6athmCJRS8oNkFNjsefUcZI6222l8Bifvgy7PnG5fzhTyjSeVuDRkmZC1q2sFR3Fs3G5SDh8j4ZbGWBIletT4G8jkSoAtTBNmC2nzl5fwlSm6XKOi19UGc</con:value></con:property><con:property><con:name>EI-token</con:name><con:value>8u6A3K9IzkINMWD6oHDqHIwEYy-lizZYllk3ZHMKbihmZDU0NmM2OC0wNzcyLTQ5MzUtYmM0YS0xNDE1NGQ4ODViNmE</con:value></con:property><con:property><con:name>Mock-url</con:name><con:value>http://application-mock.emias.solit-clouds.ru/mock</con:value></con:property><con:property><con:name>mockDbFullConnection</con:name><con:value>jdbc:postgresql://172.17.5.13:29107/emias_info_mock?user=emias_info&amp;password=emias_info</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>