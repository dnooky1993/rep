<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="843e4c19-7a36-4242-a58f-a4c21f9799bc" activeEnvironment="Default" name="ЕМИАС.ИНФО сервис получения справок и заключений" resourceRoot="" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="6487732b-c7de-4197-bce5-cd38a9f07e07" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://emiasinfo1.emias.solit-clouds.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint></con:endpoints><con:resource name="info" path="/api/v2/certificates/info" id="980c2992-87ac-424c-b6ac-1d1bc3a5fff4"><con:settings/><con:parameters><con:parameter><con:name>conclusionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>patientId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="8c247a96-51c8-46c1-96ba-de95acb8b338" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="370a586b-eb01-40bb-8b38-8b15cf3482d7" mediaType="application/json"><con:settings/><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>conclusionId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="list" path="/api/v2/certificates/list" id="ec17f98c-cebf-4db6-a65e-54103507f37e"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>patientId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="a5d6f782-45c5-481b-9c88-44d517ae0cc1" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="5524d721-40da-4e21-aaab-c526896df3b5" mediaType="application/json"><con:settings/><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:WsdlInterface" id="03887943-441f-4e37-9f5e-9f77e1da92fc" wsaVersion="NONE" name="pnExternalServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/pindata/pnExternal/v1/types/}pnExternalServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?wsdl"><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="pnExternalService" targetNamespace="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721MTtVEVSGz1v_uEcGjfCRR39.I1YxLVuA3W1gECaSFNnXUTVSS5Tpe.DqIfmytcz3Tij0Og--"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721MTtVEVSGz1v_uEcGjfCRR39.I1YxPkmQw1p8UCqECNgZ2_hS4.KFZv.nB2Wh9_k-"/>
      <xs:import namespace="http://emias.mos.ru/pindata/pnExternal/v1/types/" schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTFpJq_7DuM3pXGj6b1lfspQgZ2vXUDGYpJQJsdlCWy65tocl_9vvWFvjlXrTTscg-"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPatientConclusionDetailOutput">
    <wsdl:part element="tns:GetPatientConclusionDetailResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userContext">
    <wsdl:documentation>Контекст пользователя</wsdl:documentation>
    <wsdl:part element="uctx:userContext" name="userContext"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPatientConclusionsOutput">
    <wsdl:part element="tns:GetPatientConclusionsResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPatientConclusionsInput">
    <wsdl:part element="tns:GetPatientConclusionsRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPatientConclusionDetailInput">
    <wsdl:part element="tns:GetPatientConclusionDetailRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="pnExternalServicePortType">
    <wsdl:operation name="getPatientConclusions">
      <wsdl:input message="tns:getPatientConclusionsInput"></wsdl:input>
      <wsdl:output message="tns:getPatientConclusionsOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPatientConclusionDetail">
      <wsdl:input message="tns:getPatientConclusionDetailInput"></wsdl:input>
      <wsdl:output message="tns:getPatientConclusionDetailOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="pnExternalServiceBinding" type="tns:pnExternalServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getPatientConclusions">
      <soap:operation soapAction="getPatientConclusions" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPatientConclusionDetail">
      <soap:operation soapAction="getPatientConclusionDetail" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="pnExternalService">
    <wsdl:port binding="tns:pnExternalServiceBinding" name="conclusionPort">
      <soap:address location="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService"/>
    </wsdl:port>
    <wsp:PolicyReference URI="#authPolicy"/>
  </wsdl:service>
  <wsp:Policy wsu:Id="authPolicy">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721MTtVEVSGz1v_uEcGjfCRR39.I1YxLVuA3W1gECaSFNnXUTVSS5Tpe.DqIfmytcz3Tij0Og--</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" version="1.0" xmlns="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721MTtVEVSGz1v_uEcWm_GADGRhex9sPO0gffUr1uWJ9Zh1JyE_ZFw-"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Код Роли</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Код Полномочия</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="options" type="Options">
        <xs:annotation>
          <xs:documentation>Набор именованных значений</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721MTtVEVSGz1v_uEcWm_GADGRhex9sPO0gffUr1uWJ9Zh1JyE_ZFw-</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.2" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721MTtVEVSGz1v_uEcGjfCRR39.I1YxIFuBS6OKgmeRUl5A.ssQs8NYEw--"/>
  <xs:element name="mail" type="Mail">
    <xs:annotation>
      <xs:documentation>Адрес электронной почты</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="compositionId" type="GUID">
    <xs:annotation>
      <xs:documentation>Идентификатор
Композиции Think!EHR
ЕМИАС.СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="simiDocumentId" type="GUID">
    <xs:annotation>
      <xs:documentation>Идентификатор
Документа СИМИ
ЕМИАС.СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--abstract types-->
  <xs:complexType abstract="true" name="Base">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания
компонентов сущностей,
владельцеми которых является
текущий продукт ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор
сущности/записи
на уровне всего ЕМИАС</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания сущностей,
владельцем которых является
текущий продукт ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base">
        <xs:attribute name="archived" type="xs:boolean" use="required">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания
компонентов сущностей,
владельцами которых являются
другие продукты ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания сущностей,
владельцами которых являются
другие продукты ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания типов,
реализующих справочники ЕМИАС.НСИ.2</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование элемента справочника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiWithCodeBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания типов,
реализующих справочники ЕМИАС.НСИ.2, в которых имеется бизнес-код</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Бизнес-код</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="SIMIDocumentBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип,
используемый для описания cведений о документе СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="simiDocumentId"/>
      <xs:element minOccurs="0" ref="compositionId"/>
    </xs:sequence>
  </xs:complexType>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="totalItemsCount" type="xs:long" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество элементов (на всех страницах)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки
(используются в соответствии с
переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--keys-->
  <xs:complexType name="EntityId">
    <xs:annotation>
      <xs:documentation>Идентфикатор сущности,
непосредственно принадлежащей
текущему продукту ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ForeignEntityId">
    <xs:annotation>
      <xs:documentation>Идентфикатор
сущности ЕМИАС,
внешней по отношнению
к текущему продукту ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="NsiGlobalId">
    <xs:annotation>
      <xs:documentation>Глобальный идентфикатор
ЕМИАС.НСИ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase"/>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721MTtVEVSGz1v_uEcGjfCRR39.I1YxIFuBS6OKgmeRUl5A.ssQs8NYEw--</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="Mail">
    <xs:annotation>
      <xs:documentation>Адрес электронной почты</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:maxLength value="320"/>
      <xs:pattern value=".+@.+\..+"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721MTtVEVSGz1v_uEcGjfCRR39.I1YxPkmQw1p8UCqECNgZ2_hS4.KFZv.nB2Wh9_k-</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" version="1.0" xmlns="http://emias.mos.ru/system/v1/faults/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721MTtVEVSGz1v_uEcGjfCRR39.I1YxIFuBS6OKgmeRUl5A.ssQs8NYEw--"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721MTtVEVSGz1v_uEcGjfCRR39.I1YxLVuA3W1gECaSFNnXUTVSS5Tpe.DqIfmytcz3Tij0Og--"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTFpJq_7DuM3pXGj6b1lfspQgZ2vXUDGYpJQJsdlCWy65tocl_9vvWFvjlXrTTscg-</con:url><con:content>&lt;xs:schema elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:xs="http://www.w3.org/2001/XMLSchema">&#13;
  &lt;!--схема для типов всех методов, собирается включением отдельных файлов по методам-->&#13;
  &lt;xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTFpJq_7DuM3pXGj6b1lfspQgZ2vXUDHU1ITd.LEGAwVpMETyUANiKQClY.cuHvCfyAPFaEjTmTf7kUOE9X8fI"/>&#13;
  &lt;xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTFpJq_7DuM3pXGj6b1lfspQgZ2vXUDHU1ITd.LEGAwVpMETyUANiKQClYzoCLriojaGoLrHDXkK6RJbZmQTn2HHcxcMQ-"/>&#13;
&lt;/xs:schema></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTFpJq_7DuM3pXGj6b1lfspQgZ2vXUDHU1ITd.LEGAwVpMETyUANiKQClY.cuHvCfyAPFaEjTmTf7kUOE9X8fI</con:url><con:content><![CDATA[<xs:schema elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:core="http://emias.mos.ru/pindata/core/v2/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTFpJq_7DuM3pXGj6b1lfspQgZ2uCKT38_O0lpaQad3Eqx7BRCPeRSG4jfA.KMypH8"/>
  <xs:import namespace="http://emias.mos.ru/pindata/core/v2/" schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721Ij1JEBqXwxz9pBsQ2vXXDGojMdmCFDJ8UtwagvuRx7thTZM-"/>
  <xs:complexType name="ConclusionListPage">
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="conclusion" type="Conclusion">
            <xs:annotation>
              <xs:documentation>Медицинское заключение</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GetPatientConclusionsRequest">
    <xs:annotation>
      <xs:documentation>Входные данные</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="patientId" type="core:ID">
          <xs:annotation>
            <xs:documentation>Идентификатор пациента в ЕМИАС</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" name="conclusionType" type="core:ID">
          <xs:annotation>
            <xs:documentation>Вид заключения</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" name="created" type="core:DatePeriod">
          <xs:annotation>
            <xs:documentation>Вид заключения</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" name="pagingOptions" type="core:PagingOptions">
          <xs:annotation>
            <xs:documentation>Пагинация</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" name="options" type="core:Options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetPatientConclusionsResponse">
    <xs:annotation>
      <xs:documentation>Выходные данные</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="ConclusionListPage">
          <xs:annotation>
            <xs:documentation>Результат поиска</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721Ij1JEBqXwxz9pBsQ2vXXDGojMdmCFDJ8UtwagvuRx7thTZM-</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/pindata/core/v2/" xmlns="http://emias.mos.ru/pindata/core/v2/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721MTtVEVSGz1v_uEcWm_GADGRhex9sPO0gffUr1uWJ9Zh1JyE_ZFw-"/>
  <!--Тут будут общие типы между всеми сервисами 2й волны-->
  <xs:complexType name="ConclusionType">
    <xs:annotation>
      <xs:documentation>Сведения о виде медицинского заключения</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiWithCodeBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="formNumber" type="xs:string">
            <xs:annotation>
              <xs:documentation>Номер формы</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ConclusionState">
    <xs:annotation>
      <xs:documentation>Статус по справочнику статусов документов заключений</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiWithCodeBase"/>
    </xs:complexContent>
  </xs:complexType>
  <!--NSI-->
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTFpJq_7DuM3pXGj6b1lfspQgZ2uCKT38_O0lpaQad3Eqx7BRCPeRSG4jfA.KMypH8</con:url><con:content><![CDATA[<xs:schema elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:core="http://emias.mos.ru/pindata/core/v2/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://emias.mos.ru/pindata/core/v2/" schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721Ij1JEBqXwxz9pBsQ2vXXDGojMdmCFDJ8UtwagvuRx7thTZM-"/>
  <xs:complexType name="Conclusion">
    <xs:annotation>
      <xs:documentation>Общий контейнер заключений</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:Base">
        <xs:sequence>
          <xs:element minOccurs="0" name="number" type="xs:string">
            <xs:annotation>
              <xs:documentation>Серия и номер заключения</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="issueDate" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата подписания заключения</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="cancelDate" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата аннулирования заключения</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="endDate" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания действия</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="type" type="ConclusionTypeAdvanced">
            <xs:annotation>
              <xs:documentation>Вид заключения</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="egiszState" type="xs:string">
            <xs:annotation>
              <xs:documentation>Статус отправки в РЭМД</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="egiszDate" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата последнего статуса отправки в РЭМД</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="state" type="core:ConclusionState">
            <xs:annotation>
              <xs:documentation>Статус заключения</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="medicalOrganizationId" type="core:ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="medicalOrganizationName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Название МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="medicalFacilityId" type="core:ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="medicalFacilityName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Название МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ConclusionTypeAdvanced">
    <xs:annotation>
      <xs:documentation>Вид медицинского заключения</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:ConclusionType">
        <xs:sequence>
          <xs:element name="shortTitle" type="xs:string">
            <xs:annotation>
              <xs:documentation>Краткое наименование вида заключения</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="additionalTitle" type="xs:string">
            <xs:annotation>
              <xs:documentation>Дополнительное наименование вида заключения</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="TransportCategory">
    <xs:complexContent>
      <xs:extension base="core:NsiWithCodeBase">
        <xs:annotation>
          <xs:documentation>Категория транспортных средств</xs:documentation>
        </xs:annotation>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MedicalRestriction">
    <xs:complexContent>
      <xs:extension base="core:NsiBase">
        <xs:annotation>
          <xs:documentation>Медицинское ограничение к управлению транспортными средствами</xs:documentation>
        </xs:annotation>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MedicalIndication">
    <xs:complexContent>
      <xs:extension base="core:NsiBase">
        <xs:annotation>
          <xs:documentation>Медицинское показание к управлению транспортными средствами</xs:documentation>
        </xs:annotation>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Association">
    <xs:complexContent>
      <xs:extension base="core:Base">
        <xs:annotation>
          <xs:documentation>Информация о связанном заключении</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="conclusionType" type="ConclusionTypeAdvanced">
            <xs:annotation>
              <xs:documentation>Вид заключения</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="typeCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>Вид связи</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="conclusionNumber" type="xs:string">
            <xs:annotation>
              <xs:documentation>Номер</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="egiszState" type="xs:string">
            <xs:annotation>
              <xs:documentation>Статус отправки в РЭМД</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ConclusionAdvanced">
    <xs:complexContent>
      <xs:extension base="Conclusion">
        <xs:sequence>
          <xs:element minOccurs="0" name="contraindications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Противопоказания</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="doctorId" type="core:ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="doctorName" type="xs:string">
            <xs:annotation>
              <xs:documentation>ФИО врача</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="categories">
            <xs:complexType>
              <xs:annotation>
                <xs:documentation>категории ТС</xs:documentation>
              </xs:annotation>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="category" type="TransportCategory">
                  <xs:annotation>
                    <xs:documentation>категория ТС</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="restrictions">
            <xs:complexType>
              <xs:annotation>
                <xs:documentation>Ограничения к управлению ТС</xs:documentation>
              </xs:annotation>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="restriction" type="MedicalRestriction">
                  <xs:annotation>
                    <xs:documentation>Ограничение к управлению ТС</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="indications">
            <xs:complexType>
              <xs:annotation>
                <xs:documentation>Показание к управлению ТС</xs:documentation>
              </xs:annotation>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="indication" type="MedicalIndication">
                  <xs:annotation>
                    <xs:documentation>Показания к управлению ТС</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="association" type="Association">
            <xs:annotation>
              <xs:documentation>Связанный документ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="disclaimer">
            <xs:annotation>
              <xs:documentation>Дисклеймер</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element name="state" type="xs:string">
                  <xs:annotation>
                    <xs:documentation>Статус</xs:documentation>
                  </xs:annotation>
                </xs:element>
                <xs:element name="text" type="xs:string">
                  <xs:annotation>
                    <xs:documentation>Текст дисклеймера</xs:documentation>
                  </xs:annotation>
                </xs:element>
                <xs:element minOccurs="0" name="description" type="xs:string">
                  <xs:annotation>
                    <xs:documentation>Дополнительное описание</xs:documentation>
                  </xs:annotation>
                </xs:element>
                <xs:element minOccurs="0" name="conclusionId" type="core:ID">
                  <xs:annotation>
                    <xs:documentation>Идентификатор уведомления</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTFpJq_7DuM3pXGj6b1lfspQgZ2vXUDHU1ITd.LEGAwVpMETyUANiKQClYzoCLriojaGoLrHDXkK6RJbZmQTn2HHcxcMQ-</con:url><con:content><![CDATA[<xs:schema elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:core="http://emias.mos.ru/pindata/core/v2/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTFpJq_7DuM3pXGj6b1lfspQgZ2uCKT38_O0lpaQad3Eqx7BRCPeRSG4jfA.KMypH8"/>
  <xs:import namespace="http://emias.mos.ru/pindata/core/v2/" schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELu26x6A9BbtKAbcbEp.44sgRhOg_WSujqnJcMIaNb9Njn4SIh3b1AOEkz6i0w6jWCoBKLkV96l2mppSkX4pcb_DFcpiOmkmGWofV.OJTSYx3_721Ij1JEBqXwxz9pBsQ2vXXDGojMdmCFDJ8UtwagvuRx7thTZM-"/>
  <xs:element name="GetPatientConclusionDetailRequest">
    <xs:annotation>
      <xs:documentation>Входные данные</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="id" type="core:ID">
          <xs:annotation>
            <xs:documentation>Уникальный идентификатор</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="patientId" type="core:ID">
          <xs:annotation>
            <xs:documentation>Идентификатор пациента в ЕМИАС</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" name="options" type="core:Options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="GetPatientConclusionDetailResponse">
    <xs:annotation>
      <xs:documentation>Выходные данные</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="conclusion" type="ConclusionAdvanced">
          <xs:annotation>
            <xs:documentation>Заключение</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService</con:endpoint></con:endpoints><con:operation id="0c69562d-bb5e-4aed-b04c-1cbca9783e56" isOneWay="false" action="getPatientConclusionDetail" name="getPatientConclusionDetail" bindingOperationName="getPatientConclusionDetail" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="243d2780-356d-43c4-96a3-fb6d7f4f6ba9" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <typ:GetPatientConclusionDetailRequest>\r
         <typ:id>?</typ:id>\r
         <typ:patientId>?</typ:patientId>\r
         <!--Optional:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <v2:entry key="?">?</v2:entry>\r
         </typ:options>\r
      </typ:GetPatientConclusionDetailRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/pindata/pnExternal/v1/types/pnExternalServicePortType/getPatientConclusionDetailRequest"/></con:call></con:operation><con:operation id="930754cc-a240-47fa-a7c1-aa6df1f05d97" isOneWay="false" action="getPatientConclusions" name="getPatientConclusions" bindingOperationName="getPatientConclusions" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="7a466915-94e8-41f5-a8bf-1925d85cb3f5" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <typ:GetPatientConclusionsRequest>\r
         <typ:patientId>?</typ:patientId>\r
         <!--Optional:-->\r
         <typ:conclusionType>?</typ:conclusionType>\r
         <!--Optional:-->\r
         <typ:created>\r
            <!--Optional:-->\r
            <v2:start>?</v2:start>\r
            <!--Optional:-->\r
            <v2:end>?</v2:end>\r
         </typ:created>\r
         <!--Optional:-->\r
         <typ:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v2:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v2:sortOrder attributeName="?" desceding="false"/>\r
            </v2:sortingOptions>\r
         </typ:pagingOptions>\r
         <!--Optional:-->\r
         <typ:options>\r
            <!--Zero or more repetitions:-->\r
            <v2:entry key="?">?</v2:entry>\r
         </typ:options>\r
      </typ:GetPatientConclusionsRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/pindata/pnExternal/v1/types/pnExternalServicePortType/getPatientConclusionsRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:RestService" id="c0fb8513-a0a6-4453-93aa-d115cbd8f3ea" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://lkservice-apigateway.test.emias.mos.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://lkservice-apigateway.test.emias.mos.ru</con:endpoint></con:endpoints><con:resource name="login" path="/api/auth/1/login" id="4815a018-8313-4bff-95c2-aed36ab172b0"><con:settings/><con:parameters><con:parameter><con:name>X-Environment</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="0a0cf1f3-9cbf-4fdc-8b7c-b324b73f6459" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="12355302-5ff9-497e-a9f1-5e84e0ca66a4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lkservice-apigateway.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>X-Environment</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="confirm" path="/api/auth/1/confirm" id="c41bad0a-dae9-47c0-af79-944f4f0983de"><con:settings/><con:parameters/><con:method name="Method 1" id="04bc75b1-7829-47e6-9990-ee31e834cada" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="049cc7c0-ece0-4176-b640-c6a078bac29a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lkservice-apigateway.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="medical-certificates" path="/api/1/documents/medical-certificates" id="f6f8c82d-d24d-40c8-8f17-968978f08883"><con:settings/><con:parameters><con:parameter><con:name>X-Access-JWT</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>shortDateFilter</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ehrId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="84be48fc-54fc-490c-b889-893398243aea" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="95222468-25b9-4ea7-b3fd-be2fa270c45c" mediaType="application/json"><con:settings/><con:endpoint>http://lkservice-apigateway.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>shortDateFilter</con:entry><con:entry>ehrId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="82cd4431-14a0-4223-afd8-030d8a7ec60d" name="getCertificateInfo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0a6e0976-2fc2-4c55-9f40-d243ebba996c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. formName = weapon" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получение patientId, conclusionId" id="994ddebf-ff2b-40d6-a54e-8661892398ea"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#pinRegestryDBDriver}</con:driver><con:connectionString>${#Project#pinRegestryFullDbConnection}</con:connectionString><con:query>SELECT patient_id,id FROM conclusion WHERE type_id = 158815264 ORDER BY random() LIMIT 1</con:query><con:assertion type="JDBC Status" id="4cb28fa4-2069-4c32-b942-7ff9c10e3c1f" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись patientId, conclusionId" id="f6b80c75-192b-4797-aa13-2a82933447a7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId, conclusionId</con:sourceStep><con:sourcePath>//ResultSet[1]/Row[1]/conclusion.patient_id</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>conclusionId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId, conclusionId</con:sourceStep><con:sourcePath>//ResultSet[1]/Row[1]/conclusion.id</con:sourcePath><con:targetType>conclusionId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getPatientConclusionDetail" id="9bb605c7-5bb1-4a03-a312-aa5190902d72"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>pnExternalServiceBinding</con:interface><con:operation>getPatientConclusionDetail</con:operation><con:request name="getPatientConclusionDetail" id="8ba1ca23-9ed7-45d7-aca2-f1dbd409f07e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pinRegestryEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">
   <soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken>
        <wsse:Username>EIM/EIM</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
  </soap:Header>
   <soap:Body>
      <typ:GetPatientConclusionDetailRequest>
         <typ:id>${#TestCase#conclusionId}</typ:id>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
         <!--Optional:-->
         <typ:options>
         </typ:options>
      </typ:GetPatientConclusionDetailRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e740efd6-ab26-459d-9af2-3737588560cf"/><con:assertion type="SOAP Fault Assertion" id="afda17bb-5b5d-4184-b853-0e96e470ba90" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getCertificateInfo" id="1f2b9f6e-4d0a-4a08-adf8-6b4dcbbb56ed"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/info" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificateInfo" id="39ed8bfe-1d7f-4fbf-9223-76da4ad96594" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/info</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2fa806e3-556a-4823-8c14-1a17cc1135cc" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="conclusionId" value="${#TestCase#conclusionId}"/>
</con:parameters><con:parameterOrder><con:entry>conclusionId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="63c18c23-2587-4d65-a77a-0bddd83e9510"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter

//JSON Slurper
def getCertificateInfoResponse = context.expand('${getCertificateInfo#Response}')
def getCertificateInfo = new JsonSlurper().parseText(getCertificateInfoResponse)

//XML Slurper
def getPatientConclusionDetailResponse = context.expand('${getPatientConclusionDetail#Response}')
getPatientConclusionDetail = new XmlSlurper().parseText(getPatientConclusionDetailResponse)


pinCertificate=getPatientConclusionDetail.Body.GetPatientConclusionDetailResponse.conclusion
infoCertificate=getCertificateInfo.payload
//Проверка обязательных параметров

//Проверка FormName & type
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getPatientConclusionDetail#Response')
def typeCode = InIs.getNodeValue("//*:type/@*:code")

if (typeCode=="contraindications"){
	suppFormName = "Уведомление"
}
else{
	suppFormName = "Медицинское заключение"
}

infoFormName=infoCertificate.formName.toString()
assert suppFormName==infoFormName

if (typeCode=="weapon"){
	suppType = "Об отсутствии медицинских противопоказаний к владению оружием"
}
if (typeCode=="transport"){
	suppType = "О наличии (об отсутствии) у водителей транспортных средств (кандидатов в водители транспортных средств) медицинских противопоказаний, медицинских показаний или медицинских ограничений к управлению транспортными средствами"
}
if (typeCode=="toxicological"){
	suppType = "Об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов"
}
if (typeCode=="contraindications"){
	suppType = "О выявлении противопоказаний или аннулировании медицинских заключений к владению оружием"
}
infoType=infoCertificate.type.toString()
assert suppType==infoType

//////////////////////Необязательные параметры//////////////////////
def checkParams(s,j){
	if (s=="" & j=="null"){
		return false 
	}
	else{
		return true
	}
}

//Проверка number
suppNumber =pinCertificate.number.toString()
infoNumber =infoCertificate.number.toString()
if (checkParams(suppNumber,infoNumber)){
	assert  suppNumber==infoNumber
	}
else{
	log.info "Параметра number не обнаружено"
}

//Проверка issueDate
suppIssueDate =pinCertificate.issueDate.toString()
infoIssueDate =infoCertificate.issueDate.toString()
if (checkParams(suppIssueDate,infoIssueDate)){
	assert  suppIssueDate==infoIssueDate
	}
else{
	log.info "Параметра issueDate не обнаружено"
}

//Проверка cancelDate
suppCancelDate =pinCertificate.cancelDate.toString()
infoCancelDate =infoCertificate.cancelDate.toString()
if (checkParams(suppCancelDate,infoCancelDate)){
	assert  suppCancelDate==infoCancelDate
	}
else{
	log.info "Параметра cancelDate не обнаружено"
}

//Проверка endDate 
suppEndDate =pinCertificate.endDate.toString()
infoEndDate =infoCertificate.endDate.toString()
if (checkParams(suppEndDate,infoEndDate)){
	assert  suppEndDate==infoEndDate
	}
else{
	log.info "Параметра endDate не обнаружено"
}

//Проверка egiszDate
suppEgiszState = pinCertificate.egiszState.toString()
suppEgiszDate =pinCertificate.egiszDate.toString()
infoEgiszDate =infoCertificate.egiszDate.toString()
if (checkParams(suppEgiszDate,infoEgiszDate) && suppEgiszState=="Registered" ){
	assert  suppEgiszDate==infoEgiszDate
	}
else{
	log.info "Параметра egiszDate не обнаружено"
}

//Проверка moName 
suppMoName =pinCertificate.medicalOrganizationName.toString()
infoMoName =infoCertificate.moName.toString()
if (checkParams(suppMoName,infoMoName)){
	assert  suppMoName==infoMoName
	}
else{
	log.info "Параметра moName не обнаружено"
}

//Проверка contraindications 
suppContraindications  =pinCertificate.contraindications.toString()
infoContraindications =infoCertificate.contraindications.toString()
if (checkParams(suppContraindications,infoContraindications)){
	assert  suppContraindications==infoContraindications
	}
else{
	log.info "Параметра contraindications не обнаружено"
}

//Проверка doctorName 
suppDoctorName  =pinCertificate.doctorName.toString()
infoDoctorName =infoCertificate.doctorName.toString()
if (checkParams(suppDoctorName,infoDoctorName)){
	assert  suppDoctorName==infoDoctorName
	}
else{
	log.info "Параметра doctorName не обнаружено"
}

//Проверка массива categories
// Количество элементов массива
suppCategoriesCount =pinCertificate.categories.category ?  pinCertificate.categories.category.size(): 0
suppCategories =[]
infoCategories =[]
if (suppCategoriesCount>0){
	for (int j=0; j<suppCategoriesCount; j++){
		suppCategories.plus(pinCertificate.categories.category[j].toString())
		infoCategories.plus(infoCertificate.categories[j].toString())
	}
	assert suppCategories.sort() == infoCategories.sort()
}
else{
	log.info "Categories не обнаружено"
}



//Проверка массива resctrictions
// Количество элементов массива
suppRestrictionsCount =pinCertificate.restrictions.restriction ?  pinCertificate.restrictions.restriction.size(): 0
suppRestrictions=[]
infoRestrictions=[]
if (suppRestrictionsCount>0){
	for (int j=0; j<suppRestrictionsCount; j++){
		suppRestrictions.plus(pinCertificate.restrictions.restriction[j].toString())
		infoRestrictions.plus(infoCertificate.restrictions[j].toString())
	}
	assert  suppRestrictions.sort()==infoRestrictions.sort()
}
else{
	log.info "Restrictions не обнаружено"
}

//Проверка массива indications
// Количество элементов массива
suppIndicationsCount =pinCertificate.indications.indication ?  pinCertificate.indications.indication.size(): 0
suppIndications=[]
infoIndications=[]
if (suppIndicationsCount>0){
	for (int j=0; j<suppIndicationsCount; j++){
		suppIndications.plus(pinCertificate.indications.indication[j].toString())
		infoIndications.plus(infoCertificate.indications[j].toString())
	}
	assert  suppIndications.sort()==infoIndications.sort()
}
else{
	log.info "indications не обнаружено"
}

//Проверка disclaimer.state
suppDisclaimerState =pinCertificate.disclaimer.state
if (suppDisclaimerState.text()){
	infoDisclaimerState =infoCertificate.disclaimer.state.toString()
	if (checkParams(suppDisclaimerState,infoDisclaimerState)){
		assert  suppDisclaimerState==infoDisclaimerState
	}
}
else{
	log.info "Параметра DisclaimerState не обнаружено"
}

//Проверка disclaimer.text
suppDisclaimerText =pinCertificate.disclaimer.text
if (suppDisclaimerText.text()){
	infoDisclaimerText =infoCertificate.disclaimer.text.toString()
	if (checkParams(suppDisclaimerText,infoDisclaimerText)){
		assert  suppDisclaimerText==infoDisclaimerText
		}
}
else{
	log.info "Параметра DisclaimerText не обнаружено"
}

//Проверка disclaimer.description
suppDisclaimerDescription =pinCertificate.disclaimer.description
if (suppDisclaimerDescription.text()){
	infoDisclaimerDescription =infoCertificate.disclaimer.description.toString()
	if (checkParams(suppDisclaimerDescription,infoDisclaimerDescription)){
		assert  suppDisclaimerDescription==infoDisclaimerDescription
	}
}
else{
	log.info "Параметра DisclaimerDescription не обнаружено"
}

//Проверка disclaimer.conclusionId
suppDisclaimerConclusionId =pinCertificate.disclaimer.conclusionId
if (suppDisclaimerConclusionId.text()){
	infoDisclaimerConclusionId =infoCertificate.disclaimer.conclusionId.toString()
	if (checkParams(suppDisclaimerConclusionId,infoDisclaimerConclusionId)){
		assert  suppDisclaimerConclusionId==infoDisclaimerConclusionId
	}
}
else{
	log.info "Параметра DisclaimerConclusionId не обнаружено"
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>17248972</con:value></con:property><con:property><con:name>conclusionId</con:name><con:value>2506</con:value></con:property></con:properties></con:testCase><con:testCase id="01200a53-6d8e-4a47-a7e9-e242244e9309" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. formName = toxicological" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получение patientId, conclusionId" id="16a34347-883c-4d22-a834-28701b649132"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#pinRegestryDBDriver}</con:driver><con:connectionString>${#Project#pinRegestryFullDbConnection}</con:connectionString><con:query>SELECT patient_id,id FROM conclusion WHERE type_id = 158815265 ORDER BY random() LIMIT 1;</con:query><con:assertion type="JDBC Status" id="4cb28fa4-2069-4c32-b942-7ff9c10e3c1f" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись patientId, conclusionId" id="fb2b95cb-33bb-4bae-ba55-f3a668a4fcb6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId, conclusionId</con:sourceStep><con:sourcePath>//ResultSet[1]/Row[1]/conclusion.patient_id</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>conclusionId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId, conclusionId</con:sourceStep><con:sourcePath>//ResultSet[1]/Row[1]/conclusion.id</con:sourcePath><con:targetType>conclusionId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getPatientConclusionDetail" id="c2bf028d-f5d9-4674-8da6-8006a8838a48"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>pnExternalServiceBinding</con:interface><con:operation>getPatientConclusionDetail</con:operation><con:request name="getPatientConclusionDetail" id="8ba1ca23-9ed7-45d7-aca2-f1dbd409f07e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pinRegestryEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">
   <soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken>
        <wsse:Username>EIM/EIM</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
  </soap:Header>
   <soap:Body>
      <typ:GetPatientConclusionDetailRequest>
         <typ:id>${#TestCase#conclusionId}</typ:id>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
         <!--Optional:-->
         <typ:options>
         </typ:options>
      </typ:GetPatientConclusionDetailRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e740efd6-ab26-459d-9af2-3737588560cf"/><con:assertion type="SOAP Fault Assertion" id="afda17bb-5b5d-4184-b853-0e96e470ba90" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getCertificateInfo" id="17c3a15a-7f41-4594-94c1-2e65420ba951"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/info" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificateInfo" id="39ed8bfe-1d7f-4fbf-9223-76da4ad96594" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/info</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2fa806e3-556a-4823-8c14-1a17cc1135cc" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="conclusionId" value="${#TestCase#conclusionId}"/>
</con:parameters><con:parameterOrder><con:entry>conclusionId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="437d3b66-d244-452b-9cdd-bd494c442551"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter

//JSON Slurper
def getCertificateInfoResponse = context.expand('${getCertificateInfo#Response}')
def getCertificateInfo = new JsonSlurper().parseText(getCertificateInfoResponse)

//XML Slurper
def getPatientConclusionDetailResponse = context.expand('${getPatientConclusionDetail#Response}')
getPatientConclusionDetail = new XmlSlurper().parseText(getPatientConclusionDetailResponse)


pinCertificate=getPatientConclusionDetail.Body.GetPatientConclusionDetailResponse.conclusion
infoCertificate=getCertificateInfo.payload
//Проверка обязательных параметров

//Проверка FormName & type
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getPatientConclusionDetail#Response')
def typeCode = InIs.getNodeValue("//*:type/@*:code")

if (typeCode=="contraindications"){
	suppFormName = "Уведомление"
}
else{
	suppFormName = "Медицинское заключение"
}

infoFormName=infoCertificate.formName.toString()
assert suppFormName==infoFormName

if (typeCode=="weapon"){
	suppType = "Об отсутствии медицинских противопоказаний к владению оружием"
}
if (typeCode=="transport"){
	suppType = "О наличии (об отсутствии) у водителей транспортных средств (кандидатов в водители транспортных средств) медицинских противопоказаний, медицинских показаний или медицинских ограничений к управлению транспортными средствами"
}
if (typeCode=="toxicological"){
	suppType = "Об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов"
}
if (typeCode=="contraindications"){
	suppType = "О выявлении противопоказаний или аннулировании медицинских заключений к владению оружием"
}
infoType=infoCertificate.type.toString()
assert suppType==infoType

//////////////////////Необязательные параметры//////////////////////
def checkParams(s,j){
	if (s=="" & j=="null"){
		return false 
	}
	else{
		return true
	}
}

//Проверка number
suppNumber =pinCertificate.number.toString()
infoNumber =infoCertificate.number.toString()
if (checkParams(suppNumber,infoNumber)){
	assert  suppNumber==infoNumber
	}
else{
	log.info "Параметра number не обнаружено"
}

//Проверка issueDate
suppIssueDate =pinCertificate.issueDate.toString()
infoIssueDate =infoCertificate.issueDate.toString()
if (checkParams(suppIssueDate,infoIssueDate)){
	assert  suppIssueDate==infoIssueDate
	}
else{
	log.info "Параметра issueDate не обнаружено"
}

//Проверка cancelDate
suppCancelDate =pinCertificate.cancelDate.toString()
infoCancelDate =infoCertificate.cancelDate.toString()
if (checkParams(suppCancelDate,infoCancelDate)){
	assert  suppCancelDate==infoCancelDate
	}
else{
	log.info "Параметра cancelDate не обнаружено"
}

//Проверка endDate 
suppEndDate =pinCertificate.endDate.toString()
infoEndDate =infoCertificate.endDate.toString()
if (checkParams(suppEndDate,infoEndDate)){
	assert  suppEndDate==infoEndDate
	}
else{
	log.info "Параметра endDate не обнаружено"
}

//Проверка egiszDate
suppEgiszState = pinCertificate.egiszState.toString()
suppEgiszDate =pinCertificate.egiszDate.toString()
infoEgiszDate =infoCertificate.egiszDate.toString()
if (checkParams(suppEgiszDate,infoEgiszDate) && suppEgiszState=="Registered" ){
	assert  suppEgiszDate==infoEgiszDate
	}
else{
	log.info "Параметра egiszDate не обнаружено"
}

//Проверка moName 
suppMoName =pinCertificate.medicalOrganizationName.toString()
infoMoName =infoCertificate.moName.toString()
if (checkParams(suppMoName,infoMoName)){
	assert  suppMoName==infoMoName
	}
else{
	log.info "Параметра moName не обнаружено"
}

//Проверка contraindications 
suppContraindications  =pinCertificate.contraindications.toString()
infoContraindications =infoCertificate.contraindications.toString()
if (checkParams(suppContraindications,infoContraindications)){
	assert  suppContraindications==infoContraindications
	}
else{
	log.info "Параметра contraindications не обнаружено"
}

//Проверка doctorName 
suppDoctorName  =pinCertificate.doctorName.toString()
infoDoctorName =infoCertificate.doctorName.toString()
if (checkParams(suppDoctorName,infoDoctorName)){
	assert  suppDoctorName==infoDoctorName
	}
else{
	log.info "Параметра doctorName не обнаружено"
}

//Проверка массива categories
// Количество элементов массива
suppCategoriesCount =pinCertificate.categories.category ?  pinCertificate.categories.category.size(): 0
suppCategories =[]
infoCategories =[]
if (suppCategoriesCount>0){
	for (int j=0; j<suppCategoriesCount; j++){
		suppCategories.plus(pinCertificate.categories.category[j].toString())
		infoCategories.plus(infoCertificate.categories[j].toString())
	}
	assert suppCategories.sort() == infoCategories.sort()
}
else{
	log.info "Categories не обнаружено"
}



//Проверка массива resctrictions
// Количество элементов массива
suppRestrictionsCount =pinCertificate.restrictions.restriction ?  pinCertificate.restrictions.restriction.size(): 0
suppRestrictions=[]
infoRestrictions=[]
if (suppRestrictionsCount>0){
	for (int j=0; j<suppRestrictionsCount; j++){
		suppRestrictions.plus(pinCertificate.restrictions.restriction[j].toString())
		infoRestrictions.plus(infoCertificate.restrictions[j].toString())
	}
	assert  suppRestrictions.sort()==infoRestrictions.sort()
}
else{
	log.info "Restrictions не обнаружено"
}

//Проверка массива indications
// Количество элементов массива
suppIndicationsCount =pinCertificate.indications.indication ?  pinCertificate.indications.indication.size(): 0
suppIndications=[]
infoIndications=[]
if (suppIndicationsCount>0){
	for (int j=0; j<suppIndicationsCount; j++){
		suppIndications.plus(pinCertificate.indications.indication[j].toString())
		infoIndications.plus(infoCertificate.indications[j].toString())
	}
	assert  suppIndications.sort()==infoIndications.sort()
}
else{
	log.info "indications не обнаружено"
}

//Проверка disclaimer.state
suppDisclaimerState =pinCertificate.disclaimer.state
if (suppDisclaimerState.text()){
	infoDisclaimerState =infoCertificate.disclaimer.state.toString()
	if (checkParams(suppDisclaimerState,infoDisclaimerState)){
		assert  suppDisclaimerState==infoDisclaimerState
	}
}
else{
	log.info "Параметра DisclaimerState не обнаружено"
}

//Проверка disclaimer.text
suppDisclaimerText =pinCertificate.disclaimer.text
if (suppDisclaimerText.text()){
	infoDisclaimerText =infoCertificate.disclaimer.text.toString()
	if (checkParams(suppDisclaimerText,infoDisclaimerText)){
		assert  suppDisclaimerText==infoDisclaimerText
		}
}
else{
	log.info "Параметра DisclaimerText не обнаружено"
}

//Проверка disclaimer.description
suppDisclaimerDescription =pinCertificate.disclaimer.description
if (suppDisclaimerDescription.text()){
	infoDisclaimerDescription =infoCertificate.disclaimer.description.toString()
	if (checkParams(suppDisclaimerDescription,infoDisclaimerDescription)){
		assert  suppDisclaimerDescription==infoDisclaimerDescription
	}
}
else{
	log.info "Параметра DisclaimerDescription не обнаружено"
}

//Проверка disclaimer.conclusionId
suppDisclaimerConclusionId =pinCertificate.disclaimer.conclusionId
if (suppDisclaimerConclusionId.text()){
	infoDisclaimerConclusionId =infoCertificate.disclaimer.conclusionId.toString()
	if (checkParams(suppDisclaimerConclusionId,infoDisclaimerConclusionId)){
		assert  suppDisclaimerConclusionId==infoDisclaimerConclusionId
	}
}
else{
	log.info "Параметра DisclaimerConclusionId не обнаружено"
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>17129307</con:value></con:property><con:property><con:name>conclusionId</con:name><con:value>1775</con:value></con:property></con:properties></con:testCase><con:testCase id="8246ce56-942a-4d43-8398-aaae302a780d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. formName = transport" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получение patientId, conclusionId" id="6b0fd766-0d3b-4411-935d-e999b86f14e7"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#pinRegestryDBDriver}</con:driver><con:connectionString>${#Project#pinRegestryFullDbConnection}</con:connectionString><con:query>SELECT conclusion.patient_id, conclusion.id 
FROM conclusion 
INNER JOIN transport_category 
	ON transport_category.conclusion_id =  Conclusion.id 
INNER JOIN restriction 
	ON restriction.conclusion_id = conclusion.id
INNER JOIN indication
	ON indication.conclusion_id = conclusion.id
WHERE type_id = 158815266  
ORDER BY random() 
LIMIT 1</con:query><con:assertion type="JDBC Status" id="4cb28fa4-2069-4c32-b942-7ff9c10e3c1f" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись patientId, conclusionId" id="0d56cd0d-ab0a-454d-a2d3-3e9d4f785fd8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId, conclusionId</con:sourceStep><con:sourcePath>//ResultSet[1]/Row[1]/conclusion.patient_id</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>conclusionId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId, conclusionId</con:sourceStep><con:sourcePath>//ResultSet[1]/Row[1]/conclusion.id</con:sourcePath><con:targetType>conclusionId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getPatientConclusionDetail" id="e4bdbfcd-10cb-4805-b318-a84e37241fc3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>pnExternalServiceBinding</con:interface><con:operation>getPatientConclusionDetail</con:operation><con:request name="getPatientConclusionDetail" id="8ba1ca23-9ed7-45d7-aca2-f1dbd409f07e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pinRegestryEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">
   <soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken>
        <wsse:Username>EIM/EIM</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
  </soap:Header>
   <soap:Body>
      <typ:GetPatientConclusionDetailRequest>
         <typ:id>${#TestCase#conclusionId}</typ:id>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
         <!--Optional:-->
         <typ:options>
         </typ:options>
      </typ:GetPatientConclusionDetailRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e740efd6-ab26-459d-9af2-3737588560cf"/><con:assertion type="SOAP Fault Assertion" id="afda17bb-5b5d-4184-b853-0e96e470ba90" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getCertificateInfo" id="329ccad8-cec9-4cd9-856b-265ca134ff6e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/info" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificateInfo" id="39ed8bfe-1d7f-4fbf-9223-76da4ad96594" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/info</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2fa806e3-556a-4823-8c14-1a17cc1135cc" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="conclusionId" value="${#TestCase#conclusionId}"/>
</con:parameters><con:parameterOrder><con:entry>conclusionId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="92d15b44-b988-4b67-a230-644511e34ba9"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter

//JSON Slurper
def getCertificateInfoResponse = context.expand('${getCertificateInfo#Response}')
def getCertificateInfo = new JsonSlurper().parseText(getCertificateInfoResponse)

//XML Slurper
def getPatientConclusionDetailResponse = context.expand('${getPatientConclusionDetail#Response}')
getPatientConclusionDetail = new XmlSlurper().parseText(getPatientConclusionDetailResponse)


pinCertificate=getPatientConclusionDetail.Body.GetPatientConclusionDetailResponse.conclusion
infoCertificate=getCertificateInfo.payload
//Проверка обязательных параметров

//Проверка FormName & type
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getPatientConclusionDetail#Response')
def typeCode = InIs.getNodeValue("//*:type/@*:code")

if (typeCode=="contraindications"){
	suppFormName = "Уведомление"
}
else{
	suppFormName = "Медицинское заключение"
}

infoFormName=infoCertificate.formName.toString()
assert suppFormName==infoFormName

if (typeCode=="weapon"){
	suppType = "Об отсутствии медицинских противопоказаний к владению оружием"
}
if (typeCode=="transport"){
	suppType = "О наличии (об отсутствии) у водителей транспортных средств (кандидатов в водители транспортных средств) медицинских противопоказаний, медицинских показаний или медицинских ограничений к управлению транспортными средствами"
}
if (typeCode=="toxicological"){
	suppType = "Об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов"
}
if (typeCode=="contraindications"){
	suppType = "О выявлении противопоказаний или аннулировании медицинских заключений к владению оружием"
}
infoType=infoCertificate.type.toString()
assert suppType==infoType

//////////////////////Необязательные параметры//////////////////////
def checkParams(s,j){
	if (s=="" & j=="null"){
		return false 
	}
	else{
		return true
	}
}

//Проверка number
suppNumber =pinCertificate.number.toString()
infoNumber =infoCertificate.number.toString()
if (checkParams(suppNumber,infoNumber)){
	assert  suppNumber==infoNumber
	}
else{
	log.info "Параметра number не обнаружено"
}

//Проверка issueDate
suppIssueDate =pinCertificate.issueDate.toString()
infoIssueDate =infoCertificate.issueDate.toString()
if (checkParams(suppIssueDate,infoIssueDate)){
	assert  suppIssueDate==infoIssueDate
	}
else{
	log.info "Параметра issueDate не обнаружено"
}

//Проверка cancelDate
suppCancelDate =pinCertificate.cancelDate.toString()
infoCancelDate =infoCertificate.cancelDate.toString()
if (checkParams(suppCancelDate,infoCancelDate)){
	assert  suppCancelDate==infoCancelDate
	}
else{
	log.info "Параметра cancelDate не обнаружено"
}

//Проверка endDate 
suppEndDate =pinCertificate.endDate.toString()
infoEndDate =infoCertificate.endDate.toString()
if (checkParams(suppEndDate,infoEndDate)){
	assert  suppEndDate==infoEndDate
	}
else{
	log.info "Параметра endDate не обнаружено"
}

//Проверка egiszDate
suppEgiszState = pinCertificate.egiszState.toString()
suppEgiszDate =pinCertificate.egiszDate.toString()
infoEgiszDate =infoCertificate.egiszDate.toString()
if (checkParams(suppEgiszDate,infoEgiszDate) && suppEgiszState=="Registered" ){
	assert  suppEgiszDate==infoEgiszDate
	}
else{
	log.info "Параметра egiszDate не обнаружено"
}

//Проверка moName 
suppMoName =pinCertificate.medicalOrganizationName.toString()
infoMoName =infoCertificate.moName.toString()
if (checkParams(suppMoName,infoMoName)){
	assert  suppMoName==infoMoName
	}
else{
	log.info "Параметра moName не обнаружено"
}

//Проверка contraindications 
suppContraindications  =pinCertificate.contraindications.toString()
infoContraindications =infoCertificate.contraindications.toString()
if (checkParams(suppContraindications,infoContraindications)){
	assert  suppContraindications==infoContraindications
	}
else{
	log.info "Параметра contraindications не обнаружено"
}

//Проверка doctorName 
suppDoctorName  =pinCertificate.doctorName.toString()
infoDoctorName =infoCertificate.doctorName.toString()
if (checkParams(suppDoctorName,infoDoctorName)){
	assert  suppDoctorName==infoDoctorName
	}
else{
	log.info "Параметра doctorName не обнаружено"
}

//Проверка массива categories
// Количество элементов массива
suppCategoriesCount =pinCertificate.categories.category ?  pinCertificate.categories.category.size(): 0
suppCategories =[]
infoCategories =[]
if (suppCategoriesCount>0){
	for (int j=0; j<suppCategoriesCount; j++){
		categoryCode = InIs.getNodeValue("//*:category[$j+1]/@*:code")
		suppCategories<<categoryCode
		infoCategories<<infoCertificate.categories[j].toString()
	}
	log.info suppCategories
	log.info infoCategories
	assert suppCategories.sort() == infoCategories.sort()
}
else{
	log.info "Categories не обнаружено"
}



//Проверка массива resctrictions
// Количество элементов массива
suppRestrictionsCount =pinCertificate.restrictions.restriction ?  pinCertificate.restrictions.restriction.size(): 0
suppRestrictions=[]
infoRestrictions=[]
if (suppRestrictionsCount>0){
	for (int j=0; j<suppRestrictionsCount; j++){
		suppRestrictions.plus(pinCertificate.restrictions.restriction[j].toString())
		infoRestrictions.plus(infoCertificate.restrictions[j].toString())
	}
	assert  suppRestrictions.sort()==infoRestrictions.sort()
}
else{
	log.info "Restrictions не обнаружено"
}

//Проверка массива indications
// Количество элементов массива
suppIndicationsCount =pinCertificate.indications.indication ?  pinCertificate.indications.indication.size(): 0
suppIndications=[]
infoIndications=[]
if (suppIndicationsCount>0){
	for (int j=0; j<suppIndicationsCount; j++){
		suppIndications.plus(pinCertificate.indications.indication[j].toString())
		infoIndications.plus(infoCertificate.indications[j].toString())
	}
	assert  suppIndications.sort()==infoIndications.sort()
}
else{
	log.info "indications не обнаружено"
}

//Проверка disclaimer.state
suppDisclaimerState =pinCertificate.disclaimer.state
if (suppDisclaimerState.text()){
	infoDisclaimerState =infoCertificate.disclaimer.state.toString()
	if (checkParams(suppDisclaimerState,infoDisclaimerState)){
		assert  suppDisclaimerState==infoDisclaimerState
	}
}
else{
	log.info "Параметра DisclaimerState не обнаружено"
}

//Проверка disclaimer.text
suppDisclaimerText =pinCertificate.disclaimer.text
if (suppDisclaimerText.text()){
	infoDisclaimerText =infoCertificate.disclaimer.text.toString()
	if (checkParams(suppDisclaimerText,infoDisclaimerText)){
		assert  suppDisclaimerText==infoDisclaimerText
		}
}
else{
	log.info "Параметра DisclaimerText не обнаружено"
}

//Проверка disclaimer.description
suppDisclaimerDescription =pinCertificate.disclaimer.description
if (suppDisclaimerDescription.text()){
	infoDisclaimerDescription =infoCertificate.disclaimer.description.toString()
	if (checkParams(suppDisclaimerDescription,infoDisclaimerDescription)){
		assert  suppDisclaimerDescription==infoDisclaimerDescription
	}
}
else{
	log.info "Параметра DisclaimerDescription не обнаружено"
}

//Проверка disclaimer.conclusionId
suppDisclaimerConclusionId =pinCertificate.disclaimer.conclusionId
if (suppDisclaimerConclusionId.text()){
	infoDisclaimerConclusionId =infoCertificate.disclaimer.conclusionId.toString()
	if (checkParams(suppDisclaimerConclusionId,infoDisclaimerConclusionId)){
		assert  suppDisclaimerConclusionId==infoDisclaimerConclusionId
	}
}
else{
	log.info "Параметра DisclaimerConclusionId не обнаружено"
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>16608312</con:value></con:property><con:property><con:name>conclusionId</con:name><con:value>2988</con:value></con:property></con:properties></con:testCase><con:testCase id="79a9eb5c-93e9-4c04-b97b-9c602b868240" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ОС. formName = contraindication" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Получение patientId, conclusionId" id="78f71392-150e-4cb4-b3ec-d083266264ba"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="false" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#pinRegestryDBDriver}</con:driver><con:connectionString>${#Project#pinRegestryFullDbConnection}</con:connectionString><con:query>SELECT patient_id,id FROM conclusion WHERE type_id = 158829516 ORDER BY random() LIMIT 1;</con:query><con:assertion type="JDBC Status" id="4cb28fa4-2069-4c32-b942-7ff9c10e3c1f" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Запись patientId, conclusionId" id="5e0a8905-d55e-4eb2-b29e-79be2b2cb03e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>patientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId, conclusionId</con:sourceStep><con:sourcePath>//ResultSet[1]/Row[1]/conclusion.patient_id</con:sourcePath><con:targetType>patientId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>conclusionId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Получение patientId, conclusionId</con:sourceStep><con:sourcePath>//ResultSet[1]/Row[1]/conclusion.id</con:sourcePath><con:targetType>conclusionId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getPatientConclusionDetail" id="41f10332-51f1-41d4-abc9-ca999010b602"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>pnExternalServiceBinding</con:interface><con:operation>getPatientConclusionDetail</con:operation><con:request name="getPatientConclusionDetail" id="8ba1ca23-9ed7-45d7-aca2-f1dbd409f07e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pinRegestryEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">
   <soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken>
        <wsse:Username>EIM/EIM</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
  </soap:Header>
   <soap:Body>
      <typ:GetPatientConclusionDetailRequest>
         <typ:id>${#TestCase#conclusionId}</typ:id>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
         <!--Optional:-->
         <typ:options>
         </typ:options>
      </typ:GetPatientConclusionDetailRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e740efd6-ab26-459d-9af2-3737588560cf"/><con:assertion type="SOAP Fault Assertion" id="afda17bb-5b5d-4184-b853-0e96e470ba90" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getCertificateInfo" id="6876f54b-61d1-4b95-82c4-d890d7872431"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/info" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificateInfo" id="39ed8bfe-1d7f-4fbf-9223-76da4ad96594" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/info</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2fa806e3-556a-4823-8c14-1a17cc1135cc" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="conclusionId" value="${#TestCase#conclusionId}"/>
</con:parameters><con:parameterOrder><con:entry>conclusionId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверка маппинга" id="cb46e110-16f0-4f43-bf25-7a0aac09dce7"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.format.DateTimeFormatter

//JSON Slurper
def getCertificateInfoResponse = context.expand('${getCertificateInfo#Response}')
def getCertificateInfo = new JsonSlurper().parseText(getCertificateInfoResponse)

//XML Slurper
def getPatientConclusionDetailResponse = context.expand('${getPatientConclusionDetail#Response}')
getPatientConclusionDetail = new XmlSlurper().parseText(getPatientConclusionDetailResponse)


pinCertificate=getPatientConclusionDetail.Body.GetPatientConclusionDetailResponse.conclusion
infoCertificate=getCertificateInfo.payload
//Проверка обязательных параметров

//Проверка FormName & type
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('getPatientConclusionDetail#Response')
def typeCode = InIs.getNodeValue("//*:type/@*:code")

if (typeCode=="contraindications"){
	suppFormName = "Уведомление"
}
else{
	suppFormName = "Медицинское заключение"
}

infoFormName=infoCertificate.formName.toString()
assert suppFormName==infoFormName

if (typeCode=="weapon"){
	suppType = "Об отсутствии медицинских противопоказаний к владению оружием"
}
if (typeCode=="transport"){
	suppType = "О наличии (об отсутствии) у водителей транспортных средств (кандидатов в водители транспортных средств) медицинских противопоказаний, медицинских показаний или медицинских ограничений к управлению транспортными средствами"
}
if (typeCode=="toxicological"){
	suppType = "Об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов"
}
if (typeCode=="contraindications"){
	suppType = "О выявлении противопоказаний или аннулировании медицинских заключений к владению оружием"
}
infoType=infoCertificate.type.toString()
assert suppType==infoType

//////////////////////Необязательные параметры//////////////////////
def checkParams(s,j){
	if (s=="" & j=="null"){
		return false 
	}
	else{
		return true
	}
}

//Проверка number
suppNumber =pinCertificate.number.toString()
infoNumber =infoCertificate.number.toString()
if (checkParams(suppNumber,infoNumber)){
	assert  suppNumber==infoNumber
	}
else{
	log.info "Параметра number не обнаружено"
}

//Проверка issueDate
suppIssueDate =pinCertificate.issueDate.toString()
infoIssueDate =infoCertificate.issueDate.toString()
if (checkParams(suppIssueDate,infoIssueDate)){
	assert  suppIssueDate==infoIssueDate
	}
else{
	log.info "Параметра issueDate не обнаружено"
}

//Проверка cancelDate
suppCancelDate =pinCertificate.cancelDate.toString()
infoCancelDate =infoCertificate.cancelDate.toString()
if (checkParams(suppCancelDate,infoCancelDate)){
	assert  suppCancelDate==infoCancelDate
	}
else{
	log.info "Параметра cancelDate не обнаружено"
}

//Проверка endDate 
suppEndDate =pinCertificate.endDate.toString()
infoEndDate =infoCertificate.endDate.toString()
if (checkParams(suppEndDate,infoEndDate)){
	assert  suppEndDate==infoEndDate
	}
else{
	log.info "Параметра endDate не обнаружено"
}

//Проверка egiszDate
suppEgiszState = pinCertificate.egiszState.toString()
suppEgiszDate =pinCertificate.egiszDate.toString()
infoEgiszDate =infoCertificate.egiszDate.toString()
if (checkParams(suppEgiszDate,infoEgiszDate) && suppEgiszState=="Registered" ){
	assert  suppEgiszDate==infoEgiszDate
	}
else{
	log.info "Параметра egiszDate не обнаружено"
}

//Проверка moName 
suppMoName =pinCertificate.medicalOrganizationName.toString()
infoMoName =infoCertificate.moName.toString()
if (checkParams(suppMoName,infoMoName)){
	assert  suppMoName==infoMoName
	}
else{
	log.info "Параметра moName не обнаружено"
}

//Проверка contraindications 
suppContraindications  =pinCertificate.contraindications.toString()
infoContraindications =infoCertificate.contraindications.toString()
if (checkParams(suppContraindications,infoContraindications)){
	assert  suppContraindications==infoContraindications
	}
else{
	log.info "Параметра contraindications не обнаружено"
}

//Проверка doctorName 
suppDoctorName  =pinCertificate.doctorName.toString()
infoDoctorName =infoCertificate.doctorName.toString()
if (checkParams(suppDoctorName,infoDoctorName)){
	assert  suppDoctorName==infoDoctorName
	}
else{
	log.info "Параметра doctorName не обнаружено"
}

//Проверка массива categories
// Количество элементов массива
suppCategoriesCount =pinCertificate.categories.category ?  pinCertificate.categories.category.size(): 0
suppCategories =[]
infoCategories =[]
if (suppCategoriesCount>0){
	for (int j=0; j<suppCategoriesCount; j++){
		suppCategories.plus(pinCertificate.categories.category[j].toString())
		infoCategories.plus(infoCertificate.categories[j].toString())
	}
	assert suppCategories.sort() == infoCategories.sort()
}
else{
	log.info "Categories не обнаружено"
}



//Проверка массива resctrictions
// Количество элементов массива
suppRestrictionsCount =pinCertificate.restrictions.restriction ?  pinCertificate.restrictions.restriction.size(): 0
suppRestrictions=[]
infoRestrictions=[]
if (suppRestrictionsCount>0){
	for (int j=0; j<suppRestrictionsCount; j++){
		suppRestrictions.plus(pinCertificate.restrictions.restriction[j].toString())
		infoRestrictions.plus(infoCertificate.restrictions[j].toString())
	}
	assert  suppRestrictions.sort()==infoRestrictions.sort()
}
else{
	log.info "Restrictions не обнаружено"
}

//Проверка массива indications
// Количество элементов массива
suppIndicationsCount =pinCertificate.indications.indication ?  pinCertificate.indications.indication.size(): 0
suppIndications=[]
infoIndications=[]
if (suppIndicationsCount>0){
	for (int j=0; j<suppIndicationsCount; j++){
		suppIndications.plus(pinCertificate.indications.indication[j].toString())
		infoIndications.plus(infoCertificate.indications[j].toString())
	}
	assert  suppIndications.sort()==infoIndications.sort()
}
else{
	log.info "indications не обнаружено"
}

//Проверка disclaimer.state
suppDisclaimerState =pinCertificate.disclaimer.state
if (suppDisclaimerState.text()){
	infoDisclaimerState =infoCertificate.disclaimer.state.toString()
	if (checkParams(suppDisclaimerState,infoDisclaimerState)){
		assert  suppDisclaimerState==infoDisclaimerState
	}
}
else{
	log.info "Параметра DisclaimerState не обнаружено"
}

//Проверка disclaimer.text
suppDisclaimerText =pinCertificate.disclaimer.text
if (suppDisclaimerText.text()){
	infoDisclaimerText =infoCertificate.disclaimer.text.toString()
	if (checkParams(suppDisclaimerText,infoDisclaimerText)){
		assert  suppDisclaimerText==infoDisclaimerText
		}
}
else{
	log.info "Параметра DisclaimerText не обнаружено"
}

//Проверка disclaimer.description
suppDisclaimerDescription =pinCertificate.disclaimer.description
if (suppDisclaimerDescription.text()){
	infoDisclaimerDescription =infoCertificate.disclaimer.description.toString()
	if (checkParams(suppDisclaimerDescription,infoDisclaimerDescription)){
		assert  suppDisclaimerDescription==infoDisclaimerDescription
	}
}
else{
	log.info "Параметра DisclaimerDescription не обнаружено"
}

//Проверка disclaimer.conclusionId
suppDisclaimerConclusionId =pinCertificate.disclaimer.conclusionId
if (suppDisclaimerConclusionId.text()){
	infoDisclaimerConclusionId =infoCertificate.disclaimer.conclusionId.toString()
	if (checkParams(suppDisclaimerConclusionId,infoDisclaimerConclusionId)){
		assert  suppDisclaimerConclusionId==infoDisclaimerConclusionId
	}
}
else{
	log.info "Параметра DisclaimerConclusionId не обнаружено"
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>18661056</con:value></con:property><con:property><con:name>conclusionId</con:name><con:value>2707</con:value></con:property></con:properties></con:testCase><con:testCase id="8d7f675d-689a-489a-b365-d387c242462a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1 Невалидный conclusionId (PIN_CERTIFICATE_ERROR)" searchProperties="true"><con:settings/><con:testStep type="request" name="getPatientConclusionDetail" id="5499d762-9313-45b6-a9c7-aee1ecd2f289"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>pnExternalServiceBinding</con:interface><con:operation>getPatientConclusionDetail</con:operation><con:request name="getPatientConclusionDetail" id="8ba1ca23-9ed7-45d7-aca2-f1dbd409f07e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pinRegestryEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">
   <soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken>
        <wsse:Username>EIM/EIM</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
  </soap:Header>
   <soap:Body>
      <typ:GetPatientConclusionDetailRequest>
         <typ:id>${#TestCase#conclusionId}</typ:id>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
         <!--Optional:-->
         <typ:options>
         </typ:options>
      </typ:GetPatientConclusionDetailRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e740efd6-ab26-459d-9af2-3737588560cf"/><con:assertion type="Not SOAP Fault Assertion" id="0352f23b-7cf4-4a76-8c71-723a832bf77d" name="SOAP Fault"/><con:assertion type="XPath Match" id="69502289-4129-4931-ae75-1816b298fc82" name="XPath Match"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Запись ошибки" id="00339317-8c9a-4214-a4e5-efd62f117176"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Ошибка</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getPatientConclusionDetail</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text[1]</con:sourcePath><con:targetType>error</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="getCertificateInfo" id="f5b00de5-42a2-4c2a-8a58-cc4fa05bd5c0"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/info" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificateInfo" id="39ed8bfe-1d7f-4fbf-9223-76da4ad96594" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/info</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bece687d-33fd-4be1-aa1d-da3f2cf8cd58" name="Valid HTTP Status Code 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="33af0e70-2e09-473d-94ac-5d256f450c04" name="Check code"><con:configuration><path>$.error.code</path><content>PIN_CERTIFICATE_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55baa41a-8fc8-4640-bdef-e4ac9ced36e9" name="Check description"><con:configuration><path>$.error.description</path><content>Не удалось получить данные о справке</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d229d5ea-da9f-4080-af16-af259610a509" name="Check type"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbea9f08-7f94-40d2-a3cf-a512dd1a9048" name="Check error"><con:configuration><path>$.error.origin</path><content>${#TestCase#error}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="conclusionId" value="${#TestCase#conclusionId}"/>
</con:parameters><con:parameterOrder><con:entry>conclusionId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>conclusionId</con:name><con:value>27111</con:value></con:property><con:property><con:name>patientId</con:name><con:value>30000000446108</con:value></con:property><con:property><con:name>error</con:name><con:value>[ERROR] E042:  Не найдено ни одного заключения для указанного пациента.</con:value></con:property></con:properties></con:testCase><con:testCase id="5a299358-1466-4fdc-a430-842ee91045fd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1 Невалидный patientId (PIN_CERTIFICATE_ERROR)" searchProperties="true"><con:settings/><con:testStep type="request" name="getPatientConclusionDetail" id="29112f8b-4768-4de3-8c6c-687288169924"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>pnExternalServiceBinding</con:interface><con:operation>getPatientConclusionDetail</con:operation><con:request name="getPatientConclusionDetail" id="8ba1ca23-9ed7-45d7-aca2-f1dbd409f07e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pinRegestryEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">
   <soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken>
        <wsse:Username>EIM/EIM</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
  </soap:Header>
   <soap:Body>
      <typ:GetPatientConclusionDetailRequest>
         <typ:id>${#TestCase#conclusionId}</typ:id>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
         <!--Optional:-->
         <typ:options>
         </typ:options>
      </typ:GetPatientConclusionDetailRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e740efd6-ab26-459d-9af2-3737588560cf"/><con:assertion type="Not SOAP Fault Assertion" id="0352f23b-7cf4-4a76-8c71-723a832bf77d" name="SOAP Fault"/><con:assertion type="XPath Match" id="69502289-4129-4931-ae75-1816b298fc82" name="XPath Match"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Запись ошибки" id="ecf3719c-bd02-46c1-8d6e-4ba1fbb3fc67"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Ошибка</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getPatientConclusionDetail</con:sourceStep><con:sourcePath>declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text[1]</con:sourcePath><con:targetType>error</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="getCertificateInfo" id="1d6b5b2e-ab74-4d72-bdeb-f506d4b4217e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/info" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificateInfo" id="39ed8bfe-1d7f-4fbf-9223-76da4ad96594" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/info</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bece687d-33fd-4be1-aa1d-da3f2cf8cd58" name="Valid HTTP Status Code 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="33af0e70-2e09-473d-94ac-5d256f450c04" name="Check code"><con:configuration><path>$.error.code</path><content>PIN_CERTIFICATE_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55baa41a-8fc8-4640-bdef-e4ac9ced36e9" name="Check description"><con:configuration><path>$.error.description</path><content>Не удалось получить данные о справке</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d229d5ea-da9f-4080-af16-af259610a509" name="Check type"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbea9f08-7f94-40d2-a3cf-a512dd1a9048" name="Check error"><con:configuration><path>$.error.origin</path><content>${#TestCase#error}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="conclusionId" value="${#TestCase#conclusionId}"/>
</con:parameters><con:parameterOrder><con:entry>conclusionId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>conclusionId</con:name><con:value>2711</con:value></con:property><con:property><con:name>patientId</con:name><con:value>300000004461081</con:value></con:property><con:property><con:name>error</con:name><con:value>[ERROR] E042:  Не найдено ни одного заключения для указанного пациента.</con:value></con:property></con:properties></con:testCase><con:testCase id="c3d11038-3735-4e7a-a3db-493fd4d659cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Не передан обязательный параметр conclusionId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCertificateInfo" id="1ea38b0c-634a-4e4d-b9d1-6a2159e425d1"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/info" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificateInfo" id="39ed8bfe-1d7f-4fbf-9223-76da4ad96594" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/info</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bece687d-33fd-4be1-aa1d-da3f2cf8cd58" name="Valid HTTP Status Code 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2def0dea-bd5a-4419-92b5-17a069517be1" name="Проверка кода"><con:configuration><path>$.error.code</path><content>SERVER_ERROR_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9567abce-3799-433e-ae16-67cbd0a2626c" name="Проверка описания"><con:configuration><path>$.error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0fc96841-8ad3-48a8-858d-9ca9e3479d6c" name="Проверка типа"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f534fb26-ac18-4fff-ac51-92bad28604fd" name="Проверка origin"><con:configuration><path>$.error.origin</path><content>Required request parameter 'conclusionId' for method parameter type Long is not present</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="patientId" value="${#TestCase#patientId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>conclusionId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>conclusionId</con:name><con:value>2711</con:value></con:property><con:property><con:name>patientId</con:name><con:value>300000004461081</con:value></con:property><con:property><con:name>error</con:name><con:value>[ERROR] E042:  Не найдено ни одного заключения для указанного пациента.</con:value></con:property></con:properties></con:testCase><con:testCase id="2efefefc-0e61-4023-928b-25758e30b201" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Не передан обязательный параметр patient_id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getCertificateInfo" id="e9e2eb8c-35f9-435c-afc5-eb90f33b1472"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/info" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificateInfo" id="39ed8bfe-1d7f-4fbf-9223-76da4ad96594" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/info</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bece687d-33fd-4be1-aa1d-da3f2cf8cd58" name="Valid HTTP Status Code 400"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b09909ba-37df-43f5-bb1b-7ab73da3fe24" name="Проверка кода"><con:configuration><path>$.error.code</path><content>SERVER_ERROR_BAD_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9295c085-1675-45e0-a98e-60387671eff3" name="description"><con:configuration><path>$.error.description</path><content>Некорректные входные данные</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ec8d77d-27cf-463a-afc3-e36be8111b99" name="type"><con:configuration><path>$.error.type</path><content>TECHNICAL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="208c5684-4ac0-469e-baa1-10cd12f6b14b" name="origin"><con:configuration><path>$.error.origin</path><content>Required request parameter 'patientId' for method parameter type Long is not present</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="conclusionId" value="${#TestCase#conclusionId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>conclusionId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>conclusionId</con:name><con:value>2711</con:value></con:property><con:property><con:name>patientId</con:name><con:value>300000004461081</con:value></con:property><con:property><con:name>error</con:name><con:value>[ERROR] E042:  Не найдено ни одного заключения для указанного пациента.</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>dbName</con:name><con:value>pindata</con:value></con:property><con:property><con:name>dbHost</con:name><con:value>10.2.172.254:5432</con:value></con:property><con:property><con:name>dbUser</con:name><con:value>pindata</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>pindata</con:value></con:property></con:properties></con:testSuite><con:testSuite id="50700031-19e6-4d9f-8d77-50ef60f57c9f" name="getCertificatesList"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="4c6a4b9c-cefa-48b3-8730-c91de6e6e65a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Маппинг данных" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="LK login" id="9374b014-0759-4dfe-9de2-74e259029494"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK login" id="cb9ad2ba-4d09-47c2-873b-6eef37766e6d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "${#TestCase#user_login}"
}</con:request><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api/user/auth/1/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7dea13c2-f571-4463-990b-3ecd9aa02719" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="X-Environment" value="stage" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>X-Environment</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение attemp-access" id="27f7b885-d797-4136-b2d5-963ced15d05c"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def httpResponseHeaders = context.testCase.testSteps["LK login"].testRequest.response.responseHeaders
testRunner.testCase.setPropertyValue("x-otp", httpResponseHeaders.'x-otp'[0])

ResponseJson = context.expand('${LK login#Response}')
attempt_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("attempt_token", attempt_token.attempt_token)</script></con:config></con:testStep><con:testStep type="restrequest" name="LK confirm login" id="b4a5a024-091f-40cc-908e-96048d67ecff"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK confirm login" id="5e823704-38b6-42a1-bd83-db1cdbabd2eb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "otp_code": "${#TestCase#x-otp}",
  "refresh_token_ttl_seconds": 0,
  "access_token_ttl_seconds": 0,
  "attempt_token": "${#TestCase#attempt_token}"
}</con:request><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4ea421ea-ab49-4068-9ba7-66b79e868769" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение X-Access-JWT" id="75c9c7df-753e-4856-89d2-9be67bdae728"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${LK confirm login#Response}')
access_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("X-Acces-JWT", access_token.access_token)</script></con:config></con:testStep><con:testStep type="request" name="getPatientConclusions" id="bd3669e2-5ba7-4108-8f6e-bc4ea151e074"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>pnExternalServiceBinding</con:interface><con:operation>getPatientConclusions</con:operation><con:request name="getPatientConclusions" id="d2126e10-f50a-4635-aaed-e6417e33bbb1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pinRegestryEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">\r
  <soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
       <wsse:UsernameToken>
          <wsse:Username>EIM/EIM</wsse:Username>
       </wsse:UsernameToken>
    </wsse:Security>
 </soap:Header>
   <soap:Body>
      <typ:GetPatientConclusionsRequest>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
      </typ:GetPatientConclusionsRequest>
</soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e496bb7c-f7a9-4af2-ae45-349d34822157"/><con:assertion type="SOAP Fault Assertion" id="66b182ea-632a-4881-a5e6-424284373d74"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="LK GET medical-certificates" id="103ffe32-32b1-4036-a5f1-d1b102dfbcd2"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/1/documents/medical-certificates" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK GET medical-certificates" id="e46a505b-2ccf-40db-9497-173535f7f0f0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api​/2/documents​/medical-certificates</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3a7934b3-135b-4412-8332-b0d05487d44c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="shortDateFilter" value="all_time"/>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Acces-JWT}"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>shortDateFilter</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCertificatesList" id="b3f86ef4-603e-4eb4-996b-77396bfb822a"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificatesList" id="321d961e-a6f2-48a0-ba90-1c96646105c8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="77099297-336b-4dc0-a536-b9b6dc951df9" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Acces-JWT}"/>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг данных основных параметров" id="76645b70-8cea-465d-8d24-d991bf56c439"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${LK GET medical-certificates#Response}')
certifiactes095uJson = new JsonSlurper().parseText(ResponseJson)

ResponseJson = context.expand('${getCertificatesList#Response}')
certifiactesListJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${getPatientConclusions#Response}')
certificatesPINXml = new XmlSlurper().parseText(ResponseXml)

certificates095u = certifiactes095uJson.certificates095
certificatesList = certifiactesListJson.payload
certificatesPIN = certificatesPINXml.Body.GetPatientConclusionsResponse.result.conclusion
int i = 0;
int j = 0;
for (element in certificatesList){
	if(element.is095u == true){ 
		assert element.documentId ==certificates095u[i].documentId
		assert element.moName == certificates095u[i].muName
		assert element.startDate == certificates095u[i].dateCreated
		i++
	}
	else if(element.is095u == false){
		assert element.conclusionId == certificatesPIN[j].@id.toInteger()
		assert element.startDate == certificatesPIN[j].issueDate.toString()
		
		if(certificatesPIN[j].medicalOrganizationName.toString() == "")
			element.moName == null
		else
			assert element.moName == certificatesPIN[j].medicalOrganizationName.toString()
		j++
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Маппинг параметра type" id="89dd0b17-e017-409b-9c4a-cee2b56f671b"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${LK GET medical-certificates#Response}')
certifiactes095uJson = new JsonSlurper().parseText(ResponseJson)

ResponseJson = context.expand('${getCertificatesList#Response}')
certifiactesListJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${getPatientConclusions#Response}')
certificatesPINXml = new XmlSlurper().parseText(ResponseXml)

certificates095u = certifiactes095uJson.certificates
certificatesList = certifiactesListJson.payload
certificatesPIN = certificatesPINXml.Body.GetPatientConclusionsResponse.result.conclusion

int j=0
for (element in certificatesList){
	if(element.is095u == true){ 
		assert element.type == "О болезни ребенка"
	}
	else if(element.is095u == false){
		switch(certificatesPIN[j].type.@code.toString()){
			case "weapon":
				assert element.type == "Для разрешения на оружие"
				break
			case "toxicological":
				assert element.type == "Об отсутствии наркотических и психотропных веществ"
				break
			case "transport":
				assert element.type == "Для получения или замены водительского удостоверения"
				break
			case "contraindications":
				assert element.type == "О выявлении противопоказаний к владению оружием"
				break
		}
		j++
	}
	
}

log.info "end"</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка сортировки по startDate по убыванию" id="7d95a673-f4fd-4048-8e24-4323237f0b19"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${getCertificatesList#Response}')
certifiactesListJson = new JsonSlurper().parseText(ResponseJson)

certificatesList = certifiactesListJson.payload

for(int i = 0; i &lt; certificatesList.size()-1;i++ ){
	firstStartDate = Date.parse('yyyy-MM-dd', certificatesList.startDate[i])
	secondStartDate = Date.parse('yyyy-MM-dd', certificatesList.startDate[i+1])
	assert firstStartDate >= secondStartDate
}

log.info "end"</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>10618049</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>a8e28731-aceb-4719-99a9-951cfbc7ddf3</con:value></con:property><con:property><con:name>X-Acces-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NzA2NzgyNDEsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJlYTI0NDllOC05YmI1LTQwZTQtYTI1YS01ZTMxM2I1ZDNiNWIiLCJzaWQiOiIzYmE0YjQ3OS1hZTAwLTQxY2ItOGNkYy0yYTVmODBiNjlkNjYiLCJwaG9uZSI6Ijc5MDk3NzUzMzkzIiwic3NvX2lkIjoiRkVzU0VyR0FRYU1YdzNkN1VvVjcxeWo1dVNJVmFidUFoRVZsSW9UTU1DK1p2U08rRHdyR2JnRlFDMkY3NWljTFR3czNIR2Uza0owMFJ4WkZzaEhicmpxdGJDa1NnTEw2OFZ5SzdiZ3Y4YU5SYVlmbWxHckQ5RGF6RkN3VjJxVmpQcEpkTFpObnNLc1M2TGZyTjlsYTlyMEtRZy9kdm9oQzFhVFFsMEtTMUYzMDRia0NJV3YzdlZoSnRlVGlRUWtGeDJyR1E0SjhxSXlJaSsrNVRaOTI2bjNZZlNqcml1TXg5US8xZ0JDT28vWExFZzUwcXAxbERWK3gvT2o1dnBaWUM4dUhta3hiOW12WXducG1URWZHVzJXWnQyT3NBdnp6ZGRBelZKY2xvUnNnYnBIT2Z4OWxscThXd0EzbUlIWmFNSkVSK2JQZk12YzBQd0F1SExRZ2xBPT0iLCJlbWFpbCI6ImF6YXBvdjkzQHlhbmRleC5ydSIsImZpcnN0X25hbWUiOiJcdTA0MTJcdTA0MzBcdTA0NDFcdTA0MzhcdTA0M2JcdTA0MzhcdTA0NDFcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQyNy4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzMFx1MDQ0MFx1MDQ0Mlx1MDQzOFx1MDQzZFx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIxOTc0LTEwLTI5In0.LUA0fWH1rWmreuk0-IOHHEre6-Eq0OwaW3kU4utXTIJIQojCUFcPPZ9CIIZ30UoYAThN-yratXlGGQcTWuEgIEjvWme2kL3qGB1y1HYSrr33lcLxr30TrlHKesVmY_o_w9r1_bJqer8HSPDfNeIcIKv81VCBcvTi8aaSJ3ko9uBxGBhsGZun5-ePdE5z9MS7ikzY3Skh3bDUP6NDeRrFZyfHGG0ZnEP1sa3ngjvnd5QeGK9KGRyv9erWmMWLGemuX8hHbb1zDj3zSZzkzo4Zb98LV7K-Y8xwb1ZBlZZrDWFGmApyi-gHkIKngTxer8Hkmbn4o8WdyljZU2TPiz_MyhCA0biZm9ku0IDUWeU8z2O-NWbdFvhQZ9ctY8Yl3WEVWxcEvQ0qQYWex7XZUyi_6_rvEcrbLuD4J01p-URC0VPqZqvdagEAF0kXQQqJv67RvX0fZfrcsgGgGa7oSqqZQt_KeOX_-owHmtvmMHLepRePWif3Qh1v7ekfp6oGExjEWqdxXd8vhakfPsyUjhIJxUAg4O0f7OOg-VxSUowCOGVtozw12pld-ijdzFnP0G8UKjCQ8kDqBkWguSOKBFw3YznzwsHZWGyBf_tyxfdg4dkNiFtMbIq_MTUQFyDdas6qMu5daajUssY7KAojk5YZBt3jTelEy-AhbYJ4kXYdL-U</con:value></con:property><con:property><con:name>user_login</con:name><con:value>azapov93@yandex.ru</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6ImE0YTNlMmVkLTBlYzYtNDM5Ny05NDg3LWRlNDQ0ZjJhYWFmYyIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY3MDU5NTQ0MCwic3ViIjoiZWEyNDQ5ZTgtOWJiNS00MGU0LWEyNWEtNWUzMTNiNWQzYjViIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiU0ZxbFB4bGY3K0l6bllPVlEwSFZrcUNUOGR3WVpLN0kwUDZNM21oR3JrYUZ4VHVjNzdoblU1K3NiMVI0ekNXUy9aMmVmVnR0SmlqcE1wYk5jNEdTYzN0VXI5VkVSMmx3T053YTFiSDZlaDVFNndHOUhkSEhlVkV2Um12QTl3ZGhXcVhVV21GSW85SGpMRzVqcWRZa08rR3BLakhIakQzYWtNaE5YMC9oV0ZheXdnQW1OSFp3Szg1YVREakNlcFJqQjAyQnhtRDFTZllUSDVQa3VzMTZLamg2SkVTTjdrdVVOUm9MN2JISGF1VUZGNnVsNGZ1c2FqcllGdk4vSS9zOXFUUk9TRFRzVFJtNC8zZWlocEU2VHNVUEtkOGxRejlvdWtIVUZZQzBRRGlwQmpYZ2dwbnZ6bXcyNHVrNDJBT1hLbE9FbFI4RWFXN2N2S3JkQm0wZ2lBPT0ifQ.sy6vremsS_Lot7O4z3vFMBrwa-EXWWv6cwWcaADe7Swkt6jkmBCKAiNOY0f7r9aqODZkjJO0XNeOEk3JFj_O00LCbFp5_Iou6do_6qUOcODnlabBn2jOvSS7f2GVJzUcOR0AHXJUvyIGIhpIDP0EQKzB6JNPo1y_0QimiXmNOPT330I0mTmkb2PqVpzcejuVqiGEw9v2ZQZt85MMc_AcubMJPVKqbo00pOVD8Cvc1yHGyyMpMsb0kIxdSxJun0nkf8cnMDlZWMayDNGq34FBvNKIXF2GQ79xjTYQM4L3aClSik2-eXfS25SWzqUMsii9wrZISADw6bBoZghWQhrejaunnLCRrQQuMghOtc9RSOJSSYcBt2ly6uHBDNi98k6MhGRsqPntfEkM79UFKiCf508Uiby5MzeLEPJn_U_ZzF5dIAsQUMrYejQIO9tE5GjG0ZStnCv3DxV1sKmPRMpWtWIfTgzdDEY3NTljSqNQ2ChQgyvc0jLHgid9Wlly_biwn_ymIBBBDsBwSreXRJo4RAgA8arsVsbns1vWIP_8dD1iRBV1rlDRaGyJUD3dO81FAhMyZTDPjzeGjMVhDU2LOOtiT1W1EhZaFKZ32a6y16bzPAcL3gPgpzbWTKpN_A5ijXT0wXFn9NBfG5ZSFl1tVCQ5xriXW0rwpUaJZXu7nTw</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>19674</con:value></con:property></con:properties></con:testCase><con:testCase id="52a41b37-575f-463f-b4d4-01007b1a6820" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получен пустой ответ от обоих методов" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="LK login" id="f3d0ab8b-b4b3-40fd-898c-0e6a46c2d6ed"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK login" id="cb9ad2ba-4d09-47c2-873b-6eef37766e6d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "${#TestCase#user_login}"
}</con:request><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api/user/auth/1/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7dea13c2-f571-4463-990b-3ecd9aa02719" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="X-Environment" value="stage" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>X-Environment</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение attemp-access" id="c29df337-f2a8-4285-8206-b8da4015e139"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def httpResponseHeaders = context.testCase.testSteps["LK login"].testRequest.response.responseHeaders
testRunner.testCase.setPropertyValue("x-otp", httpResponseHeaders.'x-otp'[0])

ResponseJson = context.expand('${LK login#Response}')
attempt_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("attempt_token", attempt_token.attempt_token)</script></con:config></con:testStep><con:testStep type="restrequest" name="LK confirm login" id="4416400a-39f0-4da0-9ad6-e0102ba2b3f7"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK confirm login" id="5e823704-38b6-42a1-bd83-db1cdbabd2eb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "otp_code": "${#TestCase#x-otp}",
  "refresh_token_ttl_seconds": 0,
  "access_token_ttl_seconds": 0,
  "attempt_token": "${#TestCase#attempt_token}"
}</con:request><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4ea421ea-ab49-4068-9ba7-66b79e868769" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение X-Access-JWT" id="5323be07-33c7-4086-b59e-f6337c9104d0"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${LK confirm login#Response}')
access_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("X-Acces-JWT", access_token.access_token)</script></con:config></con:testStep><con:testStep type="request" name="getPatientConclusions" id="1b6285ea-6461-407d-9a6c-491d1bfc360f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>pnExternalServiceBinding</con:interface><con:operation>getPatientConclusions</con:operation><con:request name="getPatientConclusions" id="d2126e10-f50a-4635-aaed-e6417e33bbb1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pinRegestryEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">\r
  <soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
       <wsse:UsernameToken>
          <wsse:Username>EIM/EIM</wsse:Username>
       </wsse:UsernameToken>
    </wsse:Security>
 </soap:Header>
   <soap:Body>
      <typ:GetPatientConclusionsRequest>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
      </typ:GetPatientConclusionsRequest>
</soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e496bb7c-f7a9-4af2-ae45-349d34822157"/><con:assertion type="Not SOAP Fault Assertion" id="656d10d1-d606-42ec-8139-8a4214101cab" name="SOAP Fault"/><con:assertion type="XPath Match" id="b2c4fda9-536e-4466-9127-4c168dd21175" name="XPath Match"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
/soap:Envelope/soap:Body/soap:Fault/soap:Detail/ns2:fault/ns2:messages/ns2:message</path><content><![CDATA[<ns2:message type="ERROR" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns2="http://emias.mos.ru/system/v1/faults/" xmlns="http://emias.mos.ru/system/v1/userContext/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <ns2:code>E042</ns2:code>
  <ns2:message>Не найдено ни одного заключения для указанного пациента.</ns2:message>
</ns2:message>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="LK GET medical-certificates" id="c144f0c3-c114-4f1a-9e06-10ce5ca6284f"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/1/documents/medical-certificates" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK GET medical-certificates" id="e46a505b-2ccf-40db-9497-173535f7f0f0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api​/2/documents​/medical-certificates</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3a7934b3-135b-4412-8332-b0d05487d44c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bcbdca96-e10d-4ae2-9453-6033c6ad0af3" name="JsonPath Match"><con:configuration><path>certificates095</path><content>[]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="shortDateFilter" value="all_time"/>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Acces-JWT}"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>shortDateFilter</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCertificatesList" id="06e04508-f2c3-4752-9f3e-5d07405725b5"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificatesList" id="321d961e-a6f2-48a0-ba90-1c96646105c8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="77099297-336b-4dc0-a536-b9b6dc951df9" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7956fc53-edb5-48cb-8693-1f6e2fa36e25" name="Проверка пустоты payload"><con:configuration><path>payload</path><content>[]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e64836d4-2517-43b7-95ce-38992ae5cd26" name="Проверка полученной ошибки"><con:configuration><path>error</path><content>{"code":"CERTIFICATE_ERROR","description":"Ошибка получения данных о справках и заключениях","type":"BUSINESS","origin":"[ERROR] E042:  Не найдено ни одного заключения для указанного пациента."}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Acces-JWT}"/>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>25377212</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>0094e754-9133-44fd-811a-d4555a2797b7</con:value></con:property><con:property><con:name>X-Acces-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NzA2NzgyNDcsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJlYTI0NDllOC05YmI1LTQwZTQtYTI1YS01ZTMxM2I1ZDNiNWIiLCJzaWQiOiJlOTIzOTQ0NC02YzQyLTRjYzUtOGUyYy01OGRhNDViNjczMDgiLCJwaG9uZSI6Ijc5MDk3NzUzMzkzIiwic3NvX2lkIjoiU2pVOEZxSFE4RHdUVmVaeHBlbmZQM3ZSVzZ1MVZPWEZQYWd2c3ZmZzdBZmRETWpVcW45VDByMlYrR1YrakZReGFVN2hGeXhBVlFibkw5eTlQYzI1RXFrRE9VT0l6ZThzSURHWVZ5ekJwVXpTcWkybUVUUkFHZklRUjNzckFJTXZhWUVUV0JXaVRjR0lhdERzOGhQVlUrb3FBOEMyOFNTejE1RGpuOFhjUmg4R1lEVDdnczlINThYeXFSSkZaSWFTQ1VaZEFVaUppV1dBcjNhdlVFdDI4dDZXeXFWZUZOT3RxeFZHTi9qTjc0WDlyUFIrQjNvY1FtRDhHMU9hK2lEN05EWCtndlBSL1RSYlZvcTFnWXFhY2xuQ1IyZEtMclg3NTNXTTN5aGFRVjBia1EvM2lyNEN0d1FDRzFhMmV1bWVBbVBza08zTXp4Q3VNL3VwN3I1T2hRPT0iLCJlbWFpbCI6ImF6YXBvdjkzQHlhbmRleC5ydSIsImZpcnN0X25hbWUiOiJcdTA0MTJcdTA0MzBcdTA0NDFcdTA0MzhcdTA0M2JcdTA0MzhcdTA0NDFcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQyNy4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzMFx1MDQ0MFx1MDQ0Mlx1MDQzOFx1MDQzZFx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIxOTc0LTEwLTI5In0.VIjJ8UTnCB5lpoCdHXZYGmRg11R_zoQeK3OEJ4nW3gaXCZP79Q-ipbvhXr9vnfhO6V9VqxxhVRUj8MfNxp5STTmmWEZmSR7soz9YfKLhrztlPmOSGBbSWpq2lQVbGER4TJKO3tLr5uJgd9tpRVpsxvDtvOACVQaHjwrhPsIHcS44871q3IkYf-kTYpXmvDvCJJ8J-R5u6rRKp6cyXbdXUkBaxwDqTi259upbHhkWDUxFb4CySVDxr6qwaThgC0Yw8vFBllsAuN4WW7Pudh7SalA7s2NMwwSlr1HbF1XK2J0jpz6H_SuSGvEgqo0gN2Tt8tKBXK3ZRWdmydvJRyZ7C-vsarIMoKY6h8IZKMC4XjxyBglH6PRu65yJ_LeXOKOFXWnvz1Z7bDi9Cw-rN-lsdPaJCprOQeU0ZyDBG959xLo28jyykidw39Ei6oTp9Oe0tm96-7YTuzgQaPRFd5ZdeO9yPcmmN6iXPLSGyMV7XfpoPEp1R7EwJ-hR1MfrnhnaWpFT9wPs5lowchDOLSoDCO8FoSHUSqrvIRbHwN-8py_yrWt5xGM88juW5ZoYsw2PA7SvA9QMd2854Y76eQbphD7NjPzBrqSrRmZUbb23wLzi_I5ho4mYGaf1vcn3g6w3tKDMy2ecJZ6BrUBGczzDjCRQT6160GMJIjEVVMNXlN0</con:value></con:property><con:property><con:name>user_login</con:name><con:value>azapov93@yandex.ru</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6IjhmMGMyYzRiLWQzMzktNDNmNC1iMzU5LTAxMzAwYWNhZjk2YyIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY3MDU5NTQ0Niwic3ViIjoiZWEyNDQ5ZTgtOWJiNS00MGU0LWEyNWEtNWUzMTNiNWQzYjViIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoieGQrQ0xucUp5Q3h4L0FNQ3dFN1pwcVlyYXFVYUxSN3g2a3pQKytTQ3h6d05CTXRic2J6RThJYkswV21GWHV2dmtlc2doVFlpVzV5TndTd1FDMGM2S29wbExqTzFzWEJRbjliVFRkZHZpdDByWFBRZW9qK1BTYk9lMmhrd0xMcTZDZFB4a05HQjlTRGhMOTBkL0JBZmRxbVR5N2xiYTFZekt5SHhBbFBSV0xpSnY2bHRFejljUUk5bWswSmhVM1RIbE94RzM5cjBEQXlKWWtER3R3MUhRR3ZxdmxEbXQ4UkhBUDJjOFNxTkNZMWo3Ry9KWlkxbGIrblBNeTRSZy9nTFAzeHIza1JPNC9pUCtHQmFTdVNnem9vR1NQcktoSVVSdmh4ZFJqUGxwNDhOeWVJQUw1d0diQXNPMFpDRm1ucDdndGFKMzd4RUhQRlZZbm9WQkl5MGd3PT0ifQ.j392Zq8aRFrBnXwVa9lymJvzXrFsUrSIoqDG2BtfEen02xmvdEZN0VmFAx-FWmzd2ks_NxSQGXe2bgZTcP9UydK88dpmJMvkRZUid6MJvAzzjtI7lXIz-usiN9P5-WUEEX7uxTmvzZX1iK89tW1JwzwMMDN7sbp0U3BHxI6v2Ia35ry_5ZGHbd3ZJDkVeX8MMQ1JmnsghcHGfAg08MvTTKu-KmdR1MWGvYtgbs64l3DhKYYcHpfINEjhz69Qyh2e4laWVUeAApn9YEQCHDE3uAn63FwObJdUv1ChtCNurPcuL4DEktyAQUC3AZ3VwppJ3SAP8ukNOvpeDBIEdy5Fy51aToVofEdN4eSqQnNjNBJ8DxXDw3iWnqexfcc5bqzzjdp1_7eInTe5INWpwh_jEAsZr9WBPhf46QK0UHsnLvxCkVz6ixYSVl9vHfqZIoMKyOJH5a9pqw_zZZaPhZNVZa1FNLkNQwnjvE_6yBZzEB-xk0ds3CVYdipT5DVDogd49Z_ZkR_qW5MwVfmzv4CQIdCNopvXT3nyOcmyiMQTsqK5-urdLIZytVWrsNKXv8B5ce9_xrset2ouFjXE738qwailz2MmwBhJODkwX8BNlX268eMaCC9TzYZHGu5H6ktdNwBfLOwbjQK3wcCAtzRzfB9BsoeWzllXnvUhxBeRyfc</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>19674</con:value></con:property></con:properties></con:testCase><con:testCase id="3b9b829a-43c1-41a3-9af9-449e5016788f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получен пустой ответ от medical-certifiacates" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="LK login" id="873bf729-274f-4ed5-80e2-48a6823c5908"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK login" id="cb9ad2ba-4d09-47c2-873b-6eef37766e6d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "${#TestCase#user_login}"
}</con:request><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api/user/auth/1/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7dea13c2-f571-4463-990b-3ecd9aa02719" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="X-Environment" value="stage" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>X-Environment</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение attemp-access" id="632e07d8-e944-4832-8242-fcd4670c3e8b"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def httpResponseHeaders = context.testCase.testSteps["LK login"].testRequest.response.responseHeaders
testRunner.testCase.setPropertyValue("x-otp", httpResponseHeaders.'x-otp'[0])

ResponseJson = context.expand('${LK login#Response}')
attempt_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("attempt_token", attempt_token.attempt_token)</script></con:config></con:testStep><con:testStep type="restrequest" name="LK confirm login" id="9c50a8a1-b3cd-4fb7-ab26-532c9bf91977"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK confirm login" id="5e823704-38b6-42a1-bd83-db1cdbabd2eb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "otp_code": "${#TestCase#x-otp}",
  "refresh_token_ttl_seconds": 0,
  "access_token_ttl_seconds": 0,
  "attempt_token": "${#TestCase#attempt_token}"
}</con:request><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4ea421ea-ab49-4068-9ba7-66b79e868769" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение X-Access-JWT" id="e2cad4cb-cf8d-4627-9a83-08c4f6ad95e3"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${LK confirm login#Response}')
access_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("X-Acces-JWT", access_token.access_token)</script></con:config></con:testStep><con:testStep type="request" name="getPatientConclusions" id="143e91f6-3f66-4384-ada7-88dc3fbc7654"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>pnExternalServiceBinding</con:interface><con:operation>getPatientConclusions</con:operation><con:request name="getPatientConclusions" id="d2126e10-f50a-4635-aaed-e6417e33bbb1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pinRegestryEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">\r
  <soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
       <wsse:UsernameToken>
          <wsse:Username>EIM/EIM</wsse:Username>
       </wsse:UsernameToken>
    </wsse:Security>
 </soap:Header>
   <soap:Body>
      <typ:GetPatientConclusionsRequest>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
      </typ:GetPatientConclusionsRequest>
</soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e496bb7c-f7a9-4af2-ae45-349d34822157"/><con:assertion type="SOAP Fault Assertion" id="66b182ea-632a-4881-a5e6-424284373d74"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="LK GET medical-certificates" id="7c0066e8-685b-47c4-8f00-e98bec90e1cc"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/1/documents/medical-certificates" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK GET medical-certificates" id="e46a505b-2ccf-40db-9497-173535f7f0f0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api​/2/documents​/medical-certificates</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3a7934b3-135b-4412-8332-b0d05487d44c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c0dbee7-60f3-43d8-8f9e-db13ae204767" name="JsonPath Match"><con:configuration><path>certificates095</path><content>[]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="shortDateFilter" value="all_time"/>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Acces-JWT}"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>shortDateFilter</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCertificatesList" id="958f6381-bd44-49d8-8172-6b7d235f9a50"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificatesList" id="321d961e-a6f2-48a0-ba90-1c96646105c8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="77099297-336b-4dc0-a536-b9b6dc951df9" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39a795cd-e76c-46d9-becd-b625cf4ae7c6" name="JsonPath Match"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Acces-JWT}"/>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг данных основных параметров" id="9310f575-7a36-4ef6-a710-49695874d98a"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${LK GET medical-certificates#Response}')
certifiactes095uJson = new JsonSlurper().parseText(ResponseJson)

ResponseJson = context.expand('${getCertificatesList#Response}')
certifiactesListJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${getPatientConclusions#Response}')
certificatesPINXml = new XmlSlurper().parseText(ResponseXml)

certificates095u = certifiactes095uJson.certificates095
certificatesList = certifiactesListJson.payload
certificatesPIN = certificatesPINXml.Body.GetPatientConclusionsResponse.result.conclusion
int i = 0;
int j = 0;
for (element in certificatesList){
	if(element.is095u == true){ 
		assert element.documentId ==certificates095u[i].documentId
		assert element.moName == certificates095u[i].muName
		assert element.startDate == certificates095u[i].dateCreated
		i++
	}
	else if(element.is095u == false){
		assert element.conclusionId == certificatesPIN[j].@id.toInteger()
		assert element.startDate == certificatesPIN[j].issueDate.toString()
		
		if(certificatesPIN[j].medicalOrganizationName.toString() == "")
			element.moName == null
		else
			assert element.moName == certificatesPIN[j].medicalOrganizationName.toString()
		j++
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Маппинг параметра type" id="169d741f-1c43-420a-a8c1-353ce9c674c7"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${LK GET medical-certificates#Response}')
certifiactes095uJson = new JsonSlurper().parseText(ResponseJson)

ResponseJson = context.expand('${getCertificatesList#Response}')
certifiactesListJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${getPatientConclusions#Response}')
certificatesPINXml = new XmlSlurper().parseText(ResponseXml)

certificates095u = certifiactes095uJson.certificates
certificatesList = certifiactesListJson.payload
certificatesPIN = certificatesPINXml.Body.GetPatientConclusionsResponse.result.conclusion

int j=0
for (element in certificatesList){
	if(element.is095u == true){ 
		assert element.type == "О болезни ребенка"
	}
	else if(element.is095u == false){
		switch(certificatesPIN[j].type.@code.toString()){
			case "weapon":
				assert element.type == "Для разрешения на оружие"
				break
			case "toxicological":
				assert element.type == "Об отсутствии наркотических и психотропных веществ"
				break
			case "transport":
				assert element.type == "Для получения или замены водительского удостоверения"
				break
			case "contraindications":
				assert element.type == "О выявлении противопоказаний к владению оружием"
				break
		}
		j++
	}
	
}

log.info "end"</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка сортировки по startDate по убыванию" id="071e0a6a-1c58-4e7f-917c-16a2ddae0bc1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${getCertificatesList#Response}')
certifiactesListJson = new JsonSlurper().parseText(ResponseJson)

certificatesList = certifiactesListJson.payload

for(int i = 0; i &lt; certificatesList.size()-1;i++ ){
	firstStartDate = Date.parse('yyyy-MM-dd', certificatesList.startDate[i])
	secondStartDate = Date.parse('yyyy-MM-dd', certificatesList.startDate[i+1])
	assert firstStartDate >= secondStartDate
}

log.info "end"</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>10618049</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>0094e754-9133-44fd-811a-d4555a2797b7</con:value></con:property><con:property><con:name>X-Acces-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NzA2NzgyNDksImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJlYTI0NDllOC05YmI1LTQwZTQtYTI1YS01ZTMxM2I1ZDNiNWIiLCJzaWQiOiI3YTgzMjY5Yy1lNzEzLTQyZTgtODY0Zi0xNTJhMDY3YzhlZGQiLCJwaG9uZSI6Ijc5MDk3NzUzMzkzIiwic3NvX2lkIjoiRXNqVGczWHA5WE1YWnhETmlZUlo3YWRoWnZzZ0RvRHlVZWprMjYrWGdqbjcxMWhNVVUwSzB5SDkzY1dVK1B3aWlrT3VCNjNVU0R3dzF2a0c4K05jS3lPNUt2Z2tsbUZGSmNxWnhGV1hjbXh4aFA2a1lxanVTbTRuckcyTHZKQVJqa0FaKzBqTjYvOHhHcEFKT0M2a2tqZ28xSHAxMExpZzc2UGh4RnFVZmg0S25YejNuQkpLanVKL2FiVnNHS3JMTmRUUmdOanBXRWlWaFQyMWhNYk9PSXFtajhKZGFrajRJQmQ5Yjc1b2pDTEhhY1BhY0x0eC9UaVd0Q25iZDVWWXVZSDZ1djE5YjQ5MFdJUjdWMGNhbGxqUW4xbDNFcFlHZktNWndMalZORkV6aG5SY3hQTGp1ZEVQL1VhWnFKWFlGLy9XalBCdGlMOUtBMkYzRXlMWklnPT0iLCJlbWFpbCI6ImF6YXBvdjkzQHlhbmRleC5ydSIsImZpcnN0X25hbWUiOiJcdTA0MTJcdTA0MzBcdTA0NDFcdTA0MzhcdTA0M2JcdTA0MzhcdTA0NDFcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQyNy4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzMFx1MDQ0MFx1MDQ0Mlx1MDQzOFx1MDQzZFx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIxOTc0LTEwLTI5In0.ebAgmRkewqtB0sNM_qJVMtX7iCimxBBZ3S-JrtQ3YRDiGbjFcHnK0IzfF5sJUqL-U0mmT0L1tlGq6jk16WIDRs4VeaDtLWS8KjKfNox9wIT0IuzAqgPjVBTmnsyMnNwWDefQ-RnrZ2dLSKeGR-4BEE1I-nK9pziFo6MG4zEZ3Qp5iyENUMKXgcSwCwaxrIe_zuoyGuyUM920cIUOzwEYnkFMStfNBDOpmvchJ2Rtq2eLhoSPWV0gliFlxpe6n_EzNUy3iNPfdFrR4fg0pX8lb67W50pp8c07KjQcYdUW_HC4d8T5ZGePWnQL3KLjZnSGKGFxJhUOIpqtQbEnS_e2KNCxmReI034m1eJqhg_JNpTnpH6leKAtrTpxLbFcGKkxChYs84z4HWGkdBcjKnxO3luUKVRMzdUk3_8hDYdXXWcZpv3I5cwDiOOrUDDs0PsfSOK5hU_fHKYexVv3Y0bi0WoIcDF1Q_8TJVN6OmOaFR8ogrJ8WYbfD3o4dHiLSrcgt0QoSxw3OH77moRqt6Fm7k8Ns3KvpH3q2l9F0cFzhakCejfV6Y9xlSGsQ1-fJ_RHlE6J8rvp0ZPKAu1OSB206h-jgDBMaOBD0Xmf3bvx8wzgPK_LNbJkjM0KZn7s8xxjBJ_S7Xyv-E6U15egRyqQfIm2qUMqSU-5f6DvC9WEWEY</con:value></con:property><con:property><con:name>user_login</con:name><con:value>azapov93@yandex.ru</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6Ijk5MzZkNTA3LWY2NTAtNDJmZS1iNzE3LWQ2ODQ5NmZkYzY4MSIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY3MDU5NTQ0OCwic3ViIjoiZWEyNDQ5ZTgtOWJiNS00MGU0LWEyNWEtNWUzMTNiNWQzYjViIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiZk1URjJiVm9OSmxXR0pYRGtqU0p5Y25LRDFIZ0M3R1ZEeFR6OHJjUTZFUDMxYmZhWWJoaU1QZzd3WGc4dTFwd0E1VzlOeWRzNHFJYTJlMTZzVk1lMDBycm40WWlJRElDMmMyaE1sZytwZFNIMjdPVHQwZ1hZVEFTSTNRUFlPRlEwSHQ5bWxIT2NQcS9TdFMvMDBUYlZzeXcvOHJ3NHFxdEFOdlpRajRqZ0lxY2lCci92YUo5bHdMeEhVdFZIeXFuVlU1SDRJZmh1OTkwakxYMmZjM2k0bmdheGxTeklpYlNITWdkQjIxcjNrbys3eXBWWW9rSVpUMDZKTDdsK3ZLZWphR0FrU3pHSko0OWh1K1NpcjgvamMyM08vR09EUm5EWWZuaHJkQlF5WUJPK1UrRUpFczQzNUxJdklvMUtjODI4dS9lK1A1YWdoYklXd0FuekZKSHFRPT0ifQ.SbRHEy20wX06-s8OAg7XbjgrfX-dP3GiMbnfXbLKzsgTLdb4C1T99kXeMYsuBmnlDqDX2_rmJeCFKeffzkwQxLK_GtbY25rX2DHALtW8hruak75PSGvQgsTQJHhNEj1mRKPduQT9QhG4eKrQuuqPppIv3-T5LJbJ3yJ9WMAU_Qq5lCMfLdbjPNAp6EumB0AsZD-WSR5T9Ymtrgrl97cpFJyyeQ0cRamhubeATyXDUGUN-QYoDNa75dJkr5SDAM-nSlQprG2WFHN9mLyA36kMDmOL8-UMVDpglglENSqJvB9LdamQ43CzHwLrxAiZpXBg9dOmay7xhkr9CDEHiRytofq9eZ6huXXDEDFNJPkGNkc3Fn7pi6T6F99UUbM1E7JczeFqT2MbJxznhqFe7mQJt3gP5Whx6wj5mye852NaG-IanZDRwaWNaXU4aXCiV9GJD5N_u3KM4jvJ5NyyXRGvgKx7AzMfBUvlI5XP1EP1nuR18JRdZw_axjwE6VUZq7FvgMXrf7I-woXUTbyyyNdSXNxyc_fTRvf3DGIfcv1RZYC8bTty63SXqxV4L5y5Ny6PXPddHMmXyapGBhLK7hXnoeI7hxEUt6yY4TbkVHZFNwmLsTQXtYQVyEODrNCg5h29YjtcuRiNeGB0eRZWzhkTk9eqnWXQm03ZawDKmjqkuY0</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>19674</con:value></con:property></con:properties></con:testCase><con:testCase id="6a9d1da4-9fa0-4188-8297-9c963ce45a30" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получена ошибка от getPatientConclusions" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="LK login" id="397d1dc4-d29b-4a5d-876d-c389e8840ae5"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/auth/1/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK login" id="cb9ad2ba-4d09-47c2-873b-6eef37766e6d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "code": "${#TestCase#user_login}"
}</con:request><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api/user/auth/1/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7dea13c2-f571-4463-990b-3ecd9aa02719" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="X-Environment" value="stage" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>X-Environment</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение attemp-access" id="b574a8b8-1d4f-434f-b886-a4d92bc6cccd"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def httpResponseHeaders = context.testCase.testSteps["LK login"].testRequest.response.responseHeaders
testRunner.testCase.setPropertyValue("x-otp", httpResponseHeaders.'x-otp'[0])

ResponseJson = context.expand('${LK login#Response}')
attempt_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("attempt_token", attempt_token.attempt_token)</script></con:config></con:testStep><con:testStep type="restrequest" name="LK confirm login" id="6c4d074e-a941-4066-8328-48eaba8179a0"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/auth/1/confirm" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK confirm login" id="5e823704-38b6-42a1-bd83-db1cdbabd2eb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request>{
  "otp_code": "${#TestCase#x-otp}",
  "refresh_token_ttl_seconds": 0,
  "access_token_ttl_seconds": 0,
  "attempt_token": "${#TestCase#attempt_token}"
}</con:request><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api/auth/1/confirm</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4ea421ea-ab49-4068-9ba7-66b79e868769" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Получение X-Access-JWT" id="d6c1faec-8b3b-4ff6-9161-0fbc4bb32523"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${LK confirm login#Response}')
access_token = new JsonSlurper().parseText(ResponseJson)

testRunner.testCase.setPropertyValue("X-Acces-JWT", access_token.access_token)</script></con:config></con:testStep><con:testStep type="request" name="getPatientConclusions" id="a3036588-46ea-41e0-8c4a-18263d129f80"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>pnExternalServiceBinding</con:interface><con:operation>getPatientConclusions</con:operation><con:request name="getPatientConclusions" id="d2126e10-f50a-4635-aaed-e6417e33bbb1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pinRegestryEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">\r
  <soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
       <wsse:UsernameToken>
          <wsse:Username>EIM/EIM</wsse:Username>
       </wsse:UsernameToken>
    </wsse:Security>
 </soap:Header>
   <soap:Body>
      <typ:GetPatientConclusionsRequest>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
      </typ:GetPatientConclusionsRequest>
</soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e496bb7c-f7a9-4af2-ae45-349d34822157"/><con:assertion type="Not SOAP Fault Assertion" id="4b89bbc4-e972-41d9-9d3c-fe37cda0a4a8" name="SOAP Fault"/><con:assertion type="XPath Match" id="c1182353-7e49-47e0-9e97-554a23e4b2ea" name="XPath Match"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
/soap:Envelope/soap:Body/soap:Fault/soap:Detail/ns2:fault/ns2:messages/ns2:message</path><content><![CDATA[<ns2:message type="ERROR" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns2="http://emias.mos.ru/system/v1/faults/" xmlns="http://emias.mos.ru/system/v1/userContext/" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
  <ns2:code>E042</ns2:code>
  <ns2:message>Не найдено ни одного заключения для указанного пациента.</ns2:message>
</ns2:message>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="LK GET medical-certificates" id="1d144e62-f6ea-4fdc-9971-999ed69031a6"><con:settings/><con:config service="http://lkservice-apigateway.test.emias.mos.ru" resourcePath="/api/1/documents/medical-certificates" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LK GET medical-certificates" id="e46a505b-2ccf-40db-9497-173535f7f0f0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>http://lkservice-apigateway.test.emias.mos.ru/api​/2/documents​/medical-certificates</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3a7934b3-135b-4412-8332-b0d05487d44c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="shortDateFilter" value="all_time"/>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Acces-JWT}"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>shortDateFilter</con:entry><con:entry>X-Access-JWT</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCertificatesList" id="6d7d9361-a4ab-42a5-8d8d-ffcb60e664c9"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificatesList" id="321d961e-a6f2-48a0-ba90-1c96646105c8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="77099297-336b-4dc0-a536-b9b6dc951df9" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e505194c-2ecd-40db-b481-d8d7a88d6057" name="error.code"><con:configuration><path>error.code</path><content>CERTIFICATE_ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0998dbfa-7126-462a-99c4-de829dcf0f3e"><con:configuration/></con:assertion><con:assertion type="JsonPath Match" id="cece44cf-97e4-4051-9b29-4ee0a136189d" name="error.description"><con:configuration><path>error.description</path><content>Ошибка получения данных о справках и заключениях</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95be45a4-b393-4f3b-8e72-680e7c73b478" name="error.type"><con:configuration><path>error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Acces-JWT}"/>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг данных основных параметров" id="7e9baee8-2585-465b-b270-f67bc8491f49"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${LK GET medical-certificates#Response}')
certifiactes095uJson = new JsonSlurper().parseText(ResponseJson)

ResponseJson = context.expand('${getCertificatesList#Response}')
certifiactesListJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${getPatientConclusions#Response}')
certificatesPINXml = new XmlSlurper().parseText(ResponseXml)

certificates095u = certifiactes095uJson.certificates095
certificatesList = certifiactesListJson.payload
certificatesPIN = certificatesPINXml.Body.GetPatientConclusionsResponse.result.conclusion
int i = 0;
int j = 0;
for (element in certificatesList){
	if(element.is095u == true){ 
		assert element.documentId ==certificates095u[i].documentId
		assert element.moName == certificates095u[i].muName
		assert element.startDate == certificates095u[i].dateCreated
		i++
	}
	else if(element.is095u == false){
		assert element.conclusionId == certificatesPIN[j].@id.toInteger()
		assert element.startDate == certificatesPIN[j].issueDate.toString()
		
		if(certificatesPIN[j].medicalOrganizationName.toString() == "")
			element.moName == null
		else
			assert element.moName == certificatesPIN[j].medicalOrganizationName.toString()
		j++
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Маппинг параметра type" id="74c6a09a-6978-4606-b2df-1629f6c0f29b"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${LK GET medical-certificates#Response}')
certifiactes095uJson = new JsonSlurper().parseText(ResponseJson)

ResponseJson = context.expand('${getCertificatesList#Response}')
certifiactesListJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${getPatientConclusions#Response}')
certificatesPINXml = new XmlSlurper().parseText(ResponseXml)

certificates095u = certifiactes095uJson.certificates
certificatesList = certifiactesListJson.payload
certificatesPIN = certificatesPINXml.Body.GetPatientConclusionsResponse.result.conclusion

int j=0
for (element in certificatesList){
	if(element.is095u == true){ 
		assert element.type == "О болезни ребенка"
	}
	else if(element.is095u == false){
		switch(certificatesPIN[j].type.@code.toString()){
			case "weapon":
				assert element.type == "Для разрешения на оружие"
				break
			case "toxicological":
				assert element.type == "Об отсутствии наркотических и психотропных веществ"
				break
			case "transport":
				assert element.type == "Для получения или замены водительского удостоверения"
				break
			case "contraindications":
				assert element.type == "О выявлении противопоказаний к владению оружием"
				break
		}
		j++
	}
	
}

log.info "end"</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка сортировки по startDate по убыванию" id="571733ce-1d88-4249-8eda-f7dc261a967e"><con:settings/><con:config><script>import groovy.json.JsonSlurper

ResponseJson = context.expand('${getCertificatesList#Response}')
certifiactesListJson = new JsonSlurper().parseText(ResponseJson)

certificatesList = certifiactesListJson.payload

for(int i = 0; i &lt; certificatesList.size()-1;i++ ){
	firstStartDate = Date.parse('yyyy-MM-dd', certificatesList.startDate[i])
	secondStartDate = Date.parse('yyyy-MM-dd', certificatesList.startDate[i+1])
	assert firstStartDate >= secondStartDate
}

log.info "end"</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>25377212</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>a8e28731-aceb-4719-99a9-951cfbc7ddf3</con:value></con:property><con:property><con:name>X-Acces-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NzA2NzgyNTQsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJlYTI0NDllOC05YmI1LTQwZTQtYTI1YS01ZTMxM2I1ZDNiNWIiLCJzaWQiOiJmM2I0ZDg3MS0xYWI5LTRkNjYtYmQxOS03OTUyZjk1MzA0ODYiLCJwaG9uZSI6Ijc5MDk3NzUzMzkzIiwic3NvX2lkIjoiUVhOaEJjUGtoNGpvbHZDYVBtd2owakZqbjIvb29rQk5mTmpqNGg2QUE5cVRwVm1CV3U4c3F0YlBjRzJtVTJpYUZqdmU3VXVxbmhzSlZoQzRSaWV0cVY5WlBBNlhrR015T2xlQnVpUWlMV1Jjck1EL1hSR1lBbXBqdXpPRDZIR0RJY2tFRWEvSnYwVmcrTlhma3N5QU9FcEJNcE4zUUlYdE9BSVh3MFRaMUZlaXRTRTF2cVBJbkNONnB5aE8rS254MndKdVY3a0ZjYVhLaXcwTVpHeFJ1c3ROQnVvcFFNbjlRZzdLaVBaNThxTUNxTmlxK0duMDlCSkM3V1ArOWF2L2dhMzg1VnpxQ0Jybi9ocjloTVAyTUtMTGlCd1BaMks5cGFzUnM4ajVmR0h2RnR5TEJ5anBwdEpCOWMydkZreEo0ejlJc3AwUmdnSHpjSWc3UWJmSDJRPT0iLCJlbWFpbCI6ImF6YXBvdjkzQHlhbmRleC5ydSIsImZpcnN0X25hbWUiOiJcdTA0MTJcdTA0MzBcdTA0NDFcdTA0MzhcdTA0M2JcdTA0MzhcdTA0NDFcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQyNy4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzMFx1MDQ0MFx1MDQ0Mlx1MDQzOFx1MDQzZFx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIxOTc0LTEwLTI5In0.GwAQa3IDTTASJHOx4F_xCsq1PK1jVt2v4tg4-URtsl7L6NkYZsuQEhEZ3XRa6u7xZuTN9Oxyt-dm-MJJJXTx_mNnaEtQ1_ENWYR8qnOh7-Tmx94yVbSwdgRUu9snptj27EYF6PJv6CEaoyqY7Ab-LcCvRJfpPo-nszrKkSUCu-o1FQNergUxXCfDC3aEgCQPzeko3GpGTybjKImM73qeSO4CReOvevGtTSsoi6X8J7EnW7TD2UyOuGi5oJycHgScfwBamVeR28ILmqNDguhJRlE_UIP52HPJaSdsoFLqbnZqrspHh1hZ7xgMPQN-G59L3uNnGxm9KPlnKeCVl-x7G5vZCFU_ejgZ2mT6NN3F5BcpkJzKXLw8b7QlJihzmk-jKSokJYtVReiG-0VQcNH0AMvUfdaiYLHAAGoW22sAfbCe95-HxusQIwjZSPYTOE4yta2auhBPM3qmukDv9fbDzEsukPwCufio8wpqOxDsiyZMDxEQeMnOwedYJCVYtAx1jWo_yYF7HfDzdnTfLR3ShJS6WOixBM8-HnGfNj7pZpf2p3Vh65FO0j6jZ8NqUaHva-Ms0syffAD1UhpQ-2hEQQlmJV6_G3Ks_Ct3e5Vr4QhHCgETwvHJMw4mTVMcqpf-d8f3x_DXHdx2XrnBSpoZAj3tHl9w0OGBoRfM8ob_brE</con:value></con:property><con:property><con:name>user_login</con:name><con:value>azapov93@yandex.ru</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6ImE0OWNlMmExLTYyOWUtNDQ3Zi05YjQ3LTNiM2YxOTYwMTBkYSIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY3MDU5NTQ1Miwic3ViIjoiZWEyNDQ5ZTgtOWJiNS00MGU0LWEyNWEtNWUzMTNiNWQzYjViIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiYXNlU3pMQUU5cWlmWEY5YTd6SWZ4V0UzSFgrb3FLVmZWc3FscjdHa2QwcHRiMWw5NWM1UkRaYW43SkFGWW0zdExmaGlxSlNEbUE4S0kwaERYcFRZbmJZd0Z6aWl1bTlJNjZ4ZmFMNUdMUTFOdW91QUR2bHphSUtEVUhiS0RjeS83dzN2c3VBalF2QnZ6ZWJyVlV2L29wSEpvWXRCMGhUbmlYUmRxRjZrNFpnWndHdlRmRThpbGZDL2p3QkNRMTFnZmxGK0dkb3FkZG1qd0h5VmVWVVE2MThQM3lBd1ZLdjA5RXBxZTdnLzRBTGxvZGgxcWxPY0p2SHJORHVUd3BOTGUwZlRmMlNHRWJKSGdaZlBSbDRNRnhXcmpoR0FjS0s1b1BZZERZOXFGTEV1S3c3VEYvR1RKRnU5RnJWdk43TGtBQ29iY3lFblhQdU9wZXZrdUVHWmdRPT0ifQ.WfmQMXQiSNK-jsEOJKmU1X-3Z1UfJPfdAeq_mVnljgvkzPKRt0PtXEUkODBXBQdLmVdgBbsUpq4GxJnwEBOKBn7gevl4zuDZ9jCnJbZd3tLr5x-0Jdr9vQd52AN7MoKa6W3k1EqxwzfyRsW2suev-76g4hnmUQsQ4JN7zcRZj76727fOcid3yt66-U-l1rZtWqR3XCxtPrG4duUe55dcjkFIgU0Lyic3O5f0NSBfwgul78JRVt6SrVSngzBoLY1FYgBh4yS_YghjG5ktyVXSi9WwtcBc7EUbLJRVhGuJc7mLqHK3S8G9xGmugB8CHvAoxitjD3wN73fHtnu63XDCZzgaNYmSgM9l6neM4dooV2mDssrpmmtFwj4EsutpJyJJeQ0Zo-ttxHQDZTL5llth-HvItD6X4cdyMS3kXmZO8Qb9Dyuyuq2DazhXktYOf97A97fdsdNX6gP4rsQ1i3CYAloGK-F-5rmLNtm3bSIsnHi6kMR9InS9T7L9U85ONB-MNKh1oeH4NwB6Qwo7RQ1qfNKmWrXu4TW9_q-H5-QG5rlmGOyVRNivl9TtkFkwAFwSmGQO27JMZAi1q1FK8WuIQqGhtcz20LJDAl4LC-qE66BipT42b-1xOGjyCxw8BqSlUckjLmarrPw16ZW-jamyuUp2qSxNjszXkKTkvR1iH8M</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>19674</con:value></con:property></con:properties></con:testCase><con:testCase id="791b1802-d54a-4a02-b8c6-635c623dba85" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение ошибки LK_AUTH_EXPIRED" searchProperties="true"><con:settings/><con:testStep type="request" name="getPatientConclusions" id="73df261b-2976-4afd-8e76-6a4574a354f6"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>pnExternalServiceBinding</con:interface><con:operation>getPatientConclusions</con:operation><con:request name="getPatientConclusions" id="d2126e10-f50a-4635-aaed-e6417e33bbb1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#pinRegestryEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/pindata/pnExternal/v1/types/" xmlns:v2="http://emias.mos.ru/pindata/core/v2/">\r
  <soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
       <wsse:UsernameToken>
          <wsse:Username>EIM/EIM</wsse:Username>
       </wsse:UsernameToken>
    </wsse:Security>
 </soap:Header>
   <soap:Body>
      <typ:GetPatientConclusionsRequest>
         <typ:patientId>${#TestCase#patientId}</typ:patientId>
      </typ:GetPatientConclusionsRequest>
</soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e496bb7c-f7a9-4af2-ae45-349d34822157"/><con:assertion type="SOAP Fault Assertion" id="66b182ea-632a-4881-a5e6-424284373d74"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getCertificatesList" id="b9ae6635-3608-4b99-8983-6bb52c89f4f0"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v2/certificates/list" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCertificatesList" id="321d961e-a6f2-48a0-ba90-1c96646105c8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#EMIASINFOendpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/certificates/list</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="77099297-336b-4dc0-a536-b9b6dc951df9" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="10de10ce-c273-4be4-986d-ab484d199651" name="JsonPath Match"><con:configuration><path>error.code</path><content>LK_AUTH_TOKEN_EXPIRED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Access-JWT" value="${#TestCase#X-Acces-JWT}"/>
  <con:entry key="patientId" value="${#TestCase#patientId}"/>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
</con:parameters><con:parameterOrder><con:entry>X-Access-JWT</con:entry><con:entry>ehrId</con:entry><con:entry>patientId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Маппинг данных основных параметров" id="826123a0-0336-4180-ac19-3fc55c0c216c"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${getCertificatesList#Response}')
certifiactesListJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${getPatientConclusions#Response}')
certificatesPINXml = new XmlSlurper().parseText(ResponseXml)

certificatesList = certifiactesListJson.payload
certificatesPIN = certificatesPINXml.Body.GetPatientConclusionsResponse.result.conclusion
int i = 0;
int j = 0;
for (element in certificatesList){
	 if(element.is095u == false){
		assert element.conclusionId == certificatesPIN[j].@id.toInteger()
		assert element.startDate == certificatesPIN[j].issueDate.toString()
		
		if(certificatesPIN[j].medicalOrganizationName.toString() == "")
			element.moName == null
		else
			assert element.moName == certificatesPIN[j].medicalOrganizationName.toString()
		j++
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Маппинг параметра type" id="38d7be8e-d896-424c-91dc-03cfdbfc584c"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

ResponseJson = context.expand('${getCertificatesList#Response}')
certifiactesListJson = new JsonSlurper().parseText(ResponseJson)

ResponseXml = context.expand('${getPatientConclusions#Response}')
certificatesPINXml = new XmlSlurper().parseText(ResponseXml)

certificatesList = certifiactesListJson.payload
certificatesPIN = certificatesPINXml.Body.GetPatientConclusionsResponse.result.conclusion

int j=0
for (element in certificatesList){
	 if(element.is095u == false){
		switch(certificatesPIN[j].type.@code.toString()){
			case "weapon":
				assert element.type == "Для разрешения на оружие"
				break
			case "toxicological":
				assert element.type == "Об отсутствии наркотических и психотропных веществ"
				break
			case "transport":
				assert element.type == "Для получения или замены водительского удостоверения"
				break
			case "contraindications":
				assert element.type == "О выявлении противопоказаний к владению оружием"
				break
		}
		j++
	}
	
}

log.info "end"</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>10618049</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>a8e28731-aceb-4719-99a9-951cfbc7ddf3</con:value></con:property><con:property><con:name>X-Acces-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjE2NjcyODk5NDcsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJlYTI0NDllOC05YmI1LTQwZTQtYTI1YS01ZTMxM2I1ZDNiNWIiLCJzaWQiOiIzMTY3OGU0MC05YWM0LTRmYTctOTIzZC0zZDdjMzI5YzM3YmYiLCJwaG9uZSI6Ijc5MDk3NzUzMzkzIiwic3NvX2lkIjoiVEo4dHZCOHVhektjWDFvRnkvbmdEZGZmSnV2Ylh0NDJHS2cxZjY3YUFuaUNhTElEYXdyMWUwZitFbnlITCtsRmh1RjRXcWFCM1FMdlQ0Nk4xNG16UzJMSFJNSzlqd2xGWmFUUUM4cmJBaVJPZXZRSVhKVHhtc1gxb0VnRFN0N2pDa3RCNlc0Lzl4TUVVMVUyL1kwdERRNGswbU96MFZTWVVKdlh1ak5NQUZoOXgwTi9WMURWOFpYYmZvbFU2UnBYMnA3SUdpZDZIb1VKeUIwcUhjOEc3WGI4VU41TE43a3RWOFdFRHplNUpHZVloeUNrVGJJTTVMdVgrUkVFUUpnbWFodzBYV0N3VnVNcFV4OGU3NGo4R3lveGxxa3BCaHJjeWlsOGJqa2d3UnBQZUdpOFNvRlNuanE5eEJrc0tTQldZUjUySW1Sb0ZudUg1U2JwUmtHTUdBPT0iLCJlbWFpbCI6ImF6YXBvdjkzQHlhbmRleC5ydSIsImZpcnN0X25hbWUiOiJcdTA0MTJcdTA0MzBcdTA0NDFcdTA0MzhcdTA0M2JcdTA0MzhcdTA0NDFcdTA0MzAiLCJzZWNvbmRfbmFtZSI6Ilx1MDQyNy4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxY1x1MDQzMFx1MDQ0MFx1MDQ0Mlx1MDQzOFx1MDQzZFx1MDQzZVx1MDQzMlx1MDQzZFx1MDQzMCIsImJpcnRoX2RhdGUiOiIifQ.Ji-Pn1kHG6S2j715F6K_NmRImpMQTuGkKJOwT9Pfy9k-cRkBQ2_Vw0lUjVDotn9NRpqms_TOyG-1pn5h6q6w94iw1958NhDBDV5QDHK8tlSmoJZ_xhUtBMvQ3dlR5Scs_A0ognxzK8g_AXQn_BAGQLirwWc33FTswCx9PfiGaJjHhIal7E-M49tXA-ZBR_hTTRosldoKmAQn7hMAsrNvSsyG693j8rjvssC2ez4FUyKkzVAqSoGo3QmZPDb5x1tfSvhOPt7zL4JUpGopuQXraEFBdfL2tvQ6kDeWvVm71fgOXtwNDPgr5QmbghLtdq5lkERTzjhTJEBSU7E-28ISOJtE_DPZyJpSuXi_eDaPzt0YwaIZ4QrL7CLF0Hj0t5CueJzzaY5Zsja9oA4_NY7UWCh9tCLgWawFCWqzTHp4nWqgIzFbyZ4QMLcd8ONF2Qn8gr9gjUmlqg6_hTkZ1tiE-gdwahsCuDgTKajWIkf2cwM4ICKHlomuahObtjvfGrSTNqTzobK7DdsQJz6DgK3GWV9FI-XJJt9n-Ur62M5PU43qIxML-3SxeCsP4wY_ZauX3YB_GPSmNyBYqBnZC5JIMYgKb_dQfC7kHK3-fim7K1XEbuY6KIXuX24wDTIFVtgey-Szv8UqC9cFGC6hAjIkkx4MFXz7AIHGhi2bMEKBPPE</con:value></con:property><con:property><con:name>user_login</con:name><con:value>azapov93@yandex.ru</con:value></con:property><con:property><con:name>attempt_token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpZCI6ImVmYWNkNTJkLTRjNzctNDg4Ni1hOTkzLTEwZjIzZDJhYzMzZiIsImlzcyI6InVzZXJfYXV0aCIsImV4cCI6MTY2NzMwMDgxNiwic3ViIjoiZWEyNDQ5ZTgtOWJiNS00MGU0LWEyNWEtNWUzMTNiNWQzYjViIiwiaGNuIjo1LCJhdWQiOiJQQVRJRU5UIiwic3NvX2lkIjoiWHROTGVjdVV3SnYxQXh6YVV6Nm80aUozTkFvL1k2cGZ1Z3NHWXRUeHo3MG4vNk5EQm5QKzlCMlhJTjh0ck5iODB0T3FHY3AySksvWVpUWjh0VGJCRTB5elVtWmtSNWV4amZra09iZEhHa3poeUxrczUrYi9mSE5VTnEvL0lDazRsSmVtSEZBZWtkei9hbmNBOG9IRm1lN29XYUFReXZQNW9BY1A5dU05MFozbWdhWE8ydklsbFVhZnc2VmtSL3B4WThYUGJ1NGdRc016dktLS2JCdzBub1gvdXJFQjRFZkF0alVLNWUzdFYwQnVhSWtHWnBpUHVaaXVLL0I0SlVYemNZVG9NSXR5WXB1dmk2U29hVHkyUlJjcmlSb282dmtLNEo4TStuZUFvZFRvN3pRUGwxT3pmUzlKTHFaRmpyMDdBREpTeUU3RGlnSzlGSklJMXM2WXR3PT0ifQ.C5oSPGtUjmB-Vle_XP5AKPxkVicdhAOiYr5Gbp4Z2L-wms1XIW_WA4UydnbjTd_Aoi3x-rmD1uPOBViTPvugzKNb66QmiFU4_M2VZ5l9zpRGGb83jJl2-9BzZhpexrGrzh73PHCCZ0mfSl4ZAAC-T6o-xD_AuTXKvxSauzo8d1d-grPOMWFWHmZxRtJj7Rht-gPVUqNRBQPfkJl00TXAGTtUBTpG7J3dC8dbUkIOFVSq4g3QG528nzjwpqAU7hDqLCH-qupiYbFBN-uXUeXXv1Z43QCLFZ8Y3TbLFBPExOiHMm9NShhklitArWs1Q5o8t6p3_lC2GblohhuzQ6IXIZlYm4U3idmdvh0MgruHlVvzZKzyqCbqr1Vh9HzSaKt9EWwRDPAt9dSmkmYGXwu5O1-u0-FFeLJJitmv1LbtEGvF8FQlvHy_F49muOaG8sAMOv5b-tnCQ6zpFEdkFDEUouBvoPuFmh1p40z-0E7UjcyyPj1ROqLNXAtg8_fOiPyNrlY0DnkzMPkHYIrIV2hBfPQq4vFOX-i5Bjypg2sDHAD5hUMqNoiCNQRID4qeICF0iorMDQA0XgTcOmZgMLyZh2Hko7To00xf1-IDWBCO6QlgAzu-7GZvXJptl8tM8Xv68hRx6KSbXgi34U76_3oLrnPBsPyV0rB25vzAmB5kWNw</con:value></con:property><con:property><con:name>x-otp</con:name><con:value>19674</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>emiasInfoEndpoint</con:name><con:value>http://emiasinfo1.emias.solit-clouds.ru</con:value></con:property><con:property><con:name>emiasInfoDbConnection</con:name><con:value>172.17.5.11:29100/emiasinfo</con:value></con:property><con:property><con:name>emiasInfoDbLogin</con:name><con:value>emiasinfo</con:value></con:property><con:property><con:name>emiasInfoDbPassword</con:name><con:value>emiasinfo</con:value></con:property><con:property><con:name>emiasInfoFullDbConnection</con:name><con:value>jdbc:postgresql://172.17.5.11:29100/emiasinfo?user=emiasinfo&amp;password=emiasinfo</con:value></con:property><con:property><con:name>emiasInfoDBDriver</con:name><con:value>${#Project#pinRegestryDBDriver}</con:value></con:property><con:property><con:name>pinRegestryEndpoint</con:name><con:value>http://esbcamelvv.test.emias.mos.ru/proxy/pindata/pnExternalService/v1S/ProxyService</con:value></con:property><con:property><con:name>pinRegestryDbConnection</con:name><con:value>10.2.172.254:5432/pindata</con:value></con:property><con:property><con:name>pinRegestryDbLogin</con:name><con:value>pindata</con:value></con:property><con:property><con:name>pinRegestryDbPassword</con:name><con:value>pindata</con:value></con:property><con:property><con:name>pinRegestryFullDbConnection</con:name><con:value>jdbc:postgresql://10.2.172.254:5432/pindata?user=pindata&amp;password=pindata</con:value></con:property><con:property><con:name>pinRegestryDBDriver</con:name><con:value>${#Project#pinRegestryDBDriver}</con:value></con:property><con:property><con:name>lkDbConnection</con:name><con:value/></con:property><con:property><con:name>lkDbLogin</con:name><con:value/></con:property><con:property><con:name>lkDbPassword</con:name><con:value/></con:property><con:property><con:name>lkFullDbConnection</con:name><con:value/></con:property><con:property><con:name>lkEndpoint</con:name><con:value>https://lkservice.test.emias.mos.ru</con:value></con:property><con:property><con:name>lkDBDriver</con:name><con:value/></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>