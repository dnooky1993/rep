<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="52cf9d20-96e4-4288-bbc3-a87854d07935" activeEnvironment="Default" name="ЕМИАС.ИНФО сервис &quot;Самозапись.Оркестратор&quot;" resourceRoot="" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="5819e8fc-f6a8-49ae-869e-f98e3d1d5891" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://emiasinfo-application.test.emias.mos.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://emiasinfo-application.test.emias.mos.ru</con:endpoint></con:endpoints><con:resource name="getAppointmentReceptionsByPatient" path="/api/v3/saOrchestrator/getAppointmentReceptionsByPatient" id="78a0088b-b028-44eb-babb-0958aaca2e73"><con:settings/><con:parameters/><con:method name="getAppointmentReceptionsByPatient" id="11489e03-10a3-4532-93c3-d57ce40faa9b" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getAppointmentReceptionsByPatient">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500 404 400</con:status><con:params/><con:element xmlns:get="http://emiasinfo1.emias.solit-clouds.ru/api/v2/saOrchestrator/getAppointmentReceptionsByPatient">get:Fault</con:element></con:representation><con:request name="getAppointmentReceptionsByPatient" id="08ec9321-3f12-4ec3-a424-ce04bc159a25" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7700002085624106",
  "birthDate": "2022-11-28",
  "appointmentId": [
    0
  ],
  "signActiveArchive": "0"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="cancelAppointment" path="/api/v3/saOrchestrator/cancelAppointment" id="90c9221e-ecd2-447b-861b-d6c749e2e2a9"><con:settings/><con:parameters/><con:method name="cancelAppointment V3" id="428ceab5-1a1d-440f-a1df-d6e4f40be809" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:can="http://emiasinfo1.emias.solit-clouds.ru/api/v3/saOrchestrator/cancelAppointment">can:Fault</con:element></con:representation><con:request name="cancelAppointment V3" id="0761808e-5c5b-4257-907c-38abb31e0459" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "2022-11-28",
  "omsNumber": "7700002085624106",
  "omsSeries": "string",
  "appointmentId": 0
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="shiftAppointment" path="/api/v2/saOrchestrator/shiftAppointment" id="b5c5f1b0-213a-4b36-a992-801e9b918532"><con:settings/><con:parameters/><con:method name="shiftAppointment" id="68ef4c88-4d27-4baa-8649-f3c60da40307" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:shif="http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/shiftAppointment">shif:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="shiftAppointment" id="9143e7de-d3a4-4997-9a20-f183e8349ce6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "string",
  "omsSeries": "string",
  "birthDate": "2022-11-28",
  "availableResourceId": 0,
  "complexResourceId": 0,
  "startTime": "2008-07-14T10:10:10",
  "endTime": "2008-07-14T10:10:10",
  "referralId": 0,
  "receptionTypeId": 0,
  "appointmentId": 0
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getSpecialitiesInfo" path="/api/v2/saOrchestrator/getSpecialitiesInfo" id="9678d6ad-da42-4fb4-9615-947be79a6c75"><con:settings/><con:parameters/><con:method name="getSpecialitiesInfo" id="c176b60b-cdd0-48ff-9941-6bb8c2e85dc2" method="POST"><con:settings/><con:parameters/><con:request name="getSpecialitiesInfo" id="4dc9ea5f-f0c8-46a4-b92d-28515156f1e2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "2022-11-28",
  "omsNumber": "7700002085624106",
  "quotaTypes": {
    "quotaType": [
      0
    ]
  },
  "disableQuotaTypes": {
    "quotaType": [
      0
    ]
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getReferralsInfo" path="/api/v2/saOrchestrator/getReferralsInfo" id="477c4ae7-1d9f-4b1b-85c2-062ff8ba6e23"><con:settings/><con:parameters/><con:method name="getReferralsInfo" id="42952b91-fdaa-4b3d-9b71-5ca121cb5c52" method="POST"><con:settings/><con:parameters/><con:request name="getReferralsInfo" id="a298e287-217e-4c8f-999c-a20388ebf44b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "birthDate": "2022-11-28",
  "omsNumber": "7700002085624106",
  "quotaTypes": {
    "quotaType": [
      0
    ]
  },
  "disableQuotaTypes": {
    "quotaType": [
      0
    ]
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getMemo" path="/api/v2/saOrchestrator/getMemo" id="4a7b6d6b-9e8f-4505-827f-0e893260e9fc"><con:settings/><con:parameters/><con:method name="getMemo" id="1f7c270d-cc26-454f-bb02-bc95c0689190" method="POST"><con:settings/><con:parameters/><con:request name="getMemo" id="49964d0e-86ce-45b4-b155-abcbfd119855" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "request": [
    {
      "biomaterialId": 0,
      "laboratoryId": 0
    }
  ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getDoctorsInfo" path="/api/v2/saOrchestrator/getDoctorsInfo" id="c4ed0744-8e7c-4acf-806e-0048f4be7762"><con:settings/><con:parameters/><con:method name="getDoctorsInfo" id="cedfa36e-8732-402d-be33-9ddc64faeace" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:get="http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestratorCovid/getDoctorsInfo">get:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="getDoctorsInfo" id="363ade28-3ba6-4ffd-a3bd-668b80e9b7ac" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "string",
  "omsSeries": "string",
  "birthDate": "2022-11-28",
  "specialityId": 0,
  "referralId": 0,
  "appointmentId": 0,
  "lpuId": 0,
  "includeArWithoutSlots": true,
  "quotaTypes": {
    "quotaType": [
      0
    ]
  },
  "disableQuotaTypes": {
    "quotaType": [
      0
    ]
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getDoctorsInfoForLI" path="/api/v2/saOrchestrator/getDoctorsInfoForLI" id="9f395cf6-14a4-4e58-847a-b95bcede248c"><con:settings/><con:parameters/><con:method name="getDoctorsInfoForLI" id="561082ab-7469-488d-b7a1-3efd7000814e" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:get="http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getDoctorsInfoForLI">get:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="getDoctorsInfoForLI" id="cfd7d601-b428-4c9e-9a66-4a71d217c2a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "string",
  "omsSeries": "string",
  "birthDate": "2022-11-28",
  "appointmentId": 0,
  "assignment": {
    "moId": 0,
    "samplingTypeId": 0,
    "period": {
      "dateFrom": "2022-11-28",
      "dateTo": "2022-11-28"
    }
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getBatchScheduleInfo" path="/api/v2/saOrchestrator/getBatchScheduleInfo" id="a42d9ab3-2476-4024-a545-691443876027"><con:settings/><con:parameters/><con:method name="getBatchScheduleInfo" id="780de682-69c7-4663-a0c3-d982dc10e7d5" method="POST"><con:settings/><con:parameters/><con:request name="getBatchScheduleInfo" id="262bc52a-279d-432e-a165-434e8aedb886" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "string",
  "birthDate": "2022-11-28",
  "specialityId": 0,
  "referralId": 0,
  "appointmentId": 0
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getAvailableResourceScheduleInfo" path="/api/v2/saOrchestrator/getAvailableResourceScheduleInfo" id="321e18d9-c451-457e-bb5a-2d0b77cc01ae"><con:settings/><con:parameters/><con:method name="getAvailableResourceScheduleInfo" id="88571e75-3e0a-4ccf-b476-a8db33d55cbf" method="POST"><con:settings/><con:parameters/><con:request name="getAvailableResourceScheduleInfo" id="4b6248b6-38a0-4b0a-9028-48c8d1364524" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "availableResourceId": 0,
  "complexResourceId": 0,
  "omsNumber": "string",
  "omsSeries": "string",
  "birthDate": "2022-11-28",
  "referralId": 0,
  "period": {
    "dateFrom": "2022-11-28",
    "dateTo": "2022-11-28"
  },
  "appointmentId": 0,
  "quotaTypes": {
    "quotaType": [
      0
    ]
  },
  "disableQuotaTypes": {
    "quotaType": [
      0
    ]
  }
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getAssignmentsInfo" path="/api/v2/saOrchestrator/getAssignmentsInfo" id="7b146272-4efd-47e7-8904-1a7301e54ead"><con:settings/><con:parameters/><con:method name="getAssignmentsInfo" id="7c84fe9a-a56e-4d07-95e6-45eacb0f8203" method="POST"><con:settings/><con:parameters/><con:request name="getAssignmentsInfo" id="b0e8bf4f-5dc9-4277-a26a-bff0f8ea3041" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7700002085624106",
  "birthDate": "2022-11-28",
  "registryEntryId": [
    0
  ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getAppointmentReceptionsByPatient" path="/api/v2/saOrchestrator/getAppointmentReceptionsByPatient" id="b98ab5a5-e9dd-46c9-ad20-f3fc70d3b3f7"><con:settings/><con:parameters/><con:method name="getAppointmentReceptionsByPatient" id="f2d021f9-8fea-4ecd-88fd-49dacc89f881" method="POST"><con:settings/><con:parameters/><con:request name="getAppointmentReceptionsByPatient" id="5743e75f-0a1a-4237-b21c-6518bdbda9ad" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "7700002085624106",
  "birthDate": "2022-11-28",
  "signActiveArchive": "0"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="createAppointment" path="/api/v2/saOrchestrator/createAppointment" id="19ef542e-479d-4d56-a331-87dee485b342"><con:settings/><con:parameters/><con:method name="createAppointment" id="6fcd7df3-2e00-436e-9f9c-21436f76ab6a" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500 400</con:status><con:params/><con:element xmlns:cre="http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/createAppointment">cre:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="createAppointment" id="9c40b829-da87-4d82-81bc-a55d298886ef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "string",
  "omsSeries": "string",
  "birthDate": "2022-11-28",
  "availableResourceId": 0,
  "complexResourceId": 0,
  "startTime": "2008-07-14T10:10:10",
  "endTime": "2008-07-14T10:10:10",
  "referralId": 0,
  "receptionTypeId": 0,
  "eno": "string"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getAssignmentsReferralsInfo" path="/api/v2/saOrchestrator/getAssignmentsReferralsInfo" id="60544e20-d624-419f-aea3-4199d2917381"><con:settings/><con:parameters><con:parameter><con:name>omsNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>birthDate</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getAssignmentsReferralsInfo" id="fbf5e5ac-3a9e-4425-8834-f6d333759e95" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:get="http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getAssignmentsReferralsInfo">get:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getAssignmentsReferralsInfo">get:Response</con:element></con:representation><con:request name="getAssignmentsReferralsInfo" id="5538a2f8-188d-45f7-93c9-1880ab43efb4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>omsNumber</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="getMemo" path="/api/v2/saOrchestrator/getMemo" id="027be319-6677-4df5-b2bc-9098f1dedc85"><con:settings/><con:parameters/><con:method name="Method 1" id="7b97bddd-36c7-488f-9162-765d58772703" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="a5b41c5e-7cc5-49e3-9644-51e5f0348b0e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://emiasinfo-application.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:WsdlInterface" id="ad2d2726-17eb-499f-8dc2-962c166e61d9" wsaVersion="NONE" name="SelfAppointmentServiceV5Binding" type="wsdl" bindingName="{http://impl.service.soap.emias.lanit.ru/v5/}SelfAppointmentServiceV5Binding" soapVersion="1_2" anonymous="optional" definition="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?wsdl"><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="SelfAppointmentService" targetNamespace="http://impl.service.soap.emias.lanit.ru/v5/" xmlns:api="http://api.service.soap.emias.lanit.ru/v5/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="http://impl.service.soap.emias.lanit.ru/v5/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--WSDL контракта 5 (доработки по записи 2-х детей, для Инфомата и поддержки ЦЛС)-->
  <wsdl:documentation>version="5.2"</wsdl:documentation>
  <wsdl:types>
    <xs:schema xmlns="http://www.w3.org/2001/XMLSchema">
      <import namespace="http://api.service.soap.emias.lanit.ru/v5/" schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELvH8olfvFUzUOzR9Es_rBviwyrRrnxXTOMZf1KYWzL6hlqv_eyPYq5HlejT1ROkMeQ--"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="SoapException">
    <wsdl:part element="api:soapException" name="SoapException"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointment">
    <wsdl:part element="api:cancelAppointment" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentResponse">
    <wsdl:part element="api:cancelAppointmentResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getAppointmentReceptionsByPatient">
    <wsdl:part element="api:getAppointmentReceptionsByPatient" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getAppointmentReceptionsByPatientResponse">
    <wsdl:part element="api:getAppointmentReceptionsByPatientResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getReferralsInfo">
    <wsdl:part element="api:getReferralsInfo" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getReferralsInfoResponse">
    <wsdl:part element="api:getReferralsInfoResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="createAppointment">
    <wsdl:part element="api:createAppointment" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="createAppointmentResponse">
    <wsdl:part element="api:createAppointmentResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getAvailableResourceScheduleInfo">
    <wsdl:part element="api:getAvailableResourceScheduleInfo" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getAvailableResourceScheduleInfoResponse">
    <wsdl:part element="api:getAvailableResourceScheduleInfoResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfo">
    <wsdl:part element="api:getDoctorsInfo" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfoResponse">
    <wsdl:part element="api:getDoctorsInfoResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getSpecialitiesInfo">
    <wsdl:part element="api:getSpecialitiesInfo" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getSpecialitiesInfoResponse">
    <wsdl:part element="api:getSpecialitiesInfoResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="shiftAppointment">
    <wsdl:part element="api:shiftAppointment" name="shiftAppointment"/>
  </wsdl:message>
  <wsdl:message name="shiftAppointmentResponse">
    <wsdl:part element="api:shiftAppointmentResponse" name="shiftAppointmentResponse"/>
  </wsdl:message>
  <wsdl:message name="getDutyARScheduleByPatient">
    <wsdl:part element="api:getDutyARScheduleByPatient" name="getDutyARScheduleByPatient"/>
  </wsdl:message>
  <wsdl:message name="getDutyARScheduleByPatientResponse">
    <wsdl:part element="api:getDutyARScheduleByPatientResponse" name="getDutyARScheduleByPatientResponse"/>
  </wsdl:message>
  <wsdl:message name="createAppointmentToDutyDoctorByPatient">
    <wsdl:part element="api:createAppointmentToDutyDoctorByPatient" name="createAppointmentToDutyDoctorByPatient"/>
  </wsdl:message>
  <wsdl:message name="createAppointmentToDutyDoctorByPatientResponse">
    <wsdl:part element="api:createAppointmentToDutyDoctorByPatientResponse" name="createAppointmentToDutyDoctorByPatientResponse"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentToDutyDoctorByPatient">
    <wsdl:part element="api:cancelAppointmentToDutyDoctorByPatient" name="cancelAppointmentToDutyDoctorByPatient"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentToDutyDoctorByPatientResponse">
    <wsdl:part element="api:cancelAppointmentToDutyDoctorByPatientResponse" name="cancelAppointmentToDutyDoctorByPatientResponse"/>
  </wsdl:message>
  <wsdl:message name="getHealthCareAvailabilityAttributes">
    <wsdl:part element="api:getHealthCareAvailabilityAttributes" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getHealthCareAvailabilityAttributesResponse">
    <wsdl:part element="api:getHealthCareAvailabilityAttributesResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentBySms">
    <wsdl:part element="api:cancelAppointmentBySms" name="cancelAppointmentBySms"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentBySmsResponse">
    <wsdl:part element="api:cancelAppointmentBySmsResponse" name="cancelAppointmentBySmsResponse"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentByID">
    <wsdl:part element="api:cancelAppointmentByID" name="cancelAppointmentByID"/>
  </wsdl:message>
  <wsdl:message name="cancelAppointmentByIDResponse">
    <wsdl:part element="api:cancelAppointmentByIDResponse" name="cancelAppointmentByIDResponse"/>
  </wsdl:message>
  <wsdl:message name="getAssignmentsInfo">
    <wsdl:part element="api:getAssignmentsInfo" name="getAssignmentsInfo"/>
  </wsdl:message>
  <wsdl:message name="getAssignmentsInfoResponse">
    <wsdl:part element="api:getAssignmentsInfoResponse" name="getAssignmentsInfoResponse"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfoForLI">
    <wsdl:part element="api:getDoctorsInfoForLI" name="getDoctorsInfoForLI"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfoForLIResponse">
    <wsdl:part element="api:getDoctorsInfoForLIResponse" name="getDoctorsInfoForLIResponse"/>
  </wsdl:message>
  <wsdl:message name="getSpecialitiesInfoForGroup">
    <wsdl:part element="api:getSpecialitiesInfoForGroup" name="getSpecialitiesInfoForGroup"/>
  </wsdl:message>
  <wsdl:message name="getSpecialitiesInfoForGroupResponse">
    <wsdl:part element="api:getSpecialitiesInfoForGroupResponse" name="getSpecialitiesInfoForGroupResponse"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfoForGroup">
    <wsdl:part element="api:getDoctorsInfoForGroup" name="getDoctorsInfoForGroup"/>
  </wsdl:message>
  <wsdl:message name="getDoctorsInfoForGroupResponse">
    <wsdl:part element="api:getDoctorsInfoForGroupResponse" name="getDoctorsInfoForGroupResponse"/>
  </wsdl:message>
  <wsdl:message name="getAvailableResourceScheduleInfoForGroup">
    <wsdl:part element="api:getAvailableResourceScheduleInfoForGroup" name="getAvailableResourceScheduleInfoForGroup"/>
  </wsdl:message>
  <wsdl:message name="getAvailableResourceScheduleInfoForGroupResponse">
    <wsdl:part element="api:getAvailableResourceScheduleInfoForGroupResponse" name="getAvailableResourceScheduleInfoForGroupResponse"/>
  </wsdl:message>
  <wsdl:message name="createAppointmentForGroup">
    <wsdl:part element="api:createAppointmentForGroup" name="createAppointmentForGroup"/>
  </wsdl:message>
  <wsdl:message name="createAppointmentForGroupResponse">
    <wsdl:part element="api:createAppointmentForGroupResponse" name="createAppointmentForGroupResponse"/>
  </wsdl:message>
  <wsdl:message name="shiftAppointmentForGroup">
    <wsdl:part element="api:shiftAppointmentForGroup" name="shiftAppointmentForGroup"/>
  </wsdl:message>
  <wsdl:message name="shiftAppointmentForGroupResponse">
    <wsdl:part element="api:shiftAppointmentForGroupResponse" name="shiftAppointmentForGroupResponse"/>
  </wsdl:message>
  <wsdl:message name="getArchivedAppointments">
    <wsdl:part element="api:getArchivedAppointments" name="getArchivedAppointments"/>
  </wsdl:message>
  <wsdl:message name="getArchivedAppointmentsResponse">
    <wsdl:part element="api:getArchivedAppointmentsResponse" name="getArchivedAppointmentsResponse"/>
  </wsdl:message>
  <wsdl:portType name="SelfAppointmentServiceV5PT">
    <wsdl:operation name="getHealthCareAvailabilityAttributes">
      <wsdl:input message="tns:getHealthCareAvailabilityAttributes" name="getHealthCareAvailabilityAttributes"/>
      <wsdl:output message="tns:getHealthCareAvailabilityAttributesResponse" name="getHealthCareAvailabilityAttributesResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="createAppointment">
      <wsdl:input message="tns:createAppointment" name="createAppointment"/>
      <wsdl:output message="tns:createAppointmentResponse" name="createAppointmentResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getAvailableResourceScheduleInfo">
      <wsdl:input message="tns:getAvailableResourceScheduleInfo" name="getAvailableResourceScheduleInfo"/>
      <wsdl:output message="tns:getAvailableResourceScheduleInfoResponse" name="getAvailableResourceScheduleInfoResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfo">
      <wsdl:input message="tns:getDoctorsInfo" name="getDoctorsInfo"/>
      <wsdl:output message="tns:getDoctorsInfoResponse" name="getDoctorsInfoResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getSpecialitiesInfo">
      <wsdl:input message="tns:getSpecialitiesInfo" name="getSpecialitiesInfo"/>
      <wsdl:output message="tns:getSpecialitiesInfoResponse" name="getSpecialitiesInfoResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="shiftAppointment">
      <wsdl:input message="tns:shiftAppointment" name="shiftAppointment"/>
      <wsdl:output message="tns:shiftAppointmentResponse" name="shiftAppointmentResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointment">
      <wsdl:input message="tns:cancelAppointment" name="cancelAppointment"/>
      <wsdl:output message="tns:cancelAppointmentResponse" name="cancelAppointmentResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getAppointmentReceptionsByPatient">
      <wsdl:input message="tns:getAppointmentReceptionsByPatient" name="getAppointmentReceptionsByPatient"/>
      <wsdl:output message="tns:getAppointmentReceptionsByPatientResponse" name="getAppointmentReceptionsByPatientResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getReferralsInfo">
      <wsdl:input message="tns:getReferralsInfo" name="getReferralsInfo"/>
      <wsdl:output message="tns:getReferralsInfoResponse" name="getReferralsInfoResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getDutyARScheduleByPatient">
      <wsdl:input message="tns:getDutyARScheduleByPatient" name="getDutyARScheduleByPatient"/>
      <wsdl:output message="tns:getDutyARScheduleByPatientResponse" name="getDutyARScheduleByPatientResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="createAppointmentToDutyDoctorByPatient">
      <wsdl:input message="tns:createAppointmentToDutyDoctorByPatient" name="createAppointmentToDutyDoctorByPatient"/>
      <wsdl:output message="tns:createAppointmentToDutyDoctorByPatientResponse" name="createAppointmentToDutyDoctorByPatientResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentToDutyDoctorByPatient">
      <wsdl:input message="tns:cancelAppointmentToDutyDoctorByPatient" name="cancelAppointmentToDutyDoctorByPatient"/>
      <wsdl:output message="tns:cancelAppointmentToDutyDoctorByPatientResponse" name="cancelAppointmentToDutyDoctorByPatientResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentBySms">
      <wsdl:input message="tns:cancelAppointmentBySms" name="cancelAppointmentBySms"/>
      <wsdl:output message="tns:cancelAppointmentBySmsResponse" name="cancelAppointmentBySmsResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentByID">
      <wsdl:input message="tns:cancelAppointmentByID" name="cancelAppointmentByID"/>
      <wsdl:output message="tns:cancelAppointmentByIDResponse" name="cancelAppointmentByIDResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getAssignmentsInfo">
      <wsdl:input message="tns:getAssignmentsInfo" name="getAssignmentsInfo"/>
      <wsdl:output message="tns:getAssignmentsInfoResponse" name="getAssignmentsInfoResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfoForLI">
      <wsdl:input message="tns:getDoctorsInfoForLI" name="getDoctorsInfoForLI"/>
      <wsdl:output message="tns:getDoctorsInfoForLIResponse" name="getDoctorsInfoForLIResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getSpecialitiesInfoForGroup">
      <wsdl:input message="tns:getSpecialitiesInfoForGroup" name="getSpecialitiesInfoForGroup"/>
      <wsdl:output message="tns:getSpecialitiesInfoForGroupResponse" name="getSpecialitiesInfoForGroupResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfoForGroup">
      <wsdl:input message="tns:getDoctorsInfoForGroup" name="getDoctorsInfoForGroup"/>
      <wsdl:output message="tns:getDoctorsInfoForGroupResponse" name="getDoctorsInfoForGroupResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getAvailableResourceScheduleInfoForGroup">
      <wsdl:input message="tns:getAvailableResourceScheduleInfoForGroup" name="getAvailableResourceScheduleInfoForGroup"/>
      <wsdl:output message="tns:getAvailableResourceScheduleInfoForGroupResponse" name="getAvailableResourceScheduleInfoForGroupResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="createAppointmentForGroup">
      <wsdl:input message="tns:createAppointmentForGroup" name="createAppointmentForGroup"/>
      <wsdl:output message="tns:createAppointmentForGroupResponse" name="createAppointmentForGroupResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="shiftAppointmentForGroup">
      <wsdl:input message="tns:shiftAppointmentForGroup" name="shiftAppointmentForGroup"/>
      <wsdl:output message="tns:shiftAppointmentForGroupResponse" name="shiftAppointmentForGroupResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
    <wsdl:operation name="getArchivedAppointments">
      <wsdl:input message="tns:getArchivedAppointments" name="getArchivedAppointments"/>
      <wsdl:output message="tns:getArchivedAppointmentsResponse" name="getArchivedAppointmentsResponse"/>
      <wsdl:fault message="tns:SoapException" name="SoapException"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="SelfAppointmentServiceV5Binding" type="tns:SelfAppointmentServiceV5PT">
    <soap12:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getHealthCareAvailabilityAttributes">
      <soap12:operation soapAction="urn://getHealthCareAvailabilityAttributes"/>
      <wsdl:input name="getHealthCareAvailabilityAttributes">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getHealthCareAvailabilityAttributesResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointment">
      <soap12:operation soapAction="urn://cancelAppointment"/>
      <wsdl:input name="cancelAppointment">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelAppointmentResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAppointmentReceptionsByPatient">
      <soap12:operation soapAction="urn://getAppointmentReceptionsByPatient"/>
      <wsdl:input name="getAppointmentReceptionsByPatient">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAppointmentReceptionsByPatientResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getReferralsInfo">
      <soap12:operation soapAction="urn://getReferralsInfo"/>
      <wsdl:input name="getReferralsInfo">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getReferralsInfoResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createAppointment">
      <soap12:operation soapAction="urn://createAppointment"/>
      <wsdl:input name="createAppointment">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createAppointmentResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAvailableResourceScheduleInfo">
      <soap12:operation soapAction="urn://getAvailableResourceScheduleInfo"/>
      <wsdl:input name="getAvailableResourceScheduleInfo">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAvailableResourceScheduleInfoResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfo">
      <soap12:operation soapAction="urn://getDoctorsInfo"/>
      <wsdl:input name="getDoctorsInfo">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDoctorsInfoResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfoForLI">
      <soap12:operation soapAction="urn://getDoctorsInfoForLI"/>
      <wsdl:input name="getDoctorsInfoForLI">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDoctorsInfoForLIResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSpecialitiesInfo">
      <soap12:operation soapAction="urn://getSpecialitiesInfo"/>
      <wsdl:input name="getSpecialitiesInfo">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSpecialitiesInfoResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="shiftAppointment">
      <soap12:operation soapAction="urn://shiftAppointment"/>
      <wsdl:input name="shiftAppointment">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="shiftAppointmentResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDutyARScheduleByPatient">
      <soap12:operation soapAction="urn://getDutyARScheduleByPatient"/>
      <wsdl:input name="getDutyARScheduleByPatient">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDutyARScheduleByPatientResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createAppointmentToDutyDoctorByPatient">
      <soap12:operation soapAction="urn://createAppointmentToDutyDoctorByPatient"/>
      <wsdl:input name="createAppointmentToDutyDoctorByPatient">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createAppointmentToDutyDoctorByPatientResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentToDutyDoctorByPatient">
      <soap12:operation soapAction="urn://cancelAppointmentToDutyDoctorByPatient"/>
      <wsdl:input name="cancelAppointmentToDutyDoctorByPatient">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelAppointmentToDutyDoctorByPatientResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentBySms">
      <soap12:operation soapAction="urn://cancelAppointmentBySms"/>
      <wsdl:input name="cancelAppointmentBySms">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelAppointmentBySmsResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="cancelAppointmentByID">
      <soap12:operation soapAction="urn://cancelAppointmentByID"/>
      <wsdl:input name="cancelAppointmentByID">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelAppointmentByIDResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAssignmentsInfo">
      <soap12:operation soapAction="urn://getAssignmentsInfo"/>
      <wsdl:input name="getAssignmentsInfo">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAssignmentsInfoResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSpecialitiesInfoForGroup">
      <soap12:operation soapAction="urn://getSpecialitiesInfoForGroup"/>
      <wsdl:input name="getSpecialitiesInfoForGroup">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSpecialitiesInfoForGroupResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDoctorsInfoForGroup">
      <soap12:operation soapAction="urn://getDoctorsInfoForGroup"/>
      <wsdl:input name="getDoctorsInfoForGroup">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDoctorsInfoForGroupResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAvailableResourceScheduleInfoForGroup">
      <soap12:operation soapAction="urn://getAvailableResourceScheduleInfoForGroup"/>
      <wsdl:input name="getAvailableResourceScheduleInfoForGroup">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAvailableResourceScheduleInfoForGroupResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createAppointmentForGroup">
      <soap12:operation soapAction="urn://createAppointmentForGroup"/>
      <wsdl:input name="createAppointmentForGroup">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createAppointmentForGroupResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="shiftAppointmentForGroup">
      <soap12:operation soapAction="urn://shiftAppointmentForGroup"/>
      <wsdl:input name="shiftAppointmentForGroup">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="shiftAppointmentForGroupResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getArchivedAppointments">
      <soap12:operation soapAction="urn://getArchivedAppointments"/>
      <wsdl:input name="getArchivedAppointments">
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getArchivedAppointmentsResponse">
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoapException">
        <soap12:fault name="SoapException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SelfAppointmentServiceV5">
    <wsdl:port binding="tns:SelfAppointmentServiceV5Binding" name="SelfAppointmentServiceV5PTB">
      <soap12:address location="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELvH8olfvFUzUOzR9Es_rBviwyrRrnxXTOMZf1KYWzL6hlqv_eyPYq5HlejT1ROkMeQ--</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://api.service.soap.emias.lanit.ru/v5/" version="5.2" xmlns:core="http://api.service.soap.emias.lanit.ru/core/v5/" xmlns:ns1="http://api.service.soap.emias.lanit.ru/v5/" xmlns:tns="http://api.service.soap.emias.lanit.ru/v5/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://api.service.soap.emias.lanit.ru/core/v5/" schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELs3rrVnLFkjJMy5mDfngAN2826cviAmOKcwB0rpK0eO9luhxWIPHWt9l0e4P44rDtQmP"/>
  <!--======================== Элементы =====================================-->
  <!--Отмена записи на прием-->
  <xs:element name="cancelAppointment" type="tns:cancelAppointment"/>
  <xs:element name="cancelAppointmentResponse" type="tns:cancelAppointmentResponse"/>
  <!--Создание записи на прием2-->
  <xs:element name="createAppointment" type="tns:createAppointment"/>
  <xs:element name="createAppointmentResponse" type="tns:createAppointmentResponse"/>
  <!--Получение списка записей для пациента-->
  <xs:element name="getAppointmentReceptionsByPatient" type="tns:getAppointmentReceptionsByPatient"/>
  <xs:element name="getAppointmentReceptionsByPatientResponse" type="tns:getAppointmentReceptionsByPatientResponse"/>
  <!--Получение расписания врача-->
  <xs:element name="getAvailableResourceScheduleInfo" type="tns:getAvailableResourceScheduleInfo"/>
  <xs:element name="getAvailableResourceScheduleInfoResponse" type="tns:getAvailableResourceScheduleInfoResponse"/>
  <!--Получение списка врачей-->
  <xs:element name="getDoctorsInfo" type="tns:getDoctorsInfo"/>
  <xs:element name="getDoctorsInfoResponse" type="tns:getDoctorsInfoResponse"/>
  <!--Получение направлений для пациента-->
  <xs:element name="getReferralsInfo" type="tns:getReferralsInfo"/>
  <xs:element name="getReferralsInfoResponse" type="tns:getReferralsInfoResponse"/>
  <!--Получение списка специальностей-->
  <xs:element name="getSpecialitiesInfo" type="tns:getSpecialitiesInfo"/>
  <xs:element name="getSpecialitiesInfoResponse" type="tns:getSpecialitiesInfoResponse"/>
  <!--Перенос записи на прием-->
  <xs:element name="shiftAppointment" type="tns:shiftAppointment"/>
  <xs:element name="shiftAppointmentResponse" type="tns:shiftAppointmentResponse"/>
  <!--Предоставление расписания ближайшего доступного ДВ-->
  <xs:element name="getDutyARScheduleByPatient" type="tns:getDutyARScheduleByPatient"/>
  <xs:element name="getDutyARScheduleByPatientResponse" type="tns:getDutyARScheduleByPatientResponse"/>
  <!--Создание записи к ДВ-->
  <xs:element name="createAppointmentToDutyDoctorByPatient" type="tns:createAppointmentToDutyDoctorByPatient"/>
  <xs:element name="createAppointmentToDutyDoctorByPatientResponse" type="tns:createAppointmentToDutyDoctorByPatientResponse"/>
  <!--Отмена записи к ДВ-->
  <xs:element name="cancelAppointmentToDutyDoctorByPatient" type="tns:cancelAppointmentToDutyDoctorByPatient"/>
  <xs:element name="cancelAppointmentToDutyDoctorByPatientResponse" type="tns:cancelAppointmentToDutyDoctorByPatientResponse"/>
  <!--Предоставление ожидания по самозаписи-->
  <xs:element name="getHealthCareAvailabilityAttributes" type="tns:getHealthCareAvailabilityAttributes"/>
  <xs:element name="getHealthCareAvailabilityAttributesResponse" type="tns:getHealthCareAvailabilityAttributesResponse"/>
  <!--Отмена записи к ДВ-->
  <xs:element name="cancelAppointmentBySms" type="tns:cancelAppointmentBySms"/>
  <xs:element name="cancelAppointmentBySmsResponse" type="tns:cancelAppointmentBySmsResponse"/>
  <!--Отмена записи на прием (вариант 2, для ЦТО)-->
  <xs:element name="cancelAppointmentByID" type="tns:cancelAppointmentByID"/>
  <xs:element name="cancelAppointmentByIDResponse" type="tns:cancelAppointmentByIDResponse"/>
  <!--Предоставление перечня активных назначений пациента на ЛИ-->
  <xs:element name="getAssignmentsInfo" type="tns:getAssignmentsInfo"/>
  <xs:element name="getAssignmentsInfoResponse" type="tns:getAssignmentsInfoResponse"/>
  <!--Получение ДР на лабораторные исследования-->
  <xs:element name="getDoctorsInfoForLI" type="tns:getDoctorsInfoForLI"/>
  <xs:element name="getDoctorsInfoForLIResponse" type="tns:getDoctorsInfoForLIResponse"/>
  <!--Предоставление перечня специальностей доступных для самозаписи группой пациентов-->
  <xs:element name="getSpecialitiesInfoForGroup" type="tns:getSpecialitiesInfoForGroup"/>
  <xs:element name="getSpecialitiesInfoForGroupResponse" type="tns:getSpecialitiesInfoForGroupResponse"/>
  <!--Предоставление перечня ДР, к которым разрешена самозапись пациента-->
  <xs:element name="getDoctorsInfoForGroup" type="tns:getDoctorsInfoForGroup"/>
  <xs:element name="getDoctorsInfoForGroupResponse" type="tns:getDoctorsInfoForGroupResponse"/>
  <!--Предоставление расписания доступного ресурса и его слотов, доступных для самозаписи группе пациентов-->
  <xs:element name="getAvailableResourceScheduleInfoForGroup" type="tns:getAvailableResourceScheduleInfoForGroup"/>
  <xs:element name="getAvailableResourceScheduleInfoForGroupResponse" type="tns:getAvailableResourceScheduleInfoForGroupResponse"/>
  <!--Создание несколько записей-->
  <xs:element name="createAppointmentForGroup" type="tns:createAppointmentForGroup"/>
  <xs:element name="createAppointmentForGroupResponse" type="tns:createAppointmentForGroupResponse"/>
  <!--Перенос нескольких записей-->
  <xs:element name="shiftAppointmentForGroup" type="tns:shiftAppointmentForGroup"/>
  <xs:element name="shiftAppointmentForGroupResponse" type="tns:shiftAppointmentForGroupResponse"/>
  <!--Получение отмененных и архивных записей пациента-->
  <xs:element name="getArchivedAppointments" type="tns:getArchivedAppointments"/>
  <xs:element name="getArchivedAppointmentsResponse" type="tns:getArchivedAppointmentsResponse"/>
  <!--======================== Ошибки =====================================-->
  <xs:element name="soapException" nillable="false" type="tns:soapException"/>
  <xs:element name="appointmentCodeErrorFaultInfo" type="tns:appointmentCodeErrorFaultInfo"/>
  <!--======================== Типы данных =====================================-->
  <xs:complexType name="availableResourceBasis">
    <xs:sequence>
      <xs:element minOccurs="0" name="referralId" type="xs:string">
        <xs:annotation>
          <xs:documentation>Идентификатор направления, по которому осуществлялся подбор ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="medSpecialityAttachment" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак записи по прикреплению к специальности</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="specialityId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД специализации ДР, по которой осуществлялся подбор ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="ldpId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД вида ЛДП</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="samplingTypeId" type="xs:long">
        <xs:annotation>
          <xs:documentation>Профиль взятия</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="referralType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="REF_TO_DOCTOR"/>
      <xs:enumeration value="REF_TO_LDP"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="signActiveArchiveType">
    <xs:annotation>
      <xs:documentation>Признак «Архивные и отмененные записи»</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long">
      <xs:enumeration value="0"/>
      <xs:enumeration value="1"/>
      <xs:enumeration value="2"/>
      <xs:minInclusive value="0"/>
      <xs:maxInclusive value="2"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="baseDto">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="ldpType">
    <xs:sequence>
      <xs:element name="id" type="xs:string"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="procedure" type="xs:boolean"/>
      <xs:element minOccurs="0" name="investigation" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="lpuType">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="ambulatory" type="xs:string"/>
      <xs:element minOccurs="0" name="patientSign" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="referral">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="number" type="xs:string"/>
      <xs:element minOccurs="0" name="comment" type="xs:string"/>
      <xs:element name="startTime" type="xs:date"/>
      <xs:element name="endTime" type="xs:date"/>
      <xs:element minOccurs="0" name="type" type="xs:string"/>
      <xs:element minOccurs="0" name="lpuId" type="xs:long"/>
      <xs:element minOccurs="0" name="lpuType" type="xs:string"/>
      <xs:element minOccurs="0" name="lpuName" type="xs:string"/>
      <xs:element minOccurs="0" name="availableResourceId" type="xs:long"/>
      <xs:element minOccurs="0" name="toDoctor" type="tns:toDoctor"/>
      <xs:element minOccurs="0" name="toLdp" type="tns:toLdp"/>
      <xs:element minOccurs="0" name="diagnosis" type="tns:diagnosis">
        <xs:annotation>
          <xs:documentation>Информация о диагнозе</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="issuedDoctor" type="tns:jobInfo">
        <xs:annotation>
          <xs:documentation>Информация о враче, выдавшем направление/назначение</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="countActiveAppointment" type="xs:int"/>
      <xs:element name="countAppointmentWithReceptionFact" type="xs:int"/>
      <xs:element minOccurs="0" name="invalid" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="referralDesc">
    <xs:sequence>
      <xs:element name="referralId" type="xs:long"/>
      <xs:element name="startTime" type="xs:date"/>
      <xs:element name="endTime" type="xs:date"/>
      <xs:element minOccurs="0" name="availableResourceId" type="xs:long"/>
      <xs:element minOccurs="0" name="lpuId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="appointmentDesc">
    <xs:sequence>
      <xs:element name="appointmentId" type="xs:long"/>
      <xs:element name="appointmentNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="patient" type="tns:patientShort"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="scheduleOfDay">
    <xs:sequence>
      <xs:element name="date" type="xs:date"/>
      <xs:element maxOccurs="unbounded" name="scheduleBySlot" type="tns:scheduleBySlot"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="medicalSpeciality">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="male" type="xs:boolean"/>
      <xs:element minOccurs="0" name="female" type="xs:boolean"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="areaType" type="xs:string"/>
      <xs:element minOccurs="0" name="onlyByRefferal" type="xs:boolean"/>
      <xs:element minOccurs="0" name="therapeutic" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="toDoctor">
    <xs:sequence>
      <xs:element name="specialityId" type="xs:long"/>
      <xs:element name="specialityName" type="xs:string"/>
      <xs:element minOccurs="0" name="doctorFio" type="xs:string"/>
      <xs:element name="receptionTypeId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="toLdp">
    <xs:sequence>
      <xs:element name="ldpTypeId" type="xs:long"/>
      <xs:element name="ldpTypeName" type="xs:string"/>
      <xs:element minOccurs="0" name="countAssignmentProcedures" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="diagnosis">
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код по МКБ-10</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование диагноза</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="jobInfo">
    <xs:sequence>
      <xs:element name="jobExecutionId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД_Исполнение должности</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="fio" type="xs:string">
        <xs:annotation>
          <xs:documentation>Фамилия Имя Отчество</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="snils" type="xs:string">
        <xs:annotation>
          <xs:documentation>СНИЛС</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="specialityId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД_Специальность</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="specialityName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование специальности</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="appointmentReception">
    <xs:sequence>
      <xs:element name="appointmentId" type="xs:long"/>
      <xs:element minOccurs="0" name="appointmentNumber" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="appointment">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="number" type="xs:string"/>
      <xs:element minOccurs="0" name="liveQueueTicketId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД талона в ЖО</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="liveQueueTicketNumber" type="xs:string">
        <xs:annotation>
          <xs:documentation>Номер талона в ЖО</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="lpuId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД ЛПУ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="typeLpu" type="xs:string"/>
      <xs:element name="nameLpu" type="xs:string"/>
      <xs:element name="lpuAddress" type="xs:string"/>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:element name="type" type="xs:string"/>
      <xs:element minOccurs="0" name="enableCancel" type="xs:boolean"/>
      <xs:element minOccurs="0" name="enableShift" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Разрешен ли перенос</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element name="complexResourceId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД КР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="roomId" type="xs:long"/>
      <xs:element minOccurs="0" name="roomNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="addressPointId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД Адресной точки кабинета</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="toDoctor" type="tns:toDoctor"/>
      <xs:element minOccurs="0" name="toLdp" type="tns:toLdp"/>
      <xs:element minOccurs="0" name="toBM" type="ns1:SamplingType"/>
      <xs:element name="statusId" type="xs:int"/>
      <xs:element minOccurs="0" name="referral" type="tns:referralDesc">
        <xs:annotation>
          <xs:documentation>Направление</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="eno" type="xs:string"/>
      <xs:element minOccurs="0" name="cancelInfo" type="ns1:cancelInfo"/>
      <xs:element minOccurs="0" name="receptionFactId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelInfo">
    <xs:sequence>
      <xs:element name="cancelReasonId" type="xs:long"/>
      <xs:element name="cancelReasonDesc" type="xs:string"/>
      <xs:element minOccurs="0" name="cancelTime" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="appointmentReceptionToDoctor">
    <xs:sequence>
      <xs:element minOccurs="0" name="doctorSpecialityCode" type="xs:string"/>
      <xs:element minOccurs="0" name="doctorSpeciality" type="xs:string"/>
      <xs:element minOccurs="0" name="doctorFio" type="xs:string"/>
      <xs:element minOccurs="0" name="viewReceptionCode" type="xs:string"/>
      <xs:element minOccurs="0" name="room" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="availableResource">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="lpuId" type="xs:long"/>
      <xs:element minOccurs="0" name="name" type="xs:string"/>
      <xs:element name="arType" type="xs:int"/>
      <xs:element minOccurs="0" name="specialityChangeAbility" type="xs:boolean"/>
      <xs:element minOccurs="0" name="arSpecialityId" type="xs:long"/>
      <xs:element minOccurs="0" name="arSpecialityName" type="xs:string"/>
      <xs:element minOccurs="0" name="mainDoctor" type="ns1:mainDoctor"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="receptionType" type="ns1:receptionType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ldpType" type="ns1:ldpTypeForAr"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="samplingType" type="ns1:SamplingType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="complexResource" type="ns1:complexResource"/>
      <xs:element default="false" name="district" type="xs:boolean"/>
      <xs:element default="false" name="replacement" type="xs:boolean"/>
      <xs:element minOccurs="0" name="nondistrict" type="xs:boolean"/>
      <xs:element default="false" name="availableByReferral" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DutyARScheduleInfo">
    <xs:sequence>
      <xs:element name="startTime" type="xs:time"/>
      <xs:element name="endTime" type="xs:time"/>
      <xs:element name="existedLiveQueueTickets" type="xs:int"/>
      <xs:element name="availableResource" type="tns:availableResource"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResultCreationAppointmentToDutyDoctor">
    <xs:sequence>
      <xs:element name="appointmentDesc" type="tns:appointmentDesc"/>
      <xs:element name="liveQueueTicketId" type="xs:long"/>
      <xs:element name="liveQueueTicketNumber" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointment">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element name="complexResourceId" type="xs:long"/>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:choice minOccurs="0">
        <xs:element name="referralId" type="xs:long"/>
        <xs:element name="receptionTypeId" type="xs:long"/>
      </xs:choice>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element minOccurs="0" name="eno" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointmentResponse">
    <xs:sequence>
      <xs:element name="appointmentDesc" type="ns1:appointmentDesc"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAppointmentReceptionsByPatient">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element minOccurs="0" name="signActiveArchive" type="tns:signActiveArchiveType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAppointmentReceptionsByPatientResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="appointment" type="tns:appointment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAvailableResourceScheduleInfo">
    <xs:sequence>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element minOccurs="0" name="complexResourceId" type="xs:long"/>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element minOccurs="0" name="referralId" type="xs:long"/>
      <xs:element minOccurs="0" name="period" type="ns1:DatePeriod"/>
      <xs:element minOccurs="0" name="appointmentId" type="xs:long"/>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAvailableResourceScheduleInfoResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:availableResourceScheduleBySlots"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfo">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:choice>
        <xs:element name="appointmentId" type="xs:long"/>
        <xs:element name="referralId" type="xs:long"/>
        <xs:element name="specialityId" type="xs:long"/>
      </xs:choice>
      <xs:element minOccurs="0" name="includeArWithoutSlots" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>По умолчанию - true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="quotaTypes">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="quotaType" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfoResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="availableResource" type="tns:availableResource"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getReferralsInfo">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element minOccurs="0" name="returnExtended" type="xs:boolean"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getReferralsInfoResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="referral" type="tns:referral"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSpecialitiesInfo">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSpecialitiesInfoResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="medicalSpeciality" type="tns:medicalSpeciality"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="shiftAppointment">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element minOccurs="0" name="complexResourceId" type="xs:long"/>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
      <xs:choice minOccurs="0">
        <xs:element name="referralId" type="xs:long"/>
        <xs:element name="receptionTypeId" type="xs:long"/>
      </xs:choice>
      <xs:element name="appointmentId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="shiftAppointmentResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:appointmentDesc"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointment">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="appointmentId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDutyARScheduleByPatient">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element name="lpuId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDutyARScheduleByPatientResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:DutyARScheduleInfo"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointmentToDutyDoctorByPatient">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element name="lpuId" type="xs:long"/>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element name="complexResourceId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointmentToDutyDoctorByPatientResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:ResultCreationAppointmentToDutyDoctor"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentToDutyDoctorByPatient">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element name="appointmentId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentToDutyDoctorByPatientResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getHealthCareAvailabilityAttributes">
    <xs:sequence>
      <xs:element name="patientId" type="xs:long">
        <xs:annotation>
          <xs:documentation>Идентификатор пациента</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="referralId" type="xs:long"/>
        <xs:element name="specialityId" type="xs:long"/>
        <xs:element name="ldpId" type="xs:long"/>
        <xs:element name="samplingTypeId" type="xs:long"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getHealthCareAvailabilityAttributesResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="availabilityInfo" type="tns:availabilityInfo"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="availabilityInfo">
    <xs:sequence>
      <xs:element name="nearestAppointmentDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>Дата и время ближайшего свободного талона</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="availableResourceBasis" type="tns:availableResourceBasis">
        <xs:annotation>
          <xs:documentation>Группирующая сущность: основание для подбора ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="externalSystemId" type="xs:string">
        <xs:annotation>
          <xs:documentation>ИД внешней системы, через которую осуществлялся подбор ДР</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="creationDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>Дата и время создания записи</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="ldpId" type="xs:long"/>
      <xs:element minOccurs="0" name="nearestMainDoctorDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>Дата и время ближайшего свободного талона основного врача</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="nearestReplacementDoctorDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>Дата и время ближайшего свободного талона замещающего врача</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentBySms">
    <xs:sequence>
      <xs:element name="patientPhoneNumber" type="xs:string"/>
      <xs:element name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentBySmsResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentByID">
    <xs:sequence>
      <xs:element name="appointmentId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAppointmentByIDResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAssignmentsInfo">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string">
        <xs:annotation>
          <xs:documentation>Номер полиса ОМС</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string">
        <xs:annotation>
          <xs:documentation>Серия полиса ОМС</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="birthDate" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата рождения пациента</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element default="false" minOccurs="0" name="returnExtended" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Вернуть расширенную версию направления</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="externalSystemId" type="xs:string">
        <xs:annotation>
          <xs:documentation>Обозначение внешней системы</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAssignmentsInfoResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="assignment" type="ns1:AssignmentGroup">
        <xs:annotation>
          <xs:documentation>Активные назначения пациента</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfoForLI">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element name="assignment" type="ns1:Assignment">
        <xs:annotation>
          <xs:documentation>Назначение</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="appointmentId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfoForLIResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="availableResource" type="tns:availableResource"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSpecialitiesInfoForGroup">
    <xs:sequence>
      <xs:element maxOccurs="10" minOccurs="2" name="patientGroupEntry" type="tns:patientGroupEntry"/>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSpecialitiesInfoForGroupResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="medicalSpeciality" type="tns:medicalSpeciality"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfoForGroup">
    <xs:sequence>
      <xs:element maxOccurs="10" minOccurs="2" name="patientGroupEntry">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="tns:patientGroupEntry">
              <xs:sequence>
                <xs:element minOccurs="0" name="appointmentId" type="xs:long"/>
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="specialityId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDoctorsInfoForGroupResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="availableResource" type="tns:availableResource"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAvailableResourceScheduleInfoForGroup">
    <xs:sequence>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element maxOccurs="10" minOccurs="2" name="patientGroupEntry">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="tns:patientGroupEntry">
              <xs:sequence>
                <xs:element minOccurs="0" name="appointmentId" type="xs:long"/>
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="quotaTypes" type="tns:quotaTypes"/>
      <xs:element minOccurs="0" name="disableQuotaTypes" type="tns:quotaTypes"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAvailableResourceScheduleInfoForGroupResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:availableResourceScheduleBySlots"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointmentForGroup">
    <xs:sequence>
      <xs:element maxOccurs="10" minOccurs="2" name="patientGroupEntry">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="tns:patientGroupEntry">
              <xs:sequence>
                <xs:element name="appTime" type="tns:TimeInterval"/>
                <xs:element name="complexResourceId" type="xs:long"/>
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element name="receptionTypeId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createAppointmentForGroupResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="appointmentDesc" type="ns1:appointmentDesc"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="shiftAppointmentForGroup">
    <xs:sequence>
      <xs:element maxOccurs="10" minOccurs="2" name="patientGroupEntry">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="tns:patientGroupEntry">
              <xs:sequence>
                <xs:element name="appTime" type="tns:TimeInterval"/>
                <xs:element name="complexResourceId" type="xs:long"/>
                <xs:element name="appointmentId" type="xs:long"/>
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="availableResourceId" type="xs:long"/>
      <xs:element name="receptionTypeId" type="xs:long"/>
      <xs:element name="externalSystemId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="shiftAppointmentForGroupResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="appointmentDesc" type="tns:appointmentDesc"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getArchivedAppointments">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
      <xs:element minOccurs="0" name="period" type="ns1:DatePeriodOptional"/>
      <xs:element name="externalSystemId" type="xs:string"/>
      <xs:element minOccurs="0" name="pagingOptions" type="core:PagingOptions"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getArchivedAppointmentsResponse">
    <xs:sequence>
      <xs:element name="result" type="tns:AppointmentListPage"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AppointmentListPage">
    <xs:annotation>
      <xs:documentation>Страница Списка записей</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="appointment" type="tns:appointment">
            <xs:annotation>
              <xs:documentation>Сведения о Записи</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="appointmentCodeErrorFaultInfo">
    <xs:annotation>
      <xs:documentation>Error</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="messageText" type="xs:string"/>
      <xs:element minOccurs="0" name="userId" type="xs:string"/>
      <xs:element minOccurs="0" name="operation" type="xs:string"/>
      <xs:element minOccurs="0" name="resource" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="availableResourceScheduleBySlots">
    <xs:sequence>
      <xs:element name="availableResource" type="ns1:availableResource"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="scheduleOfDay" type="ns1:scheduleOfDay"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="appointmentLock">
    <xs:sequence>
      <xs:element name="appointmentId" type="xs:long"/>
      <xs:element minOccurs="0" name="arSpecialityId" type="xs:long"/>
      <xs:element minOccurs="0" name="arSamplingTypeId" type="xs:long"/>
      <xs:element minOccurs="0" name="lpuId" type="xs:long"/>
      <xs:element minOccurs="0" name="patient" type="tns:patientShort"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="scheduleBySlot">
    <xs:sequence>
      <xs:element name="complexResourceId" type="xs:long"/>
      <xs:element name="cabinetNumber" type="xs:string"/>
      <xs:element maxOccurs="unbounded" name="slot" type="ns1:slot"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="slot">
    <xs:sequence>
      <xs:element name="startTime" type="xs:dateTime"/>
      <xs:element name="endTime" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="mainDoctor">
    <xs:sequence>
      <xs:element minOccurs="0" name="specialityName" type="xs:string"/>
      <xs:element name="specialityId" type="xs:long"/>
      <xs:element name="firstName" type="xs:string"/>
      <xs:element name="lastName" type="xs:string"/>
      <xs:element minOccurs="0" name="secondName" type="xs:string"/>
      <xs:element name="mejiId" type="xs:long"/>
      <xs:element name="employeeId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Assignment">
    <xs:sequence>
      <xs:element name="moId" type="xs:long"/>
      <xs:element name="samplingTypeId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД профиля взятия БМ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="period" type="ns1:DatePeriod"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AssignmentGroup">
    <xs:sequence>
      <xs:element name="moId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД МО принимающее (головное ЛПУ куста)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="toBM" type="ns1:SamplingType">
        <xs:annotation>
          <xs:documentation>Профиль взятия БМ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="period" type="ns1:DatePeriod">
        <xs:annotation>
          <xs:documentation>Период действия назначения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="active" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак активности назначения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="appointmentAvailable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак возможности создать запись</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="appointmentId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД активной записи по данному назначению</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="unbounded" name="registryEntry" type="ns1:registryEntry">
        <xs:annotation>
          <xs:documentation>Реестровые записи</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:sequence>
      <xs:element name="dateFrom" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dateTo" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="registryEntry">
    <xs:sequence>
      <xs:element name="entryId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД реестровой записи</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="laboratoryId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД лабораторного исследования</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="laboratoryName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование ЛИ (краткое)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="biomaterialId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД биоматериала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="biomaterialName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование биоматериала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="hasMemo" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак наличия памятки</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="diagnosis" type="ns1:diagnosis">
        <xs:annotation>
          <xs:documentation>Информация о диагнозе</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="issuedDoctor" type="ns1:jobInfo">
        <xs:annotation>
          <xs:documentation>Информация о назначившем враче</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="receptionType">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="primary" type="xs:string"/>
      <xs:element minOccurs="0" name="home" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ldpTypeForAr">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="complexResource">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="room" type="ns1:room"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="room">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="number" type="xs:string"/>
      <xs:element minOccurs="0" name="lpuId" type="xs:long"/>
      <xs:element minOccurs="0" name="lpuShortName" type="xs:string"/>
      <xs:element minOccurs="0" name="addressPointId" type="xs:long"/>
      <xs:element minOccurs="0" name="defaultAddress" type="xs:string"/>
      <xs:element name="availabilityDate" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SamplingType">
    <xs:sequence>
      <xs:element name="id" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД профиля взятия БМ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>Название профиля</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="self" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак самовзятого БМ</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="soapException">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="text" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="appointmentLock" type="tns:appointmentLock"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="patientGroupError" type="tns:patientShort"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="patientShort">
    <xs:sequence>
      <xs:element minOccurs="0" name="patientId" type="xs:long"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="patientGroupEntry">
    <xs:sequence>
      <xs:element name="omsNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="omsSeries" type="xs:string"/>
      <xs:element name="birthDate" type="xs:date"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TimeInterval">
    <xs:sequence>
      <xs:element name="start" type="xs:dateTime"/>
      <xs:element name="end" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriodOptional">
    <xs:annotation>
      <xs:documentation>Описывает календарный период</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="dateFrom" type="xs:date"/>
      <xs:element minOccurs="0" name="dateTo" type="xs:date"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELs3rrVnLFkjJMy5mDfngAN2826cviAmOKcwB0rpK0eO9luhxWIPHWt9l0e4P44rDtQmP</con:url><con:content>&lt;xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://api.service.soap.emias.lanit.ru/core/v5/" version="1.0" xmlns="http://api.service.soap.emias.lanit.ru/core/v5/" xmlns:xs="http://www.w3.org/2001/XMLSchema">&#13;
  &lt;xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsf0p1DdS1_UID8nCZurCtixl_TVFNCF.Zm2IERIorUG3w--"/>&#13;
&lt;/xs:schema></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsf0p1DdS1_UID8nCZurCtixl_TVFNCF.Zm2IERIorUG3w--</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.2" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsf0p1DdS0_CIS5sEoTzQ4Wty6YHlLYutqNN7wO_MFN0JMBt"/>
  <!--references-->
  <xs:element name="mail" type="Mail">
    <xs:annotation>
      <xs:documentation>Адрес электронной почты</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="compositionId" type="GUID">
    <xs:annotation>
      <xs:documentation>Идентификатор Композиции Think!EHR ЕМИАС.СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="simiDocumentId" type="GUID">
    <xs:annotation>
      <xs:documentation>Идентификатор Документа СИМИ ЕМИАС.СИМИ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--abstract types-->
  <xs:complexType abstract="true" name="Base">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания компонентов сущностей, владельцеми которых является текущий продукт ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор сущности/записи на уровне всего ЕМИАС</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания сущностей, владельцем которых является текущий продукт ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base">
        <xs:attribute name="archived" type="xs:boolean" use="required">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания компонентов сущностей, владельцами которых являются другие продукты ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания сущностей, владельцами которых являются другие продукты ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания типов, реализующих справочники ЕМИАС.НСИ.2</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование элемента справочника</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiWithCodeBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания типов, реализующих справочники ЕМИАС.НСИ.2, в которых имеется бизнес-код</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Бизнес-код</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="SIMIDocumentBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, используемый для описания cведений о документе СИМИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="simiDocumentId"/>
      <xs:element minOccurs="0" ref="compositionId"/>
    </xs:sequence>
  </xs:complexType>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="totalItemsCount" type="xs:long" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество элементов (на всех страницах)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки (используются в соответствии с переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--keys-->
  <xs:complexType name="EntityId">
    <xs:annotation>
      <xs:documentation>Идентфикатор сущности, непосредственно принадлежащей текущему продукту ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Base"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ForeignEntityId">
    <xs:annotation>
      <xs:documentation>Идентфикатор сущности ЕМИАС, внешней по отношнению к текущему продукту ЕМИАС</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="NsiGlobalId">
    <xs:annotation>
      <xs:documentation>Глобальный идентфикатор ЕМИАС.НСИ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase"/>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsf0p1DdS0_CIS5sEoTzQ4Wty6YHlLYutqNN7wO_MFN0JMBt</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="Mail">
    <xs:annotation>
      <xs:documentation>Адрес электронной почты</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:maxLength value="320"/>
      <xs:pattern value=".+@.+\..+"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint></con:endpoints><con:operation id="b29de648-2489-4ea1-a715-905d32559ea2" isOneWay="false" action="urn://cancelAppointment" name="cancelAppointment" bindingOperationName="cancelAppointment" type="Request-Response" outputName="cancelAppointmentResponse" inputName="cancelAppointment" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="322fba08-9f6a-4062-88e7-6777c5c35e23" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:cancelAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointment"/></con:call></con:operation><con:operation id="a7a7791a-8916-48f0-a4e1-29b1b203993f" isOneWay="false" action="urn://cancelAppointmentByID" name="cancelAppointmentByID" bindingOperationName="cancelAppointmentByID" type="Request-Response" outputName="cancelAppointmentByIDResponse" inputName="cancelAppointmentByID" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="c4cc1b50-f0ca-4c48-b277-2e85fbd842fb" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentByID>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentByID>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentByID"/></con:call></con:operation><con:operation id="76d7dedf-7de4-471a-bf5e-72a6f983dcc6" isOneWay="false" action="urn://cancelAppointmentBySms" name="cancelAppointmentBySms" bindingOperationName="cancelAppointmentBySms" type="Request-Response" outputName="cancelAppointmentBySmsResponse" inputName="cancelAppointmentBySms" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="a0cbbab0-ab0f-42bf-8ce4-a3d88f426dad" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentBySms>\r
         <patientPhoneNumber>?</patientPhoneNumber>\r
         <message>?</message>\r
      </v5:cancelAppointmentBySms>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentBySms"/></con:call></con:operation><con:operation id="bc8e07ac-5f5b-462d-91cd-0f0debf38959" isOneWay="false" action="urn://cancelAppointmentToDutyDoctorByPatient" name="cancelAppointmentToDutyDoctorByPatient" bindingOperationName="cancelAppointmentToDutyDoctorByPatient" type="Request-Response" outputName="cancelAppointmentToDutyDoctorByPatientResponse" inputName="cancelAppointmentToDutyDoctorByPatient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="79c3d65d-6cf9-4eb9-8661-64af3a527e37" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:cancelAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <appointmentId>?</appointmentId>\r
      </v5:cancelAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/cancelAppointmentToDutyDoctorByPatient"/></con:call></con:operation><con:operation id="417ac071-128f-40d7-85a7-c2c129fddfbd" isOneWay="false" action="urn://createAppointment" name="createAppointment" bindingOperationName="createAppointment" type="Request-Response" outputName="createAppointmentResponse" inputName="createAppointment" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="92d23d18-cf70-4dd7-ae15-654eb93fc427" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <eno>?</eno>\r
      </v5:createAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointment"/></con:call></con:operation><con:operation id="384236ab-ab6d-4807-a15f-cab52f7ccd0b" isOneWay="false" action="urn://createAppointmentForGroup" name="createAppointmentForGroup" bindingOperationName="createAppointmentForGroup" type="Request-Response" outputName="createAppointmentForGroupResponse" inputName="createAppointmentForGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e0a8eb25-1c74-40f2-adf5-4b6c875d1308" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:createAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentForGroup"/></con:call></con:operation><con:operation id="e9fbc4e8-8451-4ab7-8b84-f4a73ae6a8df" isOneWay="false" action="urn://createAppointmentToDutyDoctorByPatient" name="createAppointmentToDutyDoctorByPatient" bindingOperationName="createAppointmentToDutyDoctorByPatient" type="Request-Response" outputName="createAppointmentToDutyDoctorByPatientResponse" inputName="createAppointmentToDutyDoctorByPatient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="ebfe23d5-7b21-4587-b65e-0ec3b6530457" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:createAppointmentToDutyDoctorByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
         <availableResourceId>?</availableResourceId>\r
         <complexResourceId>?</complexResourceId>\r
      </v5:createAppointmentToDutyDoctorByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/createAppointmentToDutyDoctorByPatient"/></con:call></con:operation><con:operation id="67fda0fd-519e-4813-85d4-317f994b64c8" isOneWay="false" action="urn://getAppointmentReceptionsByPatient" name="getAppointmentReceptionsByPatient" bindingOperationName="getAppointmentReceptionsByPatient" type="Request-Response" outputName="getAppointmentReceptionsByPatientResponse" inputName="getAppointmentReceptionsByPatient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="bc8c0ccc-79a7-42c4-bfb0-3ae6a028bfe0" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAppointmentReceptionsByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <signActiveArchive>?</signActiveArchive>\r
      </v5:getAppointmentReceptionsByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAppointmentReceptionsByPatient"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="a1f01835-f2d0-4ce8-a73f-df6c37299d72" isOneWay="false" action="urn://getArchivedAppointments" name="getArchivedAppointments" bindingOperationName="getArchivedAppointments" type="Request-Response" outputName="getArchivedAppointmentsResponse" inputName="getArchivedAppointments" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="91d061ac-2993-4491-90f7-6cc1e70c1774" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/" xmlns:v51="http://api.service.soap.emias.lanit.ru/core/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getArchivedAppointments>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <period>\r
            <!--Optional:-->\r
            <dateFrom>?</dateFrom>\r
            <!--Optional:-->\r
            <dateTo>?</dateTo>\r
         </period>\r
         <externalSystemId>?</externalSystemId>\r
         <!--Optional:-->\r
         <pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v51:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v51:sortOrder attributeName="?" desceding="false"/>\r
            </v51:sortingOptions>\r
         </pagingOptions>\r
      </v5:getArchivedAppointments>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getArchivedAppointments"/></con:call></con:operation><con:operation id="b6b218fd-49d7-4021-8ec8-cc9f1cb4ba9e" isOneWay="false" action="urn://getAssignmentsInfo" name="getAssignmentsInfo" bindingOperationName="getAssignmentsInfo" type="Request-Response" outputName="getAssignmentsInfoResponse" inputName="getAssignmentsInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="4c03e65d-5fb4-4d6b-aa83-0134ff0da2bd" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAssignmentsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <returnExtended>false</returnExtended>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAssignmentsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAssignmentsInfo"/></con:call></con:operation><con:operation id="31a437d2-d35c-4c64-a62d-569f13504dd8" isOneWay="false" action="urn://getAvailableResourceScheduleInfo" name="getAvailableResourceScheduleInfo" bindingOperationName="getAvailableResourceScheduleInfo" type="Request-Response" outputName="getAvailableResourceScheduleInfoResponse" inputName="getAvailableResourceScheduleInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="dd5cf766-f6f2-48e5-b7f2-539b335811f7" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfo>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <referralId>?</referralId>\r
         <!--Optional:-->\r
         <period>\r
            <dateFrom>?</dateFrom>\r
            <dateTo>?</dateTo>\r
         </period>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfo"/></con:call></con:operation><con:operation id="85b8a4ea-ee08-4b30-8575-da3485c20153" isOneWay="false" action="urn://getAvailableResourceScheduleInfoForGroup" name="getAvailableResourceScheduleInfoForGroup" bindingOperationName="getAvailableResourceScheduleInfoForGroup" type="Request-Response" outputName="getAvailableResourceScheduleInfoForGroupResponse" inputName="getAvailableResourceScheduleInfoForGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="bdaf09e8-836e-4f80-9bc8-ee61427510f2" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfoForGroup>\r
         <availableResourceId>?</availableResourceId>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAvailableResourceScheduleInfoForGroup"/></con:call></con:operation><con:operation id="eace00ed-4ea7-4ad4-aa46-35fc9607c5dd" isOneWay="false" action="urn://getDoctorsInfo" name="getDoctorsInfo" bindingOperationName="getDoctorsInfo" type="Request-Response" outputName="getDoctorsInfoResponse" inputName="getDoctorsInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="dd8c2c05-4bc0-47a4-9952-5dc8fcbd0e66" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--You have a CHOICE of the next 3 items at this level-->\r
         <appointmentId>?</appointmentId>\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <!--Optional:-->\r
         <includeArWithoutSlots>?</includeArWithoutSlots>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfo"/></con:call></con:operation><con:operation id="c0e8e421-5d4e-42e7-ad54-4fa3ac247e42" isOneWay="false" action="urn://getDoctorsInfoForGroup" name="getDoctorsInfoForGroup" bindingOperationName="getDoctorsInfoForGroup" type="Request-Response" outputName="getDoctorsInfoForGroupResponse" inputName="getDoctorsInfoForGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="a0e92d08-966e-49b3-925e-d27f13aedecf" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <!--Optional:-->\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <specialityId>?</specialityId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForGroup"/></con:call></con:operation><con:operation id="e6db2d5b-3ab3-4ade-89db-9610b4b1b115" isOneWay="false" action="urn://getDoctorsInfoForLI" name="getDoctorsInfoForLI" bindingOperationName="getDoctorsInfoForLI" type="Request-Response" outputName="getDoctorsInfoForLIResponse" inputName="getDoctorsInfoForLI" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="33bdc55b-7690-478f-883a-415450ba72ce" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForLI>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <assignment>\r
            <moId>?</moId>\r
            <samplingTypeId>?</samplingTypeId>\r
            <period>\r
               <dateFrom>?</dateFrom>\r
               <dateTo>?</dateTo>\r
            </period>\r
         </assignment>\r
         <!--Optional:-->\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getDoctorsInfoForLI>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForLI"/></con:call></con:operation><con:operation id="94304f4d-c3c4-4ba4-b932-0da3142d845b" isOneWay="false" action="urn://getDutyARScheduleByPatient" name="getDutyARScheduleByPatient" bindingOperationName="getDutyARScheduleByPatient" type="Request-Response" outputName="getDutyARScheduleByPatientResponse" inputName="getDutyARScheduleByPatient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="69360dfe-af81-4f6b-bbaa-27fee99fdd54" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getDutyARScheduleByPatient>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <externalSystemId>?</externalSystemId>\r
         <lpuId>?</lpuId>\r
      </v5:getDutyARScheduleByPatient>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDutyARScheduleByPatient"/></con:call></con:operation><con:operation id="7a794b22-49a8-49e3-98a7-7a4b12ccc8f4" isOneWay="false" action="urn://getHealthCareAvailabilityAttributes" name="getHealthCareAvailabilityAttributes" bindingOperationName="getHealthCareAvailabilityAttributes" type="Request-Response" outputName="getHealthCareAvailabilityAttributesResponse" inputName="getHealthCareAvailabilityAttributes" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e218dfe7-832a-4505-970e-9e8e548f855f" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getHealthCareAvailabilityAttributes>\r
         <patientId>?</patientId>\r
         <!--You have a CHOICE of the next 4 items at this level-->\r
         <referralId>?</referralId>\r
         <specialityId>?</specialityId>\r
         <ldpId>?</ldpId>\r
         <samplingTypeId>?</samplingTypeId>\r
      </v5:getHealthCareAvailabilityAttributes>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getHealthCareAvailabilityAttributes"/></con:call></con:operation><con:operation id="8d59a72b-9ddd-4d2b-a874-ff9310170749" isOneWay="false" action="urn://getReferralsInfo" name="getReferralsInfo" bindingOperationName="getReferralsInfo" type="Request-Response" outputName="getReferralsInfoResponse" inputName="getReferralsInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="15e55fed-0dcd-4deb-99de-8db47835f6f8" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getReferralsInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <returnExtended>?</returnExtended>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getReferralsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getReferralsInfo"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="2005cf39-6c27-4001-8bd6-7cc42e9c56cb" isOneWay="false" action="urn://getSpecialitiesInfo" name="getSpecialitiesInfo" bindingOperationName="getSpecialitiesInfo" type="Request-Response" outputName="getSpecialitiesInfoResponse" inputName="getSpecialitiesInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="f9dd1d86-0f48-4684-92a2-d3288b9befc5" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfo>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfo"/></con:call></con:operation><con:operation id="f24fc1a2-58ae-49d9-ba7b-be3b148c810e" isOneWay="false" action="urn://getSpecialitiesInfoForGroup" name="getSpecialitiesInfoForGroup" bindingOperationName="getSpecialitiesInfoForGroup" type="Request-Response" outputName="getSpecialitiesInfoForGroupResponse" inputName="getSpecialitiesInfoForGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="3e7fa3de-9b07-40b6-9461-ed76993395f1" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:getSpecialitiesInfoForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
         </patientGroupEntry>\r
         <!--Optional:-->\r
         <quotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </quotaTypes>\r
         <!--Optional:-->\r
         <disableQuotaTypes>\r
            <!--1 or more repetitions:-->\r
            <quotaType>?</quotaType>\r
         </disableQuotaTypes>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:getSpecialitiesInfoForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getSpecialitiesInfoForGroup"/></con:call></con:operation><con:operation id="92cd8211-7ea0-4393-975c-31da65dcb4b6" isOneWay="false" action="urn://shiftAppointment" name="shiftAppointment" bindingOperationName="shiftAppointment" type="Request-Response" outputName="shiftAppointmentResponse" inputName="shiftAppointment" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="448b9de5-7349-4749-b406-0c051cc9cfe3" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointment>\r
         <omsNumber>?</omsNumber>\r
         <!--Optional:-->\r
         <omsSeries>?</omsSeries>\r
         <birthDate>?</birthDate>\r
         <availableResourceId>?</availableResourceId>\r
         <!--Optional:-->\r
         <complexResourceId>?</complexResourceId>\r
         <startTime>?</startTime>\r
         <endTime>?</endTime>\r
         <!--You have a CHOICE of the next 2 items at this level-->\r
         <referralId>?</referralId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <appointmentId>?</appointmentId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointment>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointment"/></con:call></con:operation><con:operation id="cb375e7e-8d0a-413d-92d2-6e6520d66f8c" isOneWay="false" action="urn://shiftAppointmentForGroup" name="shiftAppointmentForGroup" bindingOperationName="shiftAppointmentForGroup" type="Request-Response" outputName="shiftAppointmentForGroupResponse" inputName="shiftAppointmentForGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="f7387d10-3086-414f-8d02-4038e39dd14d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <v5:shiftAppointmentForGroup>\r
         <!--2 to 10 repetitions:-->\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <patientGroupEntry>\r
            <omsNumber>?</omsNumber>\r
            <!--Optional:-->\r
            <omsSeries>?</omsSeries>\r
            <birthDate>?</birthDate>\r
            <appTime>\r
               <start>?</start>\r
               <end>?</end>\r
            </appTime>\r
            <complexResourceId>?</complexResourceId>\r
            <appointmentId>?</appointmentId>\r
         </patientGroupEntry>\r
         <availableResourceId>?</availableResourceId>\r
         <receptionTypeId>?</receptionTypeId>\r
         <externalSystemId>?</externalSystemId>\r
      </v5:shiftAppointmentForGroup>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/shiftAppointmentForGroup"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="75549fe1-9528-4d0b-9874-24ffdef71622" wsaVersion="NONE" name="LaboratoryOtherDictionariesServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/laboratory/v1/dictionary/other/soap/}LaboratoryOtherDictionariesServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?wsdl"><con:part><con:url>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:dto="http://emias.mos.ru/laboratory/v1/dictionary/other/" xmlns:ct="http://emias.mos.ru/laboratory/v1/common/types/">
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/laboratory/v1/dictionary/other/" schemaLocation="http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?xsd=dictionary-other-wsdl-types.xsd"/>
      <xs:import namespace="http://emias.mos.ru/laboratory/v1/common/types/" schemaLocation="http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?xsd=common-types.xsd"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="faultMessage">
    <wsdl:part element="ct:LaboratoryFaultInfo" name="errorInfo"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getReasonCullTubeResponse">
    <wsdl:part element="dto:getReasonCullTubeResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMemoryCardRequest">
    <wsdl:part element="dto:getMemoryCardRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMethodOfObtainingBiopsyMaterialRequest">
    <wsdl:part element="dto:getMethodOfObtainingBiopsyMaterialRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMemoryCardForLKRequest">
    <wsdl:part element="dto:getMemoryCardForLKRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getReasonCancelAssignmentRequest">
    <wsdl:part element="dto:getReasonCancelAssignmentRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSamplingTypeResponse">
    <wsdl:part element="dto:getSamplingTypeResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getReasonCullTubeRequest">
    <wsdl:part element="dto:getReasonCullTubeRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPriorityRequest">
    <wsdl:part element="dto:getPriorityRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMemoryCardResponse">
    <wsdl:part element="dto:getMemoryCardResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getClinicalLaboratoriesResponse">
    <wsdl:part element="dto:getClinicalLaboratoriesResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSamplingTypeRequest">
    <wsdl:part element="dto:getSamplingTypeRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMethodOfObtainingBiopsyMaterialResponse">
    <wsdl:part element="dto:getMethodOfObtainingBiopsyMaterialResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTakeCytologyBMListResponse">
    <wsdl:part element="dto:getTakeCytologyBMListResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getReasonCancelAssignmentResponse">
    <wsdl:part element="dto:getReasonCancelAssignmentResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getServiceResponse">
    <wsdl:part element="dto:getServiceResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getColorsListRequest">
    <wsdl:part element="dto:getColorsListRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getColorsListResponse">
    <wsdl:part element="dto:getColorsListResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAddSignRequest">
    <wsdl:part element="dto:getAddSignRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getBiopsyResearchGoalRequest">
    <wsdl:part element="dto:getBiopsyResearchGoalRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAddSignResponse">
    <wsdl:part element="dto:getAddSignResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTakeCytologyBMListRequest">
    <wsdl:part element="dto:getTakeCytologyBMListRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getBiopsyResearchGoalResponse">
    <wsdl:part element="dto:getBiopsyResearchGoalResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getContingentCodeResponse">
    <wsdl:part element="dto:getContingentCodeResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getClinicalLaboratoriesRequest">
    <wsdl:part element="dto:getClinicalLaboratoriesRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getContingentCodeRequest">
    <wsdl:part element="dto:getContingentCodeRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTreatmentResponse">
    <wsdl:part element="dto:getTreatmentResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPriorityResponse">
    <wsdl:part element="dto:getPriorityResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getServiceRequest">
    <wsdl:part element="dto:getServiceRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTreatmentRequest">
    <wsdl:part element="dto:getTreatmentRequest" name="request"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMemoryCardForLKResponse">
    <wsdl:part element="dto:getMemoryCardForLKResponse" name="response"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="LaboratoryOtherDictionariesServicePorts">
    <wsdl:operation name="getClinicalLaboratories">
      <wsdl:documentation>Метод возвращает список всех КДЛ</wsdl:documentation>
      <wsdl:input message="tns:getClinicalLaboratoriesRequest"></wsdl:input>
      <wsdl:output message="tns:getClinicalLaboratoriesResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSamplingType">
      <wsdl:documentation>Метод возвращает список профилей взятия</wsdl:documentation>
      <wsdl:input message="tns:getSamplingTypeRequest"></wsdl:input>
      <wsdl:output message="tns:getSamplingTypeResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getReasonCullTube">
      <wsdl:documentation>Метод возвращает список причин выбраковки пробирок</wsdl:documentation>
      <wsdl:input message="tns:getReasonCullTubeRequest"></wsdl:input>
      <wsdl:output message="tns:getReasonCullTubeResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getContingentCode">
      <wsdl:documentation>Метод возвращает список кодов контингентов</wsdl:documentation>
      <wsdl:input message="tns:getContingentCodeRequest"></wsdl:input>
      <wsdl:output message="tns:getContingentCodeResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAddSign">
      <wsdl:documentation>Метод возвращает список дополнительных признаков</wsdl:documentation>
      <wsdl:input message="tns:getAddSignRequest"></wsdl:input>
      <wsdl:output message="tns:getAddSignResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPriority">
      <wsdl:documentation>Метод возвращает список приоритетов назначений</wsdl:documentation>
      <wsdl:input message="tns:getPriorityRequest"></wsdl:input>
      <wsdl:output message="tns:getPriorityResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getReasonCancelAssignment">
      <wsdl:documentation>Метод возвращает список причин отмены назначений</wsdl:documentation>
      <wsdl:input message="tns:getReasonCancelAssignmentRequest"></wsdl:input>
      <wsdl:output message="tns:getReasonCancelAssignmentResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getService">
      <wsdl:documentation>Метод получения услуги МГФОМС</wsdl:documentation>
      <wsdl:input message="tns:getServiceRequest"></wsdl:input>
      <wsdl:output message="tns:getServiceResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getMemoryCard">
      <wsdl:documentation>Метод предоставления правил подготовки пациента к взятию биоматериала</wsdl:documentation>
      <wsdl:input message="tns:getMemoryCardRequest"></wsdl:input>
      <wsdl:output message="tns:getMemoryCardResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getMemoryCardForLK">
      <wsdl:documentation>Метод предоставления правил подготовки пациента к взятию биоматериала в ЛК</wsdl:documentation>
      <wsdl:input message="tns:getMemoryCardForLKRequest"></wsdl:input>
      <wsdl:output message="tns:getMemoryCardForLKResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getColorsList">
      <wsdl:documentation>Метод возвращает список гистологических окрасок</wsdl:documentation>
      <wsdl:input message="tns:getColorsListRequest"></wsdl:input>
      <wsdl:output message="tns:getColorsListResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getBiopsyResearchGoal">
      <wsdl:documentation>Метод возвращает список целей прижизненного патолого-анатомического исследования биопсийного (операционного) материала</wsdl:documentation>
      <wsdl:input message="tns:getBiopsyResearchGoalRequest"></wsdl:input>
      <wsdl:output message="tns:getBiopsyResearchGoalResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getTakeCytologyBMList">
      <wsdl:documentation>Метод возвращает список способов взятия цитологического БМ</wsdl:documentation>
      <wsdl:input message="tns:getTakeCytologyBMListRequest"></wsdl:input>
      <wsdl:output message="tns:getTakeCytologyBMListResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getMethodOfObtainingBiopsyMaterial">
      <wsdl:documentation>Метод возвращает способы получения биопсийного материала</wsdl:documentation>
      <wsdl:input message="tns:getMethodOfObtainingBiopsyMaterialRequest"></wsdl:input>
      <wsdl:output message="tns:getMethodOfObtainingBiopsyMaterialResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getTreatment">
      <wsdl:documentation>Метод возвращает справочник медицинских манипуляций</wsdl:documentation>
      <wsdl:input message="tns:getTreatmentRequest"></wsdl:input>
      <wsdl:output message="tns:getTreatmentResponse"></wsdl:output>
      <wsdl:fault message="tns:faultMessage" name="generalFault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="LaboratoryOtherDictionariesServiceBinding" type="tns:LaboratoryOtherDictionariesServicePorts">
    <soap12:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getClinicalLaboratories">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSamplingType">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getReasonCullTube">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getContingentCode">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAddSign">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPriority">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getReasonCancelAssignment">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getService">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getMemoryCard">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getMemoryCardForLK">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getColorsList">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getBiopsyResearchGoal">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getTakeCytologyBMList">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getMethodOfObtainingBiopsyMaterial">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getTreatment">
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="generalFault">
        <soap12:fault name="generalFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="LaboratoryOtherDictionariesService">
    <wsdl:port binding="tns:LaboratoryOtherDictionariesServiceBinding" name="LaboratoryOtherDictionariesService">
      <wsdl:documentation>Сервис предоставления данных справочников (кроме ЕСЛИ) ЕМИАС-ЦЛС</wsdl:documentation>
      <soap12:address location="http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?xsd=dictionary-other-wsdl-types.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/laboratory/v1/dictionary/other/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:dto="http://emias.mos.ru/laboratory/v1/dictionary/other/types/">
  <xs:import namespace="http://emias.mos.ru/laboratory/v1/dictionary/other/types/" schemaLocation="http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?xsd=dictionary-other-types.xsd"/>
  <xs:element name="getClinicalLaboratoriesRequest">
    <xs:annotation>
      <xs:documentation>Запрос на получение списка всех КДЛ</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="moId" type="xs:long"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getClinicalLaboratoriesResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос на получение списка всех КДЛ</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="clinicalLaboratory" type="dto:ClinicalLaboratory">
          <xs:annotation>
            <xs:documentation>Список КДЛ</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getSamplingTypeRequest">
    <xs:annotation>
      <xs:documentation>Запрос на список профилей взятия</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="getSamplingTypeResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос на список профилей взятия</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="samlingType" type="dto:SamplingType">
          <xs:annotation>
            <xs:documentation>Список профилей взятия</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getPriorityRequest">
    <xs:annotation>
      <xs:documentation>Запрос на список приоритетов назначений</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="getPriorityResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос на список приоритетов назначений</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="priority" type="dto:Priority">
          <xs:annotation>
            <xs:documentation>Список приоритетов назначений</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getReasonCullTubeRequest">
    <xs:annotation>
      <xs:documentation>Запрос на список причин выбраковки пробирок</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="getReasonCullTubeResponse">
    <xs:annotation>
      <xs:documentation>Ответ на список причин выбраковки пробирок</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="reasonCullTube" type="dto:ReasonCullTube">
          <xs:annotation>
            <xs:documentation>Список причин выбраковки пробирок</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getContingentCodeRequest">
    <xs:annotation>
      <xs:documentation>Запрос на список кодов контингента</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="getContingentCodeResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос на список кодов контингента</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="contingentCode" type="dto:ContingentCode">
          <xs:annotation>
            <xs:documentation>Список кодов контингента</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getAddSignRequest">
    <xs:annotation>
      <xs:documentation>Запрос на список дополнительных признаков</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="getAddSignResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос на список дополнительных признаков</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="additionalSign" type="dto:AdditionalSign">
          <xs:annotation>
            <xs:documentation>Список дополнительных признаков</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getReasonCancelAssignmentRequest">
    <xs:annotation>
      <xs:documentation>Запрос списка причин отмены назначений</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="getReasonCancelAssignmentResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос списка причин отмены назначений</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="reasonCancelAssignment" type="dto:ReasonCancelAssignment">
          <xs:annotation>
            <xs:documentation>Список причин отмены назначений</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getMemoryCardRequest">
    <xs:annotation>
      <xs:documentation>Запрос на предоставление правил подготовки пациента к взятию биоматериала</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" name="request" type="dto:PairBiomaterialLaboratory"/>
        <xs:element minOccurs="0" name="devide" type="xs:boolean"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getMemoryCardResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос на предоставление правил подготовки пациента к взятию биоматериала</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="1" name="result" type="dto:MemoryCard"/>
        <xs:element name="devide" type="xs:boolean"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getMemoryCardForLKRequest">
    <xs:annotation>
      <xs:documentation>Запрос на предоставление правил подготовки пациента к взятию биоматериала в ЛК</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="1" name="laboratoryId" type="xs:long"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getMemoryCardForLKResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос на предоставление правил подготовки пациента к взятию биоматериала в ЛК</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="1" name="result" type="dto:MemoryCardForLK"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getServiceRequest">
    <xs:annotation>
      <xs:documentation>Запрос на получение услуги МГФОМС</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="samplingTypeId" type="xs:long"/>
        <xs:element name="fullYears" type="xs:long"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getServiceResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос на получение услуги МГФОМС</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="service" type="dto:Service"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getColorsListRequest">
    <xs:annotation>
      <xs:documentation>Запрос на получение списка гистологических окрасок</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="getColorsListResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос на получение списка гистологических окрасок</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="color" type="dto:Color">
          <xs:annotation>
            <xs:documentation>Список гистологических окрасок</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getBiopsyResearchGoalRequest">
    <xs:annotation>
      <xs:documentation>Запрос на получение списка целей прижизненного патолого-анатомического исследования биопсийного (операционного) материала</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="getBiopsyResearchGoalResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос на получение целей прижизненного патолого-анатомического исследования биопсийного (операционного) материала</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="biopsyResearchGoal" type="dto:BiopsyResearchGoal">
          <xs:annotation>
            <xs:documentation>Список целей прижизненного патолого-анатомического исследования биопсийного (операционного) материала</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getTakeCytologyBMListRequest">
    <xs:annotation>
      <xs:documentation>Запрос на получение списка способов взятия цитологического БМ</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="getTakeCytologyBMListResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос на получение способов взятия цитологического БМ</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="takeCytologyBM" type="dto:TakeCytologyBM">
          <xs:annotation>
            <xs:documentation>Список способов взятия цитологического БМ</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getMethodOfObtainingBiopsyMaterialRequest">
    <xs:annotation>
      <xs:documentation>Запрос на получение списка способов получения биопсийного материала</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <xs:element name="getMethodOfObtainingBiopsyMaterialResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос получения способов получения биопсийного материала</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="methodOfObtainingBiopsyMaterial" type="dto:MethodOfObtainingBiopsyMaterial">
          <xs:annotation>
            <xs:documentation>Список способов получения биопсийного материала</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getTreatmentRequest">
    <xs:annotation>
      <xs:documentation>Запрос на получение медицинских манипуляций</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="laboratoryType" type="xs:int"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getTreatmentResponse">
    <xs:annotation>
      <xs:documentation>Ответ на запрос получения медицинских манипуляций</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="treatment" type="dto:Treatment">
          <xs:annotation>
            <xs:documentation>Список способов получения биопсийного материала</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?xsd=dictionary-other-types.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/laboratory/v1/dictionary/other/types/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://emias.mos.ru/laboratory/v1/dictionary/other/types/" xmlns:dt="http://emias.mos.ru/laboratory/v1/dictionary/types/">
  <xs:import namespace="http://emias.mos.ru/laboratory/v1/dictionary/types/" schemaLocation="http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?xsd=dictionary-types.xsd"/>
  <xs:complexType name="ClinicalLaboratory">
    <xs:annotation>
      <xs:documentation>Клинико-диагностическая лаборатория</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="shortName" type="xs:string"/>
      <xs:element name="type" type="xs:string"/>
      <xs:element minOccurs="0" name="moId" type="xs:long"/>
      <xs:element minOccurs="0" name="lpuId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="BMLocusPair">
    <xs:annotation>
      <xs:documentation>Пара биоматериал + локус</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="locusId" type="xs:long"/>
      <xs:element name="bmId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SamplingType">
    <xs:annotation>
      <xs:documentation>Профиль взятия</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="self" type="xs:boolean"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="bmLocusPair" type="tns:BMLocusPair"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReasonCullTube">
    <xs:annotation>
      <xs:documentation>Причина выбраковки пробирки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ContingentCode">
    <xs:annotation>
      <xs:documentation>Код контингента</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AdditionalSign">
    <xs:annotation>
      <xs:documentation>Дополнительный признак</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Priority">
    <xs:annotation>
      <xs:documentation>Причина выбраковки пробирки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="cito" type="xs:boolean"/>
      <xs:element name="longTerm" type="xs:boolean"/>
      <xs:element minOccurs="0" name="fromPeriod" type="xs:long"/>
      <xs:element minOccurs="0" name="toPeriod" type="xs:long"/>
      <xs:element minOccurs="0" name="offset" type="xs:long"/>
      <xs:element name="urgency" type="xs:boolean"/>
      <xs:element minOccurs="0" name="freePeriod" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompatibilityGroup">
    <xs:annotation>
      <xs:documentation>Группа совместимости</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="clinicalLaboratory" type="tns:ClinicalLaboratory"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="laboratoryList" type="dt:Laboratory"/>
      <xs:element minOccurs="0" name="locus" type="dt:Locus"/>
      <xs:element minOccurs="0" name="biomaterial" type="dt:Biomaterial"/>
      <xs:element minOccurs="0" name="takeBiomaterial" type="dt:TakeBM"/>
      <xs:element minOccurs="0" name="vial" type="dt:Vial"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReasonCancelAssignment">
    <xs:annotation>
      <xs:documentation>Причины отмены назначения</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MemoryCard">
    <xs:annotation>
      <xs:documentation>Памятка для подготовки пациента к процедуре сдачи биоматериала</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="biomaterialId" type="xs:long"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="content" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MemoryCardForLK">
    <xs:annotation>
      <xs:documentation>Памятка для подготовки пациента к процедуре сдачи биоматериала в ЛК</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="laboratoryId" type="xs:long"/>
      <xs:element name="laboratoryName" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="memoText" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PairBiomaterialLaboratory">
    <xs:annotation>
      <xs:documentation>Памятка для подготовки пациента к процедуре сдачи биоматериала</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="biomaterialId" type="xs:long"/>
      <xs:element name="laboratoryId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Service">
    <xs:annotation>
      <xs:documentation>Медицинская услуга МГФОМС</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="title" type="xs:string"/>
      <xs:element name="code" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Color">
    <xs:annotation>
      <xs:documentation>Гистологическая окраска</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="BiopsyResearchGoal">
    <xs:annotation>
      <xs:documentation>Цель прижизненного патолого-анатомического исследования биопсийного (операционного)
                материала</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TakeCytologyBM">
    <xs:annotation>
      <xs:documentation>Способ взятия цитологического БМ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MethodOfObtainingBiopsyMaterial">
    <xs:annotation>
      <xs:documentation>Способ получения биопсийного материала</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Treatment">
    <xs:annotation>
      <xs:documentation>Медицинская манипуляция</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="treatmentCode" type="xs:long"/>
      <xs:element name="treatmentTitle" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="BmObtainingMethod">
    <xs:annotation>
      <xs:documentation>Справочник способов получения биопсийного материала.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="IGHObjective">
    <xs:annotation>
      <xs:documentation>Задача ИГХ.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="access_kpi" type="xs:boolean"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MgiSpecialization">
    <xs:annotation>
      <xs:documentation>Специализация МГИ исследования.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MGIMethod">
    <xs:annotation>
      <xs:documentation>Метод МГИ исследования.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
      <xs:element name="mgiMaterialType" type="tns:MGIMaterialType"/>
      <xs:element name="mgiSpecialization" type="tns:MgiSpecialization"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MGIMaterialType">
    <xs:annotation>
      <xs:documentation>Тип материала МГИ.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MGIParameters">
    <xs:annotation>
      <xs:documentation>Параметры МГИ исследования.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
      <xs:element name="mgiMethod" type="tns:MGIMethod"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CytologicalConclusion">
    <xs:annotation>
      <xs:documentation>Заключение цитологического диагностического исследования.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="StrokeType">
    <xs:annotation>
      <xs:documentation>Тип гинекологического мазка (цитология).</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatternOfChanges">
    <xs:annotation>
      <xs:documentation>Характер изменения клеток (гинекологическая цитология)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GynecologistConclusion">
    <xs:annotation>
      <xs:documentation>Заключение гинекологического диагностического исследования.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AdditionalClarifications">
    <xs:annotation>
      <xs:documentation>Дополнительное уточнение (гинекологическая цитология).</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="InflammatoryProcess">
    <xs:annotation>
      <xs:documentation>Список воспалительных процессов (цитология)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MGIParametersLIS">
    <xs:annotation>
      <xs:documentation>Параметры МГИ исследования.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="BethesdaClassification">
    <xs:annotation>
      <xs:documentation>Список классификаций Бетесда для результатов гинекологических исследований</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="code" type="xs:string"/>
      <xs:element name="interpretation" type="xs:string"/>
      <xs:element name="conclusion" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?xsd=dictionary-types.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/laboratory/v1/dictionary/types/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://emias.mos.ru/laboratory/v1/dictionary/types/" xmlns:ct="http://emias.mos.ru/laboratory/v1/common/types/">
  <xs:import namespace="http://emias.mos.ru/laboratory/v1/common/types/" schemaLocation="http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?xsd=common-types.xsd"/>
  <xs:complexType name="LaboratorySearchItem">
    <xs:annotation>
      <xs:documentation>Критерии поиска в справочнике ЛИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:choice minOccurs="0">
        <xs:element name="laboratoryId" type="xs:long"/>
        <xs:element name="laboratoryKindId" type="xs:long"/>
        <xs:element name="laboratorySubKindId" type="xs:long"/>
      </xs:choice>
      <xs:element minOccurs="0" name="accessKPI" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LaboratoryPage">
    <xs:annotation>
      <xs:documentation>Страница результатов поиска элементов справочника ЛИ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="results" type="tns:Laboratory"/>
      <xs:element name="paging" type="ct:ResponsePageInfo"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Laboratory">
    <xs:annotation>
      <xs:documentation>Лабораторное исследование</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД ЛИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код ЛИ по справочнику ЕСЛИ</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="shortName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Краткое наименование</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="omsCode" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код ЛИ по ОМС</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="laboratoryKindId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД вида исследования</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="laboratorySubKindId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД подвида исследования</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="takeBMId" type="xs:long">
        <xs:annotation>
          <xs:documentation>ИД правила подготовки к взятию биоматериала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="needPrintForm" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Требуется печать бланка</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="urgency" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак актуальности</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AnthropometricData">
    <xs:annotation>
      <xs:documentation>Антропометрические данные</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="value" type="xs:string"/>
      <xs:element name="type" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="laboratoryId" type="xs:long"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DeviationValue">
    <xs:annotation>
      <xs:documentation>Отклонения от нормы</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="type_mark" type="xs:long"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Biomaterial">
    <xs:annotation>
      <xs:documentation>Биоматериал</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="hl7Code" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LaboratoryKind">
    <xs:annotation>
      <xs:documentation>Вид лабораторного исследования</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="shortName" type="xs:string"/>
      <xs:element minOccurs="0" name="hl7Code" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LaboratorySubKind">
    <xs:annotation>
      <xs:documentation>Подвид лабораторного исследования</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="shortName" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
      <xs:element name="labKindId" type="xs:long"/>
      <xs:element minOccurs="0" name="takeBMId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Locus">
    <xs:annotation>
      <xs:documentation>Локус</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TakeBM">
    <xs:annotation>
      <xs:documentation>Правило взятия БМ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="content" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Test">
    <xs:annotation>
      <xs:documentation>Тест</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="shortName" type="xs:string"/>
      <xs:element name="labId" type="xs:long"/>
      <xs:element name="required" type="xs:boolean"/>
      <xs:element minOccurs="0" name="mnemonicCode" type="xs:string"/>
      <xs:element name="valid" type="xs:boolean"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TestPage">
    <xs:annotation>
      <xs:documentation>Страница результатов поиска элементов справочника тестов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="results" type="tns:Test"/>
      <xs:element name="paging" type="ct:ResponsePageInfo"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Unit">
    <xs:annotation>
      <xs:documentation>Единица измерения</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="hl7Code" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Vial">
    <xs:annotation>
      <xs:documentation>Расходный материал</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="shortName" type="xs:string"/>
      <xs:element name="fillingOrder" type="xs:long"/>
      <xs:element minOccurs="0" name="hl7Code" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TypRejectTake">
    <xs:annotation>
      <xs:documentation>Типовой отказ приема биоматериала</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="content" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PrepareTakeBM">
    <xs:annotation>
      <xs:documentation>Правило подготовки к взятию БМ</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="content" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PrimaryTubeStatus">
    <xs:annotation>
      <xs:documentation>Статус первичной пробирки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RegistryEntryStatus">
    <xs:annotation>
      <xs:documentation>Статус реестровой записи первичной пробирки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ContainerStatus">
    <xs:annotation>
      <xs:documentation>Статус контейнера (пакетоа) первичных пробирок</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TypicalRejectTest">
    <xs:annotation>
      <xs:documentation>Причины отказа</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="content" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <!--Mocks:-->
  <xs:complexType name="BiomaterialExt">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="parentId" type="xs:long"/>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="hl7Code" type="xs:string"/>
      <xs:element name="urgency" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries?xsd=common-types.xsd</con:url><con:content><![CDATA[<xsd:schema elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/laboratory/v1/common/types/" version="1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://emias.mos.ru/laboratory/v1/common/types/">
  <xsd:complexType name="RequestPageInfo">
    <xsd:sequence>
      <xsd:element default="0" minOccurs="1" name="page" type="xsd:int">
        <xsd:annotation>
          <xsd:documentation>Номер страницы</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element default="0" minOccurs="1" name="pageSize" type="xsd:int">
        <xsd:annotation>
          <xsd:documentation>Размер страницы</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ResponsePageInfo">
    <xsd:complexContent>
      <xsd:extension base="tns:RequestPageInfo">
        <xsd:sequence>
          <xsd:element default="0" minOccurs="1" name="total" type="xsd:long">
            <xsd:annotation>
              <xsd:documentation>Всего записей</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Validation">
    <xsd:annotation>
      <xsd:documentation>Результат выполнения валидации</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="success" type="xsd:boolean">
        <xsd:annotation>
          <xsd:documentation>Признак - ошибки валидации отсутствуют</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" name="messages" type="tns:ValidationMessage">
        <xsd:annotation>
          <xsd:documentation>Список сообщений валидации</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ValidationMessage">
    <xsd:annotation>
      <xsd:documentation>Сообщение валидации</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="code" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Код сообщения</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element minOccurs="0" name="message" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Текст сообщения</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" name="parameters" type="tns:ValidationParameter">
        <xsd:annotation>
          <xsd:documentation>Параметры сообщения</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="type" type="tns:ValidationMessageType">
        <xsd:annotation>
          <xsd:documentation>Тип сообщения</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ValidationParameter">
    <xsd:annotation>
      <xsd:documentation>Параметр валидации</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="code" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Код параметра</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Значение параметра</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:simpleType name="ValidationMessageType">
    <xsd:annotation>
      <xsd:documentation>Тип сообщения</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="ERROR">
        <xsd:annotation>
          <xsd:documentation>Сообщение о ошибке</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="WARNING">
        <xsd:annotation>
          <xsd:documentation>Предупреждение</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="INFO">
        <xsd:annotation>
          <xsd:documentation>Информационное сообщение</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:element name="LaboratoryFaultInfo">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element minOccurs="1" name="validation" type="tns:Validation">
          <xsd:annotation>
            <xsd:documentation>Список ошибок</xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="LaboratoryUserContext">
    <xsd:complexType>
      <xsd:annotation>
        <xsd:documentation>Контекст пользователя</xsd:documentation>
      </xsd:annotation>
      <xsd:sequence>
        <xsd:element minOccurs="0" name="employeeJobId" type="xsd:long">
          <xsd:annotation>
            <xsd:documentation>Идентификатор исполнения должности</xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element minOccurs="0" name="lpuId" type="xsd:long">
          <xsd:annotation>
            <xsd:documentation>ИД ЛПУ</xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element minOccurs="0" name="fullName" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>ФИО пользователя</xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element minOccurs="0" name="position" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Должность медработника</xsd:documentation>
          </xsd:annotation>
        </xsd:element>
        <xsd:element minOccurs="0" name="availableResourceId" type="xsd:long">
          <xsd:annotation>
            <xsd:documentation>ИД доступного ресурса</xsd:documentation>
          </xsd:annotation>
        </xsd:element>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <xsd:complexType name="UserContext">
    <xsd:annotation>
      <xsd:documentation>Контекст пользователя (output)</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element minOccurs="0" name="login" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Имя пользователя</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element minOccurs="0" name="employeeJobId" type="xsd:long">
        <xsd:annotation>
          <xsd:documentation>Идентификатор исполнения должности</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element minOccurs="0" name="lpuId" type="xsd:long">
        <xsd:annotation>
          <xsd:documentation>ИД ЛПУ</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element minOccurs="0" name="fullName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>ФИО пользователя</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element minOccurs="0" name="position" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Должность медработника</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element minOccurs="0" name="availableResourceId" type="xsd:long">
        <xsd:annotation>
          <xsd:documentation>ИД доступного ресурса</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="User">
    <xsd:annotation>
      <xsd:documentation>Контекст пользователя (output)</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="fio" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>ФИО пользователя</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="lpuId" type="xsd:long">
        <xsd:annotation>
          <xsd:documentation>ИД ЛПУ</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="position" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Название должности медработника</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="UserExt">
    <xsd:complexContent>
      <xsd:extension base="tns:User">
        <xsd:sequence>
          <xsd:element name="employeeJobId" type="xsd:long">
            <xsd:annotation>
              <xsd:documentation>ИД исполнения должности медработника</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ResponsePageInfoFull">
    <xsd:annotation>
      <xsd:documentation>Параметры пейджинга</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="pageNumber" type="xsd:int">
        <xsd:annotation>
          <xsd:documentation>Номер страницы (zero-based)</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="pageTotal" type="xsd:int">
        <xsd:annotation>
          <xsd:documentation>Общее количество страниц</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="pageSize" type="xsd:int">
        <xsd:annotation>
          <xsd:documentation>Размер страницы</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="morePagesAvailable" type="xsd:boolean">
        <xsd:annotation>
          <xsd:documentation>Флаг доступности страниц с результатами для постраничного листания
                        (true - если доступны еще страницы, false - иначе)</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="totalItemsCount" type="xsd:long">
        <xsd:annotation>
          <xsd:documentation>Общее количество элементов (на всех страницах)</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="SortingOptions">
    <xsd:annotation>
      <xsd:documentation>Условия сортировки</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element maxOccurs="3" name="sortOrder" type="tns:SortOrder">
        <xsd:annotation>
          <xsd:documentation>Условия сортировки (используются в соответствии с переданной последовательностью)</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="SortOrder">
    <xsd:annotation>
      <xsd:documentation>Сортировка</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="attributeName" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>Наименование поля, по которому должна быть произведена сортировка</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute default="false" name="descending" type="xsd:boolean">
      <xsd:annotation>
        <xsd:documentation>Направление сортировки</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="DatePeriod">
    <xsd:annotation>
      <xsd:documentation>Диапазон дат для поиска</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element minOccurs="0" name="dateFrom" type="xsd:date"/>
      <xsd:element minOccurs="0" name="dateTo" type="xsd:date"/>
    </xsd:sequence>
  </xsd:complexType>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint></con:endpoints><con:operation id="94d8f165-cf3f-4133-89d6-cdf7ba3bb60c" isOneWay="false" action="" name="getAddSign" bindingOperationName="getAddSign" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="359209af-820f-4e98-8b2f-198333391308" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getAddSignRequest/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getAddSignRequest"/></con:call></con:operation><con:operation id="a54f839b-96ee-44cf-aaf1-8285734b9412" isOneWay="false" action="" name="getBiopsyResearchGoal" bindingOperationName="getBiopsyResearchGoal" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="bc880966-1a22-4396-a28c-bddf1ff57a0a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getBiopsyResearchGoalRequest/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getBiopsyResearchGoalRequest"/></con:call></con:operation><con:operation id="f2bcbfb0-759e-4ae2-9791-36ffadecbfce" isOneWay="false" action="" name="getClinicalLaboratories" bindingOperationName="getClinicalLaboratories" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="16b02827-9419-4edc-8a5b-f9ece1745bfb" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getClinicalLaboratoriesRequest>\r
         <oth:moId>?</oth:moId>\r
      </oth:getClinicalLaboratoriesRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getClinicalLaboratoriesRequest"/></con:call></con:operation><con:operation id="30c1f1e8-0588-44bd-8aa7-1adaaaeb1afe" isOneWay="false" action="" name="getColorsList" bindingOperationName="getColorsList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="4c4f2cec-8242-43b4-ad21-64a6be577902" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getColorsListRequest/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getColorsListRequest"/></con:call></con:operation><con:operation id="8ef994f0-0155-47be-b7ab-c29baa4501a3" isOneWay="false" action="" name="getContingentCode" bindingOperationName="getContingentCode" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="59bfcf54-792d-4107-8312-143f0aa24145" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getContingentCodeRequest/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getContingentCodeRequest"/></con:call></con:operation><con:operation id="6c289716-27cb-4bcb-b37e-ceed963f8737" isOneWay="false" action="" name="getMemoryCard" bindingOperationName="getMemoryCard" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="35f75695-f0a5-4906-a061-fd5f8984adcf" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/" xmlns:typ="http://emias.mos.ru/laboratory/v1/dictionary/other/types/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getMemoryCardRequest>\r
         <oth:request>\r
            <typ:biomaterialId>2</typ:biomaterialId>\r
            <typ:laboratoryId>492</typ:laboratoryId>\r
         </oth:request>\r
      </oth:getMemoryCardRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getMemoryCardRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="07a3b257-6e79-4ca3-a897-a9040a76d5e6" isOneWay="false" action="" name="getMemoryCardForLK" bindingOperationName="getMemoryCardForLK" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="f9171770-4385-48e9-ba0f-f6438054a15b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getMemoryCardForLKRequest>\r
         <!--1 or more repetitions:-->\r
         <oth:laboratoryId>?</oth:laboratoryId>\r
      </oth:getMemoryCardForLKRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getMemoryCardForLKRequest"/></con:call></con:operation><con:operation id="ade59dd7-52b9-475e-a6ce-b3a72452897b" isOneWay="false" action="" name="getMethodOfObtainingBiopsyMaterial" bindingOperationName="getMethodOfObtainingBiopsyMaterial" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="0271e3e6-9f3e-4a5a-b7b7-50399bfda342" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getMethodOfObtainingBiopsyMaterialRequest/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getMethodOfObtainingBiopsyMaterialRequest"/></con:call></con:operation><con:operation id="0597175c-8880-441a-839b-0e268054f0f0" isOneWay="false" action="" name="getPriority" bindingOperationName="getPriority" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="6a84f813-a8f5-4257-b095-e21772f6182e" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getPriorityRequest/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getPriorityRequest"/></con:call></con:operation><con:operation id="c2901f04-d252-4515-8a3c-718060b492c4" isOneWay="false" action="" name="getReasonCancelAssignment" bindingOperationName="getReasonCancelAssignment" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="b3ce1928-9278-4627-9866-d52e000e08f8" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getReasonCancelAssignmentRequest/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getReasonCancelAssignmentRequest"/></con:call></con:operation><con:operation id="eaba3884-a068-43e3-b2ce-7ffe80d106a6" isOneWay="false" action="" name="getReasonCullTube" bindingOperationName="getReasonCullTube" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="b6e92081-10f5-43d2-bb52-5780b27fbc4e" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getReasonCullTubeRequest/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getReasonCullTubeRequest"/></con:call></con:operation><con:operation id="b33398dd-6b69-4b5d-9398-5dac796a340d" isOneWay="false" action="" name="getSamplingType" bindingOperationName="getSamplingType" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="fddf6922-e3bb-4e84-a0ff-0a63a8088031" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getSamplingTypeRequest/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getSamplingTypeRequest"/></con:call></con:operation><con:operation id="ecbd3702-a79c-4414-9e71-cef47d0dfb32" isOneWay="false" action="" name="getService" bindingOperationName="getService" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="2bf230e2-1686-4b62-9b95-43259fe039cf" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getServiceRequest>\r
         <oth:samplingTypeId>?</oth:samplingTypeId>\r
         <oth:fullYears>?</oth:fullYears>\r
      </oth:getServiceRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getServiceRequest"/></con:call></con:operation><con:operation id="c80b7384-a44b-464f-9763-de31c4263c54" isOneWay="false" action="" name="getTakeCytologyBMList" bindingOperationName="getTakeCytologyBMList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="da7cb6cf-a14d-434b-862f-5b2da3225251" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getTakeCytologyBMListRequest/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getTakeCytologyBMListRequest"/></con:call></con:operation><con:operation id="a4dd57ca-6117-440e-91b7-85ff3e87e571" isOneWay="false" action="" name="getTreatment" bindingOperationName="getTreatment" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="af2f486c-2e2a-4ba4-afe3-17982d331889" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <oth:getTreatmentRequest>\r
         <oth:laboratoryType>?</oth:laboratoryType>\r
      </oth:getTreatmentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/laboratory/v1/dictionary/other/soap/LaboratoryOtherDictionariesServicePorts/getTreatmentRequest"/></con:call></con:operation></con:interface><con:testSuite id="b64b7760-cbb9-47bc-880f-5c0dc0ceb022" name="create/shift/cancelAppointment"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="dd6f9f53-a321-42b7-bb5e-2d204c99ad84" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание, удаление, перенос ЛИ" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Установить дату" id="8d545448-96ee-48c7-9757-97596ec34c28"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter

Calendar startPeriod = Calendar.getInstance();
 startPeriod.add(Calendar.DATE, +1);
 def dateStart = startPeriod.getTime().format('yyyy-MM-dd');
 log.info  dateStart
  startPeriod.add(Calendar.DATE, +8);
  def dateEnd = startPeriod.getTime().format('yyyy-MM-dd');
  log.info  dateEnd
 testRunner.testCase.setPropertyValue("dateFrom",dateStart)
 testRunner.testCase.setPropertyValue("dateTo",dateEnd)</script></con:config></con:testStep><con:testStep type="request" name="Получить направления на ЛИ (getAvailableResourceScheduleInfo)" id="4d9a738f-2f0b-49fd-b437-9effb9026c21"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAvailableResourceScheduleInfo</con:operation><con:request name="Получить направления на ЛИ (getAvailableResourceScheduleInfo)" id="50930f37-68cb-433d-894c-ce6b09cd3929"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>EIM</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfo>\r
         <availableResourceId>${#TestCase#ARLabIss}</availableResourceId>\r
         <complexResourceId>${#TestCase#CRLabIss}</complexResourceId>\r
         <omsNumber>${#TestCase#oms}</omsNumber>\r
         <birthDate>${#TestCase#bd}</birthDate>\r
         <period>\r
            <dateFrom>${#TestCase#dateFrom}</dateFrom>\r
            <dateTo>${#TestCase#dateTo}</dateTo>\r
         </period>\r
         <externalSystemId>EIM</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="7e936123-6fe6-4997-ac1d-ae38d0224204"/><con:assertion type="Schema Compliance" id="3371b424-32b7-4f8a-89de-ed45ce835fba"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="4df79e63-304a-4128-89c2-c73cb8dffb6a"/><con:assertion type="Simple Contains" id="853bf891-5abe-40aa-95b4-e965b301b419" name="startTime"><con:configuration><token>startTime</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f54c257b-d4cf-4d2d-aadd-9a311da1069a" name="endTime"><con:configuration><token>endTime</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Записать в properties дату начала и окончания ЛИ" id="35d5ccdc-d1d8-4c64-b031-625ceca402d4"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import groovy.xml.XmlSlurper
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def dateLI = groovyUtils.getXmlHolder('Получить направления на ЛИ (getAvailableResourceScheduleInfo)#Response')
def startTime = dateLI.getNodeValue("//scheduleOfDay[1]/scheduleBySlot[1]/slot[1]/startTime[1]/text()[1]")
startTime = startTime.split("\\+")[0]
log.info startTime
def endTime = dateLI.getNodeValue("//scheduleOfDay[1]/scheduleBySlot[1]/slot[1]/endTime[1]/text()[1]")
endTime = endTime.split("\\+")[0]
log.info endTime
testRunner.testCase.setPropertyValue("startLI",startTime)
testRunner.testCase.setPropertyValue("endLI",endTime)</script></con:config></con:testStep><con:testStep type="restrequest" name="createAppointment" id="fe9d78ed-381c-4cda-a7f6-0925666f1a35"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/createAppointment" methodName="createAppointment" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAppointment" id="6407dca7-46aa-47e3-bb28-7f8a5a17b04d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
    "omsNumber": "${#TestCase#oms}",
    "birthDate": "${#TestCase#bd}",
    "availableResourceId": ${#TestCase#ARLabIss},
    "complexResourceId": ${#TestCase#CRLabIss},
    "startTime": "${#TestCase#StartLI}",
    "endTime": "${#TestCase#endLI}"
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/createAppointment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="02a59f50-2037-4abe-a2dc-9bcde3a2f147" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="43e933ce-9e59-4de8-90bf-779648291e69" name="Id"><con:configuration><token>appointmentId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="17920c0d-1046-4888-b49a-cf1a2c5bf02e" name="number"><con:configuration><token>appointmentNumber</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись ID ЛИ и ИД" id="e1177178-1202-47ba-adea-d7c4653b5f9f" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ID ЛИ</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createAppointment</con:sourceStep><con:sourcePath>$..payload.appointmentId</con:sourcePath><con:targetType>LabIss</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="Получить записи пациента(getAppointmentReceptionsByPatient)" id="e670ad84-e355-4d07-8f53-e7db7f957fbd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAppointmentReceptionsByPatient</con:operation><con:request name="Получить записи пациента(getAppointmentReceptionsByPatient)" id="27d7bf74-879b-4505-8471-b083536f83b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint} </con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">
    <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <v5:getAppointmentReceptionsByPatient>
         <omsNumber>${#TestCase#oms}</omsNumber>
         <birthDate>${#TestCase#bd}</birthDate>
         <externalSystemId>EIM</externalSystemId>
         <!--Optional:-->
         <signActiveArchive>2</signActiveArchive>
      </v5:getAppointmentReceptionsByPatient>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="01a2d22e-fbc7-4c2b-b499-c8e150b1009e"/><con:assertion type="SOAP Fault Assertion" id="7bd40344-6f3d-4d92-9919-0ba724f141f2" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить id лабораторного исследования" id="0e4e222d-020a-4437-8a68-c058e9dd0330"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
def LIStatus = context.expand('${createAppointment#Response}').toString()
def SL = new JsonSlurper()
def LIS = SL.parseText LIStatus
LIS = LIS.payload.appointmentId.toString()
log.info LIS
testRunner.testCase.setPropertyValue("LabIss",LIS)
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def InIs = groovyUtils.getXmlHolder('Check#Response')
def LabIss = InIs.getNodeValue('//appointment[1]/id[1]/text()[1]')
log.info LabIss
assert LabIss==testRunner.testCase.getPropertyValue('LabIss')

</script></con:config></con:testStep><con:testStep type="groovy" name="Записать в propeties время начала и окончания слота" id="2251f62d-7b60-4a18-8e28-21cd1fab79c1"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import groovy.xml.XmlSlurper
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def dateLI = groovyUtils.getXmlHolder('Получить направления на ЛИ (getAvailableResourceScheduleInfo)#Response')
def startTime = dateLI.getNodeValue("//scheduleOfDay[1]/scheduleBySlot[1]/slot[3]/startTime[1]/text()[1]")
startTime = startTime.split("\\+")[0]
log.info startTime
def endTime = dateLI.getNodeValue("//scheduleOfDay[1]/scheduleBySlot[1]/slot[3]/endTime[1]/text()[1]")
endTime = endTime.split("\\+")[0]
log.info endTime
testRunner.testCase.setPropertyValue("startLI",startTime)
testRunner.testCase.setPropertyValue("endLI",endTime)</script></con:config></con:testStep><con:testStep type="restrequest" name="shiftAppointment" id="6af5e147-f766-43fe-a0f9-91546628f95f"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/shiftAppointment" methodName="shiftAppointment" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="shiftAppointment" id="a3ce2f16-ed0e-4eae-aca8-be9e70965e8d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#bd}",
  "availableResourceId": ${#TestCase#ARLabIss},
  "complexResourceId":${#TestCase#CRLabIss},
  "startTime": "${#TestCase#StartLI}",
  "endTime": "${#TestCase#endLI}",
  "appointmentId": ${#TestCase#LabIss}
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/shiftAppointment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="443e03e8-d58b-41bd-b4f5-b10dd8b2ba51" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0268d60d-bec7-4e29-8c93-9bfc1f7a5af2" name="AppointmentId"><con:configuration><path>$..payload.appointmentId</path><content>[${#TestCase#LabIss}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="cancelAppointment" id="79c44a06-dcee-4fb3-a950-cd388c8da15a"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" methodName="cancelAppointment V3" resourcePath="/api/v3/saOrchestrator/cancelAppointment" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="cancelAppointment" id="3cb0cd9e-7c4b-46b8-88ed-b29bbb2bea5d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"appointmentId": ${#TestCase#LabIss},
	"birthDate": "${#TestCase#bd}",
	"omsNumber": "${#TestCase#oms}"
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/saOrchestrator/cancelAppointment</con:originalUri><con:assertion type="Simple Contains" id="8a50b6be-cd97-4514-9def-4a7c41693664" name="Contains"><con:configuration><token>SUCCESS</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="1bd1e1a0-ff05-469c-a2f0-4d9765603d57" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Получить записи пациента 2(getAppointmentReceptionsByPatient)" id="2a3361db-300d-4009-912f-407a1af160a0"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v3/saOrchestrator/getAppointmentReceptionsByPatient" methodName="getAppointmentReceptionsByPatient" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получить записи пациента 2(getAppointmentReceptionsByPatient)" id="7bee60b5-1eef-4e19-934a-d285f1392020" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#bd}",
  "signActiveArchive": "2"
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getAppointmentReceptionsByPatient</con:originalUri><con:assertion type="JsonPath Match" id="aabd333b-9f96-45a8-90c1-24e6bb3ad8f8" name="LabIssCheck"><con:configuration><path>$..[?(@.id=="${#TestCase#LabIss}")].statusId</path><content>[20]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить статус отмененной записи" id="d16fe791-bb62-495c-af60-692bd36e8f17"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper
def LIStatus = context.expand('${Получить записи пациента 2(getAppointmentReceptionsByPatient)#Response}').toString()
def SL = new JsonSlurper()
def LIS = SL.parseText LIStatus
long Per = Long.parseLong(testRunner.testCase.getPropertyValue('LabIss'))
//log.info("Result:" + Per)
log.info LIS.payload.find {it.id == Per }.statusId
int statusId = LIS.payload.find {it.id == Per }.statusId
assert statusId == 20</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700008084130662</con:value></con:property><con:property><con:name>bd</con:name><con:value>1962-06-13</con:value></con:property><con:property><con:name>LabIss</con:name><con:value>391878789298</con:value></con:property><con:property><con:name>ARLabIss</con:name><con:value>18343022912</con:value></con:property><con:property><con:name>RefId</con:name><con:value>74370947639</con:value></con:property><con:property><con:name>CRLabIss</con:name><con:value>67715063</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2022-11-29</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2022-12-07</con:value></con:property><con:property><con:name>startLI</con:name><con:value>2022-11-29T08:20:00</con:value></con:property><con:property><con:name>endLI</con:name><con:value>2022-11-29T08:30:00</con:value></con:property><con:property><con:name>endREST</con:name><con:value>http://emiasinfo-application.test.emias.mos.ru</con:value></con:property></con:properties></con:testCase><con:testCase id="7bf7824b-5f20-45d3-b8b7-05da2938a0ce" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание, удаление, перенос ИД" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Установить дату" id="6c41db45-6a1c-4ec9-87c3-19f1fc18c110"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter

Calendar startPeriod = Calendar.getInstance();
 startPeriod.add(Calendar.DATE, +1);
 def dateStart = startPeriod.getTime().format('yyyy-MM-dd');
 log.info  dateStart
  startPeriod.add(Calendar.DATE, +8);
  def dateEnd = startPeriod.getTime().format('yyyy-MM-dd');
  log.info  dateEnd
 testRunner.testCase.setPropertyValue("dateFrom",dateStart)
 testRunner.testCase.setPropertyValue("dateTo",dateEnd)</script></con:config></con:testStep><con:testStep type="request" name="Получить слоты по ресурсу(getAvailableResourceScheduleInfo)" id="e71b2e90-6853-41e6-90b5-d40e5c3e572a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAvailableResourceScheduleInfo</con:operation><con:request name="Получить слоты по ресурсу(getAvailableResourceScheduleInfo)" id="50930f37-68cb-433d-894c-ce6b09cd3929"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
 <soap:Header>
  <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
</soap:Header>
   <soap:Body>\r
      <v5:getAvailableResourceScheduleInfo>\r
         <availableResourceId>${#TestCase#ARInstDIag}</availableResourceId>\r
         <complexResourceId>${#TestCase#CRInsDiag}</complexResourceId>\r
         <omsNumber>${#TestCase#oms}</omsNumber>\r
                  <birthDate>${#TestCase#bd}</birthDate>\r
                   <referralId>${#TestCase#RefId}</referralId>
                <period>\r
            <dateFrom>${#TestCase#dateFrom}</dateFrom>\r
            <dateTo>${#TestCase#dateTo}</dateTo>\r
            </period>
                <externalSystemId>EIM</externalSystemId>\r
      </v5:getAvailableResourceScheduleInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="7e936123-6fe6-4997-ac1d-ae38d0224204"/><con:assertion type="Schema Compliance" id="3371b424-32b7-4f8a-89de-ed45ce835fba"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="4df79e63-304a-4128-89c2-c73cb8dffb6a"/><con:assertion type="Simple Contains" id="4737c9ae-84a7-4848-a1cc-36286ade85bf" name="startTime"><con:configuration><token>startTime</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="16e90d2a-6165-4e7f-a2fd-ad19d43ac168" name="endTime"><con:configuration><token>endTime</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Записать в properties даты начала и окончания слотов для ИД" id="3ef58f26-ad37-404a-936d-515ea86760f8"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import groovy.xml.XmlSlurper
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def dateID = groovyUtils.getXmlHolder('getRefID#Response')
def startTime = dateID.getNodeValue("//scheduleOfDay[1]/scheduleBySlot[1]/slot[1]/startTime[1]/text()[1]")
startTime = startTime.split("\\+")[0]
log.info startTime
def endTime = dateID.getNodeValue("//scheduleOfDay[1]/scheduleBySlot[1]/slot[1]/endTime[1]/text()[1]")
endTime = endTime.split("\\+")[0]
log.info endTime
testRunner.testCase.setPropertyValue("startID",startTime)
testRunner.testCase.setPropertyValue("endID",endTime)</script></con:config></con:testStep><con:testStep type="restrequest" name="createAppointment" id="4ad577e7-c685-4158-8407-1855d1388c79"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/createAppointment" methodName="createAppointment" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAppointment" id="6407dca7-46aa-47e3-bb28-7f8a5a17b04d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
    "omsNumber": "${#TestCase#oms}",
    "birthDate": "${#TestCase#bd}",
    "availableResourceId": ${#TestCase#ARInstDIag},
    "complexResourceId": ${#TestCase#CRInsDiag},
    "startTime": "${#TestCase#startID}",
    "endTime": "${#TestCase#endID}",
    "referralId": ${#TestCase#RefId}
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/createAppointment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f1161d76-73a2-4896-bde2-f8de3aa759b9" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="adc0a0bb-06a4-4554-bc46-986911d9e7d2" name="id"><con:configuration><token>appointmentId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="32d2c963-4bad-46eb-b9f9-d721ea420fb6" name="number"><con:configuration><token>appointmentNumber</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Запись ID ЛИ и ИД" id="0f157a15-fcb2-4e15-ac9a-e8f44e81fa0d" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ID InstrDiag</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createAppointment</con:sourceStep><con:sourcePath>$..payload.appointmentId</con:sourcePath><con:targetType>InstrDiag</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="Получить записи пациента(getAppointmentReceptionsByPatient)" id="953f1038-33c5-4000-9f47-5bc2178d4c97"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAppointmentReceptionsByPatient</con:operation><con:request name="Получить записи пациента(getAppointmentReceptionsByPatient)" id="27d7bf74-879b-4505-8471-b083536f83b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint} </con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">
    <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <v5:getAppointmentReceptionsByPatient>
         <omsNumber>${#TestCase#oms}</omsNumber>
         <birthDate>${#TestCase#bd}</birthDate>
         <externalSystemId>EIM</externalSystemId>
         <signActiveArchive>2</signActiveArchive>
      </v5:getAppointmentReceptionsByPatient>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="01a2d22e-fbc7-4c2b-b499-c8e150b1009e"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить ИД и id записи" id="b0f7fa9e-41f8-4614-a951-827f238758a7"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper
def LIStatus = context.expand('${createAppointment#Response}').toString()
def SL = new JsonSlurper()
def InD = SL.parseText LIStatus
InD = InD.payload.appointmentId.toString()
log.info InD
testRunner.testCase.setPropertyValue("InstrDiag",InD)
def groovyUtilsI = new com.eviware.soapui.support.GroovyUtils( context )
def ID = groovyUtilsI.getXmlHolder('Check#Response')
def InsDiag = ID.getNodeValue('//appointment[1]/id[1]/text()[1]')
log.info InsDiag
assert InsDiag==testRunner.testCase.getPropertyValue('InstrDiag')
</script></con:config></con:testStep><con:testStep type="groovy" name="Записать в properties даты начала и окончания другого слота для ИД" id="a06b96ed-90a9-468b-b44c-10e60601c4a5"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import groovy.xml.XmlSlurper
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def dateID = groovyUtils.getXmlHolder('getRefID#Response')
def startTime = dateID.getNodeValue("//scheduleOfDay[1]/scheduleBySlot[1]/slot[2]/startTime[1]/text()[1]")
startTime = startTime.split("\\+")[0]
log.info startTime
def endTime = dateID.getNodeValue("//scheduleOfDay[1]/scheduleBySlot[1]/slot[2]/endTime[1]/text()[1]")
endTime = endTime.split("\\+")[0]
log.info endTime
testRunner.testCase.setPropertyValue("startID",startTime)
testRunner.testCase.setPropertyValue("endID",endTime)</script></con:config></con:testStep><con:testStep type="restrequest" name="shiftAppointment" id="3afe0bc7-d41e-4337-b53f-6fe702a3bf52"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/shiftAppointment" methodName="shiftAppointment" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="shiftAppointment" id="a3ce2f16-ed0e-4eae-aca8-be9e70965e8d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#bd}",
  "availableResourceId": ${#TestCase#ARInstDIag},
  "complexResourceId": ${#TestCase#CRInsDiag},
  "startTime": "${#TestCase#startID}",
  "endTime": "${#TestCase#endID}",
  "referralId": ${#TestCase#RefId},
  "appointmentId": ${#TestCase#InstrDiag}
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/shiftAppointment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d4c8d2d4-33a4-469a-ae32-67a8404b04db" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d617649-c667-4c28-a28b-9884298a1d9b" name="JsonPath Match"><con:configuration><path>$..payload.appointmentId</path><content>[${#TestCase#InstrDiag}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="cancelAppointment" id="a8c33ef4-01a5-409a-bddb-ff79aefe6dda"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" methodName="cancelAppointment V3" resourcePath="/api/v3/saOrchestrator/cancelAppointment" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="cancelAppointment" id="3cb0cd9e-7c4b-46b8-88ed-b29bbb2bea5d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"appointmentId": ${#TestCase#InstrDiag},
	"birthDate": "${#TestCase#bd}",
	"omsNumber": "${#TestCase#oms}"
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/saOrchestrator/cancelAppointment</con:originalUri><con:assertion type="Simple Contains" id="8a50b6be-cd97-4514-9def-4a7c41693664" name="Contains"><con:configuration><token>SUCCESS</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="1bd1e1a0-ff05-469c-a2f0-4d9765603d57" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Получить записи пациента 2(getAppointmentReceptionsByPatient)" id="38a09cf3-756e-450b-83be-a1fa736305ab"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v3/saOrchestrator/getAppointmentReceptionsByPatient" methodName="getAppointmentReceptionsByPatient" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Получить записи пациента 2(getAppointmentReceptionsByPatient)" id="7bee60b5-1eef-4e19-934a-d285f1392020" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#bd}",
  "signActiveArchive": "2"
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getAppointmentReceptionsByPatient</con:originalUri><con:assertion type="JsonPath Match" id="f807b807-e474-46ce-8332-80a423327698" name="InstDiagCheck"><con:configuration><path>$..[?(@.id=="${#TestCase#InstrDiag}")].statusId</path><content>[20]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить статус отмененной записи" id="0ed0b86a-d1d0-4215-a528-cf26ea56f32d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper
def LIStatus = context.expand('${Получить записи пациента 2(getAppointmentReceptionsByPatient)#Response}').toString()
def SL = new JsonSlurper()
def LIS = SL.parseText LIStatus
long Per = Long.parseLong(testRunner.testCase.getPropertyValue('InstrDiag'))
//log.info("Result:" + Per)
log.info LIS.payload.find {it.id == Per }.statusId
int statusId = LIS.payload.find {it.id == Per }.statusId
assert statusId == 20</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700008084130662</con:value></con:property><con:property><con:name>bd</con:name><con:value>1962-06-13</con:value></con:property><con:property><con:name>InstrDiag</con:name><con:value>391878793398</con:value></con:property><con:property><con:name>ARInstDIag</con:name><con:value>20074219540</con:value></con:property><con:property><con:name>RefId</con:name><con:value>74377743389</con:value></con:property><con:property><con:name>CRInsDiag</con:name><con:value>238487238</con:value></con:property><con:property><con:name>dateFrom</con:name><con:value>2022-11-29</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2022-12-07</con:value></con:property><con:property><con:name>startID</con:name><con:value>2022-11-29T08:00:00</con:value></con:property><con:property><con:name>endID</con:name><con:value>2022-11-29T08:30:00</con:value></con:property><con:property><con:name>endREST</con:name><con:value>http://emiasinfo-application.test.emias.mos.ru</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="e449cc8f-357b-49ce-8e94-08e5115638d1" name="getAppointmentReceptionsByPatient"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="36f342a1-f777-4380-bc37-24e03ea9d833" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга" searchProperties="true"><con:settings/><con:testStep type="request" name="getAppointmentReceptionsByPatient sarOrchestrator" id="4649d08a-f1d3-4a9c-ab28-9e5a5c6adcbe"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAppointmentReceptionsByPatient</con:operation><con:request name="getAppointmentReceptionsByPatient sarOrchestrator" id="f8352831-221f-4cef-96e9-f6f8ecc0dfb4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">
   <soap:Header>
   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    <wsse:UsernameToken>
      <wsse:Username>EIM</wsse:Username>
    </wsse:UsernameToken>
  </wsse:Security>
  </soap:Header>
   <soap:Body>
      <v5:getAppointmentReceptionsByPatient>
         <omsNumber>${#TestCase#omsNumber}</omsNumber>
         <birthDate>${#TestCase#birthdate}</birthDate>
         <externalSystemId>EIM</externalSystemId>
         <!--Optional:-->
         <signActiveArchive>${#TestCase#signActiveArchive}</signActiveArchive>
      </v5:getAppointmentReceptionsByPatient>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="872b5eab-2024-461f-a2ed-4096a21e0210"/><con:assertion type="SOAP Fault Assertion" id="5b841e46-88b6-47f5-9d1d-1f5520697e57" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getAppointmentReceptionsByPatient Info" id="3b05500c-8fb1-4f13-880e-f997da67c833"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v3/saOrchestrator/getAppointmentReceptionsByPatient" methodName="getAppointmentReceptionsByPatient" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAppointmentReceptionsByPatient Info" id="3d15cc91-3c05-4425-84aa-2433a12d0943" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#omsNumber}",
  "birthDate": "${#TestCase#birthdate}",
  "signActiveArchive": "${#TestCase#signActiveArchive}"
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/saOrchestrator/getAppointmentReceptionsByPatient</con:originalUri><con:assertion type="JsonPath Existence Match" id="c750ed69-478a-4c3b-940a-46436cfe9d05" name="Ответ не вернул ошибку" disabled="true"><con:configuration><path>$.error</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="6dea8ef1-f14e-45bf-9e34-d8de31b7a795" name="Возвращен Payload"><con:configuration><path>$.payload</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Сравнить количество объектов в ответах" id="689c2657-4ee6-4c4d-b001-5261147d75bf"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def restResponse = context.expand('${getAppointmentReceptionsByPatient Info#Response}')
def json =  new JsonSlurper().parseText(restResponse)
def jsonObects = json.payload

def soapResponse = context.expand('${getAppointmentReceptionsByPatient sarOrchestrator#Response}')
def xml = new XmlSlurper().parseText(soapResponse)
def xmlObjects=xml.Body.getAppointmentReceptionsByPatientResponse.appointment

log.info("json: "+jsonObects.size())
log.info("xml: "+xmlObjects.size())
assert jsonObects.size() == xmlObjects.size()</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг элементов" id="d396067d-5fce-4ad7-ab31-051aa98c482a"><con:settings/><con:config><script>import groovy.json.JsonSlurper

//Получение данных из ответа getAppointmentReceptionsByPatient
def restResponse = context.expand('${getAppointmentReceptionsByPatient Info#Response}')
def json =  new JsonSlurper().parseText(restResponse)
def jsonObects = json.payload

//Получение данных из ответа SelfAppointment
def soapResponse = context.expand('${getAppointmentReceptionsByPatient sarOrchestrator#Response}')
//def soapResponse = context.expand('${#TestCase#selfAppResonse}')
def xml = new XmlSlurper().parseText(soapResponse)
def xmlObjects=xml.Body.getAppointmentReceptionsByPatientResponse.appointment

for (i=0;i&lt;jsonObects.size();i++)
{
	def jsonObject = jsonObects[i]
	def xmlObject = xmlObjects[i]

	log.info (jsonObject.id)

	assert jsonObject.id == xmlObject.id.toLong() //Маппинг параметров id, number, lpuId, typeLpu
	assert jsonObject.number == xmlObject.number.toString()

	assert jsonObject.lpuId == xmlObject.lpuId.toLong()
	assert jsonObject.typeLpu == xmlObject.typeLpu.toString()

	if (xmlObject.nameLpu.text() != "") //Проверка на наличие параметра nameLpu, т.к он необязательный
	{
		assert jsonObject.nameLpu == xmlObject.nameLpu.toString()
	}
	
	assert jsonObject.lpuAddress == xmlObject.lpuAddress.toString()

	assert jsonObject.startTime == xmlObject.startTime.toString()[0..-7] //Обрубание смещения (2022-11-07T11:40:00+03:00 -> 2022-11-07T11:40:00)
	assert jsonObject.endTime == xmlObject.endTime.toString()[0..-7]

	assert jsonObject.type == xmlObject.type.toString()
	assert jsonObject.enableShift == xmlObject.enableShift.toBoolean()

	assert jsonObject.availableResourceId == xmlObject.availableResourceId.toLong()
	assert jsonObject.complexResourceId == xmlObject.complexResourceId.toLong()

	if (xmlObject.roomId.text() != "") //Проверка на наличие параметра roomId
	{
		assert jsonObject.roomId == xmlObject.roomId.toLong()
	}

	assert jsonObject.roomNumber == xmlObject.roomNumber.toString()
	assert jsonObject.addressPointId == xmlObject.addressPointId.toLong()

	if (xmlObject.toDoctor.text() != "") //Проверка на наличие параметра toDoctor
	{//Маппинг параметров внутри объекта
			assert jsonObject.toDoctor.specialityId == xmlObject.toDoctor.specialityId.toLong()
			assert jsonObject.toDoctor.specialityName == xmlObject.toDoctor.specialityName.toString()
			if (xmlObject.toDoctor.doctorFio.text() != "")
			{
				assert jsonObject.toDoctor.doctorFio == xmlObject.toDoctor.doctorFio.toString()
			}
			assert jsonObject.toDoctor.receptionTypeId == xmlObject.toDoctor.receptionTypeId.toLong()
	}

	if (xmlObject.toLdp.text() != "") //Проверка на наличие параметра toLdp
	{//Маппинг параметров внутри объекта
			assert jsonObject.toLdp.ldpTypeId == xmlObject.toLdp.ldpTypeId.toLong()
			assert jsonObject.toLdp.ldpTypeName == xmlObject.toLdp.ldpTypeName.toString()
			if (xmlObject.toLdp.countAssignmentProcedures.text() != "")
			{
				assert jsonObject.toLdp.countAssignmentProcedures == xmlObject.toLdp.countAssignmentProcedures.toInteger()
			}
	}

	if (xmlObject.toBM.text() != "") //Проверка на наличие параметра toBM
	{//Маппинг параметров внутри объекта
			assert jsonObject.toBM.id == xmlObject.toBM.id.toLong()
			assert jsonObject.toBM.name == xmlObject.toBM.name.toString()
			if (xmlObject.toBM.self.text() != "")
			{
				 assert jsonObject.toBM.self == xmlObject.toBM.self.toBoolean()
			}
	}

	assert jsonObject.statusId == xmlObject.statusId.toLong()

	if (xmlObject.cancelInfo.text() != "") //Проверка на наличие параметра cancelInfo
	{//Маппинг параметров внутри объекта
			assert jsonObject.cancelInfo.cancelReasonId == xmlObject.cancelInfo.cancelReasonId.toLong()
			assert jsonObject.cancelInfo.cancelReasonDesc == xmlObject.cancelInfo.cancelReasonDesc.toString()
	}

	if (xmlObject.receptionFactId.text() != "") //Проверка на наличие параметра receptionFactId
	{
			assert jsonObject.receptionFactId == xmlObject.receptionFactId.toLong()
	}

	if (xmlObject.referral.text() != "") //Проверка на наличие параметра referral
	{//Маппинг параметров внутри объекта
			assert jsonObject.referral.referralId == xmlObject.referral.referralId.toLong()
			assert jsonObject.referral.startTime == xmlObject.referral.startTime.toString()
			assert jsonObject.referral.endTime == xmlObject.referral.endTime.toString()
			if (xmlObject.referral.availableResourceId.text() != "")
			{
				assert jsonObject.referral.availableResourceId ==  xmlObject.referral.availableResourceId.toLong()
			}
			if (xmlObject.referral.lpuId.text() != "")
			{
				assert jsonObject.referral.lpuId ==  xmlObject.referral.lpuId.toLong()
			}
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка наличия и отсутвия блоков для разных типов" id="55dedcc4-ae46-4e48-a3d6-0e02695564e0"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def restResponse = context.expand('${getAppointmentReceptionsByPatient Info#Response}')
def json =  new JsonSlurper().parseText(restResponse)
def jsonObects = json.payload

for (i=0;i&lt;jsonObects.size();i++)
{
	def jsonObject = jsonObects[i]

	log.info(jsonObject.id)

	if (jsonObject.type == "LDP")
	{
		assert jsonObject.toLdp != null
		assert jsonObject.toBM == null
		assert jsonObject.toDoctor == null
	}

	if (jsonObject.type == "BM")
	{
		assert jsonObject.toLdp == null
		assert jsonObject.toDoctor == null
		assert jsonObject.toBM != null
	}
	
	if (jsonObject.type == "RECEPTION")
	{
		assert jsonObject.toLdp == null
		assert jsonObject.toDoctor != null
		assert jsonObject.toBM == null
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7700003097180466</con:value></con:property><con:property><con:name>birthdate</con:name><con:value>1966-04-18</con:value></con:property><con:property><con:name>signActiveArchive</con:name><con:value>2</con:value></con:property></con:properties></con:testCase><con:testCase id="ae73a0f9-967d-4ea4-99a6-0cd01f5d3742" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга с фильтром по appointmentId" searchProperties="true"><con:settings/><con:testStep type="request" name="getAppointmentReceptionsByPatient sarOrchestrator" id="775a0091-2318-4080-9b2b-8cac4f361772"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAppointmentReceptionsByPatient</con:operation><con:request name="getAppointmentReceptionsByPatient sarOrchestrator" id="f8352831-221f-4cef-96e9-f6f8ecc0dfb4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <v5:getAppointmentReceptionsByPatient>
         <omsNumber>${#TestCase#omsNumber}</omsNumber>
         <!--<omsSeries>?</omsSeries>-->
         <birthDate>${#TestCase#birthdate}</birthDate>
         <externalSystemId>INFOMAT</externalSystemId>
         <signActiveArchive>${#TestCase#signActiveArchive}</signActiveArchive>
      </v5:getAppointmentReceptionsByPatient>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="872b5eab-2024-461f-a2ed-4096a21e0210"/><con:assertion type="SOAP Fault Assertion" id="5b841e46-88b6-47f5-9d1d-1f5520697e57" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getAppointmentReceptionsByPatient Info" id="aeceb23b-25b4-4830-aa71-20b1e80838b7"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v3/saOrchestrator/getAppointmentReceptionsByPatient" methodName="getAppointmentReceptionsByPatient" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAppointmentReceptionsByPatient Info" id="3d15cc91-3c05-4425-84aa-2433a12d0943" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#omsNumber}",
  "birthDate": "${#TestCase#birthdate}",
  "appointmentId": [${#TestCase#appointmentId}],
  "signActiveArchive": "${#TestCase#signActiveArchive}"
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/saOrchestrator/getAppointmentReceptionsByPatient</con:originalUri><con:assertion type="JsonPath Existence Match" id="c750ed69-478a-4c3b-940a-46436cfe9d05" name="Ответ не вернул ошибку" disabled="true"><con:configuration><path>$.error</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="6dea8ef1-f14e-45bf-9e34-d8de31b7a795" name="Возвращен Payload"><con:configuration><path>$.payload</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг элементов" id="d870ee3b-5e80-400f-81fd-64f5f7bca923"><con:settings/><con:config><script>import groovy.json.JsonSlurper

//Получение данных из ответа getAppointmentReceptionsByPatient
def restResponse = context.expand('${getAppointmentReceptionsByPatient Info#Response}')
def json =  new JsonSlurper().parseText(restResponse)
def jsonObects = json.payload

//Получение данных из ответа SelfAppointment
def soapResponse = context.expand('${getAppointmentReceptionsByPatient sarOrchestrator#Response}')
//def soapResponse = context.expand('${#TestCase#selfAppResonse}')
def xml = new XmlSlurper().parseText(soapResponse)
def xmlObjects=xml.Body.getAppointmentReceptionsByPatientResponse.appointment

for (i=0;i&lt;jsonObects.size();i++)
{
	def jsonObject = jsonObects[i]
	
	def xmlObject  = 0; //создаём переменную под объект ответа орекстратора
	for (obj in xmlObjects)
	{
		if (obj.id ==jsonObject.id) // в цикле перебираем все объекты оркестратора и ищем нужный по id
			xmlObject = obj //при наождении записываем его в xmlObject
	}

	log.info (jsonObject.id)

	assert jsonObject.id == xmlObject.id.toLong() //Маппинг параметров id, number, lpuId, typeLpu
	assert jsonObject.number == xmlObject.number.toString()

	assert jsonObject.lpuId == xmlObject.lpuId.toLong()
	assert jsonObject.typeLpu == xmlObject.typeLpu.toString()

	if (xmlObject.nameLpu.text() != "") //Проверка на наличие параметра nameLpu, т.к он необязательный
	{
		assert jsonObject.nameLpu == xmlObject.nameLpu.toString()
	}
	
	assert jsonObject.lpuAddress == xmlObject.lpuAddress.toString()

	assert jsonObject.startTime == xmlObject.startTime.toString()[0..-7] //Обрубание смещения (2022-11-07T11:40:00+03:00 -> 2022-11-07T11:40:00)
	assert jsonObject.endTime == xmlObject.endTime.toString()[0..-7]

	assert jsonObject.type == xmlObject.type.toString()
	assert jsonObject.enableShift == xmlObject.enableShift.toBoolean()

	assert jsonObject.availableResourceId == xmlObject.availableResourceId.toLong()
	assert jsonObject.complexResourceId == xmlObject.complexResourceId.toLong()

	if (xmlObject.roomId.text() != "") //Проверка на наличие параметра roomId
	{
		assert jsonObject.roomId == xmlObject.roomId.toLong()
	}

	assert jsonObject.roomNumber == xmlObject.roomNumber.toString()
	assert jsonObject.addressPointId == xmlObject.addressPointId.toLong()

	if (xmlObject.toDoctor.text() != "") //Проверка на наличие параметра toDoctor
	{//Маппинг параметров внутри объекта
			assert jsonObject.toDoctor.specialityId == xmlObject.toDoctor.specialityId.toLong()
			assert jsonObject.toDoctor.specialityName == xmlObject.toDoctor.specialityName.toString()
			if (xmlObject.toDoctor.doctorFio.text() != "")
			{
				assert jsonObject.toDoctor.doctorFio == xmlObject.toDoctor.doctorFio.toString()
			}
			assert jsonObject.toDoctor.receptionTypeId == xmlObject.toDoctor.receptionTypeId.toLong()
	}

	if (xmlObject.toLdp.text() != "") //Проверка на наличие параметра toLdp
	{//Маппинг параметров внутри объекта
			assert jsonObject.toLdp.ldpTypeId == xmlObject.toLdp.ldpTypeId.toLong()
			assert jsonObject.toLdp.ldpTypeName == xmlObject.toLdp.ldpTypeName.toString()
			if (xmlObject.toLdp.countAssignmentProcedures.text() != "")
			{
				assert jsonObject.toLdp.countAssignmentProcedures == xmlObject.toLdp.countAssignmentProcedures.toInteger()
			}
	}

	if (xmlObject.toBM.text() != "") //Проверка на наличие параметра toBM
	{//Маппинг параметров внутри объекта
			assert jsonObject.toBM.id == xmlObject.toBM.id.toLong()
			assert jsonObject.toBM.name == xmlObject.toBM.name.toString()
			if (xmlObject.toBM.self.text() != "")
			{
				 assert jsonObject.toBM.self == xmlObject.toBM.self.toBoolean()
			}
	}

	assert jsonObject.statusId == xmlObject.statusId.toLong()

	if (xmlObject.cancelInfo.text() != "") //Проверка на наличие параметра cancelInfo
	{//Маппинг параметров внутри объекта
			assert jsonObject.cancelInfo.cancelReasonId == xmlObject.cancelInfo.cancelReasonId.toLong()
			assert jsonObject.cancelInfo.cancelReasonDesc == xmlObject.cancelInfo.cancelReasonDesc.toString()
	}

	if (xmlObject.receptionFactId.text() != "") //Проверка на наличие параметра receptionFactId
	{
			assert jsonObject.receptionFactId == xmlObject.receptionFactId.toLong()
	}

	if (xmlObject.referral.text() != "") //Проверка на наличие параметра referral
	{//Маппинг параметров внутри объекта
			assert jsonObject.referral.referralId == xmlObject.referral.referralId.toLong()
			assert jsonObject.referral.startTime == xmlObject.referral.startTime.toString()
			assert jsonObject.referral.endTime == xmlObject.referral.endTime.toString()
			if (xmlObject.referral.availableResourceId.text() != "")
			{
				assert jsonObject.referral.availableResourceId ==  xmlObject.referral.availableResourceId.toLong()
			}
			if (xmlObject.referral.lpuId.text() != "")
			{
				assert jsonObject.referral.lpuId ==  xmlObject.referral.lpuId.toLong()
			}
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверка наличия и отсутвия блоков для разных типов" id="f7207325-c041-413e-9c29-fb3d3e113448"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def restResponse = context.expand('${getAppointmentReceptionsByPatient Info#Response}')
def json =  new JsonSlurper().parseText(restResponse)
def jsonObects = json.payload

for (i=0;i&lt;jsonObects.size();i++)
{
	def jsonObject = jsonObects[i]

	log.info(jsonObject.id)

	if (jsonObject.type == "LDP")
	{
		assert jsonObject.toLdp != null
		assert jsonObject.toBM == null
		assert jsonObject.toDoctor == null
	}

	if (jsonObject.type == "BM")
	{
		assert jsonObject.toLdp == null
		assert jsonObject.toDoctor == null
		assert jsonObject.toBM != null
	}
	
	if (jsonObject.type == "RECEPTION")
	{
		assert jsonObject.toLdp == null
		assert jsonObject.toDoctor != null
		assert jsonObject.toBM == null
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7700003097180466</con:value></con:property><con:property><con:name>birthdate</con:name><con:value>1966-04-18</con:value></con:property><con:property><con:name>signActiveArchive</con:name><con:value>2</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391881137573, 391880689648</con:value></con:property></con:properties></con:testCase><con:testCase id="78e1ff2c-3525-49a0-9e77-729b779d6f11" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Записи не найдены АС2 (APPOINTEMENT_NOT_FOUND)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getAppointmentReceptionsByPatient Info" id="c769d2cd-25b8-4ea1-8d3e-6e7a5329adbc"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v3/saOrchestrator/getAppointmentReceptionsByPatient" methodName="getAppointmentReceptionsByPatient" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAppointmentReceptionsByPatient Info" id="3d15cc91-3c05-4425-84aa-2433a12d0943" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#omsNumber}",
  "birthDate": "${#TestCase#birthdate}",
  "appointmentId": [0],
  "signActiveArchive": "${#TestCase#signActiveArchive}"
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/saOrchestrator/getAppointmentReceptionsByPatient</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="87da0c37-7d36-4816-b359-cae99f9c5201" name="В ответе 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c428ea3-d532-407a-ad6b-e9c92c7ad038" name="Значение code = APPOINTMENT_NOT_FOUND"><con:configuration><path>$.error.code</path><content>APPOINTMENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>omsNumber</con:name><con:value>7700003097180466</con:value></con:property><con:property><con:name>birthdate</con:name><con:value>1966-04-18</con:value></con:property><con:property><con:name>signActiveArchive</con:name><con:value>2</con:value></con:property><con:property><con:name>appointmentId</con:name><con:value>391881137573, 391880689648</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>InfoEndpointURL</con:name><con:value>http://emiasinfo1.emias.solit-clouds.ru/</con:value></con:property><con:property><con:name>SelfAppointmentEndpointURL</con:name><con:value>http://esbcamel.test.emias.mos.ru/proxy/Appointment/SelfAppointmentTwo/v7S/ProxyService</con:value></con:property></con:properties></con:testSuite><con:testSuite id="c6937c05-ed6f-4f0c-bf7e-e69a1c5bbcf9" name="getAssignmentsReferralsInfo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="232613cd-cd37-491a-be62-85d4508eb274" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getAssignmentsReferralsInfo" id="388d3a72-ac7a-483f-95ac-c6c30fe1a8de"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getAssignmentsReferralsInfo" methodName="getAssignmentsReferralsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAssignmentsReferralsInfo" id="690b74ab-a442-40f4-97be-5cf08d0e2f30" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"omsNumber":"5052110885001399",
	"birthDate":"1988-07-14"
}
</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getAssignmentsReferralsInfo</con:originalUri><con:assertion type="Simple Contains" id="dd9fd34b-00ca-4f97-9d1f-a465f30086f6" name="В ответе есть referrals"><con:configuration><token>referrals</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="293c4832-3dbf-4ade-adcb-bcb7d5709b81"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3332dffa-ed4b-4ef7-a6cc-7e62774ca1a1" name="В ответе есть assignments"><con:configuration><token>assignments</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="7fbfc932-1d02-4924-b777-a0e8138ae2cf" name="В ответе нет ошибок"><con:configuration><token>isError</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="omsNumber" value="${#TestCase#oms}"/>
  <con:entry key="birthDate" value="${#TestCase#bd}"/>
</con:parameters><con:parameterOrder><con:entry>omsNumber</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="request" id="6367ac13-7899-4845-8c64-014d821a2402" name="getReferralsInfo"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getReferralsInfo</con:operation><con:request name="getReferralsInfo" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="fada3ba0-b768-4094-a722-77b333e74999"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>\r
      <v5:getReferralsInfo>\r
         <omsNumber>${#TestCase#oms}</omsNumber>
         <birthDate>${#TestCase#bd}</birthDate>
         <externalSystemId>EIM</externalSystemId>
      </v5:getReferralsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5c85c232-85fa-4c96-9809-e42c981c62e3" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="723055e4-fe54-4c36-89c0-bad51b527fdb" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getReferralsInfo"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" id="cbcf98b8-31f9-4ea8-b825-6ae935823ca2" name="getAssignmentsInfo"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAssignmentsInfo</con:operation><con:request name="getAssignmentsInfo" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="430d75e9-cc4e-4fc9-ace3-72abffe1553c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
    <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>\r
      <v5:getAssignmentsInfo>\r
         <omsNumber>${#TestCase#oms}</omsNumber>
         <birthDate>${#TestCase#bd}</birthDate>
         <externalSystemId>EIM</externalSystemId>
      </v5:getAssignmentsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="230d8ad7-22e3-461b-a58c-3f98bab22d33" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="329289d1-2905-4cb4-aa53-3e39eda5cbba" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAssignmentsInfo"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить count" id="bcb52f45-582f-48ee-8e33-1e17fd7c0104"><con:description>В ответе метода getAssignmentsReferralsInfo значение count= сумме количества элементов в ответах методов getReferralsInfo и getAssignmentsInfo</con:description><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getAssignmentsReferralsInfoResponse = context.expand('${getAssignmentsReferralsInfo#Response}')
def slurperJson = new JsonSlurper()
def getAssignmentsReferralsInfo = slurperJson.parseText(getAssignmentsReferralsInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getAssignmentsInfoSAOResponse = context.expand('${getAssignmentsInfo#Response}')
getAssignmentsInfoSAO = new XmlSlurper().parseText(getAssignmentsInfoSAOResponse)

def getReferralsInfoSAOResponse = context.expand('${getReferralsInfo#Response}')
getReferralsInfoSAO = new XmlSlurper().parseText(getReferralsInfoSAOResponse)

countInfo=getAssignmentsReferralsInfo.payload.arInfo.count

assigmentsCount=getAssignmentsInfoSAO.Body.getAssignmentsInfoResponse.assignment.size()

referralsCount=getReferralsInfoSAO.Body.getReferralsInfoResponse.referral.size()

countSAO=assigmentsCount+referralsCount

assert countInfo==countSAO

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг assigment" id="2eac3f60-8632-4fed-a5bf-f08e090f606c"><con:description>В ответе getAssignmentsReferralsInfo элементы assigments аналогичны по наполнению элементам assigment из ответа getAssignmentsInfo и отсортированы по возрастанию по значению  period.dateTo</con:description><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getAssignmentsReferralsInfoResponse = context.expand('${getAssignmentsReferralsInfo#Response}')
def slurperJson = new JsonSlurper()
def getAssignmentsReferralsInfo = slurperJson.parseText(getAssignmentsReferralsInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getAssignmentsInfoSAOResponse = context.expand('${getAssignmentsInfo#Response}')
getAssignmentsInfoSAO = new XmlSlurper().parseText(getAssignmentsInfoSAOResponse)

countInfo=getAssignmentsReferralsInfo.payload.arInfo.assignments.size()

assigmentsCount=getAssignmentsInfoSAO.Body.getAssignmentsInfoResponse.assignment.size()

assert countInfo==assigmentsCount

assigmentsINFO=getAssignmentsReferralsInfo.payload.arInfo.assignments

assigmentsSAO=getAssignmentsInfoSAO.Body.getAssignmentsInfoResponse.assignment

assigmentsSAO.sort {it.period.dateTo}

log.info  assigmentsSAO.getClass()
//assigmentsSAO.sort(period.dateTo)

for (int i=1; i&lt;countInfo; i++){
	if(assigmentsINFO[i-1].period.dateTo> assigmentsINFO[i].period.dateTo){
		log.info assigmentsINFO[i-1].period.dateTo
		testRunner.fail(" не отсортированы по датеокончания ")
	}
}


for (int i=0; i&lt;countInfo; i++){
	assigmentSAO=assigmentsSAO[i]
	assigmentINFO=assigmentsINFO[i]
	appointmentIdINFO=assigmentINFO.appointmentId? assigmentINFO.appointmentId : null
	appointmentIdSAO=assigmentSAO.appointmentId? assigmentSAO.appointmentId.toLong() : null
	log.info assigmentINFO.moId
	log.info assigmentSAO.moId
	assert assigmentINFO.moId==assigmentSAO.moId.toLong()
	assert assigmentINFO.toBM.id==assigmentSAO.toBM.id.toLong()
	assert assigmentINFO.toBM.name==assigmentSAO.toBM.name.toString()
	assert assigmentINFO.toBM.self==assigmentSAO.toBM.self.toBoolean()
	assert appointmentIdINFO==appointmentIdSAO
	registryEntriesINFO=assigmentINFO.registryEntry
	registryEntriesSAO=assigmentSAO.registryEntry
	assert registryEntriesINFO.size() ==registryEntriesSAO.size() 
	for (int m=0; m&lt;registryEntriesSAO.size(); m++){
		registryEntryINFO=registryEntriesINFO[m]
		registryEntrySAO=registryEntriesSAO[m]
		log.info  registryEntryINFO.entryId
		assert registryEntryINFO.entryId==registryEntrySAO.entryId.toLong()
		assert registryEntryINFO.laboratoryId==registryEntrySAO.laboratoryId.toLong()
		assert registryEntryINFO.laboratoryName==registryEntrySAO.laboratoryName.toString()
		assert registryEntryINFO.biomaterialId==registryEntrySAO.biomaterialId.toLong()
		assert registryEntryINFO.biomaterialName==registryEntrySAO.biomaterialName.toString()
		assert registryEntryINFO.hasMemo==registryEntrySAO.hasMemo.toBoolean()
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг referrals" id="387719e9-5aaf-4294-af26-469d8740ce66"><con:description>В ответе getAssignmentsReferralsInfo элементы referrals аналогичны по наполнению элементам referral из ответа getReferralsInfo и отсортированы по возрастанию по значению  endTime </con:description><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

def getAssignmentsReferralsInfoResponse = context.expand('${getAssignmentsReferralsInfo#Response}')
def slurperJson = new JsonSlurper()
def getAssignmentsReferralsInfo = slurperJson.parseText(getAssignmentsReferralsInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getReferralsInfoSAOResponse = context.expand('${getReferralsInfo#Response}')
getReferralsInfoSAO = new XmlSlurper().parseText(getReferralsInfoSAOResponse)


countInfo=getAssignmentsReferralsInfo.payload.arInfo.referrals.size()

referralsCount=getReferralsInfoSAO.Body.getReferralsInfoResponse.referral.size()

assert countInfo==referralsCount

referralsINFO=getAssignmentsReferralsInfo.payload.arInfo.referrals

referralsSAO=getReferralsInfoSAO.Body.getReferralsInfoResponse.referral

//assigmentsSAO.sort(period.dateTo)
referralsSAO.sort {it.endTime}
newSAO=[]
referralsSAO.each{ sao ->
	dateString=sao.endTime.toString()
	 LocalDate newDate = LocalDate.parse(dateString, formatter)
	map=[id:sao.id.toLong(),endTime:newDate]
	newSAO << map
}

for (int i=1; i<countInfo; i++){
	if(referralsINFO[i-1].endTime> referralsINFO[i].endTime){
		testRunner.fail(" не отсортированы по датеокончания ")
	}
}


newSAO.sort {it.endTime}
//newSAO.sort {a,b ->
//a.end <=> b.end ?: a.id <=> b.id}
newSAO.each{
	log.info "newSAO "+it
}

for (int i=0; i<countInfo; i++){
	log.info "зашли в цикл "+i
	referralSAO=[]
	for (int k=0; k<countInfo;k++){
		log.info "сравниваю  referralsINFO "+i+" "+referralsINFO[i].id+" и referralsSAO "+k+" "+referralsSAO[k].id
		if(referralsINFO[i].id.toLong()==referralsSAO[k].id.toLong()){
			referralSAO=referralsSAO[k]
			break
		}
		
	}
	//referralSAO=referralsSAO[i]
	referralINFO=referralsINFO[i]
	invalidINFO=referralINFO.invalid? referralINFO.invalid : null
	invalidSAO=referralSAO.invalid? referralSAO.invalid.toLong() : null
	commentINFO=referralINFO.comment ? referralINFO.comment : null
	commentSAO=referralSAO.comment.toString() !='' ? referralSAO.comment.toString() : null
	lpuIdINFO=referralINFO.lpuId ? referralINFO.lpuId : null
	lpuIdSAO=referralSAO.lpuId ? referralSAO.lpuId.toLong() : null
	lpuNameINFO=referralINFO.lpuName ? referralINFO.lpuName : null
	lpuNameSAO=referralSAO.lpuName.toString() !='' ? referralSAO.lpuName.toString() : null
	availableResourceIdINFO=referralINFO.availableResourceId ? referralINFO.availableResourceId : null
	availableResourceIdSAO=referralSAO.availableResourceId ? referralSAO.availableResourceId.toLong() : null
	log.info i
	log.info "referralINFO "+ referralINFO.id
	log.info "referralSAO "+referralSAO.id
	assert referralINFO.id.toLong()==referralSAO.id.toLong()
	//assert referralINFO.number.toString()==referralSAO.number.toString()
	assert invalidINFO==invalidSAO
	//assert commentINFO==commentSAO
	assert referralINFO.startTime==referralSAO.startTime.toString()
	assert referralINFO.endTime==referralSAO.endTime.toString()
	assert referralINFO.type==referralSAO.type.toString()
	assert lpuIdINFO==lpuIdSAO
	assert lpuNameINFO==lpuNameSAO
	assert availableResourceIdINFO==availableResourceIdSAO
	assert referralINFO.countActiveAppointment.toLong()==referralSAO.countActiveAppointment.toLong()
	assert referralINFO.countAppointmentWithReceptionFact.toLong()==referralSAO.countAppointmentWithReceptionFact.toLong()
	if(referralINFO.type=='REF_TO_DOCTOR'){
		toDoctorINFO=referralINFO.toDoctor
		toDoctorSAO=referralSAO.toDoctor
		doctorFioNameINFO=referralINFO.doctorFioName ? referralINFO.doctorFioName : null
		doctorFioNameSAO=referralSAO.doctorFioName.toString() !='' ? referralSAO.doctorFioName.toString() : null
		assert toDoctorINFO.specialityId== toDoctorSAO.specialityId.toLong()
		assert toDoctorINFO.specialityName== toDoctorSAO.specialityName.toString()
		assert toDoctorINFO.receptionTypeId== toDoctorSAO.receptionTypeId.toLong()
		assert doctorFioNameINFO == doctorFioNameSAO
	}
	if(referralINFO.type=='REF_TO_LDP'){
		toLdpINFO=referralINFO.toLdp
		toLdpSAO=referralSAO.toLdp
		countAssignmentProceduresINFO=referralINFO.countAssignmentProcedures ? referralINFO.countAssignmentProcedures : null
		countAssignmentProceduresSAO=referralSAO.countAssignmentProcedures.toString() !='' ? referralSAO.countAssignmentProcedures.toString() : null
		assert toLdpINFO.ldpTypeId== toLdpSAO.ldpTypeId.toLong()
		assert toLdpINFO.ldpTypeName== toLdpSAO.ldpTypeName.toString()
		assert countAssignmentProceduresINFO == countAssignmentProceduresSAO
	}
	log.info "успешно проверено направление №"+ referralINFO.id
}

log.info "end."
]]></script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7757330889000627</con:value></con:property><con:property><con:name>bd</con:name><con:value>1966-02-10</con:value></con:property></con:properties></con:testCase><con:testCase id="aada4e8f-9256-4dca-8d90-9d7e66b53ede" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС2 PATIENT_NOT_FOUND" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getAssignmentsReferralsInfo" id="08a30ed0-8092-4593-a212-c9d6cfa00781"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getAssignmentsReferralsInfo" methodName="getAssignmentsReferralsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAssignmentsReferralsInfo" id="690b74ab-a442-40f4-97be-5cf08d0e2f30" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
	"omsNumber":"5052110885001399",
	"birthDate":"1988-07-14"
}
</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getAssignmentsReferralsInfo</con:originalUri><con:assertion type="JsonPath Match" id="ccf51a3a-073b-4b7e-bc23-2efaeeb88973" name="В ответе есть пустой элемент referrals"><con:configuration><path>$.payload.arInfo.referrals</path><content>[]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ccf51a3a-073b-4b7e-bc23-2efaeeb88973" name="В ответе есть пустой элемент assigments"><con:configuration><path>$.payload.arInfo.assignments</path><content>[]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ccf51a3a-073b-4b7e-bc23-2efaeeb88973" name="Количество назначений  направлений = 0"><con:configuration><path>$.payload.arInfo.count</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ccf51a3a-073b-4b7e-bc23-2efaeeb88973" name="isError=true "><con:configuration><path>$.payload.arInfo.isError</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="omsNumber" value="${#TestCase#oms}"/>
  <con:entry key="birthDate" value="${#TestCase#bd}"/>
</con:parameters><con:parameterOrder><con:entry>omsNumber</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>ыыыыыыыыыыыыыыыыыыы</con:value></con:property><con:property><con:name>bd</con:name><con:value>1966-02-10</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>oms</con:name><con:value>7758720847000454</con:value></con:property><con:property><con:name>bd</con:name><con:value>1972-01-02</con:value></con:property></con:properties></con:testSuite><con:testSuite id="2ae55917-4d29-4231-a293-33730da962ed" name="getDoctorsInfoForLI"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="28fa398d-f39f-43e9-89ea-ff86ea8583c7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга без appointment" searchProperties="true"><con:settings/><con:testStep type="request" id="23f030c9-a0b2-46bc-8a20-68c9f2308c3c" name="getAssignmentsInfo"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAssignmentsInfo</con:operation><con:request name="getAssignmentsInfo" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="8e919cc7-a7cb-497c-89f2-8fefb6397fdf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>EIM</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <v5:getAssignmentsInfo>\r
         <omsNumber>${#TestCase#oms}</omsNumber>\r
         <birthDate>${#TestCase#bd}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
      </v5:getAssignmentsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="acfdb401-29a6-4a83-b6a2-93b0ee510be8" name="SOAP Response"/><con:assertion type="XPath Match" id="a2b14097-12b3-470c-990b-7adcb0464400" name="XPath Match"><con:configuration><path>//assignment[1]/moId</path><content>10000454</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAssignmentsInfo"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getDoctorsInfoForLI Info" id="c9ebbda1-4f1f-42f4-903a-34313090848b"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getDoctorsInfoForLI" methodName="getDoctorsInfoForLI" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getDoctorsInfoForLI Info" id="3e7d1a29-f77b-4f37-9d97-597065b8124d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#bd}",
  "assignment": {
    "moId": 10000454,
    "samplingTypeId": 1,
    "period": {
      "dateFrom": "2022-08-03",
      "dateTo": "2022-12-14"
    }
  }
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getDoctorsInfoForLI</con:originalUri><con:assertion type="Simple NotContains" id="0919ff47-8696-4fb5-a307-ebc9e9939496" name="Not Contains"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" id="e84e0b30-78cb-4f61-a2b7-600ff492aa7a" name="getDoctorsInfoForLI  SAO"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getDoctorsInfoForLI</con:operation><con:request name="getDoctorsInfoForLI  SAO" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="f9e8d79d-202a-4ce0-ad6a-1602bef2292e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>

   <soap:Body>\r
      <v5:getDoctorsInfoForLI>\r
         <omsNumber>${#TestCase#oms}</omsNumber>\r
         <birthDate>${#TestCase#bd}</birthDate>\r
         <assignment>\r
            <moId>10000454</moId>\r
            <samplingTypeId>1</samplingTypeId>\r
            <period>\r
               <dateFrom>2022-08-03</dateFrom>\r
               <dateTo>2022-12-14</dateTo>\r
            </period>\r
         </assignment>\r
         <externalSystemId>EIM</externalSystemId>\r
      </v5:getDoctorsInfoForLI>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="0753420a-1e5d-44c8-8776-20489532b34f" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForLI"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Сравнить количество ресурсов" id="f09c5d7e-e998-45fa-a981-40eb3ebc721b"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorsInfoForLI Info#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorsInfo#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoForLIResponse.availableResource
numberSACArs=SACArs.size()

 mySet = new HashSet&lt;>();

//проверить все ли ресурсы в отсете sac уникальные
if (numberSACArs>0){
	for(int i=0; i&lt;numberSACArs; i++){
		for ( x : SACArs[i].id) {
   			 mySet.add(x);
		}
	}
}

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}

INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()

assert  SACArsWithComplexRes.size()==numberArs

log.info numberArs
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить основные параметры ресурсов" id="a16a79dd-5848-40cf-9611-1cb43a46b8b1"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorsInfoForLI Info#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorsInfoForLI  SAO#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoForLIResponse.availableResource
numberSACArs=SACArs.size()
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
//log.info numberSACArs

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}

for(int i=0; i&lt;numberArs; i++){
	assert	INFOArs[i].id == SACArsWithComplexRes[i].id.toLong()
	lpuIdInfo = INFOArs[i].lpuId ? INFOArs[i].lpuId : null
	lpuIdSao = SACArsWithComplexRes[i].lpuId.toString() != "" ? SACArsWithComplexRes[i].lpuId.toLong()  : null
	assert lpuIdInfo	== lpuIdSao
	nameInfo = INFOArs[i].name ? INFOArs[i].name : null
	nameSao = SACArsWithComplexRes[i].name.toString()!="" ? SACArsWithComplexRes[i].name.toString() : null
	assert	nameInfo  == nameSao
	assert	INFOArs[i].arType == SACArsWithComplexRes[i].arType.toInteger() 
	log.info  INFOArs[i].specialityChangeAbility 
	specialityChangeAbilityInfo= INFOArs[i].specialityChangeAbility.toString() !="" ? INFOArs[i].specialityChangeAbility : null
	specialityChangeAbilitySao = SACArsWithComplexRes[i].specialityChangeAbility.toString()!=""  ? SACArsWithComplexRes[i].specialityChangeAbility.toBoolean() : null
	assert	 specialityChangeAbilityInfo == specialityChangeAbilitySao
	arSpecialityIdInfo = INFOArs[i].arSpecialityId ? INFOArs[i].arSpecialityId : null
	arSpecialityIdSao = SACArsWithComplexRes[i].arSpecialityId.toString()!="" ? SACArsWithComplexRes[i].arSpecialityId.toLong() : null
	assert	arSpecialityIdInfo  == arSpecialityIdSao
	arSpecialityNameInfo = INFOArs[i].arSpecialityName ? INFOArs[i].arSpecialityName : null
	arSpecialityNameSao = SACArsWithComplexRes[i].arSpecialityName.toString() !="" ? SACArsWithComplexRes[i].arSpecialityName.toString() : null
	assert	arSpecialityNameInfo ==  arSpecialityNameSao
	assert	INFOArs[i].district == SACArsWithComplexRes[i].district.toBoolean() 
	assert	INFOArs[i].replacement == SACArsWithComplexRes[i].replacement.toBoolean() 
	nondistrictSAC= SACArsWithComplexRes[i].nondistrict ? SACArsWithComplexRes[i].nondistrict.toBoolean() :false
	nondistrictINFO = INFOArs[i].nondistrict ? INFOArs[i].nondistrict : false
	assert	nondistrictINFO == nondistrictSAC
	assert	INFOArs[i].availableByReferral == SACArsWithComplexRes[i].availableByReferral.toBoolean() 
}
log.info "end"

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить ldpType ресурсов" id="17a8b1c0-b625-4e49-9670-ddfec547eba1"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorsInfoForLI Info#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorsInfoForLI  SAO#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoForLIResponse.availableResource
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
numberSACArs=SACArs.size()

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}


for(int i=0; i&lt;numberArs; i++){
	if(INFOArs[i].ldpType==null){
		assert  SACArsWithComplexRes[i].ldpType==null 
	}
	else{
		log.info INFOArs[i].ldpType
		infoLt=INFOArs[i].ldpType
		sacLt= SACArsWithComplexRes[i].ldpType
		assert infoLt.size() == sacLt.size()
		for(int j=0; j&lt; infoLt.size();j++){
			assert infoLt[j].code == sacLt[j].code.toString()
			assert infoLt[j].name == sacLt[j].name.toString()							
		}
	}
}
log.info "end"

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить complexResource ресурсов" id="7766b690-fd10-4405-88ee-6454625ecbd3"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorsInfoForLI Info#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorsInfoForLI  SAO#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoForLIResponse.availableResource
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
numberSACArs=SACArs.size()

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}


for(int i=0; i&lt;numberArs; i++){
	if(INFOArs[i].complexResource==null){
		assert  SACArsWithComplexRes[i].complexResource==null 
	}
	else{
		log.info INFOArs[i].complexResource
		infoCR=INFOArs[i].complexResource
		sacCR= SACArsWithComplexRes[i].complexResource
		log.info infoCR.size()
		log.info sacCR.size()
		assert infoCR.size() == sacCR.size()
		for(int j=0; j&lt; infoCR.size();j++){
			infoCR[j].id == sacCR[j].id
			infoCR[j].name == sacCR[j].name		
			roomInfo=infoCR[j].room
			roomSAC=sacCR[j].room
			availDateSAO=roomSAC.availabilityDate.toString().replace("+","#")	.split("#")[0]
			assert roomInfo.id == roomSAC.id.toLong()
			assert roomInfo.number == roomSAC.number.toString()
			assert roomInfo.lpuId == roomSAC.lpuId.toLong()
			assert roomInfo.addressPointId == roomSAC.addressPointId.toLong()
			assert roomInfo.lpuShortName == roomSAC.lpuShortName.toString()
			assert roomInfo.defaultAddress == roomSAC.defaultAddress.toString()
			assert roomInfo.availabilityDate == availDateSAO	
		}
	}
}
log.info "end"

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить SamplingType ресурсов" id="fd406d5c-48f6-41a6-9147-b9d6a4fd1e39"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorsInfoForLI Info#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorsInfoForLI  SAO#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoForLIResponse.availableResource
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
numberSACArs=SACArs.size()

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}


for(int i=0; i&lt;numberArs; i++){
	if(INFOArs[i].samplingType==null){
		assert  SACArsWithComplexRes[i].samplingType==null 
	}
	else{
		
		infoST=INFOArs[i].samplingType
		sacST= SACArsWithComplexRes[i].samplingType
		assert infoST.size() == sacST.size()
		for(int j=0; j&lt; infoST.size();j++){
			selfInfo=  infoST[j].self ? infoST[j].self: null
			selfSao=  sacST[j].self.toString() !="" ? sacST[j].self.toBoolean(): null
			assert infoST[j].id == sacST[j].id.toLong()
			assert infoST[j].name == sacST[j].name.toString()					
			assert selfInfo == selfSao				
		}
	}
}
log.info "end"

</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7758720847000454</con:value></con:property><con:property><con:name>bd</con:name><con:value>1972-01-02</con:value></con:property></con:properties></con:testCase><con:testCase id="4f523b6a-c1ce-433d-b0a0-ecb7914d45fe" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга с appointment" searchProperties="true"><con:settings/><con:testStep type="request" id="6d14ef39-bce9-4469-be09-19d1c1cc6859" name="getAssignmentsInfo"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAssignmentsInfo</con:operation><con:request name="getAssignmentsInfo" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="8e919cc7-a7cb-497c-89f2-8fefb6397fdf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>EIM</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <v5:getAssignmentsInfo>\r
         <omsNumber>${#TestCase#oms}</omsNumber>\r
         <birthDate>${#TestCase#bd}</birthDate>\r
         <externalSystemId>EIM</externalSystemId>\r
      </v5:getAssignmentsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="acfdb401-29a6-4a83-b6a2-93b0ee510be8" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getAssignmentsInfo"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getDoctorsInfoForLI Info" id="995c1bec-d58e-4961-9ab8-32406df61048"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getDoctorsInfoForLI" methodName="getDoctorsInfoForLI" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getDoctorsInfoForLI Info" id="3e7d1a29-f77b-4f37-9d97-597065b8124d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#bd}",
  "appointmentId": 391871470798,
  "assignment": {
    "moId": 10000454,
    "samplingTypeId": 2,
    "period": {
      "dateFrom": "2022-08-03",
      "dateTo": "2022-10-14"
    }
  }
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getDoctorsInfoForLI</con:originalUri><con:assertion type="Simple NotContains" id="0919ff47-8696-4fb5-a307-ebc9e9939496" name="Not Contains"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" id="4427400f-9007-4a13-a52b-ce35ac78a110" name="getDoctorsInfoForLI  SAO"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getDoctorsInfoForLI</con:operation><con:request name="getDoctorsInfoForLI  SAO" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="f9e8d79d-202a-4ce0-ad6a-1602bef2292e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>EIM</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <v5:getDoctorsInfoForLI>\r
         <omsNumber>${#TestCase#oms}</omsNumber>\r
         <birthDate>${#TestCase#bd}</birthDate>\r
         <assignment>\r
            <moId>10000454</moId>\r
            <samplingTypeId>2</samplingTypeId>\r
            <period>\r
               <dateFrom>2022-08-03</dateFrom>\r
               <dateTo>2022-10-14</dateTo>\r
            </period>\r
         </assignment>\r
         <appointmentId>391871470798</appointmentId>\r
         <externalSystemId>EIM</externalSystemId>\r
      </v5:getDoctorsInfoForLI>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="0753420a-1e5d-44c8-8776-20489532b34f" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfoForLI"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Сравнить количество ресурсов" id="2c81dc77-4130-47c6-9b7e-9af38675ae7d"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorsInfoForLI Info#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorsInfoForLI  SAO#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoForLIResponse.availableResource
numberSACArs=SACArs.size()

 mySet = new HashSet&lt;>();

//проверить все ли ресурсы в отсете sac уникальные
if (numberSACArs>0){
	for(int i=0; i&lt;numberSACArs; i++){
		for ( x : SACArs[i].id) {
   			 mySet.add(x);
		}
	}
}

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}

INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()

assert  SACArsWithComplexRes.size()==numberArs

log.info numberArs
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить основные параметры ресурсов" id="30598dc1-ac46-4d3d-bf25-aa1570162daf"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorsInfoForLI Info#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorsInfoForLI  SAO#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoForLIResponse.availableResource
numberSACArs=SACArs.size()
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
//log.info numberSACArs

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}

for(int i=0; i&lt;numberArs; i++){
	assert	INFOArs[i].id == SACArsWithComplexRes[i].id.toLong()
	lpuIdInfo = INFOArs[i].lpuId ? INFOArs[i].lpuId : null
	lpuIdSao = SACArsWithComplexRes[i].lpuId.toString() != "" ? SACArsWithComplexRes[i].lpuId.toLong()  : null
	assert lpuIdInfo	== lpuIdSao
	nameInfo = INFOArs[i].name ? INFOArs[i].name : null
	nameSao = SACArsWithComplexRes[i].name.toString()!="" ? SACArsWithComplexRes[i].name.toString() : null
	assert	nameInfo  == nameSao
	assert	INFOArs[i].arType == SACArsWithComplexRes[i].arType.toInteger() 
	log.info  INFOArs[i].specialityChangeAbility 
	specialityChangeAbilityInfo= INFOArs[i].specialityChangeAbility.toString() !="" ? INFOArs[i].specialityChangeAbility : null
	specialityChangeAbilitySao = SACArsWithComplexRes[i].specialityChangeAbility.toString()!=""  ? SACArsWithComplexRes[i].specialityChangeAbility.toBoolean() : null
	assert	 specialityChangeAbilityInfo == specialityChangeAbilitySao
	arSpecialityIdInfo = INFOArs[i].arSpecialityId ? INFOArs[i].arSpecialityId : null
	arSpecialityIdSao = SACArsWithComplexRes[i].arSpecialityId.toString()!="" ? SACArsWithComplexRes[i].arSpecialityId.toLong() : null
	assert	arSpecialityIdInfo  == arSpecialityIdSao
	arSpecialityNameInfo = INFOArs[i].arSpecialityName ? INFOArs[i].arSpecialityName : null
	arSpecialityNameSao = SACArsWithComplexRes[i].arSpecialityName.toString() !="" ? SACArsWithComplexRes[i].arSpecialityName.toString() : null
	assert	arSpecialityNameInfo ==  arSpecialityNameSao
	assert	INFOArs[i].district == SACArsWithComplexRes[i].district.toBoolean() 
	assert	INFOArs[i].replacement == SACArsWithComplexRes[i].replacement.toBoolean() 
	nondistrictSAC= SACArsWithComplexRes[i].nondistrict ? SACArsWithComplexRes[i].nondistrict.toBoolean() :false
	nondistrictINFO = INFOArs[i].nondistrict ? INFOArs[i].nondistrict : false
	assert	nondistrictINFO == nondistrictSAC
	assert	INFOArs[i].availableByReferral == SACArsWithComplexRes[i].availableByReferral.toBoolean() 
}
log.info "end"

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить ldpType ресурсов" id="95c69651-21e8-46ab-8968-55ebbdff90b0"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorsInfoForLI Info#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorsInfoForLI  SAO#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoForLIResponse.availableResource
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
numberSACArs=SACArs.size()

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}


for(int i=0; i&lt;numberArs; i++){
	if(INFOArs[i].ldpType==null){
		assert  SACArsWithComplexRes[i].ldpType==null 
	}
	else{
		log.info INFOArs[i].ldpType
		infoLt=INFOArs[i].ldpType
		sacLt= SACArsWithComplexRes[i].ldpType
		assert infoLt.size() == sacLt.size()
		for(int j=0; j&lt; infoLt.size();j++){
			assert infoLt[j].code == sacLt[j].code.toString()
			assert infoLt[j].name == sacLt[j].name.toString()							
		}
	}
}
log.info "end"

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить complexResource ресурсов" id="1b62da12-3383-4335-abb0-1ef4e8fb0e02"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorsInfoForLI Info#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorsInfoForLI  SAO#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoForLIResponse.availableResource
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
numberSACArs=SACArs.size()

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}


for(int i=0; i&lt;numberArs; i++){
	if(INFOArs[i].complexResource==null){
		assert  SACArsWithComplexRes[i].complexResource==null 
	}
	else{
		log.info INFOArs[i].complexResource
		infoCR=INFOArs[i].complexResource
		sacCR= SACArsWithComplexRes[i].complexResource
		log.info infoCR.size()
		log.info sacCR.size()
		assert infoCR.size() == sacCR.size()
		for(int j=0; j&lt; infoCR.size();j++){
			infoCR[j].id == sacCR[j].id
			infoCR[j].name == sacCR[j].name		
			roomInfo=infoCR[j].room
			roomSAC=sacCR[j].room
			availDateSAO=roomSAC.availabilityDate.toString().replace("+","#")	.split("#")[0]
			assert roomInfo.id == roomSAC.id.toLong()
			assert roomInfo.number == roomSAC.number.toString()
			assert roomInfo.lpuId == roomSAC.lpuId.toLong()
			assert roomInfo.addressPointId == roomSAC.addressPointId.toLong()
			assert roomInfo.lpuShortName == roomSAC.lpuShortName.toString()
			assert roomInfo.defaultAddress == roomSAC.defaultAddress.toString()
			assert roomInfo.availabilityDate == availDateSAO	
		}
	}
}
log.info "end"

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить SamplingType ресурсов" id="61cb4a96-7931-45ff-b5cb-d1f094b6b5b5"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorsInfoForLI Info#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorsInfoForLI  SAO#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoForLIResponse.availableResource
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
numberSACArs=SACArs.size()

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}


for(int i=0; i&lt;numberArs; i++){
	if(INFOArs[i].samplingType==null){
		assert  SACArsWithComplexRes[i].samplingType==null 
	}
	else{
		
		infoST=INFOArs[i].samplingType
		sacST= SACArsWithComplexRes[i].samplingType
		assert infoST.size() == sacST.size()
		for(int j=0; j&lt; infoST.size();j++){
			selfInfo=  infoST[j].self ? infoST[j].self: null
			selfSao=  sacST[j].self.toString() !="" ? sacST[j].self.toBoolean(): null
			assert infoST[j].id == sacST[j].id.toLong()
			assert infoST[j].name == sacST[j].name.toString()					
			assert selfInfo == selfSao				
		}
	}
}
log.info "end"

</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7758720847000454</con:value></con:property><con:property><con:name>bd</con:name><con:value>1972-01-02</con:value></con:property></con:properties></con:testCase><con:testCase id="6cbb5a51-10f9-4b4a-a70a-680487542005" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС2 SA_PATIENT_NOT_FOUND(SA_PATIENT_HAS_NO_VALID_OMS)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getDoctorsInfoForLI Info" id="c41097d7-9d8d-43a6-9560-286153318ec5"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getDoctorsInfoForLI" methodName="getDoctorsInfoForLI" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getDoctorsInfoForLI Info" id="3e7d1a29-f77b-4f37-9d97-597065b8124d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#bd}",
  "appointmentId": 391871470798,
  "assignment": {
    "moId": 10000454,
    "samplingTypeId": 2,
    "period": {
      "dateFrom": "2022-08-03",
      "dateTo": "2022-10-14"
    }
  }
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getDoctorsInfoForLI</con:originalUri><con:assertion type="JsonPath Match" id="9e2d67ba-599a-4aea-9f59-fb52b1ff1457" name="Код ошибки = SA_PATIENT_HAS_NO_VALID_OM"><con:configuration><path>$.error.code</path><content>SA_PATIENT_HAS_NO_VALID_OMS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e2d67ba-599a-4aea-9f59-fb52b1ff1457" name="Описание ошибки = Пациент не имеет действительного полиса ОМ"><con:configuration><path>$.error.description</path><content>Пациент не имеет действительного полиса ОМС</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e2d67ba-599a-4aea-9f59-fb52b1ff1457" name="Тип ошибки =BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b3143704-2d92-4065-a19c-969865f8f2ac" name="В ответе возвращена  ошибка"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700502255961476</con:value></con:property><con:property><con:name>bd</con:name><con:value>1976-01-09</con:value></con:property></con:properties></con:testCase><con:testCase id="1b7fc64c-6cdc-4531-9a59-58f6f43f42ae" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС2 SA_PATIENT_NOT_FOUND(PATIENT_NOT_FOUND)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getDoctorsInfoForLI Info" id="4a95450e-c745-4a32-a15b-ec4b30c37a7b"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getDoctorsInfoForLI" methodName="getDoctorsInfoForLI" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getDoctorsInfoForLI Info" id="3e7d1a29-f77b-4f37-9d97-597065b8124d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#bd}",
  "appointmentId": 391871470798,
  "assignment": {
    "moId": 10000454,
    "samplingTypeId": 2,
    "period": {
      "dateFrom": "2022-08-03",
      "dateTo": "2022-10-14"
    }
  }
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getDoctorsInfoForLI</con:originalUri><con:assertion type="JsonPath Match" id="9e2d67ba-599a-4aea-9f59-fb52b1ff1457" name="Код ошибки = SA_PATIENT_HAS_NO_VALID_OM"><con:configuration><path>$.error.code</path><content>SA_PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e2d67ba-599a-4aea-9f59-fb52b1ff1457" name="Описание ошибки = Пациент с указанным ОМС не найден"><con:configuration><path>$.error.description</path><content>Пациент с указанным ОМС не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e2d67ba-599a-4aea-9f59-fb52b1ff1457" name="Тип ошибки =BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b3143704-2d92-4065-a19c-969865f8f2ac" name="В ответе возвращена  ошибка"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700502255961400</con:value></con:property><con:property><con:name>bd</con:name><con:value>1976-01-09</con:value></con:property></con:properties></con:testCase><con:testCase id="dc5b0295-5b75-4bf2-b58b-cdee1351f62f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС3 SAMPLING_TYPE_NOT_FOUND" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getDoctorsInfoForLI Info" id="72a4c54a-62bc-4278-9b41-907c0e86c614"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getDoctorsInfoForLI" methodName="getDoctorsInfoForLI" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getDoctorsInfoForLI Info" id="3e7d1a29-f77b-4f37-9d97-597065b8124d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#bd}",
  "appointmentId": 391871470798,
  "assignment": {
    "moId": 10000454,
    "samplingTypeId": 40,
    "period": {
      "dateFrom": "2022-08-03",
      "dateTo": "2022-10-14"
    }
  }
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getDoctorsInfoForLI</con:originalUri><con:assertion type="JsonPath Match" id="9e2d67ba-599a-4aea-9f59-fb52b1ff1457" name="Код ошибки = SA_SAMPLING_TYPE_NOT_FOUND"><con:configuration><path>$.error.code</path><content>SA_SAMPLING_TYPE_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e2d67ba-599a-4aea-9f59-fb52b1ff1457" name="Описание ошибки = Профиль взятия биоматериалов не найден или не является актуальным"><con:configuration><path>$.error.description</path><content>Профиль взятия биоматериалов не найден или не является актуальным</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e2d67ba-599a-4aea-9f59-fb52b1ff1457" name="Тип ошибки =BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b3143704-2d92-4065-a19c-969865f8f2ac" name="В ответе возвращена  ошибка"><con:configuration><token>error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7758720847000454</con:value></con:property><con:property><con:name>bd</con:name><con:value>1972-01-02</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="c701a913-873e-4029-88b1-991838d29bf2" name="getDoctorInfo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8a47288e-712b-4afc-950e-1a2778dc7683" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="маппинг" searchProperties="true"><con:settings/><con:testStep type="request" id="5d95152e-b841-48d4-8040-8195f748b684" name="getDoctorInfo saOrchestrator"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getDoctorsInfo</con:operation><con:request name="getDoctorInfo saOrchestrator" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="a1c3f969-b620-4570-b19b-8dd53d6043ef"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">\r
         <wsse:UsernameToken>\r
            <wsse:Username>EIM</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
   </soap:Header>\r
   <soap:Body>\r
      <v5:getDoctorsInfo>\r
         <omsNumber>${#TestCase#oms}</omsNumber>\r
         <birthDate>${#TestCase#bd}</birthDate>\r
         <!--You have a CHOICE of the next 3 items at this level-->\r
         <specialityId>${#TestCase#specId}</specialityId>\r

         <externalSystemId>EIM</externalSystemId>\r
      </v5:getDoctorsInfo>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="dd0bacf9-a887-46cc-bc5b-1ad7a076eb91" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="8cd780b3-f28e-4d5e-ba2f-2681edc74849" name="В ответе нет ошибок"/><con:assertion type="Simple Contains" id="24cfca93-24ed-465e-9e6b-6d9e32e1ac60" name="Ответ содержит availableResource"><con:configuration><token>availableResource</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://impl.service.soap.emias.lanit.ru/v5/SelfAppointmentServiceV5PT/getDoctorsInfo"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="restrequest" name="getDoctorInfo INFO" id="8c2d7f44-f79c-49fa-9127-9a375ca72ed9"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getDoctorsInfo" methodName="getDoctorsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getDoctorInfo INFO" id="c3da989d-fb9a-463f-827c-d18636cc4b93" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#bd}",
  "specialityId": ${#TestCase#specId}
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestratorCovid/getDoctorsInfo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5bef2faf-b6cc-45f3-aa59-d42d3f08a646" name="статус ответа =200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="46b57eb4-30b4-4c53-8381-32e56634dfd5" name="в ответе есть lpuId"><con:configuration><token>lpuId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить соответствие lpuId, lpuShortName и defaultAddress" id="a99609ce-90f7-47b0-b494-d8f5eb1ea71f"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorInfo INFO#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorInfo saOrchestrator#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoResponse.availableResource
numberSACArs=SACArs.size()
//log.info numberSACArs

 mySet = new HashSet&lt;>();

//проверить все ли ресурсы в отсете sac уникальные
if (numberSACArs>0){
	for(int i=0; i&lt;numberSACArs; i++){
		for ( x : SACArs[i].id) {
   			 mySet.add(x);
		}
	}
}
assert numberSACArs== mySet.size()
assert goctorInfoINFO.payload[0].lpuId ==SACArs[0].complexResource.room.lpuId.toLong()
assert goctorInfoINFO.payload[0].lpuShortName ==SACArs[0].complexResource.room.lpuShortName.toString()
assert goctorInfoINFO.payload[0].defaultAddress ==SACArs[0].complexResource.room.defaultAddress.toString()

log.info "end"</script></con:config></con:testStep><con:testStep type="groovy" name="Сравнить количество ресурсов" id="92db600a-b282-40f1-b525-6a1e65872dc9"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorInfo INFO#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorInfo saOrchestrator#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoResponse.availableResource
numberSACArs=SACArs.size()

 mySet = new HashSet&lt;>();

//проверить все ли ресурсы в отсете sac уникальные
if (numberSACArs>0){
	for(int i=0; i&lt;numberSACArs; i++){
		for ( x : SACArs[i].id) {
   			 mySet.add(x);
		}
	}
}

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}

INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()

assert  SACArsWithComplexRes.size()==numberArs

log.info numberArs
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить основные параметры ресурсов" id="e4a2575d-893a-4300-801f-db726a724ac0"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorInfo INFO#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorInfo saOrchestrator#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoResponse.availableResource
numberSACArs=SACArs.size()
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
//log.info numberSACArs

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}

for(int i=0; i&lt;numberArs; i++){
	assert	INFOArs[i].id == SACArsWithComplexRes[i].id.toLong()
	assert	INFOArs[i].lpuId == SACArsWithComplexRes[i].lpuId.toLong() 
	assert	INFOArs[i].name == SACArsWithComplexRes[i].name.toString()
	assert	INFOArs[i].arType == SACArsWithComplexRes[i].arType.toInteger() 
	assert	INFOArs[i].specialityChangeAbility == SACArsWithComplexRes[i].specialityChangeAbility.toBoolean()
	assert	INFOArs[i].arSpecialityId == SACArsWithComplexRes[i].arSpecialityId.toLong()
	assert	INFOArs[i].arSpecialityName == SACArsWithComplexRes[i].arSpecialityName.toString() 
	assert	INFOArs[i].district == SACArsWithComplexRes[i].district.toBoolean() 
	assert	INFOArs[i].replacement == SACArsWithComplexRes[i].replacement.toBoolean() 
	nondistrictSAC= SACArsWithComplexRes[i].nondistrict ? SACArsWithComplexRes[i].nondistrict.toBoolean() :false
	nondistrictINFO = INFOArs[i].nondistrict ? INFOArs[i].nondistrict : false
	assert	nondistrictINFO == nondistrictSAC
	assert	INFOArs[i].availableByReferral == SACArsWithComplexRes[i].availableByReferral.toBoolean() 
}
log.info "end"

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить mainDoctor ресурсов" id="7e48f178-fff6-4533-a145-b4efdec17232"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorInfo INFO#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorInfo saOrchestrator#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoResponse.availableResource
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
numberSACArs=SACArs.size()

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}


for(int i=0; i&lt;numberArs; i++){
	if(INFOArs[i].mainDoctor==null){
		assert  SACArsWithComplexRes[i].mainDoctor==null 
	}
	else{
		log.info INFOArs[i].mainDoctor
		infoDoc=INFOArs[i].mainDoctor
		sacDoc= SACArsWithComplexRes[i].mainDoctor
		assert  infoDoc.specialityName ==  sacDoc.specialityName.toString()
		 assert infoDoc.specialityId == sacDoc.specialityId.toLong()
		 assert infoDoc.firstName == sacDoc.firstName.toString()
		assert  infoDoc.secondName == sacDoc.secondName.toString() 
		assert  infoDoc.lastName == sacDoc.lastName.toString() 
		assert  infoDoc.mejiId == sacDoc.mejiId.toLong()
		assert  infoDoc.employeeId == sacDoc.employeeId.toLong() 
	}
}
log.info "end"

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить receptionType ресурсов" id="5efc9210-05e4-4439-b4c2-25e4ba390c76"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorInfo INFO#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorInfo saOrchestrator#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoResponse.availableResource
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
numberSACArs=SACArs.size()

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}


for(int i=0; i&lt;numberArs; i++){
	if(INFOArs[i].receptionType==null){
		assert  SACArsWithComplexRes[i].receptionType==null 
	}
	else{
		log.info INFOArs[i].receptionType
		infoRt=INFOArs[i].receptionType
		sacRt= SACArsWithComplexRes[i].receptionType
		assert infoRt.size() == sacRt.size()
		for(int j=0; j&lt; infoRt.size();j++){
			assert infoRt[j].code.toString() == sacRt[j].code.toString()
			assert infoRt[j].name == sacRt[j].name.toString()
			assert infoRt[j].primary == sacRt[j].primary.toString()
			assert infoRt[j].home == sacRt[j].home.toString()								
		}
	}
}
log.info "end"

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить ldpType ресурсов" id="d032cced-c872-4520-8f6f-c215b298f48a"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorInfo INFO#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorInfo saOrchestrator#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoResponse.availableResource
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
numberSACArs=SACArs.size()

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}


for(int i=0; i&lt;numberArs; i++){
	if(INFOArs[i].ldpType==null){
		assert  SACArsWithComplexRes[i].ldpType==null 
	}
	else{
		log.info INFOArs[i].ldpType
		infoLt=INFOArs[i].ldpType
		sacLt= SACArsWithComplexRes[i].ldpType
		assert infoLt.size() == sacLt.size()
		for(int j=0; j&lt; infoLt.size();j++){
			assert infoLt[j].code == sacLt[j].code.toString()
			assert infoLt[j].name == sacLt[j].name.toString()							
		}
	}
}
log.info "end"

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить SamplingType ресурсов" id="a6ae640f-b8c5-4010-a277-7ce4adf3190e"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorInfo INFO#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorInfo saOrchestrator#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoResponse.availableResource
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
numberSACArs=SACArs.size()

SACArsWithComplexRes=[]
for(int i=0; i&lt;numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes &lt;&lt; SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}


for(int i=0; i&lt;numberArs; i++){
	if(INFOArs[i].samplingType==null){
		assert  SACArsWithComplexRes[i].samplingType==null 
	}
	else{
		log.info INFOArs[i].samplingType
		infoST=INFOArs[i].samplingType
		sacST= SACArsWithComplexRes[i].samplingType
		assert infoST.size() == sacST.size()
		for(int j=0; j&lt; infoST.size();j++){
			assert infoST[j].id == sacST[j].id
			assert infoST[j].name == sacST[j].name					
			assert infoST[j].self == sacST[j].self				
		}
	}
}
log.info "end"

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить complexResource ресурсов" id="8fdea239-b2e5-4234-9c78-9bb0b5148d38"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import java.util.ArrayList
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def getDoctorInfoResponse = context.expand('${getDoctorInfo INFO#Response}')
def slurperJson = new JsonSlurper()
def goctorInfoINFO = slurperJson.parseText(getDoctorInfoResponse)
// log.info lpuScheduleInfo.payload.lpuInfo.lpuId


def getDoctorInfoSACResponse = context.expand('${getDoctorInfo saOrchestrator#Response}')
getDoctorInfoSAC = new XmlSlurper().parseText(getDoctorInfoSACResponse)

SACArs=getDoctorInfoSAC.Body.getDoctorsInfoResponse.availableResource
INFOArs=goctorInfoINFO.payload[0].availableResources
numberArs=INFOArs.size()
numberSACArs=SACArs.size()

SACArsWithComplexRes=[]
for(int i=0; i<numberSACArs; i++){
	if(SACArs[i].complexResource.text() !=""){
		SACArsWithComplexRes << SACArs[i]
	}
	else{
		log.info"у ресурса "+SACArs[i].id +" нет комплексного ресурса"
	}
}


for(int i=0; i<numberArs; i++){
	if(INFOArs[i].complexResource==null){
		assert  SACArsWithComplexRes[i].complexResource==null 
	}
	else{
		log.info INFOArs[i].complexResource
		infoCR=INFOArs[i].complexResource
		sacCR= SACArsWithComplexRes[i].complexResource
		assert infoCR.size() == sacCR.size()
		for(int j=0; j< infoCR.size();j++){
			infoCR[j].id == sacCR[j].id
			infoCR[j].name == sacCR[j].name		
			log.info 	(INFOArs[i].id+" количество рум инфо "+infoCR[j].room.size()+" количество рум оркестратор  "+sacCR[j].room.size())		
			assert infoCR[j].room.size() == sacCR[j].room.size()
			for(int k=0;k< infoCR[j].room.size();k++){
				roomInfo=infoCR[j].room[k]
				roomSAC=sacCR[j].room[k]
				assert roomInfo.id == roomSAC.id.toLong()
				assert roomInfo.number == roomSAC.number.toString()
				assert roomInfo.lpuId == roomSAC.lpuId.toLong()
				assert roomInfo.addressPointId == roomSAC.addressPointId.toLong()
				assert roomInfo.lpuShortName == roomSAC.lpuShortName.toString()
				assert roomInfo.defaultAddress == roomSAC.defaultAddress.toString()
				assert roomInfo.availabilityDate == roomSAC.availabilityDate.toString()				
			}
		}
	}
}
log.info "end"

]]></script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7758720847000454</con:value></con:property><con:property><con:name>bd</con:name><con:value>1972-01-02</con:value></con:property><con:property><con:name>specId</con:name><con:value>3</con:value></con:property></con:properties></con:testCase><con:testCase id="70a94397-f5f2-4333-975f-01a529d3b618" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС2 SA_PATIENT_NOT_FOUND" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getDoctorInfo INFO" id="ab100261-e818-45a0-91b1-43cf2b70cea9"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getDoctorsInfo" methodName="getDoctorsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getDoctorInfo INFO" id="c3da989d-fb9a-463f-827c-d18636cc4b93" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#bd}",
  "specialityId": ${#TestCase#specId},
  "includeArWithoutSlots": true,
  "lpuId":${#TestCase#lpuId}
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestratorCovid/getDoctorsInfo</con:originalUri><con:assertion type="JsonPath Match" id="6104815e-b7ef-4df8-8aba-e9b6f755e9d8" name="Код ошибки =SA_PATIENT_NOT_FOUND"><con:configuration><path>$.error.code</path><content>SA_PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6104815e-b7ef-4df8-8aba-e9b6f755e9d8" name="Описание ошибки = Пациент с указанным ОМС не найден"><con:configuration><path>$.error.description</path><content>Пациент с указанным ОМС не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6104815e-b7ef-4df8-8aba-e9b6f755e9d8" name="Тип ошибки = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>1</con:value></con:property><con:property><con:name>bd</con:name><con:value>1988-07-14</con:value></con:property><con:property><con:name>specId</con:name><con:value>2011</con:value></con:property><con:property><con:name>lpuId</con:name><con:value>204</con:value></con:property></con:properties></con:testCase><con:testCase id="1e5a7e8f-8540-488f-87f5-508d4be9f92b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС3 SA_PATIENT_HAS_NO_VALID_OMS" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getDoctorInfo INFO" id="6375d63a-67b3-4b20-b238-9ebc39be2de9"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getDoctorsInfo" methodName="getDoctorsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getDoctorInfo INFO" id="c3da989d-fb9a-463f-827c-d18636cc4b93" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "1222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222221",
  "birthDate": "${#TestCase#bd}",
  "specialityId": ${#TestCase#specId},
  "includeArWithoutSlots": true,
  "lpuId":${#TestCase#lpuId}
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestratorCovid/getDoctorsInfo</con:originalUri><con:assertion type="JsonPath Match" id="6104815e-b7ef-4df8-8aba-e9b6f755e9d8" name="Код ошибки =SA_PATIENT_NOT_FOUND"><con:configuration><path>$.error.code</path><content>SA_PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6104815e-b7ef-4df8-8aba-e9b6f755e9d8" name="Описание ошибки = Пациент с указанным ОМС не найден"><con:configuration><path>$.error.description</path><content>Пациент с указанным ОМС не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6104815e-b7ef-4df8-8aba-e9b6f755e9d8" name="Тип ошибки = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7700502255961476</con:value></con:property><con:property><con:name>bd</con:name><con:value>1988-07-14</con:value></con:property><con:property><con:name>specId</con:name><con:value>2011</con:value></con:property><con:property><con:name>lpuId</con:name><con:value>204</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="26f4d1e6-f959-4419-a929-5f8584eaf8ef" name="getAssignmentsInfo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="493e0333-8d34-4ccd-87f2-5a50dbf0a3a9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга без назначений" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Установить дату" id="e1571e6d-c416-4253-9174-0a77310ebd5e"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter

Calendar startPeriod = Calendar.getInstance();
 startPeriod.add(Calendar.DATE, +1);
 def dateStart = startPeriod.getTime().format('yyyy-MM-dd');
 log.info  dateStart
  startPeriod.add(Calendar.DATE, +8);
  def dateEnd = startPeriod.getTime().format('yyyy-MM-dd');
  log.info  dateEnd
 testRunner.testCase.setPropertyValue("dateFrom",dateStart)
 testRunner.testCase.setPropertyValue("dateTo",dateEnd)</script></con:config></con:testStep><con:testStep type="jdbc" name="Найти patientId без назначений" id="71df1da0-3852-4658-a5ed-85f2c964d7d4"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#CLSDBDriver}</con:driver><con:connectionString>${#Project#CLSFullDbConnection}</con:connectionString><con:query>SELECT DISTINCT PATIENT_ID, count (*) AS kolvo FROM EMIAS_CLS.F_REGISTRY_ENTRY fre
WHERE EXPECTED_END_DATE &lt;= CURRENT_TIMESTAMP 
AND rownum &lt; 100
AND CANCEL_DOC_ID IS NULL
GROUP BY PATIENT_ID</con:query><con:assertion type="Simple Contains" id="6c7fe70e-87b9-4fd5-ba00-23a1d9b975d4" name="В ответе есть PATIENT_ID"><con:configuration><token>PATIENT_ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать в проперти ДР и ОМС" id="8e6c7814-1a65-47b7-89d9-2db5f7b466c5"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import com.eviware.soapui.support.XmlHolder

def jdbcResponse = context.expand( '${Найти patientId без назначений#ResponseAsXml}')
def xml = new XmlSlurper().parseText(jdbcResponse)
def jdbc_patientId = xml.'**'.findAll{it.name() == 'PATIENT_ID'}//получаем все event из getPlanExtention
log.info jdbc_patientId.size()

testRunner.testCase.setPropertyValue("patientId", jdbc_patientId[0].toString()) //записываем в проперти переменную
testRunner.runTestStepByName('Найти ДР и ОМС по patientId') //запускаем запрос метода piPatientPrescriptions из тест-кейса
def jdbcOMS = context.expand( '${Найти ДР и ОМС по patientId#ResponseAsXml}')
def xmlOMS = new XmlSlurper().parseText(jdbcOMS)
def jdbc_OMS = []
if (xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_SERIES'}[0] != ''){
	def omsS = xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_SERIES'}[0]
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsS)
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_REG_NEW_ASSURANCE_NUMBER'}[0] != ''){
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_REG_NEW_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_SERIES'}[0] != ''){
	def omsS = xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_SERIES'}[0]
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsS)
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_NEW_ASSURANCE_NUMBER'}[0] != ''){
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_NEW_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsN)
}
log.info jdbc_OMS
testRunner.testCase.setPropertyValue("oms", jdbc_OMS.join())
def jdbc_BD = xmlOMS.'**'.findAll{it.name() == 'BIRTH_DATE'}.toString()-' 00:00:00' - '[' - ']'
log.info jdbc_BD
testRunner.testCase.setPropertyValue("birthDate", jdbc_BD)



</script></con:config></con:testStep><con:testStep type="jdbc" name="Найти ДР и ОМС по patientId" id="d351ac17-dce1-4c4a-b0f4-13b5dd7640ea"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_REGION_ASSURANCE_SERIES, 
OMS_REGION_ASSURANCE_NUMBER,  
OMS_REG_NEW_ASSURANCE_NUMBER, 
OMS_ASSURANCE_SERIES, 
OMS_ASSURANCE_NUMBER, 
OMS_NEW_ASSURANCE_NUMBER, BIRTH_DATE 
FROM emias_cluster.PATIENT
WHERE PATIENT_ID = '${#TestCase#PatientId}'</con:query><con:assertion type="Simple Contains" id="4085e2c9-feaf-416f-a79b-2ed8c5d6d305" name="В ответе есть ОМС"><con:configuration><token>OMS</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="getAssignment INFO" id="1fb177cc-63e6-4d0b-ba20-8f531c4e2720"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getAssignmentsInfo" methodName="getAssignmentsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAssignment INFO" id="b0e8bf4f-5dc9-4277-a26a-bff0f8ea3041" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#birthDate}"
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/saOrchestrator/getAssignmentsInfo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="035cc995-f4a4-4451-a347-4b80bdedb1a7" name="Valid HTTP Status Codes - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" name="getAssignment sarOrchestrator" id="5a8bf1de-8ac8-4bf1-b41e-808b5928de95"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAssignmentsInfo</con:operation><con:request name="getAssignment sarOrchestrator" id="4bc04604-d727-49d0-ae98-84eb0507137a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <v5:getAssignmentsInfo>
         <omsNumber>${#TestCase#oms}</omsNumber>
         <birthDate>${#TestCase#birthDate}</birthDate>
         <externalSystemId>EIM</externalSystemId>
      </v5:getAssignmentsInfo>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3972cf4e-72b2-4e14-a3e1-b48391fca998"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг ответа" id="ee5a018f-148f-467d-a471-9a364be626ff"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def restResponse = context.expand('${getAssignment INFO#Response}').toString() // получаем из рест запроса ответ
def jsonResponse =  new JsonSlurper().parseText(restResponse) // парсим текст из json
def assignmentRest = jsonResponse.payload.join() //получаем содержимое ответа
 def soapResponse = context.expand('${getAssignment sarOrchestrator#Response}') // получаем из соап запроса ответ
 def onlyTextSoap =  new XmlSlurper().parseText(soapResponse)  // парсим текст из xml
 def assignmenSoap = onlyTextSoap.Body.toString() //получаем содержимое ответа
assert assignmentRest == assignmenSoap //проверяем на совпадение содержимое ответа из рест с соап</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7753710842002683</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1982-06-07</con:value></con:property><con:property><con:name>registryEntryId</con:name><con:value/></con:property><con:property><con:name>dateFrom</con:name><con:value>2022-12-10</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2022-12-18</con:value></con:property><con:property><con:name>patientId</con:name><con:value>26930918</con:value></con:property></con:properties></con:testCase><con:testCase id="216adcc4-f138-451a-99d0-bbb6335a507f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга с 1 назначением" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Установить дату" id="3bc8f33a-0e78-46f6-a7d0-7dfaf063113a"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter

Calendar startPeriod = Calendar.getInstance();
 startPeriod.add(Calendar.DATE, +1);
 def dateStart = startPeriod.getTime().format('yyyy-MM-dd');
 log.info  dateStart
  startPeriod.add(Calendar.DATE, +8);
  def dateEnd = startPeriod.getTime().format('yyyy-MM-dd');
  log.info  dateEnd
 testRunner.testCase.setPropertyValue("dateFrom",dateStart)
 testRunner.testCase.setPropertyValue("dateTo",dateEnd)</script></con:config></con:testStep><con:testStep type="jdbc" name="Найти patientId с 1 назначением" id="048f2f1f-575e-47a0-9a22-7c56dde7d1db"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#CLSDBDriver}</con:driver><con:connectionString>${#Project#CLSFullDbConnection}</con:connectionString><con:query>SELECT DISTINCT PATIENT_ID, count (*) AS kolvo 
FROM EMIAS_CLS.F_REGISTRY_ENTRY
WHERE EXPECTED_END_DATE >=TO_DATE
('${#TestCase#dateFrom}','YYYY-MM-DD HH24:MI:SS') 
AND CANCEL_DOC_ID IS NULL
and STATUS_ID = '1'
AND rownum &lt; 100
GROUP BY PATIENT_ID
HAVING count (*) = 1</con:query><con:assertion type="Simple Contains" id="3f706329-c6ba-4445-be58-e6d51b8067a5" name="В ответе есть PATIENT_ID"><con:configuration><token>PATIENT_ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать в проперти ДР и ОМС" id="2d4a1fe9-b44a-497a-af08-2f25a32ab7c8"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import com.eviware.soapui.support.XmlHolder

def jdbcResponse = context.expand( '${Найти patientId с 1 назначением#ResponseAsXml}')
def xml = new XmlSlurper().parseText(jdbcResponse)
def jdbc_patientId = xml.'**'.findAll{it.name() == 'PATIENT_ID'}//получаем все event из getPlanExtention
log.info jdbc_patientId.size()

testRunner.testCase.setPropertyValue("patientId", jdbc_patientId[0].toString()) //записываем в проперти переменную
testRunner.runTestStepByName('Найти ДР и ОМС по patientId') //запускаем запрос метода piPatientPrescriptions из тест-кейса
def jdbcOMS = context.expand( '${Найти ДР и ОМС по patientId#ResponseAsXml}')
def xmlOMS = new XmlSlurper().parseText(jdbcOMS)
def jdbc_OMS = []
if (xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_SERIES'}[0] != ''){
	def omsS = xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_SERIES'}[0]
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsS)
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_REG_NEW_ASSURANCE_NUMBER'}[0] != ''){
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_REG_NEW_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_SERIES'}[0] != ''){
	def omsS = xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_SERIES'}[0]
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsS)
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_NEW_ASSURANCE_NUMBER'}[0] != ''){
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_NEW_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsN)
}
log.info jdbc_OMS
testRunner.testCase.setPropertyValue("oms", jdbc_OMS.join())
def jdbc_BD = xmlOMS.'**'.findAll{it.name() == 'BIRTH_DATE'}.toString()-' 00:00:00' - '[' - ']'
log.info jdbc_BD
testRunner.testCase.setPropertyValue("birthDate", jdbc_BD)</script></con:config></con:testStep><con:testStep type="jdbc" name="Найти ДР и ОМС по patientId" id="530dfcb1-a4c1-42d9-ba39-d3303149dcd8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_REG_NEW_ASSURANCE_NUMBER, 
OMS_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_SERIES, 
OMS_REGION_ASSURANCE_NUMBER, OMS_ASSURANCE_NUMBER, 
OMS_NEW_ASSURANCE_NUMBER, BIRTH_DATE 
FROM emias_cluster.PATIENT
WHERE PATIENT_ID = '${#TestCase#PatientId}'</con:query><con:assertion type="Simple Contains" id="89a30726-ed1a-4a0e-866e-4391e96efd77" name="В ответе есть ОМС"><con:configuration><token>OMS</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="getAssignment INFO" id="20c967dc-d97c-4252-97e3-e7b259b7967f"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getAssignmentsInfo" methodName="getAssignmentsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAssignment INFO" id="b0e8bf4f-5dc9-4277-a26a-bff0f8ea3041" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#birthDate}"
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/saOrchestrator/getAssignmentsInfo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0f2dd14d-eb55-4d74-9024-a0d59fefcf7c" name="Valid HTTP Status Codes - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" name="getAssignment sarOrchestrator" id="d256d309-4e23-4387-8513-9d7346c6bc62"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAssignmentsInfo</con:operation><con:request name="getAssignment sarOrchestrator" id="4bc04604-d727-49d0-ae98-84eb0507137a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <v5:getAssignmentsInfo>
         <omsNumber>${#TestCase#oms}</omsNumber>
         <birthDate>${#TestCase#birthDate}</birthDate>
         <externalSystemId>EIM</externalSystemId>
      </v5:getAssignmentsInfo>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3972cf4e-72b2-4e14-a3e1-b48391fca998"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг ответа" id="527d8312-aa86-4d49-a7b2-f200a6e41944"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def restResponse = context.expand('${getAssignment INFO#Response}').toString() // получаем из рест запроса ответ
def jsonResponse =  new JsonSlurper().parseText(restResponse) // парсим текст из json
def soapResponse = context.expand('${getAssignment sarOrchestrator#Response}') // получаем из соап запроса ответ
def onlyTextSoap =  new XmlSlurper().parseText(soapResponse)  // парсим текст из xml

def moIdRest = jsonResponse.payload.moId.join() //получаем moId из рест ответа
def moIdSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.moId.toString() //получаем moId из соап ответа
assert moIdRest == moIdSoap //проверяем на совпадение moId из рест с соап

def bmIdRest = jsonResponse.payload.toBM.id.join() //получаем id профиля взятия БМ из рест ответа
def bmIdSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.toBM.id.toString() //получаем id профиля взятия БМ из соап ответа
assert bmIdRest == bmIdSoap //проверяем на совпадение id профиля взятия БМ из рест с соап

def bmNameRest = jsonResponse.payload.toBM.name.join() //получаем name профиля взятия БМ из рест ответа
def bmNameSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.toBM.name.toString() //получаем name профиля взятия БМ из соап ответа
assert bmNameRest == bmNameSoap //проверяем на совпадение name профиля взятия БМ из рест с соап

def bmSelfRest = jsonResponse.payload.toBM.self.join() //получаем признак самовзятия БМ self из рест ответа
def bmSelfSoap= onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.toBM.self.toString() //получаем признак самовзятия БМ self из соап ответа
assert bmSelfRest == bmSelfSoap //проверяем на совпадение признак самовзятия БМ self из рест с соап

def periodStartRest = jsonResponse.payload.period.dateFrom.join() //получаем dateFrom периода действия назначения из рест ответа
def periodStartSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.period.dateFrom.toString() //получаем dateFrom периода действия назначения  из соап ответа
assert periodStartRest == periodStartSoap //проверяем на совпадение dateFrom периода действия назначения из рест с соап

def periodEndtRest = jsonResponse.payload.period.dateTo.join() //получаем dateTo периода действия назначения  из рест ответа
def periodEndSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.period.dateTo.toString() //получаем dateTo периода действия назначения  из соап ответа
assert periodEndtRest == periodEndSoap //проверяем на совпадение dateTo периода действия назначения из рест с соап

def activeRest = jsonResponse.payload.active.join() //получаем признак активности active из рест ответа
def activeSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.active.toString() //получаем признак активности active из соап ответа
assert activeRest == activeSoap //проверяем на совпадение признак активности active из рест с соап

def appointmentRest = jsonResponse.payload.appointmentAvailable.join() //получаем appointmentAvailable призак возможности создать запись из рест ответа
def appointmentSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.appointmentAvailable.toString() //получаем appointmentAvailable призак возможности создать запись из соап ответа
assert appointmentRest == appointmentSoap //проверяем на совпадение appointmentAvailable из рест с соап

def entryIdRest = []
def laboratoryIdRest = []
def laboratoryNameRest = []
def biomaterialIdRest = []
def biomaterialNameRest = []
def hasMemoRest = []
for(i=0; i&lt;jsonResponse.payload.registryEntry.size(); i++){
	if (jsonResponse.payload.registryEntry[i]){
		def entryId = jsonResponse.payload.registryEntry[i].entryId.join()
		def laboratoryId = jsonResponse.payload.registryEntry[i].laboratoryId.join()
		def laboratoryName = jsonResponse.payload.registryEntry[i].laboratoryName.join()
		def biomaterialId = jsonResponse.payload.registryEntry[i].biomaterialId.join()
		def biomaterialName = jsonResponse.payload.registryEntry[i].biomaterialName.join()
		def hasMemo = jsonResponse.payload.registryEntry[i].hasMemo.join()
		entryIdRest.add(entryId)
		laboratoryIdRest.add(laboratoryId)
		laboratoryNameRest.add(laboratoryName)
		biomaterialIdRest.add(biomaterialId)
		biomaterialNameRest.add(biomaterialName)
		hasMemoRest.add(hasMemo)
	}
}
def entryIdSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.entryId.toString() //получаем entryId из соап ответа
assert entryIdRest.join() == entryIdSoap //проверяем на совпадение entryId из рест с соап

def laboratoryIdSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.laboratoryId.toString() //получаем laboratoryId из соап ответа
assert laboratoryIdRest.join() == laboratoryIdSoap //проверяем на совпадение laboratoryId из рест с соап

def laboratoryNameSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.laboratoryName.toString() //получаем laboratoryName из соап ответа
assert laboratoryNameRest.join() == laboratoryNameSoap //проверяем на совпадение laboratoryName из рест с соап

def biomaterialIdSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.biomaterialId.toString() //получаем biomaterialId из соап ответа
assert biomaterialIdRest.join() == biomaterialIdSoap //проверяем на совпадение biomaterialId из рест с соап

def biomaterialNameSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.biomaterialName.toString() //получаем biomaterialName из соап ответа
assert biomaterialNameRest.join() == biomaterialNameSoap //проверяем на совпадение biomaterialName из рест с соап

def hasMemoSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.hasMemo.toString() //получаем наличие памятки hasMemo из соап ответа
assert hasMemoRest.join() == hasMemoSoap //проверяем на совпадение наличие памятки hasMemo из рест с соап
</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7701009045151296</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1996-12-15</con:value></con:property><con:property><con:name>registryEntryId</con:name><con:value/></con:property><con:property><con:name>dateFrom</con:name><con:value>2022-12-10</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2022-12-18</con:value></con:property><con:property><con:name>patientId</con:name><con:value>25517333</con:value></con:property></con:properties></con:testCase><con:testCase id="aae0d1f9-6169-4e2a-9435-9aa24b0b9960" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга с 2 и более назначениями" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Установить дату" id="5adaa44f-42ea-4d38-bb8f-91be42cba252"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter

Calendar startPeriod = Calendar.getInstance();
 startPeriod.add(Calendar.DATE, +1);
 def dateStart = startPeriod.getTime().format('yyyy-MM-dd');
 log.info  dateStart
  startPeriod.add(Calendar.DATE, +8);
  def dateEnd = startPeriod.getTime().format('yyyy-MM-dd');
  log.info  dateEnd
 testRunner.testCase.setPropertyValue("dateFrom",dateStart)
 testRunner.testCase.setPropertyValue("dateTo",dateEnd)</script></con:config></con:testStep><con:testStep type="jdbc" name="Найти patientId с 2 и более наззначениями" id="b587f28f-ab65-44bb-9149-c348725bc4f4"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#CLSDBDriver}</con:driver><con:connectionString>${#Project#CLSFullDbConnection}</con:connectionString><con:query>SELECT DISTINCT PATIENT_ID, count (*) AS kolvo 
FROM EMIAS_CLS.F_REGISTRY_ENTRY fre
WHERE EXPECTED_END_DATE >=TO_DATE
('${#TestCase#dateFrom}','YYYY-MM-DD HH24:MI:SS') 
AND CANCEL_DOC_ID IS NULL 
AND rownum &lt; 100
and STATUS_ID = '1'
GROUP BY PATIENT_ID
HAVING count (*) > 1</con:query><con:assertion type="Simple Contains" id="fcd3c26d-db39-4564-ac8a-87b68b848d93" name="В ответе есть PATIENT_ID"><con:configuration><token>PATIENT_ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать в проперти ДР и ОМС" id="13afbd8f-c587-48b8-9d15-8371dc896221"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import com.eviware.soapui.support.XmlHolder

def jdbcResponse = context.expand( '${Найти patientId с 2 и более наззначениями#ResponseAsXml}')
def xml = new XmlSlurper().parseText(jdbcResponse)
def jdbc_patientId = xml.'**'.findAll{it.name() == 'PATIENT_ID'}//получаем все event из getPlanExtention
log.info jdbc_patientId.size()

testRunner.testCase.setPropertyValue("patientId", jdbc_patientId[0].toString()) //записываем в проперти переменную
testRunner.runTestStepByName('Найти ДР и ОМС по patientId') //запускаем запрос метода piPatientPrescriptions из тест-кейса
def jdbcOMS = context.expand( '${Найти ДР и ОМС по patientId#ResponseAsXml}')
def xmlOMS = new XmlSlurper().parseText(jdbcOMS)
def jdbc_OMS = []
if (xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_SERIES'}[0] != ''){
	def omsS = xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_SERIES'}[0]
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsS)
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_REG_NEW_ASSURANCE_NUMBER'}[0] != ''){
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_REG_NEW_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_SERIES'}[0] != ''){
	def omsS = xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_SERIES'}[0]
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsS)
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_NEW_ASSURANCE_NUMBER'}[0] != ''){
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_NEW_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsN)
}
log.info jdbc_OMS
testRunner.testCase.setPropertyValue("oms", jdbc_OMS.join())
def jdbc_BD = xmlOMS.'**'.findAll{it.name() == 'BIRTH_DATE'}.toString()-' 00:00:00' - '[' - ']'
log.info jdbc_BD
testRunner.testCase.setPropertyValue("birthDate", jdbc_BD)</script></con:config></con:testStep><con:testStep type="jdbc" name="Найти ДР и ОМС по patientId" id="1bfbde3e-2ec2-4b95-840a-f38f937d023d"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_REG_NEW_ASSURANCE_NUMBER, 
OMS_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_SERIES, 
OMS_REGION_ASSURANCE_NUMBER, OMS_ASSURANCE_NUMBER, 
OMS_NEW_ASSURANCE_NUMBER, BIRTH_DATE 
FROM emias_cluster.PATIENT
WHERE PATIENT_ID = '${#TestCase#PatientId}'</con:query><con:assertion type="Simple Contains" id="c04a28ac-3f46-46aa-83dd-9f6b349bd8a3" name="В ответе есть ОМС"><con:configuration><token>OMS</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="getAssignment INFO" id="9c9f51d8-4242-4230-b968-dc240efe5fba"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getAssignmentsInfo" methodName="getAssignmentsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAssignment INFO" id="b0e8bf4f-5dc9-4277-a26a-bff0f8ea3041" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#birthDate}"
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/saOrchestrator/getAssignmentsInfo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e90681a2-2c00-4d38-9fca-eb3b475b49f3" name="Valid HTTP Status Codes - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" name="getAssignment sarOrchestrator" id="fc4c659c-5bb8-44fe-bbd0-d526c9e063dd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAssignmentsInfo</con:operation><con:request name="getAssignment sarOrchestrator" id="4bc04604-d727-49d0-ae98-84eb0507137a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <v5:getAssignmentsInfo>
         <omsNumber>${#TestCase#oms}</omsNumber>
         <birthDate>${#TestCase#birthDate}</birthDate>
         <externalSystemId>EIM</externalSystemId>
      </v5:getAssignmentsInfo>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3972cf4e-72b2-4e14-a3e1-b48391fca998"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг ответа" id="2ba8649f-f464-44a1-b0bf-69eeea65cf2d"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def restResponse = context.expand('${getAssignment INFO#Response}').toString() // получаем из рест запроса ответ
def jsonResponse =  new JsonSlurper().parseText(restResponse) // парсим текст из json
def soapResponse = context.expand('${getAssignment sarOrchestrator#Response}') // получаем из соап запроса ответ
def onlyTextSoap =  new XmlSlurper().parseText(soapResponse)  // парсим текст из xml

def moIdRest = jsonResponse.payload.moId.join() //получаем moId из рест ответа
def moIdSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.moId.toString() //получаем moId из соап ответа
assert moIdRest == moIdSoap //проверяем на совпадение moId из рест с соап

def bmIdRest = jsonResponse.payload.toBM.id.join() //получаем id профиля взятия БМ из рест ответа
def bmIdSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.toBM.id.toString() //получаем id профиля взятия БМ из соап ответа
assert bmIdRest == bmIdSoap //проверяем на совпадение id профиля взятия БМ из рест с соап

def bmNameRest = jsonResponse.payload.toBM.name.join() //получаем name профиля взятия БМ из рест ответа
def bmNameSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.toBM.name.toString() //получаем name профиля взятия БМ из соап ответа
assert bmNameRest == bmNameSoap //проверяем на совпадение name профиля взятия БМ из рест с соап

def bmSelfRest = jsonResponse.payload.toBM.self.join() //получаем признак самовзятия БМ self из рест ответа
def bmSelfSoap= onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.toBM.self.toString() //получаем признак самовзятия БМ self из соап ответа
assert bmSelfRest == bmSelfSoap //проверяем на совпадение признак самовзятия БМ self из рест с соап

def periodStartRest = jsonResponse.payload.period.dateFrom.join() //получаем dateFrom периода действия назначения из рест ответа
def periodStartSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.period.dateFrom.toString() //получаем dateFrom периода действия назначения  из соап ответа
assert periodStartRest == periodStartSoap //проверяем на совпадение dateFrom периода действия назначения из рест с соап

def periodEndtRest = jsonResponse.payload.period.dateTo.join() //получаем dateTo периода действия назначения  из рест ответа
def periodEndSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.period.dateTo.toString() //получаем dateTo периода действия назначения  из соап ответа
assert periodEndtRest == periodEndSoap //проверяем на совпадение dateTo периода действия назначения из рест с соап

def activeRest = jsonResponse.payload.active.join() //получаем признак активности active из рест ответа
def activeSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.active.toString() //получаем признак активности active из соап ответа
assert activeRest == activeSoap //проверяем на совпадение признак активности active из рест с соап

def appointmentRest = jsonResponse.payload.appointmentAvailable.join() //получаем appointmentAvailable призак возможности создать запись из рест ответа
def appointmentSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.appointmentAvailable.toString() //получаем appointmentAvailable призак возможности создать запись из соап ответа
assert appointmentRest == appointmentSoap //проверяем на совпадение appointmentAvailable из рест с соап

def entryIdRest = []
def laboratoryIdRest = []
def laboratoryNameRest = []
def biomaterialIdRest = []
def biomaterialNameRest = []
def hasMemoRest = []
for(i=0; i&lt;jsonResponse.payload.registryEntry.size(); i++){
	if (jsonResponse.payload.registryEntry[i]){
		def entryId = jsonResponse.payload.registryEntry[i].entryId.join()
		def laboratoryId = jsonResponse.payload.registryEntry[i].laboratoryId.join()
		def laboratoryName = jsonResponse.payload.registryEntry[i].laboratoryName.join()
		def biomaterialId = jsonResponse.payload.registryEntry[i].biomaterialId.join()
		def biomaterialName = jsonResponse.payload.registryEntry[i].biomaterialName.join()
		def hasMemo = jsonResponse.payload.registryEntry[i].hasMemo.join()
		entryIdRest.add(entryId)
		laboratoryIdRest.add(laboratoryId)
		laboratoryNameRest.add(laboratoryName)
		biomaterialIdRest.add(biomaterialId)
		biomaterialNameRest.add(biomaterialName)
		hasMemoRest.add(hasMemo)
	}
}
def entryIdSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.entryId.toString() //получаем entryId из соап ответа
assert entryIdRest.join() == entryIdSoap //проверяем на совпадение entryId из рест с соап

def laboratoryIdSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.laboratoryId.toString() //получаем laboratoryId из соап ответа
assert laboratoryIdRest.join() == laboratoryIdSoap //проверяем на совпадение laboratoryId из рест с соап

def laboratoryNameSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.laboratoryName.toString() //получаем laboratoryName из соап ответа
assert laboratoryNameRest.join() == laboratoryNameSoap //проверяем на совпадение laboratoryName из рест с соап

def biomaterialIdSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.biomaterialId.toString() //получаем biomaterialId из соап ответа
assert biomaterialIdRest.join() == biomaterialIdSoap //проверяем на совпадение biomaterialId из рест с соап

def biomaterialNameSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.biomaterialName.toString() //получаем biomaterialName из соап ответа
assert biomaterialNameRest.join() == biomaterialNameSoap //проверяем на совпадение biomaterialName из рест с соап

def hasMemoSoap = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment.registryEntry.hasMemo.toString() //получаем наличие памятки hasMemo из соап ответа
assert hasMemoRest.join() == hasMemoSoap //проверяем на совпадение наличие памятки hasMemo из рест с соап
</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7756400870000356</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1995-03-29</con:value></con:property><con:property><con:name>registryEntryId</con:name><con:value/></con:property><con:property><con:name>dateFrom</con:name><con:value>2022-12-10</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2022-12-18</con:value></con:property><con:property><con:name>patientId</con:name><con:value>18227433</con:value></con:property></con:properties></con:testCase><con:testCase id="1e88fa30-28b3-4b87-8d1b-5f0df8b824f3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка маппинга c фильтром по entryId" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Установить дату" id="9032a8ef-1c63-457e-99e0-0120142a6e83"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter

Calendar startPeriod = Calendar.getInstance();
 startPeriod.add(Calendar.DATE, +1);
 def dateStart = startPeriod.getTime().format('yyyy-MM-dd');
 log.info  dateStart
  startPeriod.add(Calendar.DATE, +8);
  def dateEnd = startPeriod.getTime().format('yyyy-MM-dd');
  log.info  dateEnd
 testRunner.testCase.setPropertyValue("dateFrom",dateStart)
 testRunner.testCase.setPropertyValue("dateTo",dateEnd)</script></con:config></con:testStep><con:testStep type="jdbc" name="Найти patientId с 2 и более наззначениями" id="aaf1a2f5-90c8-404b-bb8b-c5a234ce9115"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#CLSDBDriver}</con:driver><con:connectionString>${#Project#CLSFullDbConnection}</con:connectionString><con:query>SELECT DISTINCT PATIENT_ID, count (*) AS kolvo 
FROM EMIAS_CLS.F_REGISTRY_ENTRY fre
WHERE EXPECTED_END_DATE >=TO_DATE
('${#TestCase#dateFrom}','YYYY-MM-DD HH24:MI:SS') 
AND CANCEL_DOC_ID IS NULL 
AND rownum &lt; 100
and STATUS_ID = '1'
GROUP BY PATIENT_ID
HAVING count (*) > 1</con:query><con:assertion type="Simple Contains" id="fcd3c26d-db39-4564-ac8a-87b68b848d93" name="В ответе есть PATIENT_ID"><con:configuration><token>PATIENT_ID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Записать в проперти ДР и ОМС" id="ea182cd7-170a-4d72-bd26-ed86c7b8de5c"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import com.eviware.soapui.support.XmlHolder

def jdbcResponse = context.expand( '${Найти patientId с 2 и более наззначениями#ResponseAsXml}')
def xml = new XmlSlurper().parseText(jdbcResponse)
def jdbc_patientId = xml.'**'.findAll{it.name() == 'PATIENT_ID'}//получаем все event из getPlanExtention
log.info jdbc_patientId.size()

testRunner.testCase.setPropertyValue("patientId", jdbc_patientId[0].toString()) //записываем в проперти переменную
testRunner.runTestStepByName('Найти ДР и ОМС по patientId') //запускаем запрос метода piPatientPrescriptions из тест-кейса
def jdbcOMS = context.expand( '${Найти ДР и ОМС по patientId#ResponseAsXml}')
def xmlOMS = new XmlSlurper().parseText(jdbcOMS)
def jdbc_OMS = []
if (xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_SERIES'}[0] != ''){
	def omsS = xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_SERIES'}[0]
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_REGION_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsS)
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_REG_NEW_ASSURANCE_NUMBER'}[0] != ''){
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_REG_NEW_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_SERIES'}[0] != ''){
	def omsS = xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_SERIES'}[0]
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsS)
	jdbc_OMS.add(omsN)
}
if (xmlOMS.'**'.findAll{it.name() == 'OMS_NEW_ASSURANCE_NUMBER'}[0] != ''){
	def omsN = xmlOMS.'**'.findAll{it.name() == 'OMS_NEW_ASSURANCE_NUMBER'}[0]
	jdbc_OMS.add(omsN)
}
log.info jdbc_OMS
testRunner.testCase.setPropertyValue("oms", jdbc_OMS.join())
def jdbc_BD = xmlOMS.'**'.findAll{it.name() == 'BIRTH_DATE'}.toString()-' 00:00:00' - '[' - ']'
log.info jdbc_BD
testRunner.testCase.setPropertyValue("birthDate", jdbc_BD)</script></con:config></con:testStep><con:testStep type="jdbc" name="Найти ДР и ОМС по patientId" id="0a8c50de-112f-42ce-8984-2b4a8a812231"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#suppDBDriver}</con:driver><con:connectionString>${#Project#suppFullDbConnection}</con:connectionString><con:query>SELECT OMS_REG_NEW_ASSURANCE_NUMBER, 
OMS_ASSURANCE_SERIES, OMS_REGION_ASSURANCE_SERIES, 
OMS_REGION_ASSURANCE_NUMBER, OMS_ASSURANCE_NUMBER, 
OMS_NEW_ASSURANCE_NUMBER, BIRTH_DATE 
FROM emias_cluster.PATIENT
WHERE PATIENT_ID = '${#TestCase#PatientId}'</con:query><con:assertion type="Simple Contains" id="c04a28ac-3f46-46aa-83dd-9f6b349bd8a3" name="В ответе есть ОМС"><con:configuration><token>OMS</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="getAssignment INFO" id="01b048dd-f2e8-4389-bf53-575802678986"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getAssignmentsInfo" methodName="getAssignmentsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAssignment INFO" id="b0e8bf4f-5dc9-4277-a26a-bff0f8ea3041" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#birthDate}"
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/saOrchestrator/getAssignmentsInfo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ffe0eac9-b230-42e2-88a6-764a584e8657" name="Valid HTTP Status Codes - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="request" name="getAssignment sarOrchestrator" id="6e9717ed-ede4-452a-8017-a88c3b491087"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SelfAppointmentServiceV5Binding</con:interface><con:operation>getAssignmentsInfo</con:operation><con:request name="getAssignment sarOrchestrator" id="4bc04604-d727-49d0-ae98-84eb0507137a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#saOrchestratorEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:v5="http://api.service.soap.emias.lanit.ru/v5/">
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken>
            <wsse:Username>EIM</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
   </soap:Header>
   <soap:Body>
      <v5:getAssignmentsInfo>
         <omsNumber>${#TestCase#oms}</omsNumber>
         <birthDate>${#TestCase#birthDate}</birthDate>
         <externalSystemId>EIM</externalSystemId>
      </v5:getAssignmentsInfo>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3972cf4e-72b2-4e14-a3e1-b48391fca998"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Записать в проперти entryId" id="c59cb1d7-1351-4b1d-b067-4e44d19a75f4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Записать entryId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAssignment INFO</con:sourceStep><con:sourcePath>$.payload[0].registryEntry[0].entryId</con:sourcePath><con:targetType>entryId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="getAssignment Info entryId" id="32326902-5b2e-4272-b1e1-51e6745587eb"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getAssignmentsInfo" methodName="getAssignmentsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAssignment Info entryId" id="b0e8bf4f-5dc9-4277-a26a-bff0f8ea3041" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#oms}",
  "birthDate": "${#TestCase#birthDate}",
  "registryEntryId": [
    ${#TestCase#entryId}
  ]
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/saOrchestrator/getAssignmentsInfo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="84f8efca-615c-4069-a44a-f45746ff90d5" name="Valid HTTP Status Codes - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить entryId в ответе с фильтром" id="213406d5-1987-4638-8e84-ea862c5682ec"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper

def restResponse = context.expand('${getAssignment Info entryId#Response}').toString() // получаем из рест запроса ответ
def jsonResponse =  new JsonSlurper().parseText(restResponse) // парсим текст из json
def soapResponse = context.expand('${getAssignment sarOrchestrator#Response}') // получаем из соап запроса ответ
def onlyTextSoap =  new XmlSlurper().parseText(soapResponse)  // парсим текст из xml

def assignment = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment
def entryIdSoap = []
for(i=0; i&lt;assignment.size(); i++){
	def filterEntryId = testRunner.testCase.getPropertyValue('entryId')
	if(onlyTextSoap.Body.getAssignmentsInfoResponse.assignment[i].toString().contains(filterEntryId)){
		def entryId = onlyTextSoap.Body.getAssignmentsInfoResponse.assignment[i].registryEntry.entryId.toString()
		entryIdSoap.add(entryId)
	}
}

def entryIdRest = []
for(i=0; i&lt;jsonResponse.payload.registryEntry.size(); i++){
	if (jsonResponse.payload.registryEntry[i]){
		def entryId = jsonResponse.payload.registryEntry[i].entryId.join()
		entryIdRest.add(entryId)
	}
}

log.info entryIdSoap
log.info entryIdRest

assert entryIdSoap == entryIdRest


</script></con:config></con:testStep><con:properties><con:property><con:name>oms</con:name><con:value>7756400870000356</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>1995-03-29</con:value></con:property><con:property><con:name>registryEntryId</con:name><con:value/></con:property><con:property><con:name>dateFrom</con:name><con:value>2022-12-10</con:value></con:property><con:property><con:name>dateTo</con:name><con:value>2022-12-18</con:value></con:property><con:property><con:name>patientId</con:name><con:value>18227433</con:value></con:property><con:property><con:name>entryId</con:name><con:value>151995275</con:value></con:property></con:properties></con:testCase><con:testCase id="ad726c6c-961f-4ff1-b6d8-b84339f623a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1 SA_PATIENT_NOT_FOUND" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getAssignments Info некорректный ОМС" id="91d8d3dc-27aa-4d46-acf7-476b45274cf7"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getAssignmentsInfo" methodName="getAssignmentsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAssignments Info некорректный ОМС" id="b0e8bf4f-5dc9-4277-a26a-bff0f8ea3041" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#omsUncorrect}",
  "birthDate": "${#TestCase#birthDateCorrect}"
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/saOrchestrator/getAssignmentsInfo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ae651e76-7812-421b-a8cc-5766ad11a3c8" name="Status Code - 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae60e78b-6c54-4624-aad4-73e23eb0e67d" name="Значение code = SA_PATIENT_NOT_FOUND"><con:configuration><path>$.error.code</path><content>SA_PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae60e78b-6c54-4624-aad4-73e23eb0e67d" name="Значение description = &quot;Пациент с указанным ОМС не найден&quot;"><con:configuration><path>$.error.description</path><content>Пациент с указанным ОМС не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae60e78b-6c54-4624-aad4-73e23eb0e67d" name="Значение type = &quot;BUSINESS&quot;"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae60e78b-6c54-4624-aad4-73e23eb0e67d" name="Значение origin = &quot;PATIENT_NOT_FOUND&quot;"><con:configuration><path>$.error.origin</path><content>PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getAssignments Info некорректная ДР" id="2937a71f-a353-45ae-88d2-a4d12b2dd75f"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getAssignmentsInfo" methodName="getAssignmentsInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAssignments Info некорректная ДР" id="b0e8bf4f-5dc9-4277-a26a-bff0f8ea3041" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "omsNumber": "${#TestCase#omsCorrect}",
  "birthDate": "${#TestCase#birthDateUncorrect}"
}</con:request><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v2/saOrchestrator/getAssignmentsInfo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ae651e76-7812-421b-a8cc-5766ad11a3c8" name="Status Code - 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae60e78b-6c54-4624-aad4-73e23eb0e67d" name="Значение code = SA_PATIENT_NOT_FOUND"><con:configuration><path>$.error.code</path><content>SA_PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae60e78b-6c54-4624-aad4-73e23eb0e67d" name="Значение description = &quot;Пациент с указанным ОМС не найден&quot;"><con:configuration><path>$.error.description</path><content>Пациент с указанным ОМС не найден</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae60e78b-6c54-4624-aad4-73e23eb0e67d" name="Значение type = &quot;BUSINESS&quot;"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae60e78b-6c54-4624-aad4-73e23eb0e67d" name="Значение origin = &quot;PATIENT_NOT_FOUND&quot;"><con:configuration><path>$.error.origin</path><content>PATIENT_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>omsUncorrect</con:name><con:value>7756400870000357</con:value></con:property><con:property><con:name>birthDateUncorrect</con:name><con:value>1995-03-30</con:value></con:property><con:property><con:name>omsCorrect</con:name><con:value>7756400870000356</con:value></con:property><con:property><con:name>birthDateCorrect</con:name><con:value>1995-03-29</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="7cc33477-336f-422d-8315-e624d009420f" name="getMemo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ccf97c07-c0e9-455d-ab83-5a9663c06711" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение перечня с 1 правилом подготовки к исследованию" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Найти исследования с одним правилом" id="4a277411-6b43-46d9-a5eb-da30550b050f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#clsDBDriver}</con:driver><con:connectionString>${#Project#clsFullDbConnection}</con:connectionString><con:query>SELECT * FROM
	(SELECT dl.ID FROM EMIAS_CLS.D_LABORATORY dl
	INNER JOIN EMIAS_CLS.D_LABORATORY_SUB_KIND dlsk ON
	dl.LABORATORY_SUB_KIND_ID = dlsk.ID 
	WHERE dl.PREP_TAKE_BM_ID IS NULL
	AND dlsk.PREP_TAKE_BM_ID IS NOT NULL 
	ORDER BY DBMS_RANDOM.VALUE)
WHERE ROWNUM = 1</con:query><con:assertion type="JDBC Status" id="9bd1a485-40d3-466d-8110-f8c92625c023" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать ID исследования с 1 правилом" id="f6e96678-a71c-4ede-949d-bf9ed241e687"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>laboratoryId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти исследования с одним правилом</con:sourceStep><con:sourcePath>//ID[1]</con:sourcePath><con:targetType>laboratoryId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getMemoryCard" id="63c1eceb-a4b5-4144-958b-c0ced1cd89d7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>LaboratoryOtherDictionariesServiceBinding</con:interface><con:operation>getMemoryCard</con:operation><con:request name="getMemoryCard" id="3aa755a6-6e9f-42d3-9776-b3379f7275ec"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#clsDictionariesEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/" xmlns:typ="http://emias.mos.ru/laboratory/v1/dictionary/other/types/">
   <soap:Header>
   	<wsse:Security soap:mustUnderstand="0" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   		<wsse:UsernameToken>
   			<wsse:Username>EIM</wsse:Username>
   		</wsse:UsernameToken>
   	</wsse:Security>
   </soap:Header>
   <soap:Body>
      <oth:getMemoryCardRequest>
         <oth:request>
            <typ:biomaterialId>${=Math.abs(new Random().nextInt() % 90) + 1}</typ:biomaterialId>
            <typ:laboratoryId>${#TestCase#laboratoryId}</typ:laboratoryId>
         </oth:request>
      </oth:getMemoryCardRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9dd84515-964a-457d-b938-8479292ea53a"/><con:assertion type="SOAP Fault Assertion" id="6e11eccd-4c3f-498c-a8c1-43f9de19e07a" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Записать biomaterialId и content" id="f0255520-eaa5-4599-9b8a-dd4d0795320b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>biomaterialId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMemoryCard</con:sourceStep><con:sourcePath>//*:biomaterialId</con:sourcePath><con:targetType>biomaterialId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>content</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMemoryCard</con:sourceStep><con:sourcePath>//*:content</con:sourcePath><con:targetType>content</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="getMemo" id="5b7f25ee-ee9a-479e-9fa7-6b5c2cd5a7f9"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getMemo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getMemo" id="6ab89f5b-95ff-4f6e-81cb-3cf055194c98" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "request": [
    {
      "biomaterialId": ${#TestCase#biomaterialId},
      "laboratoryId": ${#TestCase#laboratoryId}
    }
  ]
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getMemo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="af0a1bb7-f8b8-4dab-a454-7f3c3440836b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6fcf2f7d-975a-4743-b58f-87e59fb62e32" name="Значение biomaterialId = ${#TestCase#biomaterialId}"><con:configuration><path>$.payload.memoryCard[0].biomaterialId</path><content>${#TestCase#biomaterialId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50f0cc6b-2eb3-4913-bfcf-8359b907c425" name="Значение content = ${#TestCase#content}"><con:configuration><path>$.payload.memoryCard[0].content[0]</path><content>${#TestCase#content}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>laboratoryId</con:name><con:value>233</con:value></con:property><con:property><con:name>biomaterialId</con:name><con:value>45</con:value></con:property><con:property><con:name>content</con:name><con:value>Утром, строго натощак, с 7.00 до 12.00, можно пить только воду, не принимать пищу с 19.00 предыдущего дня, за 1 час-исключить курение; сдавать биоматериал до рентгена, УЗИ, физиопроцедур, массажа.</con:value></con:property></con:properties></con:testCase><con:testCase id="daba0656-7ce5-4714-b777-ef13ea1ffbe5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение перечня с 2 правилами подготовки к исследованию" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Найти исследования с двумя правилами" id="3855a28e-e292-4e97-9d60-c78e6ae90065"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#clsDBDriver}</con:driver><con:connectionString>${#Project#clsFullDbConnection}</con:connectionString><con:query>SELECT * FROM
	(SELECT dl.ID FROM EMIAS_CLS.D_LABORATORY dl
	INNER JOIN EMIAS_CLS.D_PREP_TAKE_BM dptb ON
	dl.PREP_TAKE_BM_ID = dptb.ID
	INNER JOIN EMIAS_CLS.D_LABORATORY_SUB_KIND dlsk ON
	dl.LABORATORY_SUB_KIND_ID = dlsk.ID 
	WHERE dl.PREP_TAKE_BM_ID IS NOT NULL
	AND dl.PREP_TAKE_BM_ID != dlsk.PREP_TAKE_BM_ID
	ORDER BY DBMS_RANDOM.VALUE)
WHERE ROWNUM = 1</con:query><con:assertion type="JDBC Status" id="9bd1a485-40d3-466d-8110-f8c92625c023" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать ID исследования с 2 правилами" id="c1108ca0-90f3-40ba-aa20-76118f23fa5e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>laboratoryId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти исследования с двумя правилами</con:sourceStep><con:sourcePath>//ID[1]</con:sourcePath><con:targetType>laboratoryId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getMemoryCard" id="3bc0ebdf-acf9-4c9f-83d5-868f82b49e51"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>LaboratoryOtherDictionariesServiceBinding</con:interface><con:operation>getMemoryCard</con:operation><con:request name="getMemoryCard" id="3aa755a6-6e9f-42d3-9776-b3379f7275ec"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#clsDictionariesEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/" xmlns:typ="http://emias.mos.ru/laboratory/v1/dictionary/other/types/">
   <soap:Header>
   	<wsse:Security soap:mustUnderstand="0" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   		<wsse:UsernameToken>
   			<wsse:Username>EIM</wsse:Username>
   		</wsse:UsernameToken>
   	</wsse:Security>
   </soap:Header>
   <soap:Body>
      <oth:getMemoryCardRequest>
         <oth:request>
            <typ:biomaterialId>${=Math.abs(new Random().nextInt() % 90) + 1}</typ:biomaterialId>
            <typ:laboratoryId>${#TestCase#laboratoryId}</typ:laboratoryId>
         </oth:request>
      </oth:getMemoryCardRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9dd84515-964a-457d-b938-8479292ea53a"/><con:assertion type="SOAP Fault Assertion" id="6e11eccd-4c3f-498c-a8c1-43f9de19e07a" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Записать biomaterialId и content" id="70ed4152-e0b9-49f0-9be0-bdd03305986a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>biomaterialId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMemoryCard</con:sourceStep><con:sourcePath>//*:biomaterialId</con:sourcePath><con:targetType>biomaterialId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>content 1</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMemoryCard</con:sourceStep><con:sourcePath>//*:content[1]</con:sourcePath><con:targetType>content1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>content 2</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMemoryCard</con:sourceStep><con:sourcePath>//*:content[2]</con:sourcePath><con:targetType>content2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="getMemo" id="1e78a1a9-1bd4-4c76-88ec-cadf97c25738"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getMemo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getMemo" id="6ab89f5b-95ff-4f6e-81cb-3cf055194c98" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "request": [
    {
      "biomaterialId": ${#TestCase#biomaterialId},
      "laboratoryId": ${#TestCase#laboratoryId}
    }
  ]
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getMemo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="af0a1bb7-f8b8-4dab-a454-7f3c3440836b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6fcf2f7d-975a-4743-b58f-87e59fb62e32" name="Значение biomaterialId = ${#TestCase#biomaterialId}"><con:configuration><path>$.payload.memoryCard[0].biomaterialId</path><content>${#TestCase#biomaterialId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50f0cc6b-2eb3-4913-bfcf-8359b907c425" name="Значение content1= ${#TestCase#content1}"><con:configuration><path>$.payload.memoryCard[0].content[0]</path><content>${#TestCase#content1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c7dc4678-d7e4-4c8c-892c-2fb094220cbc" name="Значение content2= ${#TestCase#content2}"><con:configuration><path>$.payload.memoryCard[0].content[1]</path><content>${#TestCase#content2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>laboratoryId</con:name><con:value>434</con:value></con:property><con:property><con:name>biomaterialId</con:name><con:value>24</con:value></con:property><con:property><con:name>content1</con:name><con:value>За 3 дня исключить спорт. Нельзя сдавать в острый период любых заболеваний.</con:value></con:property><con:property><con:name>content2</con:name><con:value>Утром, строго натощак, с 7.00 до 12.00, можно пить только воду, не принимать пищу с 19.00 предыдущего дня, за 1 час-исключить курение; сдавать биоматериал до рентгена, УЗИ, физиопроцедур, массажа.</con:value></con:property></con:properties></con:testCase><con:testCase id="ad03ce53-d5a0-4fb7-8830-1422df7e25b1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Получение перечня без правил подготовки к исследованию" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="Найти исследования без правил" id="465a1f76-dfa0-4954-a3f5-cd7dc33b23d4"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>${#Project#clsDBDriver}</con:driver><con:connectionString>${#Project#clsFullDbConnection}</con:connectionString><con:query>SELECT * FROM
	(SELECT dl.ID FROM EMIAS_CLS.D_LABORATORY dl
	INNER JOIN EMIAS_CLS.D_LABORATORY_SUB_KIND dlsk ON
	dl.LABORATORY_SUB_KIND_ID = dlsk.ID 
	WHERE dl.PREP_TAKE_BM_ID IS NULL
	AND dlsk.PREP_TAKE_BM_ID IS NULL
	ORDER BY DBMS_RANDOM.VALUE)
WHERE ROWNUM = 1</con:query><con:assertion type="JDBC Status" id="9bd1a485-40d3-466d-8110-f8c92625c023" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Записать ID исследования без правил" id="bd7313b3-65fe-434a-843b-8f7ee21a7d54"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>laboratoryId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Найти исследования без правил</con:sourceStep><con:sourcePath>//ID[1]</con:sourcePath><con:targetType>laboratoryId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" name="getMemoryCard" id="491d34c9-b1c4-4013-aa4b-f00855abfa9c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>LaboratoryOtherDictionariesServiceBinding</con:interface><con:operation>getMemoryCard</con:operation><con:request name="getMemoryCard" id="3aa755a6-6e9f-42d3-9776-b3379f7275ec"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#clsDictionariesEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/" xmlns:typ="http://emias.mos.ru/laboratory/v1/dictionary/other/types/">
   <soap:Header>
   	<wsse:Security soap:mustUnderstand="0" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   		<wsse:UsernameToken>
   			<wsse:Username>EIM</wsse:Username>
   		</wsse:UsernameToken>
   	</wsse:Security>
   </soap:Header>
   <soap:Body>
      <oth:getMemoryCardRequest>
         <oth:request>
            <typ:biomaterialId>${=Math.abs(new Random().nextInt() % 90) + 1}</typ:biomaterialId>
            <typ:laboratoryId>${#TestCase#laboratoryId}</typ:laboratoryId>
         </oth:request>
      </oth:getMemoryCardRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9dd84515-964a-457d-b938-8479292ea53a"/><con:assertion type="SOAP Fault Assertion" id="6e11eccd-4c3f-498c-a8c1-43f9de19e07a" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Записать biomaterialId и content" id="60e90ba7-bda3-496f-87d6-7cd5eee9add0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>biomaterialId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMemoryCard</con:sourceStep><con:sourcePath>//*:biomaterialId</con:sourcePath><con:targetType>biomaterialId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>content 1</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMemoryCard</con:sourceStep><con:sourcePath>//*:content</con:sourcePath><con:targetType>content1</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="getMemo" id="6c1e28a7-06a5-48d7-94b6-b3722f4aecd0"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getMemo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getMemo" id="6ab89f5b-95ff-4f6e-81cb-3cf055194c98" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "request": [
    {
      "biomaterialId": ${#TestCase#biomaterialId},
      "laboratoryId": ${#TestCase#laboratoryId}
    }
  ]
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getMemo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="af0a1bb7-f8b8-4dab-a454-7f3c3440836b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6fcf2f7d-975a-4743-b58f-87e59fb62e32" name="Значение biomaterialId = ${#TestCase#biomaterialId}"><con:configuration><path>$.payload.memoryCard[0].biomaterialId</path><content>${#TestCase#biomaterialId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50f0cc6b-2eb3-4913-bfcf-8359b907c425" name="Значение content1= ${#TestCase#content1}"><con:configuration><path>$.payload.memoryCard[0].content</path><content>[]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>laboratoryId</con:name><con:value>2163</con:value></con:property><con:property><con:name>biomaterialId</con:name><con:value>25</con:value></con:property><con:property><con:name>content1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties></con:testCase><con:testCase id="139c58b8-af04-4faf-a7c8-b6308972c53f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="АС1. Несуществующее ЛИ (CLS_LAB_RESEARCH_NOT_FOUND)" searchProperties="true"><con:settings/><con:testStep type="request" name="getMemoryCard" id="b1ac9d1c-ffa4-449e-bc28-da88e5316efc"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>LaboratoryOtherDictionariesServiceBinding</con:interface><con:operation>getMemoryCard</con:operation><con:request name="getMemoryCard" id="3aa755a6-6e9f-42d3-9776-b3379f7275ec"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#clsDictionariesEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:oth="http://emias.mos.ru/laboratory/v1/dictionary/other/" xmlns:typ="http://emias.mos.ru/laboratory/v1/dictionary/other/types/">
   <soap:Header>
   	<wsse:Security soap:mustUnderstand="0" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
   		<wsse:UsernameToken>
   			<wsse:Username>EIM</wsse:Username>
   		</wsse:UsernameToken>
   	</wsse:Security>
   </soap:Header>
   <soap:Body>
      <oth:getMemoryCardRequest>
         <oth:request>
            <typ:biomaterialId>${=Math.abs(new Random().nextInt() % 90) + 1}</typ:biomaterialId>
            <typ:laboratoryId>${=Math.abs(new Random().nextInt() % 9000000) + 1}</typ:laboratoryId>
         </oth:request>
      </oth:getMemoryCardRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9dd84515-964a-457d-b938-8479292ea53a"/><con:assertion type="Not SOAP Fault Assertion" id="e25090da-55bc-41a6-bd4d-bf19410fac38" name="SOAP Fault"/><con:assertion type="XPath Match" id="d4122396-a8ed-4431-a1e1-f157bfd9bb12" name="Код ошибки = Е005"><con:configuration><path>declare namespace ns4='http://emias.mos.ru/laboratory/v1/dictionary/types/';
declare namespace ns3='http://emias.mos.ru/laboratory/v1/common/types/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns2='http://emias.mos.ru/laboratory/v1/dictionary/other/';
declare namespace ns1='http://emias.mos.ru/laboratory/v1/dictionary/other/types/';
//ns3:messages[1]/ns3:code[1]/text()[1]</path><content>E005</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Записать biomaterialId и content" id="b9657b7e-1a95-43d7-9b3e-d7ed49081d7a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>laboratoryId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMemoryCard</con:sourceStep><con:sourcePath>//*:value[1]</con:sourcePath><con:targetType>laboratoryId</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>error_text</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMemoryCard</con:sourceStep><con:sourcePath>//*:Text</con:sourcePath><con:targetType>error_text</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>error_code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMemoryCard</con:sourceStep><con:sourcePath>//*:messages[1]/*:code</con:sourcePath><con:targetType>error_code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="getMemo" id="61279fe6-8116-44db-84de-1c23bc682f96"><con:settings/><con:config service="http://emiasinfo-application.test.emias.mos.ru" resourcePath="/api/v2/saOrchestrator/getMemo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getMemo" id="6ab89f5b-95ff-4f6e-81cb-3cf055194c98" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request>{
  "request": [
    {
      "biomaterialId": ${#TestCase#biomaterialId},
      "laboratoryId": ${#TestCase#laboratoryId}
    }
  ]
}</con:request><con:originalUri>http://emiasinfo-application.test.emias.mos.ru/api/v2/saOrchestrator/getMemo</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="af0a1bb7-f8b8-4dab-a454-7f3c3440836b" name="Valid HTTP Status Code 404"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="20b0d023-a3e4-43a0-a6c9-d51c4ccd3647" name="Значение code = CLS_LAB_RESEARCH_NOT_FOUND"><con:configuration><path>$.error.code</path><content>CLS_LAB_RESEARCH_NOT_FOUND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="efa2d623-0c67-45df-88ee-feeb450aa2d2" name="Значение description = Лабораторное исследование с идентификатором %s не найдено"><con:configuration><path>$.error.description</path><content>Лабораторное исследование с идентификатором %s не найдено</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e122e01d-e700-4e5e-8d7e-a437e8e6b35a" name="Значение type = BUSINESS"><con:configuration><path>$.error.type</path><content>BUSINESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de0c7a63-9b79-4184-82e6-bef5beae28e1" name="Значение origin = E005:  Лабораторное исследование с идентификатором N не найдено"><con:configuration><path>$.error.origin</path><content>${#TestCase#error_text}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>laboratoryId</con:name><con:value>4478582</con:value></con:property><con:property><con:name>biomaterialId</con:name><con:value>12</con:value></con:property><con:property><con:name>error_text</con:name><con:value>E005:  Лабораторное исследование с идентификатором 4478582 не найдено</con:value></con:property><con:property><con:name>error_code</con:name><con:value>E005</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>saOrchestratorEndpoint</con:name><con:value>http://esbcamelvv.test.emias.mos.ru/proxy/Composite/saOrchestrator/v1S/ProxyService</con:value></con:property><con:property><con:name>saOrchestratorDbConnection</con:name><con:value/></con:property><con:property><con:name>saOrchestratorDbLogin</con:name><con:value/></con:property><con:property><con:name>saOrchestratorDbPassword</con:name><con:value/></con:property><con:property><con:name>saOrchestratorFullDbConnection</con:name><con:value/></con:property><con:property><con:name>saOrchestratorHeader</con:name><con:value><![CDATA[<soap:Header>   <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">     <wsse:UsernameToken>       <wsse:Username>EIM</wsse:Username>     </wsse:UsernameToken>   </wsse:Security> </soap:Header>]]></con:value></con:property><con:property><con:name>emiasInfoEndpoint</con:name><con:value>http://emiasinfo1.emias.solit-clouds.ru</con:value></con:property><con:property><con:name>emiasInfoDbConnection</con:name><con:value>172.17.5.11:29100/emiasinfo</con:value></con:property><con:property><con:name>emiasInfoDbLogin</con:name><con:value>emiasinfo</con:value></con:property><con:property><con:name>emiasInfoDbPassword</con:name><con:value>emiasinfo</con:value></con:property><con:property><con:name>emiasInfoFullDbConnection</con:name><con:value>jdbc:postgresql://172.17.5.11:29100/emiasinfo?user=emiasinfo&amp;password=emiasinfo</con:value></con:property><con:property><con:name>emiasInfoDBDriver</con:name><con:value>org.postgresql.Driver</con:value></con:property><con:property><con:name>CLSDbConnection</con:name><con:value>10.2.172.21:1521/emiasdb</con:value></con:property><con:property><con:name>CLSDbLogin</con:name><con:value>EMIAS_CLS</con:value></con:property><con:property><con:name>CLSDbPassword</con:name><con:value>EMIAS_CLS</con:value></con:property><con:property><con:name>CLSFullDbConnection</con:name><con:value>jdbc:oracle:thin:EMIAS_CLS/EMIAS_CLS@//10.2.172.21:1521/emiasdb</con:value></con:property><con:property><con:name>CLSDBDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>suppDbConnection</con:name><con:value>@//10.2.172.242:1521/emiasdb</con:value></con:property><con:property><con:name>suppDbLogin</con:name><con:value>EMIAS_CLUSTER</con:value></con:property><con:property><con:name>suppDbPassword</con:name><con:value>EMIAS_CLUSTER</con:value></con:property><con:property><con:name>suppFullDbConnection</con:name><con:value> jdbc:oracle:thin:EMIAS_CLUSTER/EMIAS_CLUSTER@//10.2.172.242:1521/emiasdb</con:value></con:property><con:property><con:name>suppDBDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>clsDictionariesEndpoint</con:name><con:value>http://cls.test.emias.mos.ru/laboratory/application/api/Dictionaries</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>