<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="c7bd95ba-4ae4-46a6-aceb-bb54cb7694c9" activeEnvironment="Default" name="ЕМИАС.ИНФО сервис &quot;Отображение календаря прививок&quot;" resourceRoot="" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="c8a726bd-2e34-40bc-8a06-ca437bb0da0f" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://emiasinfo1.emias.solit-clouds.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint></con:endpoints><con:resource name="GetCalendar" path="/api/v3/calendar/getCalendar" id="d991a0c4-d7eb-4982-b880-86c2fbfe7ec5"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:value><con:style>QUERY</con:style><con:default>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>birthDate</con:name><con:value>2014-04-08</con:value><con:style>QUERY</con:style><con:default>2014-04-08</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetCalendar 1" id="08027d05-e0dd-404f-91e7-f4830111320b" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar">get:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502</con:status><con:params/><con:element xmlns:get="http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar">get:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>403</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://emiasinfo1.emias.solit-clouds.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="5729f02b-d73f-4339-aa49-506a30a2836e" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://lkservice.test.emias.mos.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint></con:endpoints><con:resource name="Vaccinations" path="/api/3/vaccinations" id="b514009c-29ca-4cb7-9008-6a7e23331d63"><con:settings/><con:parameters><con:parameter><con:name>ehrId</con:name><con:value>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:value><con:style>QUERY</con:style><con:default>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Vaccinations 1" id="72daed71-4adf-4173-9cee-5b9713808d85" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:vac="https://lkservice.test.emias.mos.ru/api/3/vaccinations">vac:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>520</con:status><con:params/><con:element xmlns:vac="https://lkservice.test.emias.mos.ru/api/3/vaccinations">vac:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://lkservice.test.emias.mos.ru</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="cbd994f3-c685-4753-b22a-f41d8748fd4e" name="getCalendar"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="3f696a09-90f9-4fbe-a926-0e4f010873d9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка календаря справок пациента до 18 лет" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="f4c961d6-935e-4230-a26d-58db9dc835cf"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет + 1 день) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)
c.add(Calendar.DATE, 1)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getVaccinations" id="eee2cad2-1a71-4d67-866c-07e349f55b17"><con:settings/><con:config service="https://lkservice.test.emias.mos.ru" resourcePath="/api/3/vaccinations" methodName="Vaccinations 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getVaccinations" id="55b95adb-148e-4645-9533-e7ff7c1472fe" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#lkEndpoint}</con:endpoint><con:request/><con:originalUri>https://lkservice.test.emias.mos.ru/api/3/vaccinations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52227a58-9a22-4e7c-af56-268ebb89752d" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ehrId" value="${#TestCase#ehrId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ehrId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="4305af41-4535-4c72-900d-2422429fc458"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="afbbebad-3ff7-4171-8d54-24a85cee634e"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == true //Проверяем что вернулся действительно ребёнок

assert calendar.addInfectionInfo == null //Проверяем что не вернулось поле addInfectionInfo, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 52 //В маппинге инфекций 52 с признаком isChild = true

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и вакцин у calendarComponent" id="d3fdc77a-7b32-4084-8bcd-ba46a3f578f5"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload
restResponse = context.expand( '${getVaccinations#Response}' ).toString()
def vaccinations  = new JsonSlurper().parseText(restResponse).doneList

def checkCount = 0 //Счетчик циклов

def date = new Date()
def startYear = 0;
def endYear = 0;
if ((date.format("MM").toLong() >= 8 && date.format("dd").toLong() >= 1) && (date.format("MM").toLong() <= 12 && date.format("dd").toLong() <= 31))
	startYear = date.format("yyyy").toLong()
else	
	startYear = date.format("yyyy").toLong() - 1

endYear = startYear + 1 //Создание startYear и endYear для проверки инфекции Грипп

def doneList = []
for(done in vaccinations)
{
	if ((done.uploadedByUser == true && done.status == "confirmed") || done.uploadedByUser == false) //Отбирает подтверждённые сделанные вакцины
		doneList.add(done)
}

def getDoneVacines(infectionIDs, doneList)
{
	def vaccinations = []
	for (done in doneList)
	{
		infectionIDs.each{
			if (done.infectionList.infectionId.contains(it))
				vaccinations.add(done)
		}
	}
	vaccinations.sort{it.dateVaccination}
	return vaccinations
}

def checkVaccinatedInfoMapping(vInfo, dList)
{
	assert vInfo.date == dList.dateVaccination
	assert vInfo.vaccinationName == dList.vaccinationName
	assert vInfo.series == dList.series
	assert vInfo.dosage == dList.dosage
	assert vInfo.unitName == dList.unitName
	assert vInfo.method == dList.method
	assert dList.infectionList.multiplicity.contains(vInfo.multiplicity)
	assert vInfo.reactionList == dList.reactionList
	assert vInfo.moName == dList.moName
	assert vInfo.documentId == dList.documentId
}

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Туберкулез":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null // Проверяет что нет объекта vaccineInfo

								def doneVacinesOrdered = getDoneVacines(["80"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0]) //Проверяет маппинг объекта vaccinatedInfo, используя переданное вакцинирование
							}
							else
								assert infectionComponent.vaccinatedInfo == null // Проверяет что нет объекта vaccinatedInfo
								
							calendar.calendarComponent.removeElement(infectionComponent) // большое количество вложенных проверок потому что так нагляднее, чем одна большая

				if (infectionComponent.text == "RV")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["81", "165"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [1])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["37", "105", "113", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [2])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["38", "106", "114", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["39", "107", "115", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V4")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["92"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ротавирусная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["123"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["124"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["125"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [3])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
			
				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [8])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["94"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [11,12])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["84", "93"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Коклюш":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "56", "113", "150", "126", "174", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "57", "114", "151", "127", "175", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "58", "115", "152", "128", "176", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "59", "116", "147", "129", "177", "156"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["54", "60", "117", "148", "130", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Дифтерия":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["44", "50", "85", "105", "113", "150", "153", "126", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["45", "51", "95", "106", "114", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["46", "52", "99", "107", "115", "152", "155", "128", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["47", "53", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["48", "54", "97", "109", "117", "130", "148","157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["49", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["50", "74", "85", "105", "113", "126", "150", "153", "174", "227"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["51", "75", "95", "106", "114", "127", "151", "154", "175", "228"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["52", "76", "99", "107", "115", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["53", "77", "96", "108", "116", "129", "147", "156", "177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13, 14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["78", "54", "97", "109", "117", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV3")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [17])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["79", "55", "98", "110", "118", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Полиомиелит":
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["68", "126", "150", "153", "174"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
							
				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["69", "127", "151", "154", "175"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["70", "128", "152", "155", "176"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["71", "129", "147", "156","177"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [10])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["72", "130", "148", "157"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "2-я ревакцинация"
								assert infectionComponent.vaccineInfo.range == "20-24 месяца"
								assert infectionComponent.vaccineInfo.description == "Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)"

								assert infectionComponent.vaccinatedInfo == null
							}
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "ИПВ ОПВ")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["73", "131", "149", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
							{
								assert infectionComponent.vaccineInfo.title == "3-я ревакцинация"
								assert infectionComponent.vaccineInfo.range == "6-7 лет"
								assert infectionComponent.vaccineInfo.description == "Планово делается ревакцинация живой вакциной (ОПВ), детям из группы риска — инактивированной вакциной (ИПВ)"
								assert infectionComponent.vaccinatedInfo == null
							}
								
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Гемофильная инфекция":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [4])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["40", "126", "153"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V2")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [5])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["41", "127", "154"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V3")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [6])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["42", "128", "155"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [9])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["43", "129", "130", "131", "156", "157", "158"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["62", "64", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["63", "65", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "66", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "67"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Эпидемический паротит (свинка)":
				if (infectionComponent.text == "V1")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["64", "82", "100", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "RV")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["65", "83", "101"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Сад/школа, перед")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["119", "120", "121", "122"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "Сад/школа, перед\n\nV+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [12,13])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["36", "91", "178", "235"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Перед поступлением в дет. сад или школу. V1, V2")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["35", "90", "226"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
			case "Грипп":
				if (infectionComponent.text == "Ежегодно. Прививка указана для текущего эпидемического сезона с 01.08."+startYear+" по 31.07."+endYear)
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [7,8,9,10,11,12,13,14, 15, 16, 17, 18])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["162", "163"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирус папилломы человека":
			if (infectionComponent.text == "Дев.")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [16])
							if (infectionComponent.vaccinated == true)
							{
								assert infectionComponent.vaccineInfo == null

								def doneVacinesOrdered = getDoneVacines(["102", "103", "104"], doneList) 
								checkVaccinatedInfoMapping(infectionComponent.vaccinatedInfo, doneVacinesOrdered[0])
							}
							else
								assert infectionComponent.vaccinatedInfo == null
								
							calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>ead6b4ff-b507-4a97-8725-c7b122c1297b</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2005-01-11</con:value></con:property></con:properties></con:testCase><con:testCase id="b93529ad-a48c-4969-99f1-7bf18f9325c1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка календаря справок пациента старше 18 лет" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="417d081c-1cac-4586-ab8c-9b228a173015"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет - 1 день) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)
c.add(Calendar.DATE, -1)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="4b9f1ddc-bd72-4a89-9eef-db66c0e2446e"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="f899c5e9-13b6-4449-affc-07f1399f625b"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == false  //Проверяем что вернулся не ребёнок

assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 15 //В маппинге инфекций 15 с признаком isChild = false

def checkCount = 0 //Счетчик циклов

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1,V2,V3")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие и не являющиеся носителями HBs-Ag.</p>\n<p>Схема: 0–1-6 мес. (V2 через 1 месяц от первой прививки, V3 через 6 месяцев от первой прививки).</p>\n<p>Контактные в очаге (не привитые, не болевшие и не являющиеся носителями HBs-Ag) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "Группы риска")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [23])
							if (infectionComponent.description == "<p>Иммунизация однократно конъюгированной вакциной или каждые пять лет полисахаридной вакциной.</p>\n<p>Лица из групп риска — лица старше 60 лет, страдающие хроническими заболеваниями (дыхательной, сердечно-сосудистой систем, печени, почек, сахарным диабетом).</p>\n<p>Лица, проживающих в организациях социального обслуживания.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дифтерия":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес.</p>\n<p>Контактные в очаге (не привитые, не болевшие, привитые однократно) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18-35 лет")
										calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V+R")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [21])
						if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, организаций торговли, транспорта, коммунальной и социальной сферы, общественного питания.</p>\n<p>Лица, работающие вахтовым методом, и сотрудники государственных контрольных органов в пунктах пропуска через государственную границу Российской Федерации не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
									if (infectionComponent.vaccineInfo.age == "36–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "Женщины V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках. Ревакцинации подлежат однократно привитые.</p>\n<p>Перед вакцинацией для женщин рекомендовано исключить вероятность беременности, а также в течение 2 месяцев избегать вероятность зачатия.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–25 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Интервал между вакцинацией и ревакцинацией 6–12 месяцев. Для отдельных вакцин ограничение по возрасту — с 18 до 50 лет.</p>\n\n\n<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Лица, подверженные профессиональному риску заражения (работники медицинских организаций, персонал по уходу за больными, работники сферы обслуживания населения, занятые на предприятиях пищевой промышленности, а таже обслуживающие водопроводные и канализационные сооружения, оборудование и сети).</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций и учреждений всех форм собственности.\nСотрудники учреждений социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>\n<p>Лица, выезжающие в неблагополучные регионы и страны, где регистрируется вспышечная заболеваемость</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Грипп":
				if (infectionComponent.text == "Ежегодно")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, транспорта, коммунальной сферы, беременные женщины.</p>\n<p>Лица, подлежащие призыву на военную службу.</p>\n<p>Лица с хроническими заболеваниями, в том числе с заболеваниями лёгких, сердечно-сосудистыми заболеваниями, метаболическими нарушениями и ожирением.</p>\n<p>Мигранты.</p>\n<p>Строительные рабочие.</p>\n<p>Работники торговли, общественного питания, лица, имеющие контакт с птицей</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–59 лет")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Брюшной тиф":
			if (infectionComponent.text == "V каждые 3 года")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Лица, занятые в сфере коммунального благоустройства (работники, обслуживающие канализационные сети, сооружения и оборудование, работникам, участвующим в процессе водоподготовки и водоотведения, а также организаций, осуществляющих санитарную очистку населённых мест, сбор, транспортировку, утилизацию бытовых отходов).</p>\n<p>Лица, работающие с живыми культурами возбудителей брюшного тифа.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дизентерия Зонне":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Работники медицинских организаций (их структурных подразделений) инфекционного профиля и бактериологических лабораторий.</p>\n<p>Лица, занятые в сфере коммунального благоустройства, в том числе выезжающие на работу в оздоровительные лагеря. Персонал детских дошкольных организаций.</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций всех форм собственности.\nСотрудники социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
									
				break

			case "Клещевой вирусный энцефалит":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Вакцинация проводится двухкратно с интервалом между V1 и V2 от 1 месяца до полугода (возможно до 7 месяцев), ревакцинация через 1 год после заврешения первичного курса вакцинации. Последующие ревакцинации проводят каждые 3 года.</p>\n<p>Лица, работающие с живыми культурами возбудителя клещевого энцефалита.</p>\n<p>Лица, проживающие на эндемичных по клещевому вирусному энцефалиту территориях.</p>\n<p>Лица, выезжающие на эндемичные по клещевому вирусному энцефалиту территории, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и описаний у addInfectionInfo" id="a1026898-5cb5-4b11-a6ad-8dcfdd42d362"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload


assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.addInfectionInfo.size() == 9 //В маппинге 9 инфекций 

def checkCount = 0 //Счетчик циклов

while (calendar.addInfectionInfo.size() > 0)
{
	infectionComponent = calendar.addInfectionInfo[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Сибирская язва":
				if (infectionComponent.description == "<p>Вакцинация проводится двукратно с интервалом между введениями 20-30 суток. Ревакцинация - ежегодно.</p>\n\n<p>Лица, выполняющие следующие работы: зооветработники и другие лица, профессионально занятые предубойным содержанием скота, а также убоем, снятием шкур и разделкой туш; сбор, хранение, транспортировка и первичная обработка сырья животного происхождения; сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные на энзоотичных по сибирской язве территориях.</p>\n\n<p>Лица, работающие с материалом, подозрительным на инфицирование возбудителем сибирской язвы.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Туляремия":
				if (infectionComponent.description == "<p>Вакцинация проводится однократно. Ревакцинация каждые 5 лет. Перед проведением профилактических прививок необходимо проведение иммунодиагностического теста с тулярином. Вакцинация проводится при отрицательных результатах.</p>\n\n<p>Лица, проживающие на энзоотичных по туляремии территориях, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, другие работы по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя туляремии.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Чума":
				if (infectionComponent.description == "<p>Иммунизацию проводят однократно. Дозировка препарата зависит от способа введения: внутрикожно, подкожно, накожно, ингаляционно.</p>\n\n<p>Лица, проживающие на энзоотичных по чуме территориях.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя чумы.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бруцеллез":
				if (infectionComponent.description == "<p>Перед вакцинацией необходимо проведение иммунодиагностического теста с Бруцеллином или ИФА на наличие специфических антител. Вакцинация проводится при отрицательных результатах. Вакцинация - однократно, ревакцинация - через 10-12 месяцев (при отрицательных результатах тестов). В очагах козье-овечьего типа бруцеллеза лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания скота бруцеллезом; по убою скота, больного бруцеллезом, заготовке и переработке полученных от него мяса и мясопродуктов. Животноводы, ветеринарные работники, зоотехники в хозяйствах, энзоотичных по бруцеллезу.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя бруцеллеза.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бешенство":
				if (infectionComponent.description == "<p>Схема профилактической иммунизации: Первичная иммунизация - трехкратно (0, 7, 30 дни), первая ревакцинация - через год после законченного курса первичной иммунизации. Последующие ревакцинации - каждые 3 года. С профилактической целью вакцинируют лиц, имеющих высокий риск заражения бешенством: лица, работающие с \"уличным\" вирусом бешенства; ветеринарные работники; егеря, охотники, лесники; лица, выполняющие работы по отлову и содержанию животных.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лептоспироз":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через год по показаниям.</p>\n\n<p>Лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, расположенных на энзоотичных по лептоспирозу территориях; по убою скота, больного лептоспирозом, заготовке и переработке мяса и мясопродуктов, полученных от больных лептоспирозом животных; по отлову и содержанию безнадзорных животных.</p> \n\n<p>Лица, работающие с живыми культурами возбудителя лептоспироза.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лихорадка Ку":
				if (infectionComponent.description == "<p>Вакцинация однократно, ревакцинация - через 1 год.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания лихорадкой Ку.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению и переработке сельскохозяйственной продукции на энзоотичных территориях по лихорадке Ку.</p>\n\n<p>Лица, работающие с живыми культурами возбудителей лихорадки Ку.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Желтая лихорадка":
				if (infectionComponent.description == "<p>Вакцинация - однократно.</p>\n\n<p>Лица, подвергшиеся вакцинации, получают международное свидетельство о вакцинации (действительно в течение всей жизни вакцинированного лица и вступает в силу через 10 дней после даты вакцинации).</p>\n\n<p>Лица, выезжающие за пределы Российской Федерации в энзоотичные по желтой лихорадке страны (регионы).</p>\n\n<p>Лица, работающие с живыми культурами возбудителя желтой лихорадки.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Холера":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через 6 месяцев по показаниям.</p>\n\n<p>Лица, выезжающие в неблагополучные по холере страны (регионы). Население субъектов Российской Федерации в случае осложнения санитарно-эпидемиологической обстановки по холере в сопредельных странах, а также на территории Российской Федерации.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break
				
			default:
				break
		}
		checkCount++
}

assert calendar.addInfectionInfo.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>ef76ddf9-c6e7-447c-854f-d5060556cdc3</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2005-01-09</con:value></con:property></con:properties></con:testCase><con:testCase id="f69badd8-0fca-4603-bf30-c12b1384e561" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Проверка календаря справок пациента, которому ровно 18 лет" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Заполнить значение поля birthDate" id="aa632752-e269-4f15-9a36-a7ee37fda872"><con:settings/><con:config><script>import java.time.format.DateTimeFormatter
import java.util.Calendar


//Формирует дату: (текущая дата - 18 лет) в формате yyyy-MM-dd
def date = new Date()

def c = Calendar.getInstance()
c.setTime(date)

c.add(Calendar.YEAR, -18)

date = c.getTime()

testRunner.testCase.setPropertyValue("birthDate", date.format("yyyy-MM-dd"))</script></con:config></con:testStep><con:testStep type="restrequest" name="getCalendar" id="e7c317fb-c064-4ef7-91ed-30104f98cff0"><con:settings/><con:config service="http://emiasinfo1.emias.solit-clouds.ru" resourcePath="/api/v3/calendar/getCalendar" methodName="GetCalendar 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCalendar" id="2fce3767-c08a-41b4-91c8-c02fac6f422c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Access-JWT" value="${#TestCase#X-Access-JWT}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="WsdlSettings@pretty-print-response-xml">false</con:setting></con:settings><con:endpoint>${#Project#emiasInfoEndpoint}</con:endpoint><con:request/><con:originalUri>http://emiasinfo1.emias.solit-clouds.ru/api/v3/calendar/getCalendar</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ddf20f6-2825-4588-804f-4d09995686cb" name="HTTP Status Code 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ehrId" value="${#TestCase#ehrId}"/>
  <con:entry key="birthDate" value="${#TestCase#birthDate}"/>
</con:parameters><con:parameterOrder><con:entry>ehrId</con:entry><con:entry>birthDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и возрастов у calendarComponent" id="b7ec5e8d-f930-44dd-85a2-319b7dc8acdf"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload

assert calendar.isChild == false  //Проверяем что вернулся не ребёнок

assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.calendarComponent.size() == 15 //В маппинге инфекций 15 с признаком isChild = false

def checkCount = 0 //Счетчик циклов

while (calendar.calendarComponent.size() > 0)
{
	infectionComponent = calendar.calendarComponent[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Вирусный гепатит B":
				if (infectionComponent.text == "V1,V2,V3")
					if (infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие и не являющиеся носителями HBs-Ag.</p>\n<p>Схема: 0–1-6 мес. (V2 через 1 месяц от первой прививки, V3 через 6 месяцев от первой прививки).</p>\n<p>Контактные в очаге (не привитые, не болевшие и не являющиеся носителями HBs-Ag) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Пневмококковая инфекция":
			if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)

			if (infectionComponent.text == "Группы риска")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [23])
							if (infectionComponent.description == "<p>Иммунизация однократно конъюгированной вакциной или каждые пять лет полисахаридной вакциной.</p>\n<p>Лица из групп риска — лица старше 60 лет, страдающие хроническими заболеваниями (дыхательной, сердечно-сосудистой систем, печени, почек, сахарным диабетом).</p>\n<p>Лица, проживающих в организациях социального обслуживания.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дифтерия":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Столбняк":
				if (infectionComponent.text == "R каждые 10 лет")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Ревакцинация против дифтерии и столбняка проводится каждые 10 лет от момента последней ревакцинации.</p>\n<p>Не привитым ранее, без сведений о вакцинации, или если прошло более 10 лет — проводится двухкратная вакцинация (интервал 30 дней) с последующей первой ревакцинацией (через 6–9 месяцев после V2) и второй ревакцинацией (через 5 лет после R2), далее каждые 10 лет.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Корь":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес.</p>\n<p>Контактные в очаге (не привитые, не болевшие, привитые однократно) вакцинируются без ограничения возраста.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18-35 лет")
										calendar.calendarComponent.removeElement(infectionComponent)

				if (infectionComponent.text == "V+R")
					if (infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [21])
						if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, организаций торговли, транспорта, коммунальной и социальной сферы, общественного питания.</p>\n<p>Лица, работающие вахтовым методом, и сотрудники государственных контрольных органов в пунктах пропуска через государственную границу Российской Федерации не привитые ранее, не болевшие, не имеющие сведений о прививках.</p>\n<p>Ревакцинации подлежат однократно привитые, через 3 мес</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
									if (infectionComponent.vaccineInfo.age == "36–55 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Краснуха":
				if (infectionComponent.text == "Женщины V+R")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							if (infectionComponent.description == "<p>Не привитые ранее, не болевшие, не имеющие сведений о прививках. Ревакцинации подлежат однократно привитые.</p>\n<p>Перед вакцинацией для женщин рекомендовано исключить вероятность беременности, а также в течение 2 месяцев избегать вероятность зачатия.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Профилактическая прививка")
									if (infectionComponent.vaccineInfo.age == "18–25 лет")
										calendar.calendarComponent.removeElement(infectionComponent)
				break
				
				
			case "Менингококковая инфекция":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Вирусный гепатит А":
				if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Интервал между вакцинацией и ревакцинацией 6–12 месяцев. Для отдельных вакцин ограничение по возрасту — с 18 до 50 лет.</p>\n\n\n<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Лица, подверженные профессиональному риску заражения (работники медицинских организаций, персонал по уходу за больными, работники сферы обслуживания населения, занятые на предприятиях пищевой промышленности, а таже обслуживающие водопроводные и канализационные сооружения, оборудование и сети).</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций и учреждений всех форм собственности.\nСотрудники учреждений социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>\n<p>Лица, выезжающие в неблагополучные регионы и страны, где регистрируется вспышечная заболеваемость</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Ветряная оспа":
				if (infectionComponent.text == "Призывники")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19])
							calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Грипп":
				if (infectionComponent.text == "Ежегодно")
					if ( infectionComponent.type == "Плановая")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Работники медицинских и образовательных организаций, транспорта, коммунальной сферы, беременные женщины.</p>\n<p>Лица, подлежащие призыву на военную службу.</p>\n<p>Лица с хроническими заболеваниями, в том числе с заболеваниями лёгких, сердечно-сосудистыми заболеваниями, метаболическими нарушениями и ожирением.</p>\n<p>Мигранты.</p>\n<p>Строительные рабочие.</p>\n<p>Работники торговли, общественного питания, лица, имеющие контакт с птицей</p>")
								if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–59 лет")
											calendar.calendarComponent.removeElement(infectionComponent)
				break
				
			case "Брюшной тиф":
			if (infectionComponent.text == "V каждые 3 года")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Лица, занятые в сфере коммунального благоустройства (работники, обслуживающие канализационные сети, сооружения и оборудование, работникам, участвующим в процессе водоподготовки и водоотведения, а также организаций, осуществляющих санитарную очистку населённых мест, сбор, транспортировку, утилизацию бытовых отходов).</p>\n<p>Лица, работающие с живыми культурами возбудителей брюшного тифа.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			case "Дизентерия Зонне":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p><b>Иммунизация лиц из групп профессионального риска:</b></p>\n\n<p>Работники медицинских организаций (их структурных подразделений) инфекционного профиля и бактериологических лабораторий.</p>\n<p>Лица, занятые в сфере коммунального благоустройства, в том числе выезжающие на работу в оздоровительные лагеря. Персонал детских дошкольных организаций.</p>\n<p>Лица, участвующие в процессе транспортировки, приёмки, хранения, приготовления (производства) и реализации пищевых продуктов и продукции общественного питания, предприятий, организаций всех форм собственности.\nСотрудники социальной защиты населения, образовательных учреждений социальной защиты населения с круглосуточным пребыванием, санаторно-курортных учреждений.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
									
				break

			case "Клещевой вирусный энцефалит":
			if (infectionComponent.text == "V+R")
					if ( infectionComponent.type == "Группы риска")
						if (infectionComponent.range == [19, 20, 21, 22, 23])
							if (infectionComponent.description == "<p>Вакцинация проводится двухкратно с интервалом между V1 и V2 от 1 месяца до полугода (возможно до 7 месяцев), ревакцинация через 1 год после заврешения первичного курса вакцинации. Последующие ревакцинации проводят каждые 3 года.</p>\n<p>Лица, работающие с живыми культурами возбудителя клещевого энцефалита.</p>\n<p>Лица, проживающие на эндемичных по клещевому вирусному энцефалиту территориях.</p>\n<p>Лица, выезжающие на эндемичные по клещевому вирусному энцефалиту территории, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>")
								if (infectionComponent.vaccineInfo.vacType == "Прививка по эпидемическим показаниям")
									if (infectionComponent.vaccineInfo.riskGroup == "Лица из групп риска, в том числе профессиональных")
										if (infectionComponent.vaccineInfo.age == "18–60 лет и старше")
											calendar.calendarComponent.removeElement(infectionComponent)
				break

			default:
				break
		}
		checkCount++
}

assert calendar.calendarComponent.size() == 0]]></script></con:config></con:testStep><con:testStep type="groovy" name="Проверить маппинг инфекций и описаний у addInfectionInfo" id="b39de5df-cacb-46cd-8ec3-e8c7be91dbd6"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

def restResponse = context.expand( '${getCalendar#Response}' ).toString()
def calendar =  new JsonSlurper().parseText(restResponse).payload


assert calendar.addInfectionInfo != null //Проверяем что поле addInfectionInfo существует, т.к оно только для взрослых

assert calendar.addInfectionInfo.size() == 9 //В маппинге 9 инфекций 

def checkCount = 0 //Счетчик циклов

while (calendar.addInfectionInfo.size() > 0)
{
	infectionComponent = calendar.addInfectionInfo[0]
	if (checkCount > 100) break
	switch (infectionComponent.title)
		{
			case "Сибирская язва":
				if (infectionComponent.description == "<p>Вакцинация проводится двукратно с интервалом между введениями 20-30 суток. Ревакцинация - ежегодно.</p>\n\n<p>Лица, выполняющие следующие работы: зооветработники и другие лица, профессионально занятые предубойным содержанием скота, а также убоем, снятием шкур и разделкой туш; сбор, хранение, транспортировка и первичная обработка сырья животного происхождения; сельскохозяйственные, гидромелиоративные, строительные, по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные на энзоотичных по сибирской язве территориях.</p>\n\n<p>Лица, работающие с материалом, подозрительным на инфицирование возбудителем сибирской язвы.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Туляремия":
				if (infectionComponent.description == "<p>Вакцинация проводится однократно. Ревакцинация каждые 5 лет. Перед проведением профилактических прививок необходимо проведение иммунодиагностического теста с тулярином. Вакцинация проводится при отрицательных результатах.</p>\n\n<p>Лица, проживающие на энзоотичных по туляремии территориях, а также прибывшие на эти территории лица, выполняющие следующие работы: сельскохозяйственные, гидромелиоративные, строительные, другие работы по выемке и перемещению грунта, заготовительные, промысловые, геологические, изыскательские, экспедиционные, дератизационные и дезинсекционные; по лесозаготовке, расчистке и благоустройству леса, зон оздоровления и отдыха населения.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя туляремии.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Чума":
				if (infectionComponent.description == "<p>Иммунизацию проводят однократно. Дозировка препарата зависит от способа введения: внутрикожно, подкожно, накожно, ингаляционно.</p>\n\n<p>Лица, проживающие на энзоотичных по чуме территориях.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя чумы.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бруцеллез":
				if (infectionComponent.description == "<p>Перед вакцинацией необходимо проведение иммунодиагностического теста с Бруцеллином или ИФА на наличие специфических антител. Вакцинация проводится при отрицательных результатах. Вакцинация - однократно, ревакцинация - через 10-12 месяцев (при отрицательных результатах тестов). В очагах козье-овечьего типа бруцеллеза лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания скота бруцеллезом; по убою скота, больного бруцеллезом, заготовке и переработке полученных от него мяса и мясопродуктов. Животноводы, ветеринарные работники, зоотехники в хозяйствах, энзоотичных по бруцеллезу.</p>\n\n<p>Лица, работающие с живыми культурами возбудителя бруцеллеза.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Бешенство":
				if (infectionComponent.description == "<p>Схема профилактической иммунизации: Первичная иммунизация - трехкратно (0, 7, 30 дни), первая ревакцинация - через год после законченного курса первичной иммунизации. Последующие ревакцинации - каждые 3 года. С профилактической целью вакцинируют лиц, имеющих высокий риск заражения бешенством: лица, работающие с \"уличным\" вирусом бешенства; ветеринарные работники; егеря, охотники, лесники; лица, выполняющие работы по отлову и содержанию животных.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лептоспироз":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через год по показаниям.</p>\n\n<p>Лица, выполняющие следующие работы: по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, расположенных на энзоотичных по лептоспирозу территориях; по убою скота, больного лептоспирозом, заготовке и переработке мяса и мясопродуктов, полученных от больных лептоспирозом животных; по отлову и содержанию безнадзорных животных.</p> \n\n<p>Лица, работающие с живыми культурами возбудителя лептоспироза.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Лихорадка Ку":
				if (infectionComponent.description == "<p>Вакцинация однократно, ревакцинация - через 1 год.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению, обработке сырья и продуктов животноводства, полученных из хозяйств, где регистрируются заболевания лихорадкой Ку.</p>\n\n<p>Лица, выполняющие работы по заготовке, хранению и переработке сельскохозяйственной продукции на энзоотичных территориях по лихорадке Ку.</p>\n\n<p>Лица, работающие с живыми культурами возбудителей лихорадки Ку.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Желтая лихорадка":
				if (infectionComponent.description == "<p>Вакцинация - однократно.</p>\n\n<p>Лица, подвергшиеся вакцинации, получают международное свидетельство о вакцинации (действительно в течение всей жизни вакцинированного лица и вступает в силу через 10 дней после даты вакцинации).</p>\n\n<p>Лица, выезжающие за пределы Российской Федерации в энзоотичные по желтой лихорадке страны (регионы).</p>\n\n<p>Лица, работающие с живыми культурами возбудителя желтой лихорадки.</p>")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break

			case "Холера":
				if (infectionComponent.description == "<p>Вакцинация - однократно. Ревакцинация через 6 месяцев по показаниям.</p>\n\n<p>Лица, выезжающие в неблагополучные по холере страны (регионы). Население субъектов Российской Федерации в случае осложнения санитарно-эпидемиологической обстановки по холере в сопредельных странах, а также на территории Российской Федерации.</p>\n")
					calendar.addInfectionInfo.removeElement(infectionComponent)
				break
				
			default:
				break
		}
		checkCount++
}

assert calendar.addInfectionInfo.size() == 0]]></script></con:config></con:testStep><con:properties><con:property><con:name>X-Access-JWT</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1c2VyX2F1dGgiLCJleHAiOjQ3NTkwMjY4NDIsImF1ZCI6IlBBVElFTlQiLCJzdWIiOiJiYjVlYjg1OC1lZjc2LTQyOTUtOTg1OS1jOWQ2YTI1MWIzNTAiLCJzaWQiOiJmMzI3NTUyNy1jZTkyLTQ4MGMtODljYy1kMjQ4M2RmMWM4MjEiLCJwaG9uZSI6Ijc5MTU5Njc5MjMwIiwic3NvX2lkIjoiSFlrbGU2WFc3aWZybFQ3d0N1dUswaVo5Um9lUFhtMk5HOTJiVGFMb3dmTUE4UC95dzg1TWkvV3JWSG84OVdEaFdGZ1J0NjZFVTNNQnRRM1NFaGhrcndPT0xqTkZpamNSZVZGMnhlZ1I0RSt3eGdCUzJKUnQzQ1NQNG1RZnc0WUVFSkNQcHJVVUMyS1BCVytja2tIeXQ5d09hUnE0VFFqWjIvd1R0ZEhERXlSczJzWUlNMVdVWlBnYzM5dlJScGZLR012NGtlYWMvZWlycTlQbFRmUFFhdVFkeG5HSjlaRHpRYkFzVU1VTFZiRlcwbTc4S0tSNUp6QUZwbDdZRkV4MW85ZVVUNzBYZEJaRGhmZFZsbGpBK1QreVJJT3BXMlNPWk9FcFZoWUFaOHFUVk90S2NKazA2MGJEbmRZZFVkMWdRMHg2Y2tUMStDZ094UUViZWZpL1l3PT0iLCJlbWFpbCI6Inlhci5wcm9tby56YXBvdi5hQGdtYWlsLmNvbSIsImZpcnN0X25hbWUiOiJcdTA0MjFcdTA0MzVcdTA0NDBcdTA0MzNcdTA0MzVcdTA0MzkiLCJzZWNvbmRfbmFtZSI6Ilx1MDQxMi4iLCJtaWRkbGVfbmFtZSI6Ilx1MDQxMlx1MDQ0Zlx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzYlx1MDQzMFx1MDQzMlx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyIsImJpcnRoX2RhdGUiOiIxOTc4LTAzLTIxIn0.dErz7ETQCxAJUOECLgysHVZZPZDQDJvvTQOi8_glDkqiWNaU1QTPKao0eueTw5_ydAE1KuGcGmI1yqeUhYDfp9ZMj97xKv4SYyE3lhdpgaiSALyoiuYcdxUEYj7cJiwZ0Bzjce8GOF__wI76cYKn-mVbZkuxPzRtn1SIvStR-zkiok3kW_Qg6HJFTP7mF1T_Z4p7OILvPYtErbJJHWJ-pVOLMjQYfk2RCjWJesIEuWs2sLr953xhQeodp-bBIYZCjCvxUSEgsHXNMkCvoRkujm9kpJFVHMgKYuwqmiHbZ6B7_3DuOiRsRRWrPJwn2dXZUwhlhzsutwCfIBE13SbfJqO9w14ud_GWrPsofO8T4j7UiGwTvzxXVycJZMMU6XElz35aQRGRVNV53NUQWCc2DqBlmsWHjW8Lg__A5NEjkgDPiRYKWp_Gdz9_I4YQY3x0ZFPIToUNFx2Lt8ei5zcLGL5hzvSdelUzmz0QirECbejcDJdXS8HxEe-XsCDLSh51hwweEpJILfdG4AlWhHFh9_NuKI-zoFx_48wB4d0-miMaxtiscQR1_0IwQFO0kujoMyIn432fPU2waJOjj41_SgX3AQsMPn3FQk4gV8MrHU9vfAoROXrBSbMS7ty5rwWczYdaijFYrNpsUprBRtL7EFSWgRnvFOU7ekNoy_AzpfA</con:value></con:property><con:property><con:name>ehrId</con:name><con:value>ef76ddf9-c6e7-447c-854f-d5060556cdc3</con:value></con:property><con:property><con:name>birthDate</con:name><con:value>2005-01-10</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>emiasInfoEndpoint</con:name><con:value>http://emiasinfo1.emias.solit-clouds.ru</con:value></con:property><con:property><con:name>lkEndpoint</con:name><con:value>https://lkservice.test.emias.mos.ru</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>