<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="8f5017b9-1185-464b-b3e6-9eae7aaa527b" created="3.10.0" activeEnvironment="Default" name="Вакцинация" updated="3.10.0 2021-09-14T15:18:10Z" abortOnError="false" runType="SEQUENTIAL" soapui-version="5.7.0" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="a2199598-3984-47b7-a890-4d134eb747cc" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint></con:endpoints><con:resource name="_search" path="/default_vaccination/_search" id="94ce6264-a533-4392-8b30-dc3e5555fb62"><con:settings/><con:parameters/><con:method name="_search 1" id="9244a940-5feb-461b-8134-bf34767fde27" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search">_se:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="959c6439-ad92-4fbb-a752-90636b8e891c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":0,"track_total_hits":false,"query":{"bool":{"must":[{"match":{"groupId":{"query":"10000290"}}},{"match":{"data.attachment.attachments.areaId":{"query":196}}}]}},"aggs":{"attached":{"filter":{"bool":{"must":[{"match":{"data.attachment.attached.areaId":{"query":196}}},{"match":{"data.attachment.attached.moId":{"query":10000290}}}]}}},"detached":{"filter":{"bool":{"must":[{"match":{"data.attachment.attachments.areaId":{"query":196}}}]}}}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="f0fffd8f-80e6-4f1b-bebb-e14bd3c7cb75" wadlVersion="http://wadl.dev.java.net/2009/02" name="Вакцинация" type="rest" definitionUrl="TBinfectionName2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/></con:interface><con:interface xsi:type="con:WsdlInterface" id="8eab0890-8fb2-42cb-806a-894399a6d629" wsaVersion="NONE" name="searchServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/registry/searchService/v1/}searchServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?wsdl"><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="searchService" targetNamespace="http://emias.mos.ru/registry/searchService/v1/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:ns1="http://emias.mos.ru/registry/searchService/v1/types/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tns="http://emias.mos.ru/registry/searchService/v1/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKb2OkkVHvTKvxNbTSgK4Bk6ZwcUukuIMVXBhJtdv19xEFF.zw45KnloveC"/>
      <xs:import namespace="http://emias.mos.ru/registry/core/v1/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKbz.EqXHuJK_wQej6_YNgj9tQFVOGinXA1NZf7WTSWsXP25ZD0"/>
      <xs:import namespace="http://emias.mos.ru/registry/searchService/v1/types/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKbz.EqXHuJK_wQajSsd5U9lJ8PUew5NsVZRFgf6XzXdk34us.MgyOAqf3Co0qmBhYXSHnR"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchOutput">
    <wsdl:part element="ns1:searchResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchInput">
    <wsdl:part element="ns1:searchRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="searchServicePortType">
    <wsdl:operation name="search">
      <wsdl:input message="tns:searchInput"></wsdl:input>
      <wsdl:output message="tns:searchOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="searchServiceBinding" type="tns:searchServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="search">
      <soap:operation soapAction="search"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SearchService">
    <wsdl:port binding="tns:searchServiceBinding" name="SearchServicePort">
      <soap:address location="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKb2OkkVHvTKvxNbTSgK4Bk6ZwcUukuIMVXBhJtdv19xEFF.zw45KnloveC</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns="http://emias.mos.ru/system/v1/faults/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKb2OkkVHvTKvxNbTSgK4Bk6YIOQ4NGtRchBzj0JQagNQS08MA-"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKb2OkkVHvTKvxNbTSgK4Bk6Y8OQvcZPIVbEA4fvnTBYbdn5VIR4MPD7aNCVlvxsWk-"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKb2OkkVHvTKvxNbTSgK4Bk6Y8OQvcZPIVbEA4fvnTBYbdn5VIR4MPD7aNCVlvxsWk-</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/userContext/" xmlns:core="http://emias.mos.ru/system/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKb2OkkVHvTKvxNbTSgK4Bk6YIOQ4NGtRchBzj0JQagNQS08MA-"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Роли пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль пользователя"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>ИД Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKb2OkkVHvTKvxNbTSgK4Bk6YIOQ4NGtRchBzj0JQagNQS08MA-</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKbz.EqXHuJK_wQej6_YNgj9tQFVOGinXA1NZf7WTSWsXP25ZD0</con:url><con:content>&lt;!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->&#13;
&lt;xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/registry/core/v1/" xmlns="http://emias.mos.ru/registry/core/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema">&#13;
  &lt;xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKb2OkkVHvTOupMfH.7NNgttJ6jlK4Ti894wh2b3PSJYWVX"/>&#13;
&lt;/xs:schema></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKb2OkkVHvTOupMfH.7NNgttJ6jlK4Ti894wh2b3PSJYWVX</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKb2OkkVHvTKvxNbTSgK4Bk6YIOQ4NGtRchBzj0JQagNQS08MA-"/>
  <!--references-->
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKbz.EqXHuJK_wQajSsd5U9lJ8PUew5NsVZRFgf6XzXdk34us.MgyOAqf3Co0qmBhYXSHnR</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/registry/searchService/v1/types/" xmlns:core="http://emias.mos.ru/registry/core/v1/" xmlns:tns="http://emias.mos.ru/registry/searchService/v1/types/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://emias.mos.ru/registry/core/v1/" schemaLocation="http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService?xsd=AAAADHAjUCM4P2cuZURELsDIkRE95XKV3HbDsEr9t99yPSdaGh6kK9zIi1WjhvNPtWfG0ndTysyxFHGisEVfA.jNmZRd02A_rVKbz.EqXHuJK_wQej6_YNgj9tQFVOGinXA1NZf7WTSWsXP25ZD0"/>
  <xs:element name="searchRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="systemName" type="xs:string"/>
        <xs:element name="index" type="xs:string"/>
        <xs:element minOccurs="0" name="groupId" type="xs:string"/>
        <xs:element name="request" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="result" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService</con:endpoint></con:endpoints><con:operation id="652b2352-2693-4aff-af97-638215ceba82" isOneWay="false" action="search" name="search" bindingOperationName="search" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="be849c3b-e837-423d-b7e7-3260900adbce" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/registry/searchService/v1/types/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <typ:searchRequest>\r
         <typ:systemName>?</typ:systemName>\r
         <typ:index>?</typ:index>\r
         <!--Optional:-->\r
         <typ:groupId>?</typ:groupId>\r
         <typ:request>?</typ:request>\r
      </typ:searchRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/registry/searchService/v1/searchServicePortType/searchRequest"/></con:call></con:operation></con:interface><con:testSuite id="02f39c66-5756-4f12-8d49-a75f670bb584" name="immunoglobulinInfo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b46dd184-7e30-4495-a08a-179f1f46f581" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="immunoglobulin_published_infoComposition" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="bd9c726c-025a-4d41-9e94-b42b162ee30f"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="b8a6fafa-5d99-4a99-9d0a-0b6bb4ea2aec" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="c861a682-c922-4652-8b4f-3d44dc943593"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без infectionCode и drugName" id="ac44713d-49b7-4587-89bb-bf8533a45a24"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("empty")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без infectionCode и drugName содержит &quot;сведений&quot;" id="ec12d03d-c6e9-48b8-92e5-d5154b37ddf1"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("sved")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без infectionCode и drugName не содержит &quot;сведений&quot;" id="44220d06-c1a6-4b6a-a09a-7a407a89999c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("noSved")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="64b916b0-7ba6-40db-9186-b84f0457991c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
  def date2 =testRunner.testCase.getPropertyValue("date2")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName).replace("\$date2",date2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="c2df9d35-c4e9-4630-81b3-bceb38c855c3"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без infectionCode" id="a1def3d4-19aa-418f-83b9-ac3ba4534f0f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("infectionCode")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без infectionCode и drugName заполнен" id="f0ccef97-342f-4d3b-89e1-398d2599fb1b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("drugName")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="55c1a2fc-6e02-4d8d-bf76-be0a773f9b08"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="9fddbb5f-c2a4-49a6-8f09-f0e893850eca" name="Создан immunoglobulinInfo" disabled="true"><con:configuration><path>$.hits.hits[0]._source.data.immunoglobulinInfo.immunoglobulinInfos</path><content>[{"immunoglobulinDate":"2022-11-02T13:14:36.303+03:00","docId":"ff500ca9-5630-4a12-b2b1-a113749${#TestCase#patientId}","infectionName":"drugName"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9f3eb5b5-84b4-4552-81c0-649abbbc1dc4" name="Contains" disabled="true"><con:configuration><token>"lastFactUpdateDate": "${#TestCase#date2}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="48a55198-ff9d-45e3-ad4b-275d2bd6cfdc" name="Создан immunoglobulinInfo."><con:configuration><token>immunoglobulinInfos</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2768</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoglobulinInfo\immunoglobulin_published_infoComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\immunoglobulinInfo\immunoglobulin_published_infoComposition update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\immunoglobulinInfo\immunoglobulin_published_infoComposition delete.json</con:value></con:property><con:property><con:name>infectionCode</con:name><con:value>\immunoglobulinInfo\immunoglobulin_published_infoComposition create no infectionCode.json</con:value></con:property><con:property><con:name>empty</con:name><con:value>\immunoglobulinInfo\immunoglobulin_published_infoComposition create no infectionName no drugName.json</con:value></con:property><con:property><con:name>sved</con:name><con:value>\immunoglobulinInfo\immunoglobulin_published_infoComposition create drugName - сведений.json</con:value></con:property><con:property><con:name>drugName</con:name><con:value>\immunoglobulinInfo\immunoglobulin_published_infoComposition create infectionName - drugName.json</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-11-24T00:00:00</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-11-24</con:value></con:property><con:property><con:name>time</con:name><con:value>00:00:00</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Грипп</con:value></con:property><con:property><con:name>noSved</con:name><con:value>\immunoglobulinInfo\immunoglobulin_published_infoComposition create drugName - не сведений.json</con:value></con:property></con:properties></con:testCase><con:testCase id="313d84a5-e572-4d06-bf5e-2ec01d9935f0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="t_newborn_info_questionary_form_948" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="e733c965-59e4-450e-b7e1-d280897f2fde"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"12361"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Find patientId" id="e540815d-3518-44b1-aae9-abcc78866880"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="25671823-8adc-4866-a669-3163ea06db84"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
String file =scripts.returnFileAsText("create")
def patientId =testRunner.testCase.getPropertyValue("patientId")
def infectionName =testRunner.testCase.getPropertyValue("infectionName")

String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Ocheck != &quot;иммуноглобулины&quot;" id="fbc49976-902e-426a-91fa-8223117e1a50"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("ocheck")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="8a2ff390-e636-4486-8b90-28bc7d424dc1"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="2f98e370-76b3-493e-acc9-f46ea976ca71"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без infectionCode" id="36c2be3d-3717-4826-8768-3ea5cd814a77"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("infectionCode")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>update</con:name><con:value>\immunoglobulinInfo\t_newborn_info_questionary_form_948Composition update.json</con:value></con:property><con:property><con:name>patientId</con:name><con:value>981651684</con:value></con:property><con:property><con:name>ocheck</con:name><con:value>\immunoglobulinInfo\t_newborn_info_questionary_form_948Composition Ocheck.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>гепатит B</con:value></con:property><con:property><con:name>infectionCode</con:name><con:value>\immunoglobulinInfo\t_newborn_info_questionary_form_948Composition no infectionCode.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\immunoglobulinInfo\t_newborn_info_questionary_form_948Composition delete.json</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoglobulinInfo\t_newborn_info_questionary_form_948Composition create.json</con:value></con:property></con:properties></con:testCase><con:testCase id="d3d241f1-b259-4ddd-8466-18540d980735" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="t_prenatal_record_visiting_nurse" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="0dbf1b49-9cd3-44f4-b09a-8920228f5b93"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"941"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Find patientId" id="527344bb-c605-4bdf-b5ef-a8390e9612e7"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="d6932f4a-9426-4923-9e6a-a471d18a4484"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Ocheck != &quot;иммуноглобулины&quot;" id="4b47c047-ea69-4c8e-af1e-96bc94325005"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("ocheck")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="54ec754a-c2cb-45cd-926b-968cc2054be4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="b6a342d1-b2e8-48c7-9b17-ad62fe8d4e6b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без infectionCode" id="133c1f3f-81bc-41d8-9094-3332317f6bce"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("infectionCode")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>98465163</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoglobulinInfo\t_prenatal_record_visiting_nurseComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\immunoglobulinInfo\t_prenatal_record_visiting_nurseComposition update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\immunoglobulinInfo\t_prenatal_record_visiting_nurseComposition delete.json</con:value></con:property><con:property><con:name>ocheck</con:name><con:value>\immunoglobulinInfo\t_prenatal_record_visiting_nurseComposition Ocheck.json</con:value></con:property><con:property><con:name>infectionCode</con:name><con:value>\immunoglobulinInfo\t_prenatal_record_visiting_nurseComposition no infectionCode.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>гепатит B</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic1</con:name><con:value>immunoglobulin_published_infoComposition</con:value></con:property><con:property><con:name>topic2</con:name><con:value>t_newborn_info_questionary_form_948Composition</con:value></con:property><con:property><con:name>topic3</con:name><con:value>t_prenatal_record_visiting_nurseComposition</con:value></con:property></con:properties></con:testSuite><con:testSuite id="8a8680b6-ec29-4ee7-a07f-6297e11d4e96" name="vaccinationConsentInfo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b50f621f-d904-492b-a0fe-4b166ff18ee1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationConsentInfoInformedConsentTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="59bc5169-2291-4354-9305-436e8bf74592"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="b221b0c6-b0dd-4f8c-bc8f-c93f19bbd758" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create частичный" id="11a906ef-20a2-435b-a455-133831029345"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="5cfc4cb6-2574-4346-ab32-4e231692a855"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update полный" id="b46b076c-f388-4155-80e5-2c2830f0a9e5"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="3d4a3dbf-0349-4b1e-80ac-edf7f1622199"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2148</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationConsentInfo\t_vaccination_informed_consent create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationConsentInfo\t_vaccination_informed_consent update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationConsentInfo\t_vaccination_informed_consent delete.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Вирусный гепатит В</con:value></con:property></con:properties></con:testCase><con:testCase id="02e9ee97-cbb7-4bd4-a431-ead19766da95" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationConsentInfoNewbornInfoQuestionaryTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="08848ac7-6a19-4ee1-bc0b-369ae2c61340"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="5b6a6eb8-6cd1-49bd-8a3c-f4842bde5256" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create Полный" id="f5dc6a43-5fdb-4de5-b1f0-355cafc400ed"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="6a3b8cc3-8d63-4180-925e-66110eb11f2e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update частичный" id="11efc27f-56f2-4f22-a693-5a4d57ef571c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="d98e981d-5e02-46db-b861-3398574f1b22"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2205</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationConsentInfo\t_newborn_info_questionary_form_948 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationConsentInfo\t_newborn_info_questionary_form_948 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationConsentInfo\t_newborn_info_questionary_form_948 delete.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Вирусный гепатит В</con:value></con:property></con:properties></con:testCase><con:testCase id="60fbe40b-80aa-4244-b05e-5726fea5f5cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationConsentInfoPrenatalRecordTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="994e507c-ce99-41d7-857c-a67eb9499db6"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="e4fece7e-4aae-4654-96ad-df3cc01f5d34" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create отказ и отвод" id="75dc0e20-1f70-458e-9b64-9a1d44c0bd7e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update отказ" id="8b2cbe71-d481-4096-968a-ace5454dae86"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="c97f18ec-2b93-4b5d-9820-ef4418a57ce0"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="eb79ed18-d316-4104-a54b-878b5f3a12a5"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2207</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationConsentInfo\t_prenatal_record create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationConsentInfo\t_prenatal_record update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationConsentInfo\t_prenatal_record delete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="22ba2118-1303-4abd-8c06-2ca01a52b16e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationConsentInfoPrenatalRecordVisitingNurseTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="363ae8f1-fabb-40da-b999-49887190d79a"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="4b12c7bb-e7b6-4126-a3c6-3f570900f3f8" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create частичный" id="7c1b41aa-9aa6-4bb2-ac8b-a4c2295fc9e6"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)
</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="9a348976-901e-4470-a2e3-acd0477579e3"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update полный" id="22fd686b-7605-4391-ab58-0bc469c169e7"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="fb5f6e7d-1a1d-4d31-b524-e2b013f079a3"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2217</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationConsentInfo\t_prenatal_record_visiting_nurse create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationConsentInfo\t_prenatal_record_visiting_nurse update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationConsentInfo\t_prenatal_record_visiting_nurse delete.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Вирусный гепатит В</con:value></con:property></con:properties></con:testCase><con:testCase id="da77a2e6-05bc-4c8c-acdc-212fd2837c7b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationConsentInfoVaccinationCardTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="0a748b62-523d-418f-9930-c1f5bdcbe35f"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="155c4f6e-afb9-4ef2-aac2-72cefacee3c1" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create частичный" id="b44aded0-f5d1-43d8-9527-768df89a2aa6"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="089943fe-fe12-4a5e-9fef-126e2ee7bbae"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update полный" id="e5868d83-eb46-4ed6-9510-8d5423882542"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="5aa94689-cdf5-4c2b-a324-f4e784b31e71"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2196</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationConsentInfo\vaccination_card create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationConsentInfo\vaccination_card update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationConsentInfo\vaccination_card delete.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Вирусный гепатит В</con:value></con:property></con:properties></con:testCase><con:testCase id="5665c3c3-e835-4868-b90e-6356cbe01827" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationConsentInfoUpdate" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="70ed0ca4-34e7-4864-bd74-54f41c60c8ce"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"1306"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create частичный" id="02820ab1-5d47-4d94-acf9-ffec492ed7a1"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update полный" id="b6b448a7-bea0-43eb-b891-c2cd338f427a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="vaccinationFact" id="467f17f8-9647-4ba1-b49c-e71ebd78a706"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("create2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 def date =testRunner.testCase.getPropertyValue("date")
 def vaccinationFrequency =testRunner.testCase.getPropertyValue("vaccinationFrequency")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName).replace("\$date",date).replace("\$vaccinationFrequency",vaccinationFrequency)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1306</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationConsentInfo\t_vaccination_informed_consent create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationConsentInfo\t_vaccination_informed_consent update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationConsentInfo\t_vaccination_informed_consent delete.json</con:value></con:property><con:property><con:name>create2</con:name><con:value>\vaccinationInfoUpdate\t_COVID_vaccination.v1.3 create.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Ветряная оспа V1</con:value></con:property><con:property><con:name>vaccinationFrequency</con:name><con:value>R2</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-02-04</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-05-31</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic1</con:name><con:value>t_vaccination_informed_consentComposition</con:value></con:property><con:property><con:name>topic2</con:name><con:value>t_newborn_info_questionary_form_948Composition</con:value></con:property><con:property><con:name>topic3</con:name><con:value>t_prenatal_recordComposition</con:value></con:property><con:property><con:name>topic4</con:name><con:value>t_prenatal_record_visiting_nurseComposition</con:value></con:property><con:property><con:name>topic5</con:name><con:value>vaccination_cardComposition</con:value></con:property><con:property><con:name>topic6</con:name><con:value>t_COVID_vaccinationComposition</con:value></con:property></con:properties></con:testSuite><con:testSuite id="5cd890e2-cb3c-430f-b2c9-3587a3782433" name="dispensaryObservation"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="08a73027-fb2c-4d56-8124-3e67b0fb3a23" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#140113 Формирование сведений о диспансерном наблюдении пациента" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="ef7b1605-7513-4378-9ada-644d7ed2d44a"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="4d36023a-52a2-4782-a552-006cb2d5089e" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="c79b9ff6-831f-424d-8885-2c048e64d803"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование",
   "groupSpecializationCode": "35",
   "groupSpecializationName": "464",
   "doctorFIO": "gehbr",
   "employeeId": "45354",
   "noDoctor": "true",
   "specialityCode": "6346",
   "specialityName": "643645",
   "specializationCode": "6547865",
   "specializationName": "657",
   "diagnosisCode": "A16.5",
   "diagnosisName": "A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении",
   "diagnosisDate": "2021-10-16",
   "repeat": "7868",
   "startDate": "2021-10-16",
   "timeCommitted": "2021-10-20T15:00:58+03:00",
   "dnDoctorJobExecutionId": "3454"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="e4518f08-5def-4087-bf3f-0ca5f2092e9c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="ddce6e9b-2323-4ad9-8ba8-32ba7822da1b"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано dispensaryObservations"><con:configuration><path>$.hits.hits[0]._source.data.dispensaryObservation.dispensaryObservations</path><content>[{"doctor":{"speciality":{"name":"643645"},"fio":"gehbr"},"timeCommitted":"2021-10-20T15:00:58+03:00","diagnosis":{"code":"A16.5","name":"A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении"},"active":true,"specialization":{"code":"35","name":"464"},"startDate":"2021-10-16","groupCode":"DNC0411"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="6c10c642-d903-4760-9f3a-99c519fc9ffe"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "close",
   "basisTaskType": "HOSPITAL_DISCHARGE",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование2",
   "groupSpecializationCode": "352",
   "groupSpecializationName": "4642",
   "doctorFIO": "gehbr2",
   "employeeId": "453542",
   "noDoctor": "false",
   "specialityCode": "63462",
   "specialityName": "6436452",
   "specializationCode": "65478652",
   "specializationName": "657",
   "diagnosisCode": "A16.52",
   "diagnosisName": "A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении2",
   "diagnosisDate": "2021-10-17",
   "repeat": "78682",
   "startDate": "2021-10-17",
   "timeCommitted": "2021-10-20T15:00:57+03:00",
   "dnDoctorJobExecutionId": "34542"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="bb8889ae-3dda-433f-b56f-0ff3791baba7"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 2" id="bbfab49f-eb7f-4c0a-9cc8-c7adcff04fbc"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 2" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Не изменилось dispensaryObservations"><con:configuration><path>$.hits.hits[0]._source.data.dispensaryObservation.dispensaryObservations</path><content>[{"doctor":{"speciality":{"name":"643645"},"fio":"gehbr"},"timeCommitted":"2021-10-20T15:00:58+03:00","diagnosis":{"code":"A16.5","name":"A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении"},"active":true,"specialization":{"code":"35","name":"464"},"startDate":"2021-10-16","groupCode":"DNC0411"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 3" id="aa7492ae-a0ab-4100-b3e4-5a53b7d0add1"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "change",
   "basisTaskType": "PREVENTIVE_EXAMINATION_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование2",
   "groupSpecializationCode": "352",
   "groupSpecializationName": "4642",
   "doctorFIO": "gehbr2",
   "employeeId": "453542",
   "noDoctor": "false",
   "specialityCode": "63462",
   "specialityName": "6436452",
   "specializationCode": "65478652",
   "specializationName": "657",
   "diagnosisCode": "A16.52",
   "diagnosisName": "A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении3",
   "diagnosisDate": "2021-10-17",
   "repeat": "78682",
   "startDate": "2021-10-17",
   "timeCommitted": "2021-10-20T15:00:59+03:00",
   "dnDoctorJobExecutionId": "34542"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="77ecd1a5-8d63-418f-82b6-1e73404f0dbd"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 3" id="eb1c045a-fb1f-46e2-8678-14a204b9ddfb"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 3" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Обновилось dispensaryObservations"><con:configuration><path>$.hits.hits[0]._source.data.dispensaryObservation.dispensaryObservations</path><content>[{"doctor":{"speciality":{"name":"6436452"},"fio":"gehbr2"},"timeCommitted":"2021-10-20T15:00:59+03:00","diagnosis":{"code":"A16.52","name":"A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении3"},"active":true,"specialization":{"code":"352","name":"4642"},"startDate":"2021-10-17","groupCode":"DNC0411"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1135</con:value></con:property></con:properties></con:testCase><con:testCase id="29f48e6f-b2ca-4a0b-a1e4-18ef33ce03da" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#140114" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="a6ff3b11-4f86-4ab5-bb7d-36f2c579e4b5"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="50b56977-ac1d-400b-bc2e-3f7ff3250a83" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="935fc990-a78c-4994-b2b1-5c4641320222"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование",
   "groupSpecializationCode": "35",
   "groupSpecializationName": "464",
   "doctorFIO": "gehbr",
   "employeeId": "45354",
   "noDoctor": "true",
   "specialityCode": "6346",
   "specialityName": "643645",
   "specializationCode": "6547865",
   "specializationName": "657",
   "diagnosisCode": "A16.5",
   "diagnosisName": "A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении",
   "diagnosisDate": "2021-10-16",
   "repeat": "7868",
   "startDate": "2021-10-16",
   "timeCommitted": "2021-10-20T15:00:58+03:00",
   "dnDoctorJobExecutionId": "3454"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="71a4064c-b4b0-4b78-87cc-187ffbca1801"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="083a9556-8223-453e-b16c-9e2a8a2c5afc"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано dispensaryObservations"><con:configuration><path>$.hits.hits[0]._source.data.dispensaryObservation.dispensaryObservations</path><content>[{"doctor":{"speciality":{"name":"643645"},"fio":"gehbr"},"timeCommitted":"2021-10-20T15:00:58+03:00","diagnosis":{"code":"A16.5","name":"A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении"},"active":true,"specialization":{"code":"35","name":"464"},"startDate":"2021-10-16","groupCode":"DNC0411"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="b84353cf-625f-4975-8686-13663da2dc2b"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "close",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование",
   "groupSpecializationCode": "35",
   "groupSpecializationName": "464",
   "doctorFIO": "gehbr",
   "employeeId": "45354",
   "noDoctor": "true",
   "specialityCode": "6346",
   "specialityName": "643645",
   "specializationCode": "6547865",
   "specializationName": "657",
   "diagnosisCode": "A16.5",
   "diagnosisName": "A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении",
   "diagnosisDate": "2021-10-16",
   "repeat": "7868",
   "startDate": "2021-10-16",
   "endDate": "2021-10-18",
   "cancelReasonCode": "4",
   "cancelReasonName": "проверка",
   "timeCommitted": "2021-10-20T15:00:59+03:00",
   "dnDoctorJobExecutionId": "3454"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="55eeffb0-7005-428c-8ae4-009e51a1e651"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 2" id="8f11479d-4caf-4781-9c91-0f160878eafc"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 2" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Обновилось dispensaryObservations"><con:configuration><path>$.hits.hits[0]._source.data.dispensaryObservation.dispensaryObservations</path><content>[{"doctor":{"speciality":{"name":"643645"},"fio":"gehbr"},"endDate":"2021-10-18","timeCommitted":"2021-10-20T15:00:58+03:00","diagnosis":{"code":"A16.5","name":"A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении"},"active":false,"specialization":{"code":"35","name":"464"},"startDate":"2021-10-16","groupCode":"DNC0411"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1138</con:value></con:property></con:properties></con:testCase><con:testCase id="a0f35e5d-da80-4770-b5af-2de63e77d604" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#140115" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="a43e17d1-4ff3-48f9-b088-cba6e518639e"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="264e76f4-0539-4dc7-9679-63ee6d540a47" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="7646b156-a61c-4d0b-9289-0ca698c9ec9c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование",
   "groupSpecializationCode": "35",
   "groupSpecializationName": "464",
   "doctorFIO": "gehbr",
   "employeeId": "45354",
   "noDoctor": "true",
   "specialityCode": "6346",
   "specialityName": "643645",
   "specializationCode": "6547865",
   "specializationName": "657",
   "diagnosisCode": "A16.5",
   "diagnosisName": "A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении",
   "diagnosisDate": "2021-10-16",
   "repeat": "7868",
   "startDate": "2021-10-16",
   "timeCommitted": "2021-10-20T15:00:58+03:00",
   "dnDoctorJobExecutionId": "3454"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="d3b67d2a-1541-48c3-8d1a-0aa8494d93d3"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="558cfa9f-75a7-487f-802e-5f9f42216f46"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано dispensaryObservations"><con:configuration><path>$.hits.hits[0]._source.data.dispensaryObservation.dispensaryObservations</path><content>[{"doctor":{"speciality":{"name":"643645"},"fio":"gehbr"},"timeCommitted":"2021-10-20T15:00:58+03:00","diagnosis":{"code":"A16.5","name":"A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении"},"active":true,"specialization":{"code":"35","name":"464"},"startDate":"2021-10-16","groupCode":"DNC0411"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="7743651c-612e-4844-832c-e466ff20bf32"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "cancel",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование",
   "groupSpecializationCode": "35",
   "groupSpecializationName": "464",
   "doctorFIO": "gehbr",
   "employeeId": "45354",
   "noDoctor": "true",
   "specialityCode": "6346",
   "specialityName": "643645",
   "specializationCode": "6547865",
   "specializationName": "657",
   "diagnosisCode": "A16.5",
   "diagnosisName": "A16.5 Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении",
   "diagnosisDate": "2021-10-16",
   "repeat": "7868",
   "startDate": "2021-10-16",
   "endDate": "2021-10-18",
   "cancelReasonCode": "4",
   "cancelReasonName": "проверка",
   "timeCommitted": "2021-10-20T15:00:59+03:00",
   "dnDoctorJobExecutionId": "3454"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="7f41aaf9-8b0f-4211-9046-5d26e6fdf58c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 2" id="1a6fa29f-548d-4203-a495-e9c896b92065"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 2" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="90262175-7d33-4f3f-8803-be8d191b086b" name="Удалено dispensaryObservations"><con:configuration><token>dispensaryObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1187</con:value></con:property></con:properties></con:testCase><con:testCase id="5a92e090-328a-4842-885e-aa47ef4b3bc8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Исправление сведений о диспансерном наблюдении" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="da7abc62-b8c6-4df2-a1ce-668cd92edfa9"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"15121"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="New" id="02b3d04f-9b43-40b1-ae34-c0880e3e5344"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование",
   "groupSpecializationCode": "35",
   "groupSpecializationName": "464",
   "doctorFIO": "gehbr",
   "employeeId": "45354",
   "noDoctor": "brbr",
   "specialityCode": "6346",
   "specialityName": "643645",
   "specializationCode": "6547865",
   "specializationName": "657",
   "diagnosisCode": "C47",
   "diagnosisName": "7658",
   "diagnosisDate": "2021-10-16",
   "repeat": "7868",
   "startDate": "2021-10-16",
   "timeCommitted": "2021-10-20T15:00:58+03:00",
   "dnDoctorJobExecutionId": "3454"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Fix только close" id="61e92bfa-93ba-41b9-a372-8ce52f2855cc"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "fix",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование",
   "groupSpecializationCode": "35",
   "groupSpecializationName": "464",
   "doctorFIO": "gehbr",
   "employeeId": "45354",
   "noDoctor": "brbr",
   "specialityCode": "6346",
   "specialityName": "643645",
   "specializationCode": "6547865",
   "specializationName": "657",
   "diagnosisCode": "C47",
   "diagnosisName": "7658",
   "diagnosisDate": "2021-10-16",
   "repeat": "7868",
   "active": "false",
   "startDate": "2021-10-16",
   "endDate": "2021-12-16",
   "cancelReasonCode": "4",
   "cancelReasonName": "Пациент достиг 18 лет",
   "timeCommitted": "2021-10-21T15:00:58+03:00",
   "dnDoctorJobExecutionId": "3454"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Fix все поля" id="534aaf03-64b4-4a64-835f-951f19c4c870"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "fix",
   "basisTaskType": "HOSPITAL_DISCHARGE_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование2",
   "groupSpecializationCode": "352",
   "groupSpecializationName": "4642",
   "doctorFIO": "gehbr2",
   "employeeId": "453542",
   "noDoctor": "true",
   "specialityCode": "63462",
   "specialityName": "6436452",
   "specializationCode": "65478652",
   "specializationName": "6572",
   "diagnosisCode": "C42",
   "diagnosisName": "76582",
   "diagnosisDate": "2021-10-16",
   "repeat": "true",
   "active": "false",
   "startDate": "2021-10-15",
   "endDate": "2021-12-17",
   "cancelReasonCode": "3",
   "cancelReasonName": "Пациент достиг 18 лет2",
   "timeCommitted": "2021-10-22T15:00:58+03:00",
   "dnDoctorJobExecutionId": "34542"
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>15121</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="1f2436e3-6a88-498b-8030-c0edd6b87036" name="patientInfo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="df4fbb3a-10cc-4cfa-912b-b8b821522321" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование общих данных о пациенте из топика" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="f0d8c113-a8c8-425a-a5a3-54f5d3391a77"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="0331ed2d-64c5-40b5-8b44-a3e211976a4c" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="death false" id="2c923a64-dd30-4389-9346-75d67b4d2639"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPersonalData","""{
   "id": 1928138,
   "operationDate": "2022-02-21T10:48:13.759+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "V3147770",
   "patientType": "I",
   "systemCode": "sch",
   "patientRecStatus": "Y",
   "entityName": "personalData",
   "entityData": [
      {
         "attributes": [
            {
               "name": "lastName",
               "type": "string",
               "value": {
                  "value": "Добровольская"
               }
            },
            {
               "name": "firstName",
               "type": "string",
               "value": {
                  "value": "Есения"
               }
            },
            {
               "name": "middleName",
               "type": "string",
               "value": {
                  "value": "Артёмовна"
               }
            },
            {
               "name": "birthDate",
               "type": "date",
               "value": {
                  "value": "2022-05-29"
               }
            },
            {
               "name": "birthPlace",
               "type": "string",
               "value": {
                  "value": "v_birth_place"
               }
            },
            {
               "name": "gender",
               "type": "dictionary",
               "value": {
                  "code": "2"
               }
            },
            {
               "name": "socialStatus",
               "type": "dictionary",
               "value": {
                  "id": 128650422,
                  "code": "3",
                  "value": "Работающий"
               }
            },
            {
               "name": "armyCode",
               "type": "string",
               "value": {
                  "value": "q"
               }
            },
            {
               "name": "isDependent",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "educationState",
               "type": "dictionary",
               "value": {
                  "id": 156496744,
                  "code": "6",
                  "value": "высшее"
               }
            },
            {
               "name": "citizenship",
               "type": "dictionary",
               "value": {
                  "id": 125676888,
                  "code": "178",
                  "value": "Республика Конго"
               }
            },
            {
               "name": "ethnicGroup",
               "type": "dictionary",
               "value": {
                  "id": 128650302,
                  "code": "11",
                  "value": "Грузины"
               }
            },
            {
               "name": "resident",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "Город"
               }
            },
            {
               "name": "disability",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "нет"
               }
            },
            {
               "name": "comment",
               "type": "string",
               "value": {
                  "value": "v_additional_info"
               }
            },
            {
               "name": "erzSyncDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "personIdErzl",
               "type": "guid",
               "value": {
                  "value": "2adef495-b318-0146-e053-c0a8c27103b8"
               }
            },
            {
               "name": "nonresIdErzl",
               "type": "integer",
               "value": {
                  "value": "1323"
               }
            },
            {
               "name": "nonresDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "erzStatus",
               "type": "string",
               "value": {
                  "value": "Y"
               }
            },
            {
               "name": "deathDateTime",
               "type": "dateTime",
               "value": {
                  "value": null
               }
            },
            {
               "name": "deathDataSource",
               "type": "string",
               "value": {
                  "value": "21.02.22"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="death update дата меньше" id="27e5f6af-e9c4-484d-9eab-1269fb259be6"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPersonalData","""{
   "id": 1928138,
   "operationDate": "2022-02-19T10:48:13.759+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "V3147770",
   "patientType": "I",
   "systemCode": "sch",
   "patientRecStatus": "Y",
   "entityName": "personalData",
   "entityData": [
      {
         "attributes": [
            {
               "name": "lastName",
               "type": "string",
               "value": {
                  "value": "Фамилия2"
               }
            },
            {
               "name": "firstName",
               "type": "string",
               "value": {
                  "value": "Имя2"
               }
            },
            {
               "name": "middleName",
               "type": "string",
               "value": {
                  "value": "Отчество2"
               }
            },
            {
               "name": "birthDate",
               "type": "date",
               "value": {
                  "value": "1996-01-16"
               }
            },
            {
               "name": "birthPlace",
               "type": "string",
               "value": {
                  "value": "v_birth_place"
               }
            },
            {
               "name": "gender",
               "type": "dictionary",
               "value": {
                  "code": "1"
               }
            },
            {
               "name": "socialStatus",
               "type": "dictionary",
               "value": {
                  "id": 128650422,
                  "code": "3",
                  "value": "Работающий"
               }
            },
            {
               "name": "armyCode",
               "type": "string",
               "value": {
                  "value": "q"
               }
            },
            {
               "name": "isDependent",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "educationState",
               "type": "dictionary",
               "value": {
                  "id": 156496744,
                  "code": "6",
                  "value": "высшее"
               }
            },
            {
               "name": "citizenship",
               "type": "dictionary",
               "value": {
                  "id": 125676888,
                  "code": "178",
                  "value": "Республика Конго"
               }
            },
            {
               "name": "ethnicGroup",
               "type": "dictionary",
               "value": {
                  "id": 128650302,
                  "code": "11",
                  "value": "Грузины"
               }
            },
            {
               "name": "resident",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "Город"
               }
            },
            {
               "name": "disability",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "нет"
               }
            },
            {
               "name": "comment",
               "type": "string",
               "value": {
                  "value": "v_additional_info"
               }
            },
            {
               "name": "erzSyncDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "personIdErzl",
               "type": "guid",
               "value": {
                  "value": "2adef495-b318-0146-e053-c0a8c27103b8"
               }
            },
            {
               "name": "nonresIdErzl",
               "type": "integer",
               "value": {
                  "value": "1323"
               }
            },
            {
               "name": "nonresDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "erzStatus",
               "type": "string",
               "value": {
                  "value": "Y"
               }
            },
            {
               "name": "deathDateTime",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "deathDataSource",
               "type": "string",
               "value": {
                  "value": "21.02.22"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="death update" id="4e555e3d-91d3-4062-a682-ce54e730a205"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPersonalData","""{
   "id": 1928138,
   "operationDate": "2022-02-22T10:48:13.759+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "V3147770",
   "patientType": "I",
   "systemCode": "sch",
   "patientRecStatus": "Y",
   "entityName": "personalData",
   "entityData": [
      {
         "attributes": [
            {
               "name": "lastName",
               "type": "string",
               "value": {
                  "value": "Фамилия2"
               }
            },
            {
               "name": "firstName",
               "type": "string",
               "value": {
                  "value": "Имя2"
               }
            },
            {
               "name": "middleName",
               "type": "string",
               "value": {
                  "value": "Отчество2"
               }
            },
            {
               "name": "birthDate",
               "type": "date",
               "value": {
                  "value": "1996-01-16"
               }
            },
            {
               "name": "birthPlace",
               "type": "string",
               "value": {
                  "value": "v_birth_place"
               }
            },
            {
               "name": "gender",
               "type": "dictionary",
               "value": {
                  "code": "1"
               }
            },
            {
               "name": "socialStatus",
               "type": "dictionary",
               "value": {
                  "id": 128650422,
                  "code": "3",
                  "value": "Работающий"
               }
            },
            {
               "name": "armyCode",
               "type": "string",
               "value": {
                  "value": "q"
               }
            },
            {
               "name": "isDependent",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "educationState",
               "type": "dictionary",
               "value": {
                  "id": 156496744,
                  "code": "6",
                  "value": "высшее"
               }
            },
            {
               "name": "citizenship",
               "type": "dictionary",
               "value": {
                  "id": 125676888,
                  "code": "178",
                  "value": "Республика Конго"
               }
            },
            {
               "name": "ethnicGroup",
               "type": "dictionary",
               "value": {
                  "id": 128650302,
                  "code": "11",
                  "value": "Грузины"
               }
            },
            {
               "name": "resident",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "Город"
               }
            },
            {
               "name": "disability",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "нет"
               }
            },
            {
               "name": "comment",
               "type": "string",
               "value": {
                  "value": "v_additional_info"
               }
            },
            {
               "name": "erzSyncDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "personIdErzl",
               "type": "guid",
               "value": {
                  "value": "2adef495-b318-0146-e053-c0a8c27103b8"
               }
            },
            {
               "name": "nonresIdErzl",
               "type": "integer",
               "value": {
                  "value": "1323"
               }
            },
            {
               "name": "nonresDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "erzStatus",
               "type": "string",
               "value": {
                  "value": "Y"
               }
            },
            {
               "name": "deathDateTime",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "deathDataSource",
               "type": "string",
               "value": {
                  "value": "21.02.22"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="e060beee-f67d-42cf-98c6-aa60f2f5a38e"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2818</con:value></con:property></con:properties></con:testCase><con:testCase id="06a25725-a601-4520-9fe6-3ef9ef73300e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#140105 Формирование данных о полисе пациента из топика" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="19fac9d7-fd71-4bde-ac1a-1172269f80ab"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="6640869a-b0f0-4a05-9b7e-de6421869b59" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="b4a99a35-d385-4bed-a054-1b9de19b5257"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": """+patientId+""",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": 7700009076266666"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "АКЦИОНЕРНОЕ ОБЩЕСТВО СОГАЗ-МЕД"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-10-15T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="b1d94c3c-39f1-42bf-88f4-cb19b127737f"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="86f74c2c-26d6-433b-a9b2-a8a6ffac11b6"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано policyNumber"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyNumber</path><content>7788289748000355</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано policyUpdateDate"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyUpdateDate</path><content>2021-10-15T10:54:54.926154+03:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 2" id="72e8dd86-a62b-4a29-a5cc-8f50ad945004"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": """+patientId+""",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "7798979733000345"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "АКЦИОНЕРНОЕ ОБЩЕСТВО СОГАЗ-МЕД"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-10-15T10:54:53.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="aa3a64ac-1741-4afe-ae90-4f1df58b0616"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 2" id="4fcf9fe1-caa8-433b-a689-ea3b5b88f52f"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 2" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Не изменилось policyNumber"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyNumber</path><content>7788289748000355</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Не изменилось policyUpdateDate"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyUpdateDate</path><content>2021-10-15T10:54:54.926154+03:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 3" id="2803efe7-40f5-48f3-b1a7-c18b77eae44d"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": """+patientId+""",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "7798979733000347"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "АКЦИОНЕРНОЕ ОБЩЕСТВО СОГАЗ-МЕД"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-10-16T10:54:55.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="3da1c798-335b-4032-86bb-db0d790b5c4d"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 3" id="72b8c5dd-c570-4536-888f-ff904da8e6d4"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 3" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Обновлено policyNumber"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyNumber</path><content>7798979733000347</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Обновлено policyUpdateDate"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyUpdateDate</path><content>2021-10-15T10:54:55.926154+03:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>30000012724529</con:value></con:property></con:properties></con:testCase><con:testCase id="eda68a8a-9867-4583-9801-386d5c9623e4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#189174" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="cbe4303f-fe71-44e0-8ee0-a9d7d29851d1"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="7f758d40-b23b-47c7-992f-1d6a7fffad22" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="2b40805b-c979-4507-b2f2-35bb6edb1dcc"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": """+patientId+""",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "7798979733000349"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "АКЦИОНЕРНОЕ ОБЩЕСТВО СОГАЗ-МЕД"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-10-15T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ],
    "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "779897973300050"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "АКЦИОНЕРНОЕ ОБЩЕСТВО СОГАЗ-МЕД"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-10-15T10:54:55.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="7e20a45e-2fce-4c1f-989e-eebc03340ddb"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="69d9f1ad-9e38-41ab-b700-9db055dd979f"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано policyNumber"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyNumber</path><content>779897973300050</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано policyUpdateDate"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyUpdateDate</path><content>2021-10-15T10:54:55.926154+03:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1193</con:value></con:property></con:properties></con:testCase><con:testCase id="6610c9c4-30c8-45be-bf06-b5fd7b40e527" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#140106" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="5cf833f9-164f-4dc7-a4d8-ac0005587534"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="c3d4e642-15e0-4a68-9eab-28410826802b" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="bc9097e3-6c71-4c4d-bc02-3e945aefaf91"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": """+patientId+""",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "documents",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "7798979733000349"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "АКЦИОНЕРНОЕ ОБЩЕСТВО СОГАЗ-МЕД"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-10-15T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ],
    "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "779897973300050"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "АКЦИОНЕРНОЕ ОБЩЕСТВО СОГАЗ-МЕД"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-10-15T10:54:55.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="ad7c634b-c7ef-4e3f-a5a2-d4120fc61427"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="f3ecb9fd-a891-40a4-9e27-c3d65e66b728"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="675342f7-a9ba-4968-a7f9-1c4daeee75bd" name="Пациент не создан"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1198</con:value></con:property></con:properties></con:testCase><con:testCase id="73010a37-bb32-44c7-8aa1-20d30c576614" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#140107" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="79377c01-7dea-414f-8652-c1d85541a23b"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="9fb29b03-27e5-4ac2-8fb9-5c92deb1a7b9" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create Data" id="9258549c-95fb-4419-a9bc-5ac3a8af4b6c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": """+patientId+""",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "7798979733000349"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "АКЦИОНЕРНОЕ ОБЩЕСТВО СОГАЗ-МЕД"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-10-15T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="874338b8-f8c7-4468-bede-0ec94367703e"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Data" id="bc04faa4-6fd2-4d08-a40b-68788feb7b08"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Data" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано policyNumber"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyNumber</path><content>7798979733000349</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано policyUpdateDate"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyUpdateDate</path><content>2021-10-15T10:54:54.926154+03:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Send Message Step 1" id="52196e8a-5ec3-4c75-bbb6-ad61a104ce1c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-10-15T10:54:55.926154+03:00",
  "emiasId": """+patientId+""",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [ ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="17c34a83-214a-4060-817e-791ed0ef8094"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="43ec390b-c293-40c8-aa4f-9b7d900937ec"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Не изменилось policyNumber"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyNumber</path><content>7798979733000349</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Обновилось policyUpdateDate"><con:configuration><path>$.hits.hits[0]._source.data.patientInfo.policyUpdateDate</path><content>2021-10-15T10:54:55.926154+03:00</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1201</con:value></con:property></con:properties></con:testCase><con:testCase id="8855f0a7-040f-45be-866a-85c0fc452321" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование данных о контактах пациента из топика" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="c6bcb977-5560-4047-b87b-22a31228877b"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"1255"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Main" id="c9fd7dfc-671d-4f37-b735-2abbfb37cb75"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientContacts","""{
   "id": 5146566,
   "operationDate": "2022-02-08T19:00:51.092+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "20309545",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "contacts",
   "entityData": [
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "27017111"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866535"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "M",
                  "value": "Мобильный телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-09T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737693"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866535"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "T",
                  "value": "Домашний телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-08T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737688"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "araik.bagdasaryan@mail.ru"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "E",
                  "value": "Электронная почта"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-05T18:44:27.324439+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Дата меньше" id="81c43f4a-a1a5-4c4c-999f-19b6f263c6cb"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientContacts","""{
   "id": 5146566,
   "operationDate": "2022-02-08T19:00:51.092+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "20309545",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "contacts",
   "entityData": [
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "27017111"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866534"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "M",
                  "value": "Мобильный телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-07T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737693"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866535"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "T",
                  "value": "Домашний телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-08T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737688"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "araik.bagdasaryan@mail.ru"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "E",
                  "value": "Электронная почта"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-05T18:44:27.324439+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Дата больше" id="b38fed9a-f1c4-4c00-bac3-f39bea7ce061"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientContacts","""{
   "id": 5146566,
   "operationDate": "2022-02-08T19:00:51.092+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "20309545",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "contacts",
   "entityData": [
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "27017111"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866536"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "M",
                  "value": "Мобильный телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-10T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737693"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866535"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "T",
                  "value": "Домашний телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-08T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737688"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "araik.bagdasaryan@mail.ru"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "E",
                  "value": "Электронная почта"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-05T18:44:27.324439+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1255</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="a49b6135-520c-41ab-afe2-26e2120c8209" name="vaccinationInfo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="837eca58-9348-4ce8-8165-e8fa3f0c0f27" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationInfoMobileCrewTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="a38a217d-8b7b-419d-9c3c-59c8627f0127"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="de7bb549-a810-4404-a541-379fe29ccca2" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="457feaf0-f8e0-4d57-9f97-a989dbeddbfa"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic9")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="1a9abe3c-54a9-4b3a-ac46-13682d0001cd"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic9")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="796ac488-c1fc-4d86-974e-67c6f393882b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic9")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без vaccinationFrequency" id="96250f5b-0a42-4e2e-b0c0-1c9ce040d239"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic9")
 String file =scripts.returnFileAsText("vaccinationFrequency")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="66da0e3e-fc82-41c2-8f12-db909f232ce9"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2692</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfo\mobile_crew_vaccination.v1 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationInfo\mobile_crew_vaccination.v1 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationInfo\mobile_crew_vaccination.v1 delete.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Грипп</con:value></con:property><con:property><con:name>vaccinationFrequency</con:name><con:value>\vaccinationInfo\mobile_crew_vaccination.v1 vaccinationFrequency.json</con:value></con:property></con:properties></con:testCase><con:testCase id="1dce391d-64fe-4caa-ba6f-c5e762ce14a3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationInfoCovidTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="c874efeb-3192-4237-adc2-68734a195f22"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="24dee0fa-8604-4a1d-aac2-53b5af00cdea" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="35e3703e-c5e3-4f89-8892-c7bbdcecdb68"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="7090eee4-a1e7-4ee2-a1de-b0eb4a7af799"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="a3cd1950-0216-4c96-82c6-d8e59e6e6642"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="780ac464-ac42-451d-b776-2249d0979e1c"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2097</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfo\t_COVID_vaccination.v1.3 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationInfo\t_COVID_vaccination.v1.3 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationInfo\t_COVID_vaccination.v1.3 delete.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>test</con:value></con:property></con:properties></con:testCase><con:testCase id="7c753d3f-c0ba-470f-9a22-b4e1e7e045e4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationInfoPreventiveTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="e60ea671-4ab5-4ffc-9065-5cfd07d0930f"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="526433a2-000b-4f1b-9a01-6695dfadf225" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="d5ff5377-9aad-4deb-93f1-918e3e13b16a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="3960a74a-66a7-4510-b9ea-7ee26caed6c9"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="9667179a-7859-4290-bcaf-9faba1fb6044"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без vaccinationFrequency" id="bb013910-94c8-4603-813e-1b97a318af4a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("vaccinationFrequency")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="a02ae5d9-8765-4ab7-b59e-3c00edd8c713"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-06-02T13:29:08.280+03:00","infectionCode":"A.68","docId":"1678","vaccinationFrequency":"A.24"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2446</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfo\t_vaccination_preventive.v2 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationInfo\t_vaccination_preventive.v2 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationInfo\t_vaccination_preventive.v2 delete.json</con:value></con:property><con:property><con:name>test</con:name><con:value>\vaccinationInfo\t_vaccination_preventive.v2 test.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Туляремия</con:value></con:property><con:property><con:name>vaccinationFrequency</con:name><con:value>\vaccinationInfo\t_vaccination_preventive.v2 vaccinationFrequency.json</con:value></con:property></con:properties></con:testCase><con:testCase id="d49e5022-0d65-4d88-9931-f672bb9d90d3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationInfoPublishedTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="27d73d38-30cc-406f-b85a-7254fbfd4b55"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="77dd6ca4-4551-4563-8e5e-02c1e1af0d0c" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create 2.2" id="5ade759c-2d85-43b9-8ea3-d5c725834b41"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete 2.2" id="7d9fff15-9490-429f-ac63-53f3e61bc267"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update  2.2" id="dd94ec80-0f54-4efb-a3a3-3fef058920ec"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 2.2 без vaccinationFrequency" id="c81346b7-1cf2-411f-9b44-5f8881bd0740"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("vaccinationFrequency")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 2.1" id="7c1b4ed9-8267-41c9-821d-2527149fc442"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create21")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete 2.1" id="c71b888b-69a3-4f58-8ddf-49ee6392e2b7"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("delete21")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update 2.1 с immunoResult" id="29fd559b-631a-49bc-a16b-d77a404acc3c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create21ImmunoResult")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update 2.1" id="395b180c-a049-4246-b0f6-ac1a6bd85487"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("update21")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 2.1 без vaccinationFrequency" id="eedd1a76-8563-422c-9913-b9cbf7007afc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("vaccinationFrequency21")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 2" id="68209394-94b6-472f-b922-77c3b380a95b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete 2" id="b6b9aebb-d193-45de-87df-aa2e822bda91"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("delete2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update 2 с immunoResult" id="7d442a22-80b7-4a47-b15e-66f63816bbb9"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create2ImmunoResult")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update 2" id="0189eb69-d4cf-4e67-a3c5-a9a03da06a3b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("update2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 2 без vaccinationFrequency" id="4fba8ff8-ab47-4740-8c7c-46ba47931def"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("vaccinationFrequency2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="e7502f12-765b-4c1c-8696-da03eed75bb0"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-02-01T10:12:31.752+03:00","infectionCode":"E.79","docId":"b6ad60f0-c261-4c92-80e9-a8239e6f${#TestCase#patientId}","vaccinationFrequency":"S.73 vaccinationFrequency"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2997</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfo\t_vaccination_published_info.v2.2 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationInfo\t_vaccination_published_info.v2.2 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationInfo\t_vaccination_published_info.v2.2 delete.json</con:value></con:property><con:property><con:name>true</con:name><con:value>\vaccinationInfo\vaccination_card.v3 true.json</con:value></con:property><con:property><con:name>create21</con:name><con:value>\vaccinationInfo\vaccination_published_info.v2.1 create.json</con:value></con:property><con:property><con:name>delete21</con:name><con:value>\vaccinationInfo\vaccination_published_info.v2.1 delete.json</con:value></con:property><con:property><con:name>create21ImmunoResult</con:name><con:value>\vaccinationInfo\vaccination_published_info.v2.1 ImmunoResult.json</con:value></con:property><con:property><con:name>update21</con:name><con:value>\vaccinationInfo\vaccination_published_info.v2.1 update.json</con:value></con:property><con:property><con:name>create2</con:name><con:value>\vaccinationInfo\vaccination_published_info.v2 create.json</con:value></con:property><con:property><con:name>delete2</con:name><con:value>\vaccinationInfo\vaccination_published_info.v2 delete.json</con:value></con:property><con:property><con:name>create2ImmunoResult</con:name><con:value>\vaccinationInfo\vaccination_published_info.v2 ImmunoResult.json</con:value></con:property><con:property><con:name>update2</con:name><con:value>\vaccinationInfo\vaccination_published_info.v2 update.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Грипп</con:value></con:property><con:property><con:name>vaccinationFrequency</con:name><con:value>\vaccinationInfo\t_vaccination_published_info.v2.2 vaccinationFrequency.json</con:value></con:property><con:property><con:name>vaccinationFrequency21</con:name><con:value>\vaccinationInfo\vaccination_published_info.v2.1 vaccinationFrequency.json</con:value></con:property><con:property><con:name>vaccinationFrequency2</con:name><con:value>\vaccinationInfo\vaccination_published_info.v2 vaccinationFrequency.json</con:value></con:property></con:properties></con:testCase><con:testCase id="17211b20-187d-45ee-ac99-16cee039f4b4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationInfoNewbornInfoQuestionaryTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="ba2e5d19-7b45-4c8a-a5f8-a52c93281950"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="f594d4be-7372-41af-9985-1e5605bf7de6" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="9e97519a-6bf4-4c20-8ebf-51adb4cf9c6d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="843dc181-bbc7-4a38-8ff3-dfb7b3a4955e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="67b49b62-5789-4090-8758-a89c287acbf7"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без vaccinationFrequency" id="0b720443-b882-42e9-a943-1f39aad340c6"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("vaccinationFrequency")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="86a91018-6014-4ebf-9e3c-f8f67d9cc480"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2020-10-01","infectionCode":"B.12","docId":"77efcdf7-41cc-4447-b526-b228262${#TestCase#patientId}","vaccinationFrequency":"B.63 description"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3183</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfo\t_newborn_info_questionarу_form_948.v4 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationInfo\t_newborn_info_questionarу_form_948.v4 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationInfo\t_newborn_info_questionarу_form_948.v4 delete.json</con:value></con:property><con:property><con:name>true</con:name><con:value>\vaccinationInfo\vaccination_card.v3 true.json</con:value></con:property><con:property><con:name>HBinfectionName</con:name><con:value>Грипп</con:value></con:property><con:property><con:name>v2OinfectionName</con:name><con:value>Грипп</con:value></con:property><con:property><con:name>vaccinationFrequency</con:name><con:value>\vaccinationInfo\t_newborn_info_questionarу_form_948.v4 vaccinationFrequency.json</con:value></con:property></con:properties></con:testCase><con:testCase id="6b353d9e-043d-4d0b-9c2f-7b8f2a8740ff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationInfoVaccinationTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="03da0112-bcea-46c9-8205-b16b9277c127"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="d7333b7b-3a82-46f5-8660-990fecd2577b" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="cc5d9e12-f357-4ea8-a580-74bcbf60e91a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="fe6d3415-b9d4-44f0-a391-1ba3356f9a07"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="b03e20a2-59f8-4f2a-9f30-9c0d9a451027"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без vaccinationFrequency" id="9d8ba97e-8064-4574-86ce-2708f108c2a3"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("vaccinationFrequency")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="48af5905-9fc4-4101-84d9-9819e0a63fe0"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2020-06-18T15:42:06.992+03:00","infectionCode":"I.23","docId":"d046f2a9-35cd-4933-b63e-64b66bd5${#TestCase#patientId}","vaccinationFrequency":"C.18"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2077</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfo\vaccination.v1.1 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationInfo\vaccination.v1.1 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationInfo\vaccination.v1.1 delete.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Грипп</con:value></con:property><con:property><con:name>vaccinationFrequency</con:name><con:value>\vaccinationInfo\vaccination.v1.1 vaccinationFrequency.json</con:value></con:property></con:properties></con:testCase><con:testCase id="76f9eafe-fe68-4e62-93d2-ceb680459029" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationInfoPrenatalRecordVisitingNurseTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="fdce4fe8-1a47-4ab3-b717-33d1e34ed900"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="fdd3518e-175d-49d2-a869-7258192e5890" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create 2.1" id="71e61b9b-5381-4a07-bd84-ff0438bdad0a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete 2.1" id="99573918-c46e-49ed-bf1d-cd96768986dc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update 2.1" id="84486a88-cae1-416e-8a5a-13683d7f321c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 2.1 без vaccinationFrequency" id="7dba36eb-afef-47b7-9843-1b6ead0839ed"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("vaccinationFrequency")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 2" id="932ab1f8-f3e5-4881-97bd-10aaedfdcd8c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("create2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete 2" id="007b3b1c-df26-4d01-b581-59f33a32ae56"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("delete2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update 2" id="e8886179-c6d5-4243-abea-5141a6219c45"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("update2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 2 без vaccinationFrequency" id="0a451c31-c622-4301-a519-5faf3505aa3e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("vaccinationFrequency2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 1" id="284d222b-627d-4498-9df2-49e35e7d0d40"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("create1")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete 1" id="cc3ba54c-acbe-40fc-a72f-9787098de66f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("delete1")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update 1" id="000b23d1-abe3-4e48-b6f0-2909f8e8357c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("update1")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 1 без vaccinationFrequency" id="b08fe103-8f63-4a26-b77c-578c9d22b291"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("vaccinationFrequency1")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 def v2OinfectionName =testRunner.testCase.getPropertyValue("v2OinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$HBinfectionName",HBinfectionName).replace("\$v2OinfectionName",v2OinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="7dc7daa8-4163-4193-8327-68c6ad7d0688"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2020-10-01","infectionCode":"B.12","docId":"77efcdf7-41cc-4447-b526-b228262${#TestCase#patientId}","vaccinationFrequency":"B.63 description"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2496</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v2.1 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v2.1 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v2.1 delete.json</con:value></con:property><con:property><con:name>true</con:name><con:value>\vaccinationInfo\vaccination_card.v3 true.json</con:value></con:property><con:property><con:name>create2</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v2 create.json</con:value></con:property><con:property><con:name>update2</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v2 update.json</con:value></con:property><con:property><con:name>delete2</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v2 delete.json</con:value></con:property><con:property><con:name>create1</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v1 create.json</con:value></con:property><con:property><con:name>update1</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v1 update.json</con:value></con:property><con:property><con:name>delete1</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v1 delete.json</con:value></con:property><con:property><con:name>HBinfectionName</con:name><con:value>Туляремия</con:value></con:property><con:property><con:name>v2OinfectionName</con:name><con:value>Туляремия</con:value></con:property><con:property><con:name>vaccinationFrequency</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v2.1 vaccinationFrequency.json</con:value></con:property><con:property><con:name>vaccinationFrequency2</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v2 vaccinationFrequency.json</con:value></con:property><con:property><con:name>vaccinationFrequency1</con:name><con:value>\vaccinationInfo\t_prenatal_record_visiting_nurse.v1 vaccinationFrequency.json</con:value></con:property></con:properties></con:testCase><con:testCase id="0107b896-a031-4f80-a7d9-976741e508ab" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationInfoPrenatalRecordTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="f1b1788d-23d3-4b74-b208-ed1647e37dc6"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="e0a72bf2-1d81-4818-a27c-32198e1140c3" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="e2cddd68-3767-4799-9ead-e41944fcfef7"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic8")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="d86debb0-809e-4711-919f-d33ac642de7f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic8")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="6a4b71e8-82ab-42b5-ab23-ffda76c76abc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic8")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Partially" id="2509c3c4-0e1e-460a-b9a1-6248d3631dfd"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic8")
 String file =scripts.returnFileAsText("partially")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="041d9f46-4dbb-463a-90da-d86ea65cc6b6"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-02-01","docId":"a4a32059-f442-44ea-817a-b964d1${#TestCase#patientId}","vaccinationFrequency":"V1"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2473</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfo\t_prenatal_record.v1.1 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationInfo\t_prenatal_record.v1.1 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationInfo\t_prenatal_record.v1.1 delete.json</con:value></con:property><con:property><con:name>partially</con:name><con:value>\vaccinationInfo\t_prenatal_record.v1.1 partially.json</con:value></con:property></con:properties></con:testCase><con:testCase id="47a87eec-0db7-40c1-960a-ac87b11ff76e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationInfoVaccinationCardTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="bd3e0314-f994-4e8d-9b99-488e2e18ffaf"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="48e79af7-93cb-4f48-9399-271b03510126" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="513976f0-524d-4e8c-a972-8625f9c2a99a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="5a7b565c-5b62-4b1c-a535-c60a78f984ea"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="0e9adbd4-9258-410e-965b-eaff7d16e82a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create с exemptionInfo" id="a8850d38-7a31-4857-b1fb-437024b4ac26"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("true")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без vaccinationFrequency" id="b43d486e-e47a-4fca-92f5-fab37924ac0e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("vaccinationFrequency")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="a3e3ab25-a843-4700-afb2-2a62575740ef"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2020-10-01","infectionCode":"B.12","docId":"77efcdf7-41cc-4447-b526-b228262${#TestCase#patientId}","vaccinationFrequency":"B.63 description"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3097</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfo\vaccination_card.v3 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationInfo\vaccination_card.v3 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationInfo\vaccination_card.v3 delete.json</con:value></con:property><con:property><con:name>true</con:name><con:value>\vaccinationInfo\vaccination_card.v3 true.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Полиомиелит</con:value></con:property><con:property><con:name>vaccinationFrequency</con:name><con:value>\vaccinationInfo\vaccination_card.v3 vaccinationFrequency.json</con:value></con:property></con:properties></con:testCase><con:testCase id="825acc16-dd49-4475-83b5-2b7d6b1bbee3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Актуализация данных о ходе вакцинации" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="4c50ded0-e58d-42b7-881f-2b4f95b147b6"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="495ea897-4c3b-42e3-b9b4-f750bcef7bfb" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="cfb201d7-6838-4d28-adab-8b2baca20d77"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="patientInfo" id="4fb09243-e733-44c3-82e9-6b91a6923118"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPersonalData","""{
   "id": 1928138,
   "operationDate": "2022-02-21T10:48:13.759+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "V3147770",
   "patientType": "I",
   "systemCode": "sch",
   "patientRecStatus": "Y",
   "entityName": "personalData",
   "entityData": [
      {
         "attributes": [
            {
               "name": "lastName",
               "type": "string",
               "value": {
                  "value": "Фамилия"
               }
            },
            {
               "name": "firstName",
               "type": "string",
               "value": {
                  "value": "Имя"
               }
            },
            {
               "name": "middleName",
               "type": "string",
               "value": {
                  "value": "Отчество"
               }
            },
            {
               "name": "birthDate",
               "type": "date",
               "value": {
                  "value": "2019-01-16"
               }
            },
            {
               "name": "birthPlace",
               "type": "string",
               "value": {
                  "value": "v_birth_place"
               }
            },
            {
               "name": "gender",
               "type": "dictionary",
               "value": {
                  "code": "1"
               }
            },
            {
               "name": "socialStatus",
               "type": "dictionary",
               "value": {
                  "id": 128650422,
                  "code": "3",
                  "value": "Работающий"
               }
            },
            {
               "name": "armyCode",
               "type": "string",
               "value": {
                  "value": "q"
               }
            },
            {
               "name": "isDependent",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "educationState",
               "type": "dictionary",
               "value": {
                  "id": 156496744,
                  "code": "6",
                  "value": "высшее"
               }
            },
            {
               "name": "citizenship",
               "type": "dictionary",
               "value": {
                  "id": 125676888,
                  "code": "178",
                  "value": "Республика Конго"
               }
            },
            {
               "name": "ethnicGroup",
               "type": "dictionary",
               "value": {
                  "id": 128650302,
                  "code": "11",
                  "value": "Грузины"
               }
            },
            {
               "name": "resident",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "Город"
               }
            },
            {
               "name": "disability",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "нет"
               }
            },
            {
               "name": "comment",
               "type": "string",
               "value": {
                  "value": "v_additional_info"
               }
            },
            {
               "name": "erzSyncDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "personIdErzl",
               "type": "guid",
               "value": {
                  "value": "2adef495-b318-0146-e053-c0a8c27103b8"
               }
            },
            {
               "name": "nonresIdErzl",
               "type": "integer",
               "value": {
                  "value": "1323"
               }
            },
            {
               "name": "nonresDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "erzStatus",
               "type": "string",
               "value": {
                  "value": "Y"
               }
            },
            {
               "name": "deathDateTime",
               "type": "dateTime",
               "value": {
                  "value": null
               }
            },
            {
               "name": "deathDataSource",
               "type": "string",
               "value": {
                  "value": "21.02.22"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="vaccinationConsentInfos" id="3b058639-9a79-4451-8eac-c3b0826eab36"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("create2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 def date2 =testRunner.testCase.getPropertyValue("date2")
 def consentType =testRunner.testCase.getPropertyValue("consentType")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName).replace("\$date",date2).replace("\$consentType",consentType)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="vaccinationFact" id="59ae09e9-4a1f-4f9b-b6a9-d4a325c3c697"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 def date =testRunner.testCase.getPropertyValue("date")
 def vaccinationFrequency =testRunner.testCase.getPropertyValue("vaccinationFrequency")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName).replace("\$date",date).replace("\$vaccinationFrequency",vaccinationFrequency)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="immunoDiagnosticsInfo" id="bde7c1f2-e4d6-4d9c-a488-bbf44aeafac4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("create3")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def resultDate =testRunner.testCase.getPropertyValue("resultDate")
 def reaction =testRunner.testCase.getPropertyValue("reaction")
 def immunodiagnosType =testRunner.testCase.getPropertyValue("immunodiagnosType")
 String message = file.replace("\$patientId",patientId).replace("\$resultDate",resultDate).replace("\$reaction",reaction).replace("\$immunodiagnosType",immunodiagnosType)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="vaccinationExemptionInfo Полный" id="523e1748-f624-4650-bc94-4d52b2ce094a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic11")
 String file =scripts.returnFileAsText("create4")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName") 
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="vaccinationExemptionInfo частичный" id="abb9cd39-eacc-4db0-8eb3-1fec595c758d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic11")
 String file =scripts.returnFileAsText("create5")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName") 
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="7fa033d9-d1c2-449e-8842-86605e2a49fb"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2684</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfoUpdate\t_COVID_vaccination.v1.3 create.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Туберкулез</con:value></con:property><con:property><con:name>vaccinationFrequency</con:name><con:value>V1</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-09-13</con:value></con:property><con:property><con:name>create2</con:name><con:value>\vaccinationConsentInfo\t_vaccination_informed_consent create2.json</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-05-31</con:value></con:property><con:property><con:name>consentType</con:name><con:value>частичный</con:value></con:property><con:property><con:name>create3</con:name><con:value>\immunoDiagnosticsInfo\vaccination_cardComposition create2.json</con:value></con:property><con:property><con:name>reaction</con:name><con:value>Положительная</con:value></con:property><con:property><con:name>resultDate</con:name><con:value>2022-05-31</con:value></con:property><con:property><con:name>immunodiagnosType</con:name><con:value>true</con:value></con:property><con:property><con:name>create4</con:name><con:value>\vaccinationExemptionInfo\t_vaccination_medical_exemption create 2.json</con:value></con:property><con:property><con:name>create5</con:name><con:value>\vaccinationExemptionInfo\t_vaccination_medical_exemption update 2.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-12-06T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-12-06</con:value></con:property></con:properties></con:testCase><con:testCase id="8a5bd8b4-1f0a-4a8f-bd46-7432dc7e8edb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование исторических данных для fullyVaccinatedByAgeAndAllInfections и fullyVaccinatedByAge" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="797ee3ef-61fa-4736-8d0c-a68a627f14be"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"92611"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="589b04df-ba72-41c7-9bd6-1cd53cf1e3e1"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="patientInfo" id="b91b1b4f-4247-4b93-ab72-f1df26a997ac"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPersonalData","""{
   "id": 1928138,
   "operationDate": "2022-02-21T10:48:13.759+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "V3147770",
   "patientType": "I",
   "systemCode": "sch",
   "patientRecStatus": "Y",
   "entityName": "personalData",
   "entityData": [
      {
         "attributes": [
            {
               "name": "lastName",
               "type": "string",
               "value": {
                  "value": "Фамилия"
               }
            },
            {
               "name": "firstName",
               "type": "string",
               "value": {
                  "value": "Имя"
               }
            },
            {
               "name": "middleName",
               "type": "string",
               "value": {
                  "value": "Отчество"
               }
            },
            {
               "name": "birthDate",
               "type": "date",
               "value": {
                  "value": "2019-01-16"
               }
            },
            {
               "name": "birthPlace",
               "type": "string",
               "value": {
                  "value": "v_birth_place"
               }
            },
            {
               "name": "gender",
               "type": "dictionary",
               "value": {
                  "code": "2"
               }
            },
            {
               "name": "socialStatus",
               "type": "dictionary",
               "value": {
                  "id": 128650422,
                  "code": "3",
                  "value": "Работающий"
               }
            },
            {
               "name": "armyCode",
               "type": "string",
               "value": {
                  "value": "q"
               }
            },
            {
               "name": "isDependent",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "educationState",
               "type": "dictionary",
               "value": {
                  "id": 156496744,
                  "code": "6",
                  "value": "высшее"
               }
            },
            {
               "name": "citizenship",
               "type": "dictionary",
               "value": {
                  "id": 125676888,
                  "code": "178",
                  "value": "Республика Конго"
               }
            },
            {
               "name": "ethnicGroup",
               "type": "dictionary",
               "value": {
                  "id": 128650302,
                  "code": "11",
                  "value": "Грузины"
               }
            },
            {
               "name": "resident",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "Город"
               }
            },
            {
               "name": "disability",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "нет"
               }
            },
            {
               "name": "comment",
               "type": "string",
               "value": {
                  "value": "v_additional_info"
               }
            },
            {
               "name": "erzSyncDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "personIdErzl",
               "type": "guid",
               "value": {
                  "value": "2adef495-b318-0146-e053-c0a8c27103b8"
               }
            },
            {
               "name": "nonresIdErzl",
               "type": "integer",
               "value": {
                  "value": "1323"
               }
            },
            {
               "name": "nonresDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "erzStatus",
               "type": "string",
               "value": {
                  "value": "Y"
               }
            },
            {
               "name": "deathDateTime",
               "type": "dateTime",
               "value": {
                  "value": null
               }
            },
            {
               "name": "deathDataSource",
               "type": "string",
               "value": {
                  "value": "21.02.22"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="vaccinationConsentInfos" id="9dac0ffa-6ac9-42c6-a421-95e6a4afe299"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("create2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 def date2 =testRunner.testCase.getPropertyValue("date2")
 def consentType =testRunner.testCase.getPropertyValue("consentType")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName).replace("\$date",date2).replace("\$consentType",consentType)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="vaccinationFact" id="3055d284-e806-4e2a-9609-0d1dda5b9ebd"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 def date =testRunner.testCase.getPropertyValue("date")
 def vaccinationFrequency =testRunner.testCase.getPropertyValue("vaccinationFrequency")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName).replace("\$date",date).replace("\$vaccinationFrequency",vaccinationFrequency)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="immunoDiagnosticsInfo" id="a5fe6754-264d-4ebe-a619-85a47c9eaf2f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("create3")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def resultDate =testRunner.testCase.getPropertyValue("resultDate")
 def reaction =testRunner.testCase.getPropertyValue("reaction")
 def immunodiagnosType =testRunner.testCase.getPropertyValue("immunodiagnosType")
 String message = file.replace("\$patientId",patientId).replace("\$resultDate",resultDate).replace("\$reaction",reaction).replace("\$immunodiagnosType",immunodiagnosType)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="vaccinationExemptionInfo Полный" id="662092f5-b0f6-4695-b9db-f0dce6bccc2f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic11")
 String file =scripts.returnFileAsText("create4")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName") 
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="vaccinationExemptionInfo частичный" id="0294dd99-ca14-4259-847b-de597555805b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic11")
 String file =scripts.returnFileAsText("create5")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName") 
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>92611</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfoUpdate\t_COVID_vaccination.v1.3 create.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Ветряная оспа</con:value></con:property><con:property><con:name>vaccinationFrequency</con:name><con:value>V1</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-08-08</con:value></con:property><con:property><con:name>create2</con:name><con:value>\vaccinationConsentInfo\t_vaccination_informed_consent create2.json</con:value></con:property><con:property><con:name>date2</con:name><con:value>2022-05-31</con:value></con:property><con:property><con:name>consentType</con:name><con:value>частичный</con:value></con:property><con:property><con:name>create3</con:name><con:value>\immunoDiagnosticsInfo\vaccination_cardComposition create2.json</con:value></con:property><con:property><con:name>reaction</con:name><con:value>Положительная</con:value></con:property><con:property><con:name>resultDate</con:name><con:value>2022-05-31</con:value></con:property><con:property><con:name>immunodiagnosType</con:name><con:value>true</con:value></con:property><con:property><con:name>create4</con:name><con:value>\vaccinationExemptionInfo\t_vaccination_medical_exemption create 2.json</con:value></con:property><con:property><con:name>create5</con:name><con:value>\vaccinationExemptionInfo\t_vaccination_medical_exemption update 2.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-09-14T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-09-14</con:value></con:property></con:properties></con:testCase><con:testCase id="269f2bbd-84df-42c8-b6c2-ba2f7ddee745" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование информации о вакцинации из документов t_COVID_vaccination_published_info, t_COVID_vaccination_published_info_external" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="70cd085f-f8c6-40af-9e4e-9bdfb1cc2df7"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="123db9e3-59c8-4090-9c5c-b590615144e6" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create info.v1" id="ce1de238-3650-4042-9d69-661c0959ac71"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic12")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete info.v1" id="acaf6e84-f75d-44c1-9c62-686f16f2dae4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic12")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update info.v1" id="1875f67c-b87d-4b88-ae50-21f45b11766d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic12")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create external.v1" id="4270e6dc-9415-4251-811e-28be4aa3fe55"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic12")
 String file =scripts.returnFileAsText("create2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete external.v1" id="610c932f-4123-4b9e-8721-ba05c767cfc1"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic12")
 String file =scripts.returnFileAsText("delete2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update external.v1" id="ca58e111-cda5-494b-87c0-cd7d361eaa51"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic12")
 String file =scripts.returnFileAsText("update2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="a00abc61-edad-4d52-9fe7-3e53a0ccd232"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3174</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationInfo\t_COVID_vaccination_published_info.v1 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationInfo\t_COVID_vaccination_published_info.v1 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationInfo\t_COVID_vaccination_published_info.v1 delete.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Корь, паротит</con:value></con:property><con:property><con:name>create2</con:name><con:value>\vaccinationInfo\t_COVID_vaccination_published_info_external.v1 create.json</con:value></con:property><con:property><con:name>delete2</con:name><con:value>\vaccinationInfo\t_COVID_vaccination_published_info_external.v1 delete.json</con:value></con:property><con:property><con:name>update2</con:name><con:value>\vaccinationInfo\t_COVID_vaccination_published_info_external.v1 update.json</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic1</con:name><con:value>t_vaccination_informed_consentComposition</con:value></con:property><con:property><con:name>topic2</con:name><con:value>t_COVID_vaccinationComposition</con:value></con:property><con:property><con:name>topic3</con:name><con:value>vaccinationComposition</con:value></con:property><con:property><con:name>topic4</con:name><con:value>vaccination_published_infoComposition</con:value></con:property><con:property><con:name>topic5</con:name><con:value>vaccination_cardComposition</con:value></con:property><con:property><con:name>topic6</con:name><con:value>t_newborn_info_questionary_form_948Composition</con:value></con:property><con:property><con:name>topic7</con:name><con:value>t_prenatal_record_visiting_nurseComposition</con:value></con:property><con:property><con:name>topic8</con:name><con:value>t_prenatal_recordComposition</con:value></con:property><con:property><con:name>topic9</con:name><con:value>VaccinationMobileCrewComposition</con:value></con:property><con:property><con:name>topic10</con:name><con:value>MedOrgVaccination</con:value></con:property><con:property><con:name>topic11</con:name><con:value>t_vaccination_medical_exemptionComposition</con:value></con:property><con:property><con:name>topic12</con:name><con:value>COVID_Historical_Vaccination</con:value></con:property></con:properties></con:testSuite><con:testSuite id="8bac3fcf-da89-4fa0-99ae-8fae21bb4c63" name="immunoDiagnosticsInfo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="3e11ea21-680e-426c-a991-0697af159a5a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="immunoDiagnosticsInfoNewbornInfoQuestionaryTopicJob - не актуально" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="a4b74e1d-5300-48cf-b20b-d46b6e1b4cb2"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="9f36b950-a5e9-4874-8d38-bc124a27ae04" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="cb29d35b-d54c-48e4-b82c-28eed84e5b48"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="d0050827-baae-4cba-baa0-5011671162c7"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="e9343246-8aaf-46e7-b10a-d507adf2edb5"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан vaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionEndDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","exemptionDuration":"Временный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан nvaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"exemptionDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionDuration":"Временный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2024</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnosticsInfo\t_newborn_info_questionarу_form_948 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationConsentInfo\t_vaccination_informed_consent update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\immunoDiagnosticsInfo\t_newborn_info_questionarу_form_948 delete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="9fdc3449-ab95-4b3d-bfe8-2af1d78539a1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="immunoDiagnosticsInfoPrenatalRecordVisitingNurseTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="40f49d54-1382-45cc-bb48-a33c65d24ef3"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="652b56f9-37dc-4b6c-8259-46d74286fd16" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create true" id="03e344c5-7362-40cc-b8a1-3151aeda1747"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="353dafbc-0348-4115-9b62-8956f774507b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="477d7ecc-a30c-4403-b186-ef41e0155c12"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан vaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionEndDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","exemptionDuration":"Временный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан nvaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"exemptionDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionDuration":"Временный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2566</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnosticsInfo\t_prenatal_record_visiting_nurse create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationConsentInfo\t_vaccination_informed_consent update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\immunoDiagnosticsInfo\t_prenatal_record_visiting_nurse delete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="29bc947d-a5a4-4588-8930-8b8600cf9cbb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="immunoDiagnosticsInfoVaccinationCardTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="7fc23654-c3e9-4644-9d30-9d1ebb248531"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="cfb751ba-af78-4e22-8b49-b624b8e2d8c1" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="285dccc3-86ba-47ef-84c7-0b40efc2e46b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="de1819cf-f4bb-4393-84d2-8f924f076e93"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="False" id="2479c6ab-c653-4f96-b43e-f8c202b35fb7"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("false")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="4857e3b7-cdb7-42aa-80ab-c9dbfde0a72b"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан vaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionEndDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","exemptionDuration":"Временный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан nvaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"exemptionDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionDuration":"Временный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2103</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnosticsInfo\vaccination_cardComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>false</con:name><con:value>\immunoDiagnosticsInfo\vaccination_cardComposition false.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\immunoDiagnosticsInfo\vaccination_cardComposition delete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="511eea21-c758-4aa4-b46c-d592f540258b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="immunoDiagnosticsInfoPublishedTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="23caff03-e375-49ea-8bb2-02d7d6ba6b48"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="647b1c80-6181-46a0-9976-ebfc2b2440da" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create 2.2 не актуально" id="c691afd3-b828-417d-9894-652bbb95ea4f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete 2.2" id="b320f638-b3c7-460e-87ad-de8ff86053f9"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 2" id="26f769a4-5e7b-4a9e-85ff-8c0da28bf4db"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete 2" id="1650426b-9bba-4189-9e36-03d1d0f3d165"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("delete2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create 2.1" id="873e148b-80f4-40e4-83c6-02b5c49c4ab3"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create21")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete 2.1" id="f8499da6-81b6-48a4-969e-f9835c0ebcbf"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("delete21")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="43fad4df-9fec-4a12-ad49-379ff5a9cbb8"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан vaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionEndDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","exemptionDuration":"Временный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан nvaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"exemptionDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionDuration":"Временный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2590</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnosticsInfo\t_vaccination_published_info create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationConsentInfo\t_vaccination_informed_consent update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\immunoDiagnosticsInfo\t_vaccination_published_info delete.json</con:value></con:property><con:property><con:name>create2</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info2 create.json</con:value></con:property><con:property><con:name>delete2</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info2 delete.json</con:value></con:property><con:property><con:name>create21</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info21 create.json</con:value></con:property><con:property><con:name>delete21</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info21 delete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="feab597b-446a-44af-9804-dc6d1a160f81" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="immunoDiagnosticsInfoTImmunodiagnosticsPreventiveTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="8331321d-4eff-4817-9d1b-ef8c16f16f25"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="ea10f74c-910d-40b7-930f-1184d8c97d11" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="ad0e9cc5-12a3-4c70-8f0e-27cfa06fd3e7"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="b87e9e7d-0b52-41d4-b991-8cadf95b3283"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="1c17672a-f8ed-4df1-93fc-48f3e2d0bb5d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="602e4915-e9f8-4363-834f-56abcdd84927"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан vaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionEndDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","exemptionDuration":"Временный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан nvaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"exemptionDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionDuration":"Временный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2067</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnosticsInfo\t_immunodiagnostics_preventive create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\immunoDiagnosticsInfo\t_immunodiagnostics_preventive update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\immunoDiagnosticsInfo\t_immunodiagnostics_preventive delete.json</con:value></con:property><con:property><con:name>create2</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info2 create.json</con:value></con:property><con:property><con:name>delete2</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info2 delete.json</con:value></con:property><con:property><con:name>create21</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info21 create.json</con:value></con:property><con:property><con:name>delete21</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info21 delete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="50b585ab-5e64-40de-ac3d-6e550ef23c97" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="immunoDiagnosticsInfoTImmunodiagnosticsResultTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="e49670b3-320b-4637-942b-304518c559aa"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="526d08c3-1fb2-4331-98c5-c2167f86421a" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="3243ffaa-1711-449c-8267-66cf79af9ba1"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="b68fe3d0-955f-4985-8196-55e76ff2c46d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="001d37cb-c305-48fa-9f76-11adc1272a95"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="f21aa182-0f9f-4670-86e7-aa9d36b97a23"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан vaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionEndDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","exemptionDuration":"Временный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан nvaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"exemptionDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionDuration":"Временный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2071</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnosticsInfo\t_immunodiagnostics_result create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\immunoDiagnosticsInfo\t_immunodiagnostics_result update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\immunoDiagnosticsInfo\t_immunodiagnostics_result delete.json</con:value></con:property><con:property><con:name>create2</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info2 create.json</con:value></con:property><con:property><con:name>delete2</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info2 delete.json</con:value></con:property><con:property><con:name>create21</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info21 create.json</con:value></con:property><con:property><con:name>delete21</con:name><con:value>\immunoDiagnosticsInfo\vaccination_published_info21 delete.json</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic1</con:name><con:value>t_newborn_info_questionary_form_948Composition</con:value></con:property><con:property><con:name>topic2</con:name><con:value>t_prenatal_record_visiting_nurseComposition</con:value></con:property><con:property><con:name>topic3</con:name><con:value>vaccination_cardComposition</con:value></con:property><con:property><con:name>topic4</con:name><con:value>vaccination_published_infoComposition</con:value></con:property><con:property><con:name>topic5</con:name><con:value>vaccination_cardComposition</con:value></con:property><con:property><con:name>topic6</con:name><con:value>ImmunoComplete</con:value></con:property><con:property><con:name>topic7</con:name><con:value>ImmunoResult</con:value></con:property></con:properties></con:testSuite><con:testSuite id="89d65dc8-dce7-45a5-881f-511f52279826" name="studInfo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="a5337499-2637-410a-a7bc-9db3c6b248a6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#141279" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="70c53302-ecea-4142-8d74-2e1cc80401fa"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="dd15374f-8685-4922-ad5e-dd632ca6b884" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Один атрибут, есть в справочнике" id="336e9496-948b-475f-b2a3-a9ed16a90cc4"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("SchoolAttachmentEvent","""{
   "id": 29,
   "operationDate": "2022-06-23T18:47:30.868+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "30416317",
   "studentId": "e5c9b68a-a3c7-6688-e043-a2997e0ac8c8",
   "studentPersonId": "7445b4ed-f762-49c1-a58d-2edd164c95e3",
   "patientStudentLinkStatus": "Y",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "schoolAttachment",
   "entityData": [
      {
         "attributes": [
            {
               "name": "attachId",
               "type": "integer",
               "value": {
                  "value": "124059879"
               }
            },
            {
               "name": "attachType",
               "type": "dictionary",
               "value": {
                  "id": 128619874,
                  "code": "9",
                  "value": "школьное"
               }
            },
            {
               "name": "attachForm",
               "type": "dictionary",
               "value": {
                  "id": 128620020,
                  "code": "60",
                  "value": "Прикрепление к классу"
               }
            },
            {
               "name": "organizationId",
               "type": "integer",
               "value": {
                  "value": "200001654989"
               }
            },
            {
               "name": "areaId",
               "type": "integer",
               "value": {
                  "value": "17411910615"
               }
            },
            {
               "name": "attachStartDate",
               "type": "date",
               "value": {
                  "value": "2019-08-16"
               }
            },
            {
               "name": "attachEndDate",
               "type": "date",
               "value": {
                  "value": "2021-06-17"
               }
            },
            {
               "name": "isActual",
               "type": "long",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "attachEndCause",
               "type": "dictionary",
               "value": {
                  "id": 128619975,
                  "code": "40",
                  "value": "Другие причины"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="037aaf3a-b048-46c1-93e8-48c0da720833"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="cdd9c773-e717-4bbc-a973-ae03973add5a"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано studPlaces"><con:configuration><path>$.hits.hits[0]._source..data.studInfo.studPlaces</path><content>[[{"studChangeDate":"2022-06-23T18:47:30.868+03:00","educationFacilityShortName":"ГБОУ Школа № 1411","areaId":17411910615,"studStatus":true,"attachId":124059879,"moId":200001654989}]]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="studChangeDate > operationDate" id="46471b1d-d282-481e-ad60-d79e912d7593"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("SchoolAttachmentEvent","""{
   "id": 29,
   "operationDate": "2022-06-23T18:46:30.868+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "30416317",
   "studentId": "e5c9b68a-a3c7-6688-e043-a2997e0ac8c8",
   "studentPersonId": "7445b4ed-f762-49c1-a58d-2edd164c95e3",
   "patientStudentLinkStatus": "Y",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "schoolAttachment",
   "entityData": [
      {
         "attributes": [
            {
               "name": "attachId",
               "type": "integer",
               "value": {
                  "value": "124059879"
               }
            },
            {
               "name": "attachType",
               "type": "dictionary",
               "value": {
                  "id": 128619874,
                  "code": "9",
                  "value": "школьное"
               }
            },
            {
               "name": "attachForm",
               "type": "dictionary",
               "value": {
                  "id": 128620020,
                  "code": "60",
                  "value": "Прикрепление к классу"
               }
            },
            {
               "name": "organizationId",
               "type": "integer",
               "value": {
                  "value": "200001654989"
               }
            },
            {
               "name": "areaId",
               "type": "integer",
               "value": {
                  "value": "17411910615"
               }
            },
            {
               "name": "attachStartDate",
               "type": "date",
               "value": {
                  "value": "2019-08-16"
               }
            },
            {
               "name": "attachEndDate",
               "type": "date",
               "value": {
                  "value": "2021-06-17"
               }
            },
            {
               "name": "isActual",
               "type": "long",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "attachEndCause",
               "type": "dictionary",
               "value": {
                  "id": 128619975,
                  "code": "40",
                  "value": "Другие причины"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="7e67d4b7-7d36-4f74-8ffb-c3d7ce8502eb"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 2" id="68b39045-795a-48a6-9bc3-01d37d26dcdb"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 2" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано studPlaces"><con:configuration><path>$.hits.hits[0]._source..data.studInfo.studPlaces</path><content>[[{"studChangeDate":"2022-06-23T18:47:30.868+03:00","educationFacilityShortName":"ГБОУ Школа № 1411","areaId":17411910615,"studStatus":true,"attachId":124059879,"moId":200001654989}]]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="studChangeDate &lt; operationDate" id="25905cd1-cc61-49e8-9659-ca9958e8ebfd"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("SchoolAttachmentEvent","""{
   "id": 29,
   "operationDate": "2022-06-23T18:48:30.868+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "30416317",
   "studentId": "e5c9b68a-a3c7-6688-e043-a2997e0ac8c8",
   "studentPersonId": "7445b4ed-f762-49c1-a58d-2edd164c95e3",
   "patientStudentLinkStatus": "Y",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "schoolAttachment",
   "entityData": [
      {
         "attributes": [
            {
               "name": "attachId",
               "type": "integer",
               "value": {
                  "value": "124059879"
               }
            },
            {
               "name": "attachType",
               "type": "dictionary",
               "value": {
                  "id": 128619874,
                  "code": "9",
                  "value": "школьное"
               }
            },
            {
               "name": "attachForm",
               "type": "dictionary",
               "value": {
                  "id": 128620020,
                  "code": "60",
                  "value": "Прикрепление к классу"
               }
            },
            {
               "name": "organizationId",
               "type": "integer",
               "value": {
                  "value": "200001654989"
               }
            },
            {
               "name": "areaId",
               "type": "integer",
               "value": {
                  "value": "17411910615"
               }
            },
            {
               "name": "attachStartDate",
               "type": "date",
               "value": {
                  "value": "2019-08-16"
               }
            },
            {
               "name": "attachEndDate",
               "type": "date",
               "value": {
                  "value": "2021-06-17"
               }
            },
            {
               "name": "isActual",
               "type": "long",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "attachEndCause",
               "type": "dictionary",
               "value": {
                  "id": 128619975,
                  "code": "40",
                  "value": "Другие причины"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="1787f869-cc84-403c-b50d-0552d0f36608"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 3" id="3311a954-0ac0-44eb-b68d-9f83daab57ec"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 3" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано studPlaces"><con:configuration><path>$.hits.hits[0]._source..data.studInfo.studPlaces</path><content>[[{"studChangeDate":"2022-06-23T18:48:30.868+03:00","educationFacilityShortName":"ГБОУ Школа № 1411","areaId":17411910615,"studStatus":false,"attachId":124059879,"moId":200001654989}]]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Добавление второго прикрепления" id="4f9bac33-ca80-47ea-87cf-2f7317f51549"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("SchoolAttachmentEvent","""{
   "id": 29,
   "operationDate": "2022-06-23T18:49:30.868+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "30416317",
   "studentId": "e5c9b68a-a3c7-6688-e043-a2997e0ac8c8",
   "studentPersonId": "7445b4ed-f762-49c1-a58d-2edd164c95e3",
   "patientStudentLinkStatus": "Y",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "schoolAttachment",
   "entityData": [
      {
         "attributes": [
            {
               "name": "attachId",
               "type": "integer",
               "value": {
                  "value": "59721952"
               }
            },
            {
               "name": "attachType",
               "type": "dictionary",
               "value": {
                  "id": 128619874,
                  "code": "9",
                  "value": "школьное"
               }
            },
            {
               "name": "attachForm",
               "type": "dictionary",
               "value": {
                  "id": 128620020,
                  "code": "60",
                  "value": "Прикрепление к классу"
               }
            },
            {
               "name": "organizationId",
               "type": "integer",
               "value": {
                  "value": "200001011767"
               }
            },
            {
               "name": "areaId",
               "type": "integer",
               "value": {
                  "value": "175740969"
               }
            },
            {
               "name": "attachStartDate",
               "type": "date",
               "value": {
                  "value": "2019-08-16"
               }
            },
            {
               "name": "attachEndDate",
               "type": "date",
               "value": {
                  "value": "2021-06-17"
               }
            },
            {
               "name": "isActual",
               "type": "long",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "attachEndCause",
               "type": "dictionary",
               "value": {
                  "id": 128619975,
                  "code": "40",
                  "value": "Другие причины"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 4" id="488b9a18-9268-4c40-9060-12bf64cbe385"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 4" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано studPlaces"><con:configuration><path>$.hits.hits[0]._source..data.studInfo.studPlaces</path><content>[[{"studChangeDate":"2022-06-23T18:48:30.868+03:00","educationFacilityShortName":"ГБОУ Школа № 1411","areaId":17411910615,"studStatus":false,"attachId":124059879,"moId":200001654989},{"studChangeDate":"2022-06-23T18:49:30.868+03:00","educationFacilityShortName":"ГБОУ Школа \"Тропарево\"","areaId":175740969,"studStatus":false,"attachId":59721952,"moId":200001011767}]]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="59ca3c5f-11b5-41ca-9810-74259b1141e9"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3202</con:value></con:property></con:properties></con:testCase><con:testCase id="ac601d9b-f484-49b4-8a95-a39d24b32901" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#141281" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="7f354df3-c257-45d1-abe2-ce101fc17a47"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="a9fe5f9e-524a-4e6e-b57e-7c304ec30510" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="organizationId нет в справочнике" id="b9466f0c-baed-4b2f-a693-59a3c834b4d7"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("SchoolAttachmentEvent","""{
   "id": 29,
   "operationDate": "2022-06-23T18:46:31.868+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "30416317",
   "studentId": "e5c9b68a-a3c7-6688-e043-a2997e0ac8c8",
   "studentPersonId": "7445b4ed-f762-49c1-a58d-2edd164c95e3",
   "patientStudentLinkStatus": "Y",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "schoolAttachment",
   "entityData": [
      {
         "attributes": [
            {
               "name": "attachId",
               "type": "integer",
               "value": {
                  "value": "59721952"
               }
            },
            {
               "name": "attachType",
               "type": "dictionary",
               "value": {
                  "id": 128619874,
                  "code": "9",
                  "value": "школьное"
               }
            },
            {
               "name": "attachForm",
               "type": "dictionary",
               "value": {
                  "id": 128620020,
                  "code": "60",
                  "value": "Прикрепление к классу"
               }
            },
            {
               "name": "organizationId",
               "type": "integer",
               "value": {
                  "value": "200001011767111"
               }
            },
            {
               "name": "areaId",
               "type": "integer",
               "value": {
                  "value": "175740969"
               }
            },
            {
               "name": "attachStartDate",
               "type": "date",
               "value": {
                  "value": "2019-08-16"
               }
            },
            {
               "name": "attachEndDate",
               "type": "date",
               "value": {
                  "value": "2021-06-17"
               }
            },
            {
               "name": "isActual",
               "type": "long",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "attachEndCause",
               "type": "dictionary",
               "value": {
                  "id": 128619975,
                  "code": "40",
                  "value": "Другие причины"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="88e83a6c-7d9c-4245-8cdc-b92a6bfb8750"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="372c2e8a-b6c0-4020-9c43-c988046eadfd"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано studPlaces"><con:configuration><path>$.hits.hits[0]._source..data.studInfo.studPlaces</path><content>[[{"studChangeDate":"2022-06-23T18:46:31.868+03:00","areaId":175740969,"studStatus":false,"attachId":59721952,"moId":200001011767111}]]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1302</con:value></con:property></con:properties></con:testCase><con:testCase id="6f3d8adf-f1bf-40c8-88af-534dadd5f6b5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#141282" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="c3fafe1b-ba8f-4b04-8c7f-2e8b23d7df19"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="b750375f-1880-4ea1-af83-736fc5bedd2d" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Несколько аттрибутов" id="7204bc94-df40-4710-9e23-ed2b46f53b81"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("SchoolAttachmentEvent","""{
   "id": 29,
   "operationDate": "2022-06-23T18:47:30.868+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "30416317",
   "studentId": "e5c9b68a-a3c7-6688-e043-a2997e0ac8c8",
   "studentPersonId": "7445b4ed-f762-49c1-a58d-2edd164c95e3",
   "patientStudentLinkStatus": "Y",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "schoolAttachment",
   "entityData": [
      {
         "attributes": [
            {
               "name": "attachId",
               "type": "integer",
               "value": {
                  "value": "59721952"
               }
            },
            {
               "name": "attachType",
               "type": "dictionary",
               "value": {
                  "id": 128619874,
                  "code": "9",
                  "value": "школьное"
               }
            },
            {
               "name": "attachForm",
               "type": "dictionary",
               "value": {
                  "id": 128620020,
                  "code": "60",
                  "value": "Прикрепление к классу"
               }
            },
            {
               "name": "organizationId",
               "type": "integer",
               "value": {
                  "value": "200001011762"
               }
            },
            {
               "name": "areaId",
               "type": "integer",
               "value": {
                  "value": "175740969"
               }
            },
            {
               "name": "attachStartDate",
               "type": "date",
               "value": {
                  "value": "2019-08-16"
               }
            },
            {
               "name": "attachEndDate",
               "type": "date",
               "value": {
                  "value": "2021-06-17"
               }
            },
            {
               "name": "isActual",
               "type": "long",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "attachEndCause",
               "type": "dictionary",
               "value": {
                  "id": 128619975,
                  "code": "40",
                  "value": "Другие причины"
               }
            }
         ]
      },
	  {
         "attributes": [
            {
               "name": "attachId",
               "type": "integer",
               "value": {
                  "value": "59721953"
               }
            },
            {
               "name": "attachType",
               "type": "dictionary",
               "value": {
                  "id": 128619874,
                  "code": "9",
                  "value": "школьное"
               }
            },
            {
               "name": "attachForm",
               "type": "dictionary",
               "value": {
                  "id": 128620020,
                  "code": "60",
                  "value": "Прикрепление к классу"
               }
            },
            {
               "name": "organizationId",
               "type": "integer",
               "value": {
                  "value": "200001011767"
               }
            },
            {
               "name": "areaId",
               "type": "integer",
               "value": {
                  "value": "175740969"
               }
            },
            {
               "name": "attachStartDate",
               "type": "date",
               "value": {
                  "value": "2019-08-16"
               }
            },
            {
               "name": "attachEndDate",
               "type": "date",
               "value": {
                  "value": "2021-06-17"
               }
            },
            {
               "name": "isActual",
               "type": "long",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "attachEndCause",
               "type": "dictionary",
               "value": {
                  "id": 128619975,
                  "code": "40",
                  "value": "Другие причины"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="30448c4f-6739-40ae-a435-f10baba48940"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="e16b4eb6-30c7-4fa9-a04d-8d8d8ee92fc5"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="68d67b37-c080-4bae-a05b-bd4e3ac1fd8e" name="Создано studPlaces"><con:configuration><path>$.hits.hits[0]._source..data.studInfo.studPlaces</path><content>[[{"studChangeDate":"2022-06-23T18:47:30.868+03:00","educationFacilityShortName":"ГБОУ Школа № 17","areaId":175740969,"studStatus":true,"attachId":59721952,"moId":200001011762},{"studChangeDate":"2022-06-23T18:47:30.868+03:00","educationFacilityShortName":"ГБОУ Школа \"Тропарево\"","areaId":175740969,"studStatus":false,"attachId":59721953,"moId":200001011767}]]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1322</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="d95a85f5-76ef-4822-af1e-070d6a561715" name="attachmentAttachmentEventTopicJob"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="a3d57f5e-37dd-438f-b09b-842b69d86165" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование данных о прикреплениях из топика" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="8c50f29f-2580-4027-8331-03261415a346"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"338974524"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="actual = true" id="18ef041c-0575-45d2-842d-cd114ac21e3e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-09-21T15:41:54",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 127636389,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": 173933133,
      "attachBeginDate": "2022-02-21",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "areaTypeCode": 20,
   	 "areaNumber": 8,
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="attachment.updateDate > dateTime" id="4d576277-905a-43fb-b42d-28138ec16e65"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606133,
      "dateTime": "2022-09-22T19:08:23",
      "eventType": "CLOSE"
   },
   "attachmentNewValue": {
      "attachId": 127636390,
      "patientId": """+patientId+""",
      "isActual": false,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": 173933128,
      "attachBeginDate": "2022-02-21",
      "attachEndDate": "2022-02-21",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "areaTypeCode": 20,
   	 "areaNumber": 8,
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachEndCause": {
         "globalId": 128619959,
         "code": "10",
         "title": "Выбор другой мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   },
   "attachmentOldValue": {
      "attachId": 127636390,
      "patientId": 30000000100657,
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": 173933128,
      "attachBeginDate": "2022-02-21",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="actual = false" id="08de3fd8-7aae-43b5-893c-7533e95929e8"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606133,
      "dateTime": "2022-02-20T19:08:23",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 127636390,
      "patientId": """+patientId+""",
      "isActual": false,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": 173933128,
      "attachBeginDate": "2022-02-21",
      "attachEndDate": "2022-02-21",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "areaTypeCode": 20,
   	 "areaNumber": 8,
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachEndCause": {
         "globalId": 128619959,
         "code": "10",
         "title": "Выбор другой мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="attachType.code != 1" id="5d3fec10-40b7-4ec5-bde4-d7609b9b4389"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-02-21T15:41:54",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": 173933126,
      "attachBeginDate": "2022-02-21",
      "attachType": {
         "globalId": 128619858,
         "code": "2",
         "title": "базовое терапевтическое"
      },
      "areaTypeCode": 20,
   	 "areaNumber": 8,
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="moId null" id="7c5d51a4-5e9e-48d5-82d5-998b44fabb30"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-02-21T15:41:54",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": null,
      "muId": 204,
      "areaId": 173933126,
      "attachBeginDate": "2022-02-21",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "areaTypeCode": 20,
   	 "areaNumber": 8,
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="muId null" id="7033c901-19fb-4808-821b-741157ae3f4f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-02-21T15:41:54",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": null,
      "areaId": 173933126,
      "attachBeginDate": "2022-02-21",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "areaTypeCode": 20,
   	 "areaNumber": 8,
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="areaTypeCode != 20" id="658f2643-e959-4009-a3c8-134233f731d3"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-02-21T15:41:54",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": 173933126,
      "attachBeginDate": "2022-02-21",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "areaTypeCode": 10,
   	 "areaNumber": 8,
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="change" id="e515236d-444a-45c5-a2a5-69917d714b4f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-09-21T15:41:54",
      "eventType": "CHANGE"
   },
   "attachmentNewValue": {
      "attachId": 127636389,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 201,
      "muId": 201,
      "areaId": 173933133,
      "attachBeginDate": "2022-02-21",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "areaTypeCode": 20,
   	 "areaNumber": 8,
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>562223152</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="50fef59d-e7fa-4937-a173-0972f7a8dd92" name="vaccinationExemptionInfo"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="73fd90bb-386e-4d32-85f5-04d083935857" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationExemptionMedicalExemptionTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="1fbcc271-674f-482a-a43e-5eec52beaf81"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="1f13ff75-170c-454f-8be1-605123d63b10" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="f3543ad4-d845-46ef-9e49-e6fb4f5feb94"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create Полный" id="bf4b9d62-c962-43bb-b308-e86ff31bd0c5"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="a3c4d94c-1f98-45a5-bd14-08b917c6b40c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update частичный без exemptionEndDate" id="e3e25175-491e-4ff5-9c9f-5cc2090e30e1"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
  def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="текущая дата меньше > exemptionEndDate" id="ff00d384-7f08-4a14-8229-6a1dcf90daab"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateLower2")
def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="exemptionDuration != &quot;постоянный&quot;" id="23be55a0-fa07-47be-ae69-301889455b1b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("exemptionDuration")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="78d6d048-12b9-4f89-834b-6f9e9595a8c5"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2412</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationExemptionInfo\t_vaccination_medical_exemption create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationExemptionInfo\t_vaccination_medical_exemption update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationExemptionInfo\t_vaccination_medical_exemption delete.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-11-24T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-11-24</con:value></con:property><con:property><con:name>exemptionDuration</con:name><con:value>\vaccinationExemptionInfo\t_vaccination_medical_exemption exemptionDuration.json</con:value></con:property><con:property><con:name>date90</con:name><con:value>2021-12-18T00:00:00</con:value></con:property><con:property><con:name>date902</con:name><con:value>2021-12-18</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Вирусный гепатит В</con:value></con:property></con:properties></con:testCase><con:testCase id="6f3e4c94-2f47-4c9a-b379-eb6dd11c0c48" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationExemptionPrenatalRecordTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="9728e1c4-936a-4009-a45d-1c01d8b20398"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="c481d723-916c-4154-a732-195fbf4bcea4" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="22a2ecc0-9783-43c0-bfae-ab3e7653a286"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90" id="41c33cb1-d8f6-4ef5-bafd-6e81fbab624d"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -75;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90", currentDate_formatted )
def currentDate2 = today.getTime() -75;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date902", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90-365" id="aaeba205-07c7-4f90-b172-a15c7aba33c4"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -95;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90-365", currentDate_formatted )
def currentDate2 = today.getTime() -95;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date90-3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 365" id="1f058ba7-f4b3-4bb6-9da6-2b0d045533cd"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -370;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date365", currentDate_formatted )
def currentDate2 = today.getTime() -370;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create Временный и Длительный" id="3e5164f9-a9d1-44ac-b065-6bd220c9830f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update Постоянный и без TBexemptionEndDate" id="454edfc7-7029-4de2-bdcf-82d7860c2b50"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date3652",date3652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="9016aecb-1ded-4e4d-888e-cdaecfc1a5d8"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="текущая дата меньше > exemptionEndDate" id="85eff355-8180-483b-98ba-20d1c9493803"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateLower2")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Неправильный TBcheck1 и HBcheck2" id="ac463e92-ec41-473a-80a5-25a134c61b50"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("check")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="13d7f01c-da40-48b9-a52f-bbc40cc36c07"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2240</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationExemptionInfo\t_prenatal_record create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationExemptionInfo\t_prenatal_record update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationExemptionInfo\t_prenatal_record delete.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-11-24T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-11-24</con:value></con:property><con:property><con:name>check</con:name><con:value>\vaccinationExemptionInfo\t_prenatal_record check.json</con:value></con:property><con:property><con:name>date90</con:name><con:value>2022-01-07T00:00:00</con:value></con:property><con:property><con:name>date902</con:name><con:value>2022-01-07</con:value></con:property><con:property><con:name>date90-365</con:name><con:value>2021-12-18T00:00:00</con:value></con:property><con:property><con:name>date90-3652</con:name><con:value>2021-12-18</con:value></con:property><con:property><con:name>date365</con:name><con:value>2021-03-18T00:00:00</con:value></con:property><con:property><con:name>date3652</con:name><con:value>2021-03-18</con:value></con:property></con:properties></con:testCase><con:testCase id="afc64056-be4e-4702-aac8-27ec955eb6f2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationExemptionNewbornInfoQuestionaryTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="22aca662-3bf0-4d86-974d-3d06e33a2df0"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="ae9e72e2-6d18-4e23-bc52-5d5c7e78ebf1" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="d2726b50-c260-4c28-8c57-f4876b333535"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90" id="4b9c19ce-a330-4ff1-957a-61dadbd12134"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -75;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90", currentDate_formatted )
def currentDate2 = today.getTime() -75;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date902", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90-365" id="dba6f808-5a3e-4892-ad45-db43ac416aaf"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -95;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90-365", currentDate_formatted )
def currentDate2 = today.getTime() -95;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date90-3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 365" id="3156d301-21c6-45fc-878f-da6b6b4067d6"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -370;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date365", currentDate_formatted )
def currentDate2 = today.getTime() -370;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create Временный и Длительный" id="dab562ed-3fe6-4845-9de2-fd4332964130"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$HBinfectionName",HBinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update Постоянный и без TBexemptionEndDate" id="9f217d5f-2a75-4456-b561-a5265a7851c3"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
  def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date3652",date3652).replace("\$HBinfectionName",HBinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="c5a53238-c177-4edc-b75a-794657116db3"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
  def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$HBinfectionName",HBinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="текущая дата меньше > exemptionEndDate" id="9cf57838-35de-4894-a5a0-f1a769ed4562"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateLower2")
  def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$HBinfectionName",HBinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Неправильный TBcheck1 и HBcheck2" id="c9ea67a8-3902-4e0a-900d-74fcb0ea0710"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("check")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
  def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$HBinfectionName",HBinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="57827a4e-a712-471c-b4df-fd45960c6891"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2290</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationExemptionInfo\t_newborn_info_questionarу_form_948 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationExemptionInfo\t_newborn_info_questionarу_form_948 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationExemptionInfo\t_newborn_info_questionarу_form_948 delete.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-11-25T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-11-25</con:value></con:property><con:property><con:name>check</con:name><con:value>\vaccinationExemptionInfo\t_newborn_info_questionarу_form_948 check.json</con:value></con:property><con:property><con:name>date90</con:name><con:value>2022-09-10T00:00:00</con:value></con:property><con:property><con:name>date902</con:name><con:value>2022-09-10</con:value></con:property><con:property><con:name>date90-365</con:name><con:value>2022-08-21T00:00:00</con:value></con:property><con:property><con:name>date90-3652</con:name><con:value>2022-08-21</con:value></con:property><con:property><con:name>date365</con:name><con:value>2021-11-19T00:00:00</con:value></con:property><con:property><con:name>date3652</con:name><con:value>2021-11-19</con:value></con:property><con:property><con:name>HBinfectionName</con:name><con:value>Вирусный гепатит В</con:value></con:property></con:properties></con:testCase><con:testCase id="e0a8a83c-cec4-472a-b32e-f1d6cd7d56b0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationExemptionPediatristExaminationTo14TopicJob не актуально" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="0d17e442-c9f5-417b-a39a-4d54dae0522c"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"1547"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="73d3fdd1-e72f-456c-a0b0-6c4e1a54847b"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90" id="bd092b09-3698-4b85-8e84-db0ca73b4bac"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -75;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90", currentDate_formatted )
def currentDate2 = today.getTime() -75;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date902", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90-365" id="eca32be9-85f9-41b0-a17c-1d6d4ecfce8b"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -95;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90-365", currentDate_formatted )
def currentDate2 = today.getTime() -95;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date90-3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 365" id="8d5698fd-958d-4761-b557-86575b806e34"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -370;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date365", currentDate_formatted )
def currentDate2 = today.getTime() -370;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create Временный" id="24d3f41e-ddd2-4292-8338-4ec5ef1a8766"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="bdd3d848-6e01-4d15-b8e4-d379482284bc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update Длительный" id="8d762b6e-a4e9-4ccd-8739-2b318c54b6ca"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date903652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update Постоянный" id="a182d1c3-8e29-4291-b5d1-1c8e9d6147cd"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date3652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update без exemptionEndDate" id="7ca52fe0-dd0b-46d3-8f1d-6952afa41af7" disabled="true"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",date3652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update без Ocheck" id="f1917be6-e657-4a8f-88fd-83996b1d9cb7" disabled="true"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("Ocheck")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",date3652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="текущая дата меньше > exemptionEndDate" id="9778d3b5-15f2-450b-82c5-66145f5b2977" disabled="true"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateLower2")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1547</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationExemptionInfo\t_pediatrist_examination (1-14) create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationExemptionInfo\t_pediatrist_examination (1-14) update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationExemptionInfo\t_pediatrist_examination (1-14) delete.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-03-24T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-03-24</con:value></con:property><con:property><con:name>Ocheck</con:name><con:value>\vaccinationExemptionInfo\t_pediatrist_examination (1-14) Ocheck.json</con:value></con:property><con:property><con:name>date90</con:name><con:value>2022-01-07T00:00:00</con:value></con:property><con:property><con:name>date902</con:name><con:value>2022-01-07</con:value></con:property><con:property><con:name>date90-365</con:name><con:value>2021-12-18T00:00:00</con:value></con:property><con:property><con:name>date90-3652</con:name><con:value>2021-12-18</con:value></con:property><con:property><con:name>date365</con:name><con:value>2021-03-18T00:00:00</con:value></con:property><con:property><con:name>date3652</con:name><con:value>2021-03-18</con:value></con:property></con:properties></con:testCase><con:testCase id="89f92eb4-a7fd-478f-b483-437ec93ad276" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationExemptionPediatristExaminationTo17TopicJob не актуально" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="09a7564a-f8ea-4c7c-81f4-931b5ef1ca2d"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"14131"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="021c29d4-fc49-4503-8848-e074c4c0b38a"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90" id="f3e1184a-eee1-49b6-b435-f319f76dbbc2"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -75;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90", currentDate_formatted )
def currentDate2 = today.getTime() -75;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date902", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90-365" id="5888eb5c-845c-4c85-9ac5-61fdee792c81"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -95;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90-365", currentDate_formatted )
def currentDate2 = today.getTime() -95;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date90-3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 365" id="67a88f79-580b-40bc-9b9d-48ce4b6a180d"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -370;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date365", currentDate_formatted )
def currentDate2 = today.getTime() -370;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create Временный" id="c7867e9f-954c-40fe-bbcf-e6575826dc0e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="facc3ac8-4cc3-458a-a2dc-7f4ef94b4c7b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update Длительный" id="f157f832-67c4-4a60-98cf-f7951663c64a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date903652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update Постоянный" id="be2a20bc-c628-407b-a138-1f7e1aa607cc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date3652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update без exemptionEndDate" id="1fcbe927-2057-4737-be73-50025401418c" disabled="true"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",date3652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update без Ocheck" id="b2d61466-16d0-40df-b166-00f330036229" disabled="true"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("Ocheck")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",date3652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="текущая дата меньше > exemptionEndDate" id="55996622-6e63-4bc0-b424-4fa1e83c57e4" disabled="true"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateLower2")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>14091</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationExemptionInfo\t_pediatrist_examination (15-17) create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationExemptionInfo\t_pediatrist_examination (15-17) update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationExemptionInfo\t_pediatrist_examination (15-17) delete.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-03-23T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-03-23</con:value></con:property><con:property><con:name>Ocheck</con:name><con:value>\vaccinationExemptionInfo\t_pediatrist_examination (15-17) Ocheck.json</con:value></con:property><con:property><con:name>date90</con:name><con:value>2022-01-06T00:00:00</con:value></con:property><con:property><con:name>date902</con:name><con:value>2022-01-06</con:value></con:property><con:property><con:name>date90-365</con:name><con:value>2021-12-17T00:00:00</con:value></con:property><con:property><con:name>date90-3652</con:name><con:value>2021-12-17</con:value></con:property><con:property><con:name>date365</con:name><con:value>2021-03-17T00:00:00</con:value></con:property><con:property><con:name>date3652</con:name><con:value>2021-03-17</con:value></con:property></con:properties></con:testCase><con:testCase id="afa0a85a-1c3e-4f94-b5e9-b9ae926e42cf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationExemptionPrenatalVisitingNurseTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="e44200a1-cfc2-473d-8cb5-144b1328d5a7"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="6bfff3e4-30e5-4783-aec9-b4546b5d01ca" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="05bb2faf-907a-42e0-ab48-6d3a36149a1c"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90" id="89d0ff62-830a-4b49-ab66-12502a65de65"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -75;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90", currentDate_formatted )
def currentDate2 = today.getTime() -75;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date902", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90-365" id="fec6fd8d-b009-4a44-92db-d3d63da90bf4"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -95;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90-365", currentDate_formatted )
def currentDate2 = today.getTime() -95;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date90-3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 365" id="9d6e3347-7121-439f-8cc9-7c358dfe135c"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -370;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date365", currentDate_formatted )
def currentDate2 = today.getTime() -370;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create Временный и Длительный" id="598392f0-b85b-42f4-8f2d-165bf624d858"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
  def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$HBinfectionName",HBinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update Постоянный и без TBexemptionEndDate" id="d03c80b5-0421-4d37-a888-c41c2725f417"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
  def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date3652",date3652).replace("\$HBinfectionName",HBinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="db7f902f-3b4f-4b45-a047-f94ab15adcf3"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
  def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$HBinfectionName",HBinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="текущая дата меньше > exemptionEndDate" id="e13ee018-85fc-4066-8bf0-112e639b87b4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateLower2")
  def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$HBinfectionName",HBinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Неправильный TBcheck1 и HBcheck2" id="a0ab74e3-3975-483a-99b2-16cea1a08b20"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic6")
 String file =scripts.returnFileAsText("check")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
  def HBinfectionName =testRunner.testCase.getPropertyValue("HBinfectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$HBinfectionName",HBinfectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="d5c66e5d-61ba-4ad8-bf79-c5811d224057"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2247</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationExemptionInfo\t_prenatal_record_visiting_nurse create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationExemptionInfo\t_prenatal_record_visiting_nurse update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationExemptionInfo\t_prenatal_record_visiting_nurse delete.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-11-24T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-11-24</con:value></con:property><con:property><con:name>check</con:name><con:value>\vaccinationExemptionInfo\t_prenatal_record_visiting_nurse check.json</con:value></con:property><con:property><con:name>date90</con:name><con:value>2022-09-09T00:00:00</con:value></con:property><con:property><con:name>date902</con:name><con:value>2022-09-09</con:value></con:property><con:property><con:name>date90-365</con:name><con:value>2022-08-20T00:00:00</con:value></con:property><con:property><con:name>date90-3652</con:name><con:value>2022-08-20</con:value></con:property><con:property><con:name>date365</con:name><con:value>2021-11-18T00:00:00</con:value></con:property><con:property><con:name>date3652</con:name><con:value>2021-11-18</con:value></con:property><con:property><con:name>HBinfectionName</con:name><con:value>Вирусный гепатит В</con:value></con:property></con:properties></con:testCase><con:testCase id="be5911eb-04e3-404d-91ea-f5f4f019733c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationExemptionVaccinationCardTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="c4daa7cf-b42a-4bd9-ba16-382d7a3393aa"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="1041200a-e61b-4622-9d28-316fca35a8e1" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="a00b3f1e-0eba-47dd-8f6c-a8fc3443230e"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90" id="801fc0e1-2cf6-49ae-8d01-6baf39657c6c"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -75;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90", currentDate_formatted )
def currentDate2 = today.getTime() -75;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date902", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90-365" id="fb4909cd-a848-44a8-8452-9a3af1ca421d"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -95;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90-365", currentDate_formatted )
def currentDate2 = today.getTime() -95;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date90-3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 365" id="dfb1f31c-e83f-4473-baa5-d6f2a70cb8c3"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -370;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date365", currentDate_formatted )
def currentDate2 = today.getTime() -370;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create Временный и частичный" id="94a9545a-7b39-4abe-92a2-0295b49879a7"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update Длительный и Полный" id="5b655a6d-9fc9-4408-81c3-64145da2f8ef"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update Постоянный" id="11e97e4f-7b16-4bbc-bbf8-f1c85c49bdea"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date3652",date3652).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update Постоянный и без даты" id="63964acb-7fb4-466d-9a3e-03bb1cd57c5f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("date")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date3652 =testRunner.testCase.getPropertyValue("date3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date3652",date3652).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="54eef7e2-bbf0-4dc2-8bb9-4500ecf61acc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="текущая дата меньше > exemptionEndDate" id="3c59907d-b3e5-4365-a169-6afc0134f10a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateLower2")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Неправильный TBcheck1 и HBcheck2" id="71e86ea6-b80b-4868-9b4e-de00ba8b688c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("check")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="typecheck = false" id="54e60bae-1552-42ef-9dfa-eacffad4b6a4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("typecheck")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="typecheck2 = false" id="a800c1e7-1170-4a84-9e4b-4b992286e45e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("typecheck2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="347bd3f5-458e-47a9-bf47-7f5e1aa8d97e"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2264</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationExemptionInfo\vaccination_card create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationExemptionInfo\vaccination_card update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationExemptionInfo\vaccination_card delete.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-11-24T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-11-24</con:value></con:property><con:property><con:name>exemption</con:name><con:value>\vaccinationExemptionInfo\vaccination_card exemption.json</con:value></con:property><con:property><con:name>date90</con:name><con:value>2022-09-09T00:00:00</con:value></con:property><con:property><con:name>date902</con:name><con:value>2022-09-09</con:value></con:property><con:property><con:name>date90-365</con:name><con:value>2022-08-20T00:00:00</con:value></con:property><con:property><con:name>date90-3652</con:name><con:value>2022-08-20</con:value></con:property><con:property><con:name>date365</con:name><con:value>2021-11-18T00:00:00</con:value></con:property><con:property><con:name>date3652</con:name><con:value>2021-11-18</con:value></con:property><con:property><con:name>date</con:name><con:value>\vaccinationExemptionInfo\vaccination_card date.json</con:value></con:property><con:property><con:name>typecheck</con:name><con:value>\vaccinationExemptionInfo\vaccination_card typecheck.json</con:value></con:property><con:property><con:name>typecheck2</con:name><con:value>\vaccinationExemptionInfo\vaccination_card typecheck2.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Вирусный гепатит В</con:value></con:property></con:properties></con:testCase><con:testCase id="f2c51c8b-8c6d-47dd-8d7d-7c06eaae5a0f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationExemptionTImmunizationMedicalExemptionTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="7b10fa7f-db41-482a-8d90-85135705b890"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="753f89b2-84a8-4fcb-9580-b553cb1da4b2" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="5d612a09-6afb-4cb1-9787-1daa3196319d"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create полный" id="931c3a6b-44d8-4865-9cec-58cf092a768e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic8")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update постоянный" id="3ad294d5-095a-4394-b30e-9b77409ea1ae"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic8")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create частичный" id="0f358384-6464-4576-aa1e-46ba7515c6cc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic8")
 String file =scripts.returnFileAsText("partial")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="deea2e17-7ece-419f-a4c2-e56c8be7d66b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic8")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Без exemptionStart" id="5ffcb1f8-c6a5-49dd-ad64-ba90fbd6f4c8"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic8")
 String file =scripts.returnFileAsText("exemption")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date -1" id="5084e62b-556f-4762-b0f6-2d8394ddab79" disabled="true"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() - 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Дата окончания меньше текущей" id="c4b90264-0b3f-4255-895a-b67e9e2627b0" disabled="true"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic8")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$infectionName",infectionName)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="cd1f2af0-13fe-40ce-9d9a-ef1e0be95e0b"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="3e558ed6-7b1f-4e65-b119-e70b99e42c74" name="Создан vaccinationFact"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationInfo.vaccinations[0].vaccinationFact</path><content>[{"vaccinationDate":"2022-03-15T12:44:11.692623+03:00","infectionCode":"A16.5","docId":"bfb5827e-7220-4b4a-b207-fce7246c${#TestCase#patientId}","vaccinationFrequency":"N.61"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2713</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationExemptionInfo\t_immunization_medical_exemption create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationExemptionInfo\t_immunization_medical_exemption update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationExemptionInfo\t_immunization_medical_exemption create.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-11-24T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-11-24</con:value></con:property><con:property><con:name>partial</con:name><con:value>\vaccinationExemptionInfo\t_immunization_medical_exemption partial.json</con:value></con:property><con:property><con:name>date90</con:name><con:value>2022-01-07T00:00:00</con:value></con:property><con:property><con:name>date902</con:name><con:value>2022-01-07</con:value></con:property><con:property><con:name>date90-365</con:name><con:value>2021-12-18T00:00:00</con:value></con:property><con:property><con:name>date90-3652</con:name><con:value>2021-12-18</con:value></con:property><con:property><con:name>date365</con:name><con:value>2021-03-18T00:00:00</con:value></con:property><con:property><con:name>date3652</con:name><con:value>2021-03-18</con:value></con:property><con:property><con:name>exemption</con:name><con:value>\vaccinationExemptionInfo\t_immunization_medical_exemption exemption.json</con:value></con:property><con:property><con:name>typecheck</con:name><con:value>\vaccinationExemptionInfo\vaccination_card typecheck.json</con:value></con:property><con:property><con:name>typecheck2</con:name><con:value>\vaccinationExemptionInfo\vaccination_card typecheck2.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>Вирусный гепатит В</con:value></con:property></con:properties></con:testCase><con:testCase id="db66f284-e905-4781-9ea0-4adf46e564cf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationExemptionInfoUpdate" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="11477f9c-b8df-4b90-87a9-c71cf02eff1a"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"1629"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="66680989-9140-4a92-aef3-683b94cea676"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90" id="782b3149-e264-4a27-b2f8-90636dcce625"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -75;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90", currentDate_formatted )
def currentDate2 = today.getTime() -75;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date902", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 90-365" id="26360b29-3b54-43d2-b7a8-00466e9809f6"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -95;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date90-365", currentDate_formatted )
def currentDate2 = today.getTime() -95;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date90-3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set Date 365" id="ab61a53d-c575-4589-9e45-91c3cf9776fc"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() -370;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date365", currentDate_formatted )
def currentDate2 = today.getTime() -370;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "date3652", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create частичный" id="0af56263-4a84-4efb-b81e-084130a3f621"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update Полный" id="9522c6cc-26db-4911-af86-836fd3831b51"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic7")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def date902 =testRunner.testCase.getPropertyValue("date902")
 def date903652 =testRunner.testCase.getPropertyValue("date90-3652")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2).replace("\$date902",date902).replace("\$date90-3652",date903652)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="vaccinationFact" id="7d365f50-3553-48db-b4bb-399236f81676"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic9")
 String file =scripts.returnFileAsText("create2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def infectionName =testRunner.testCase.getPropertyValue("infectionName")
 def date2 =testRunner.testCase.getPropertyValue("date2")
 def vaccinationFrequency =testRunner.testCase.getPropertyValue("vaccinationFrequency")
 String message = file.replace("\$patientId",patientId).replace("\$infectionName",infectionName).replace("\$date",date2).replace("\$vaccinationFrequency",vaccinationFrequency)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1629</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationExemptionInfo\vaccination_card create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationExemptionInfo\vaccination_card update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationExemptionInfo\vaccination_card delete.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-06-17T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-06-17</con:value></con:property><con:property><con:name>exemption</con:name><con:value>\vaccinationExemptionInfo\vaccination_card exemption.json</con:value></con:property><con:property><con:name>date90</con:name><con:value>2022-04-02T00:00:00</con:value></con:property><con:property><con:name>date902</con:name><con:value>2022-04-02</con:value></con:property><con:property><con:name>date90-365</con:name><con:value>2022-03-13T00:00:00</con:value></con:property><con:property><con:name>date90-3652</con:name><con:value>2022-03-13</con:value></con:property><con:property><con:name>date365</con:name><con:value>2021-06-11T00:00:00</con:value></con:property><con:property><con:name>date3652</con:name><con:value>2021-06-11</con:value></con:property><con:property><con:name>date</con:name><con:value>\vaccinationExemptionInfo\vaccination_card date.json</con:value></con:property><con:property><con:name>typecheck</con:name><con:value>\vaccinationExemptionInfo\vaccination_card typecheck.json</con:value></con:property><con:property><con:name>typecheck2</con:name><con:value>\vaccinationExemptionInfo\vaccination_card typecheck2.json</con:value></con:property><con:property><con:name>create2</con:name><con:value>\vaccinationInfoUpdate\t_COVID_vaccination.v1.3 create.json</con:value></con:property><con:property><con:name>infectionName</con:name><con:value>B.12 description</con:value></con:property><con:property><con:name>vaccinationFrequency</con:name><con:value>R2</con:value></con:property><con:property><con:name>date2</con:name><con:value>2019-09-01</con:value></con:property></con:properties></con:testCase><con:testCase id="a1258b1b-ce02-4422-b97d-6ada54d82ba1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationExemptionInfoCovidVacMedicalExemptionTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="adac8339-f2de-4e3d-a866-337c2094145f"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="c91286f4-c73e-41a1-a68e-4db9d4e9b028" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Date +1" id="27e13f7f-0578-429a-9de8-3b4fb366ee88"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create Временный" id="b4249f71-42a6-4e3d-8012-c1f332136d8f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check 1" id="7da8c8c9-de8e-480a-a335-db3b9007e7d6"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check 1" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан vaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionEndDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","exemptionDuration":"Временный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан nvaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"exemptionDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionDuration":"Временный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Update Постоянный" id="2f1a5f53-3118-47b8-9743-bfa589ab0bd3"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check 2" id="637db1f1-dfea-4f6b-b59d-42615764e243"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check 2" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан vaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionDuration":"Постоянный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан nvaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"},"exemptionDuration":"Постоянный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create Длительный" id="88dbe311-a67d-45f9-bf69-e4c5336f62a2"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("exemptionDuration")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check 3" id="9c560298-6ce5-4885-920a-2f0d61d5361c"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check 3" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан vaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":[{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"}],"exemptionEndDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","exemptionDuration":"Длительный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="Создан nvaccinationExemptionInfos"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"exemptionDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":[{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"}],"exemptionDuration":"Длительный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Delete другой docId" id="44746d3a-1e2e-4e84-9d51-fda04c79292a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("delete docId")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check 4" id="0adcb5ca-6f5b-43e4-a785-e12af9b6ea70"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check 4" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="vaccinationExemptionInfos не удален"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":[{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"}],"exemptionEndDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","exemptionDuration":"Длительный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="nvaccinationExemptionInfos не удален"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"exemptionDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":[{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"}],"exemptionDuration":"Длительный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Delete другой exemptionStartDate" id="9e58b6c0-5f3c-47a7-8f20-b135efd688e1"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("delete exemptionStartDate")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check 5" id="7e3b08dd-0b02-411a-83ba-ac42d76d7e34"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check 5" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="vaccinationExemptionInfos не удален"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":[{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"}],"exemptionEndDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","exemptionDuration":"Длительный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="nvaccinationExemptionInfos не удален"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"exemptionDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":[{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"}],"exemptionDuration":"Длительный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Delete другой exemptionEndDate" id="0f6a232d-0e7d-42c3-ad64-e22e75518be6"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("delete exemptionEndDate")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check 6" id="91bdddc8-a4e1-445d-abde-357bfc144520"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check 6" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="vaccinationExemptionInfos не удален"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.vaccinationExemptionInfos</path><content>[{"exemptionStartDate":"2022-11-07T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":[{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"}],"exemptionEndDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","exemptionDuration":"Длительный","exemptionType":"частичный"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cb5c0a-806a-4e5b-bbf1-46e3bc9fbdac" name="nvaccinationExemptionInfos не удален"><con:configuration><path>$.hits.hits[0]._source.data.vaccinationExemptionInfo.nvaccinationExemptionInfos</path><content>[{"exemptionDate":"${#TestCase#dateHigher2}T13:48:45.979+03:00","docId":"f563207d-5a25-48d2-a2a1-1825a4${#TestCase#patientId}","infections":[{"infectionCode":"238","infectionName":"Коронавирусная инфекция (COVID-19)"}],"exemptionDuration":"Длительный","exemptionType":"частичный","startDate":"2022-11-07T13:48:45.979+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="77d0038d-f06d-435a-bae0-7f5154ff1d89"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check 7 поправить ассерт" id="9928e37c-d206-4b5a-b9dd-7a6916174106"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check 7 поправить ассерт" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="46db2bda-f916-4210-94da-2c779846bfa4" name="Удален vaccinationExemptionInfos"><con:configuration><token>vaccinationExemptionInfos</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create текущая дата > exemptionEndDate" id="cbde9b3e-1805-4810-ad91-e4d9a93b22b4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic10")
 String file =scripts.returnFileAsText("create date")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 String message = file.replace("\$patientId",patientId).replace("\$dateHigher2",dateHigher2)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check 8" id="abfa8b33-570c-4bc8-a8c5-b641f45b5dd0"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check 8" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="c03d85a6-29a7-4529-b3be-38aad7c08170" name="Не создан vaccinationExemptionInfos"><con:configuration><token>vaccinationExemptionInfos</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>2276</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationExemptionInfo\t_COVID_vaccination_medical_exemption create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationExemptionInfo\t_COVID_vaccination_medical_exemption update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationExemptionInfo\t_COVID_vaccination_medical_exemption delete.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-11-24T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-11-24</con:value></con:property><con:property><con:name>exemptionDuration</con:name><con:value>\vaccinationExemptionInfo\t_COVID_vaccination_medical_exemption exemptionDuration.json</con:value></con:property><con:property><con:name>date90</con:name><con:value>2021-12-18T00:00:00</con:value></con:property><con:property><con:name>date902</con:name><con:value>2021-12-18</con:value></con:property><con:property><con:name>delete docId</con:name><con:value>\vaccinationExemptionInfo\t_COVID_vaccination_medical_exemption docId.json</con:value></con:property><con:property><con:name>delete exemptionStartDate</con:name><con:value>\vaccinationExemptionInfo\t_COVID_vaccination_medical_exemption exemptionStartDate.json</con:value></con:property><con:property><con:name>delete exemptionEndDate</con:name><con:value>\vaccinationExemptionInfo\t_COVID_vaccination_medical_exemption exemptionEndDate.json</con:value></con:property><con:property><con:name>create date</con:name><con:value>\vaccinationExemptionInfo\t_COVID_vaccination_medical_exemption date.json</con:value></con:property></con:properties></con:testCase><con:testCase id="5c21d640-d656-4a67-a033-53ae135e19aa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="vaccinationExemptionInfoImmunoprophylaxisMedicalExemptionTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="a934137d-c3c2-4d5a-9951-1ed1ec446604"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="54b84923-6ee4-4d27-b439-a573a9125b76" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple NotContains" id="f8a4344c-c45f-4e40-a269-bc473293ff5d" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set exemptionEndDate +1" id="9143326a-34a9-403f-b958-400e583fc46c"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() + 1;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateHigher", currentDate_formatted )
def currentDate2 = today.getTime() + 1;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateHigher2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set exemptionStartDate 90" id="53d6e0c6-360d-4962-bfbe-989bdda92e83"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate2 = today.getTime() -89;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "exemptionStartDate", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set exemptionStartDate 91" id="93fa176f-d5ee-469f-8604-077e6fbe8b53"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate2 = today.getTime() -90;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "exemptionStartDate", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set exemptionStartDate 364" id="75731c9b-bd3f-41bb-9505-0758040d0af9"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate2 = today.getTime() -363;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "exemptionStartDate", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="4883ed52-c89c-4e90-a958-58c6156ef999"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic11")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def exemptionStartDate =testRunner.testCase.getPropertyValue("exemptionStartDate")
 def infectionName1 =testRunner.testCase.getPropertyValue("infectionName1")
 def infectionName2 =testRunner.testCase.getPropertyValue("infectionName2")
 def immunoprophylaxisTypes =testRunner.testCase.getPropertyValue("immunoprophylaxisTypes")
 def exemptionDuration =testRunner.testCase.getPropertyValue("exemptionDuration")
 def exemptionType =testRunner.testCase.getPropertyValue("exemptionType")
 String message = file.replace("\$patientId",patientId).replace("\$exemptionStartDate",exemptionStartDate).replace("\$dateHigher2",dateHigher2).replace("\$infectionName1",infectionName1).replace("\$infectionName2",infectionName2).replace("\$immunoprophylaxisTypes",immunoprophylaxisTypes).replace("\$exemptionDuration",exemptionDuration).replace("\$exemptionType",exemptionType)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без exemptionStartDate" id="e3457607-8eed-48d8-a3e2-41c8c114637b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic11")
 String file =scripts.returnFileAsText("exemption")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def exemptionStartDate =testRunner.testCase.getPropertyValue("exemptionStartDate")
 def infectionName1 =testRunner.testCase.getPropertyValue("infectionName1")
 def infectionName2 =testRunner.testCase.getPropertyValue("infectionName2")
 def immunoprophylaxisTypes =testRunner.testCase.getPropertyValue("immunoprophylaxisTypes")
 def exemptionDuration =testRunner.testCase.getPropertyValue("exemptionDuration")
 def exemptionType =testRunner.testCase.getPropertyValue("exemptionType")
 String message = file.replace("\$patientId",patientId).replace("\$exemptionStartDate",exemptionStartDate).replace("\$dateHigher2",dateHigher2).replace("\$infectionName1",infectionName1).replace("\$infectionName2",infectionName2).replace("\$immunoprophylaxisTypes",immunoprophylaxisTypes).replace("\$exemptionDuration",exemptionDuration).replace("\$exemptionType",exemptionType)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без exemptionEndDate" id="314120e8-db35-44d2-bb30-bfbf4ac52ce7"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic11")
 String file =scripts.returnFileAsText("end")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def exemptionStartDate =testRunner.testCase.getPropertyValue("exemptionStartDate")
 def infectionName1 =testRunner.testCase.getPropertyValue("infectionName1")
 def infectionName2 =testRunner.testCase.getPropertyValue("infectionName2")
 def immunoprophylaxisTypes =testRunner.testCase.getPropertyValue("immunoprophylaxisTypes")
 def exemptionDuration =testRunner.testCase.getPropertyValue("exemptionDuration")
 def exemptionType =testRunner.testCase.getPropertyValue("exemptionType")
 String message = file.replace("\$patientId",patientId).replace("\$exemptionStartDate",exemptionStartDate).replace("\$dateHigher2",dateHigher2).replace("\$infectionName1",infectionName1).replace("\$infectionName2",infectionName2).replace("\$immunoprophylaxisTypes",immunoprophylaxisTypes).replace("\$exemptionDuration",exemptionDuration).replace("\$exemptionType",exemptionType)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="f4367737-6f9a-43bd-a0a2-3ef9353eb15c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic11")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def exemptionStartDate =testRunner.testCase.getPropertyValue("exemptionStartDate")
 def infectionName1 =testRunner.testCase.getPropertyValue("infectionName1")
 def infectionName2 =testRunner.testCase.getPropertyValue("infectionName2")
 def immunoprophylaxisTypes =testRunner.testCase.getPropertyValue("immunoprophylaxisTypes")
 def exemptionDuration =testRunner.testCase.getPropertyValue("exemptionDuration")
 def exemptionType =testRunner.testCase.getPropertyValue("exemptionType")
 String message = file.replace("\$patientId",patientId).replace("\$exemptionStartDate",exemptionStartDate).replace("\$dateHigher2",dateHigher2).replace("\$infectionName1",infectionName1).replace("\$infectionName2",infectionName2).replace("\$immunoprophylaxisTypes",immunoprophylaxisTypes).replace("\$exemptionDuration",exemptionDuration).replace("\$exemptionType",exemptionType)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Deleted" id="39cc91b3-6bac-405c-bf14-e7a2b53afc3a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic11")
 String file =scripts.returnFileAsText("deleted")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def exemptionStartDate =testRunner.testCase.getPropertyValue("exemptionStartDate")
 def infectionName1 =testRunner.testCase.getPropertyValue("infectionName1")
 def infectionName2 =testRunner.testCase.getPropertyValue("infectionName2")
 def immunoprophylaxisTypes =testRunner.testCase.getPropertyValue("immunoprophylaxisTypes")
 def exemptionDuration =testRunner.testCase.getPropertyValue("exemptionDuration")
 def exemptionType =testRunner.testCase.getPropertyValue("exemptionType")
 String message = file.replace("\$patientId",patientId).replace("\$exemptionStartDate",exemptionStartDate).replace("\$dateHigher2",dateHigher2).replace("\$infectionName1",infectionName1).replace("\$infectionName2",infectionName2).replace("\$immunoprophylaxisTypes",immunoprophylaxisTypes).replace("\$exemptionDuration",exemptionDuration).replace("\$exemptionType",exemptionType)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="ba7fb7c0-26cf-4ac3-8431-69b3f02e692e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic11")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateHigher2 =testRunner.testCase.getPropertyValue("dateHigher2")
 def exemptionStartDate =testRunner.testCase.getPropertyValue("exemptionStartDate")
 def infectionName1 =testRunner.testCase.getPropertyValue("infectionName1")
 def infectionName2 =testRunner.testCase.getPropertyValue("infectionName2")
 def immunoprophylaxisTypes =testRunner.testCase.getPropertyValue("immunoprophylaxisTypes")
 def exemptionDuration =testRunner.testCase.getPropertyValue("exemptionDuration")
 def exemptionType =testRunner.testCase.getPropertyValue("exemptionType")
 String message = file.replace("\$patientId",patientId).replace("\$exemptionStartDate",exemptionStartDate).replace("\$dateHigher2",dateHigher2).replace("\$infectionName1",infectionName1).replace("\$infectionName2",infectionName2).replace("\$immunoprophylaxisTypes",immunoprophylaxisTypes).replace("\$exemptionDuration",exemptionDuration).replace("\$exemptionType",exemptionType)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="16a387ee-dbf3-4961-8b1a-e764ca109f38"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:assertion type="Simple Contains" id="ad08be21-31dc-487e-bc09-665da223105c" name="Создан vaccinationExemptionInfos"><con:configuration><token>vaccinationExemptionInfos</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>3088</con:value></con:property><con:property><con:name>create</con:name><con:value>\vaccinationExemptionInfo\t_immunoprophylaxis_medical_exemption create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-02-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-02-06</con:value></con:property><con:property><con:name>update</con:name><con:value>\vaccinationExemptionInfo\t_immunoprophylaxis_medical_exemption update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\vaccinationExemptionInfo\t_immunoprophylaxis_medical_exemption delete.json</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-12-30T00:00:00</con:value></con:property><con:property><con:name>dateHigher2</con:name><con:value>2022-12-30</con:value></con:property><con:property><con:name>partial</con:name><con:value>\vaccinationExemptionInfo\t_immunization_medical_exemption partial.json</con:value></con:property><con:property><con:name>date90</con:name><con:value>2022-01-07T00:00:00</con:value></con:property><con:property><con:name>date902</con:name><con:value>2022-01-07</con:value></con:property><con:property><con:name>date90-365</con:name><con:value>2021-12-18T00:00:00</con:value></con:property><con:property><con:name>date90-3652</con:name><con:value>2021-12-18</con:value></con:property><con:property><con:name>date365</con:name><con:value>2021-03-18T00:00:00</con:value></con:property><con:property><con:name>date3652</con:name><con:value>2021-03-18</con:value></con:property><con:property><con:name>exemption</con:name><con:value>\vaccinationExemptionInfo\t_immunoprophylaxis_medical_exemption exemption.json</con:value></con:property><con:property><con:name>typecheck</con:name><con:value>\vaccinationExemptionInfo\vaccination_card typecheck.json</con:value></con:property><con:property><con:name>typecheck2</con:name><con:value>\vaccinationExemptionInfo\vaccination_card typecheck2.json</con:value></con:property><con:property><con:name>infectionName1</con:name><con:value>Коклюш, дифтерия, столбняк, полиомиелит, гемофильная инф.</con:value></con:property><con:property><con:name>infectionName2</con:name><con:value>Гепатит B</con:value></con:property><con:property><con:name>immunoprophylaxisTypes</con:name><con:value>Вакцинация</con:value></con:property><con:property><con:name>exemptionDuration</con:name><con:value>длительный</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-09-22</con:value></con:property><con:property><con:name>end</con:name><con:value>\vaccinationExemptionInfo\t_immunoprophylaxis_medical_exemption exemption.json</con:value></con:property><con:property><con:name>deleted</con:name><con:value>\vaccinationExemptionInfo\t_immunoprophylaxis_medical_exemption deleted.json</con:value></con:property><con:property><con:name>exemptionStartDate</con:name><con:value>2022-10-02</con:value></con:property><con:property><con:name>exemptionType</con:name><con:value>Частичный</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic1</con:name><con:value>t_vaccination_medical_exemptionComposition</con:value></con:property><con:property><con:name>topic2</con:name><con:value>t_prenatal_recordComposition</con:value></con:property><con:property><con:name>topic3</con:name><con:value>t_newborn_info_questionary_form_948Composition</con:value></con:property><con:property><con:name>topic4</con:name><con:value>t_pediatrist_examination1to14Composition</con:value></con:property><con:property><con:name>topic5</con:name><con:value>t_pediatrist_examination15to17Composition</con:value></con:property><con:property><con:name>topic6</con:name><con:value>t_prenatal_record_visiting_nurseComposition</con:value></con:property><con:property><con:name>topic7</con:name><con:value>vaccination_cardComposition</con:value></con:property><con:property><con:name>topic8</con:name><con:value>t_immunization_medical_exemptionComposition</con:value></con:property><con:property><con:name>topic9</con:name><con:value>t_COVID_vaccinationComposition</con:value></con:property><con:property><con:name>topic10</con:name><con:value>t_COVID_vaccination_medical_exemptionComposition</con:value></con:property><con:property><con:name>topic11</con:name><con:value>t_immunoprophylaxis_medical_exemptionComposition</con:value></con:property></con:properties></con:testSuite><con:testSuite id="16ff4638-919c-4816-a369-e3b0211744a6" name="address"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="217bebf7-b9eb-482f-893d-8da5032f1692" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование данных об адресе пациента из топика" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="c326f691-47f0-4a04-888c-816a8f37c4d0"><con:settings/><con:config service="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru" methodName="_search 1" resourcePath="/default_vaccination/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"135711"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Main" id="740843f5-440c-4a02-a7b0-4e0d8e80abf2"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientAddresses","""{
   "id": 5494563,
   "operationDate": "2022-02-15T11:02:17.932+03:00",
   "emiasId":  """+patientId+""",
   "uklErp": "9925449",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "addresses",
   "entityData": [
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "FACT",
                  "value": "адрес фактического проживания"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Фактической, д. 4, кв. 28"
               }
            },
            {
               "name": "globalIdNsi",
               "type": "integer",
               "value": {
                  "value": "70992447"
               }
            },
			{
               "name": "codeKLADR",
               "type": "string",
               "value": {
                  "value": "4200700100000"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
			{
               "name": "streetId",
               "type": "integer",
               "value": {
                  "value": "68126131"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Фактической"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "buildName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "constructionName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-15T10:46:29.424806+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821882"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "RCONST",
                  "value": "адрес постоянной регистрации"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи постоянной, д. 4, кв. 28"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
			{
               "name": "codeKLADR",
               "type": "string",
               "value": {
                  "value": "4200700100000"
               }
            },
            {
               "name": "globalIdNsi",
               "type": "integer",
               "value": {
                  "value": "70992447"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи постоянной"
               }
            },
			{
               "name": "streetId",
               "type": "integer",
               "value": {
                  "value": "68126131"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "buildName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "constructionName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            }
         ]
      },
	  {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "RTEMP",
                  "value": "адрес временного проживания"
               }
            },
			{
               "name": "codeKLADR",
               "type": "string",
               "value": {
                  "value": "4200700100000"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Временной, д. 4, кв. 28"
               }
            },
            {
               "name": "globalIdNsi",
               "type": "integer",
               "value": {
                  "value": "70992447"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Временной"
               }
            },
			{
               "name": "streetId",
               "type": "integer",
               "value": {
                  "value": "68126131"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "buildName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "constructionName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-15T10:46:29.424806+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="a8cce671-2cc4-41e2-a3f8-561452bb4ae8"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientAddresses","""{
   "id": 5494563,
   "operationDate": "2022-02-15T11:02:17.932+03:00",
   "emiasId":  """+patientId+""",
   "uklErp": "9925449",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "addresses",
   "entityData": [
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "FACT",
                  "value": "адрес фактического проживания"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Фактической, д. 4, кв. 28"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Фактической2"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-14T10:46:29.424806+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821882"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "RCONST",
                  "value": "адрес постоянной регистрации"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи постоянной, д. 4, кв. 28"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи постоянной"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            }
         ]
      },
	  {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "RTEMP",
                  "value": "адрес временного проживания"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Временной, д. 4, кв. 28"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Временной2"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-16T10:46:29.424806+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="test" id="65646d43-c1ae-4a6e-9a22-6395c2f6422b"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientAddresses","""{
   "id": 5494563,
   "operationDate": "2022-02-15T11:02:17.932+03:00",
   "emiasId":  """+patientId+""",
   "uklErp": "9925449",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "addresses",
   "entityData": [
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "31871037"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "FACT",
                  "value": "адрес фактического проживания"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "Московская обл, Мытищинский р-н, Мытищи г, институтская, д. 6, кв. 122"
               }
            },
            {
               "name": "globalIdNsi",
               "type": "integer",
               "value": {
                  "value": "70992447"
               }
            },
			{
               "name": "codeKLADR",
               "type": "string",
               "value": {
                  "value": "5001900100000"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "6"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "122"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-15T10:46:29.424806+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>31238417</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="76b1fdb7-2f12-4066-8880-4bbecb42349a" name="searchServiceBinding TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="41e17c18-3f0c-40a7-aa47-be4ff6d64877" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="search TestCase" searchProperties="true"><con:settings/><con:testStep type="request" id="fd9accb3-1575-400d-8d0e-cf4823309d54" name="search"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>searchServiceBinding</con:interface><con:operation>search</con:operation><con:request name="search" id="eac90228-dcbd-45da-ab48-00ab8d70206f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://esbcamel.test.emias.mos.ru/proxy/vacregistry/SearchService/v1S/ProxyService</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:typ="http://emias.mos.ru/registry/searchService/v1/types/">
<soap:Header>
    <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <wsse:UsernameToken wsu:Id="UsernameToken-778a5123-8149-49ea-ba5e-2589cedf2cb9">
        <wsse:Username>KPI_DOCTOR_X/ESofronova</wsse:Username>
      </wsse:UsernameToken>
    </wsse:Security>
    <userContext xmlns="http://emias.mos.ru/system/v1/userContext/">
      <systemName>KPI_DOCTOR_X</systemName>
      <userName>ESofronova</userName>
      <userRoleId>4</userRoleId>
      <isUserRoleSystemWide>false</isUserRoleSystemWide>
      <userRights>
        <userRightId>75010</userRightId>
        <userRightId>470016</userRightId>
        <userRightId>21000</userRightId>
        <userRightId>33033</userRightId>
        <userRightId>4107</userRightId>
        <userRightId>4108</userRightId>
        <userRightId>75020</userRightId>
        <userRightId>10001</userRightId>
        <userRightId>75030</userRightId>
        <userRightId>500511</userRightId>
        <userRightId>500510</userRightId>
        <userRightId>320031</userRightId>
        <userRightId>20000</userRightId>
        <userRightId>500004</userRightId>
        <userRightId>500002</userRightId>
        <userRightId>500001</userRightId>
        <userRightId>201003</userRightId>
        <userRightId>500015</userRightId>
        <userRightId>201002</userRightId>
        <userRightId>201001</userRightId>
        <userRightId>500013</userRightId>
        <userRightId>20011</userRightId>
        <userRightId>201007</userRightId>
        <userRightId>500011</userRightId>
        <userRightId>201006</userRightId>
        <userRightId>500010</userRightId>
        <userRightId>201005</userRightId>
        <userRightId>500009</userRightId>
        <userRightId>201004</userRightId>
        <userRightId>201011</userRightId>
        <userRightId>201010</userRightId>
        <userRightId>190000</userRightId>
        <userRightId>201009</userRightId>
        <userRightId>350007</userRightId>
        <userRightId>201008</userRightId>
        <userRightId>201015</userRightId>
        <userRightId>350001</userRightId>
        <userRightId>201014</userRightId>
        <userRightId>201013</userRightId>
        <userRightId>350003</userRightId>
        <userRightId>500017</userRightId>
        <userRightId>201012</userRightId>
        <userRightId>201019</userRightId>
        <userRightId>201018</userRightId>
        <userRightId>500030</userRightId>
        <userRightId>201017</userRightId>
        <userRightId>201016</userRightId>
        <userRightId>9020</userRightId>
        <userRightId>19004</userRightId>
        <userRightId>201023</userRightId>
        <userRightId>350009</userRightId>
        <userRightId>9021</userRightId>
        <userRightId>201022</userRightId>
        <userRightId>201021</userRightId>
        <userRightId>201020</userRightId>
        <userRightId>350010</userRightId>
        <userRightId>201027</userRightId>
        <userRightId>200002</userRightId>
        <userRightId>201026</userRightId>
        <userRightId>75075</userRightId>
        <userRightId>200001</userRightId>
        <userRightId>201025</userRightId>
        <userRightId>201024</userRightId>
        <userRightId>201031</userRightId>
        <userRightId>201030</userRightId>
        <userRightId>201029</userRightId>
        <userRightId>350019</userRightId>
        <userRightId>201028</userRightId>
        <userRightId>201035</userRightId>
        <userRightId>201034</userRightId>
        <userRightId>201033</userRightId>
        <userRightId>201032</userRightId>
        <userRightId>201039</userRightId>
        <userRightId>201038</userRightId>
        <userRightId>201036</userRightId>
        <userRightId>201042</userRightId>
        <userRightId>201041</userRightId>
        <userRightId>201040</userRightId>
        <userRightId>201047</userRightId>
        <userRightId>201046</userRightId>
        <userRightId>201045</userRightId>
        <userRightId>150101</userRightId>
        <userRightId>201044</userRightId>
        <userRightId>201050</userRightId>
        <userRightId>201049</userRightId>
        <userRightId>201048</userRightId>
        <userRightId>201055</userRightId>
        <userRightId>201053</userRightId>
        <userRightId>201052</userRightId>
        <userRightId>201059</userRightId>
        <userRightId>201063</userRightId>
        <userRightId>201061</userRightId>
        <userRightId>11111</userRightId>
        <userRightId>201060</userRightId>
        <userRightId>17000</userRightId>
        <userRightId>201067</userRightId>
        <userRightId>201066</userRightId>
        <userRightId>201065</userRightId>
        <userRightId>201068</userRightId>
        <userRightId>201075</userRightId>
        <userRightId>201074</userRightId>
        <userRightId>201073</userRightId>
        <userRightId>201076</userRightId>
        <userRightId>201080</userRightId>
        <userRightId>201086</userRightId>
        <userRightId>16000</userRightId>
        <userRightId>201091</userRightId>
        <userRightId>400004</userRightId>
        <userRightId>400005</userRightId>
        <userRightId>201095</userRightId>
        <userRightId>201093</userRightId>
        <userRightId>201092</userRightId>
        <userRightId>400001</userRightId>
        <userRightId>201099</userRightId>
        <userRightId>201098</userRightId>
        <userRightId>201097</userRightId>
        <userRightId>201096</userRightId>
        <userRightId>201101</userRightId>
        <userRightId>201100</userRightId>
        <userRightId>421524</userRightId>
        <userRightId>421522</userRightId>
        <userRightId>90004</userRightId>
        <userRightId>421523</userRightId>
        <userRightId>421520</userRightId>
        <userRightId>15001</userRightId>
        <userRightId>421532</userRightId>
        <userRightId>421530</userRightId>
        <userRightId>421528</userRightId>
        <userRightId>421529</userRightId>
        <userRightId>4000</userRightId>
        <userRightId>300207</userRightId>
        <userRightId>300212</userRightId>
        <userRightId>300213</userRightId>
        <userRightId>300214</userRightId>
        <userRightId>300208</userRightId>
        <userRightId>3000</userRightId>
        <userRightId>2502</userRightId>
        <userRightId>13000</userRightId>
        <userRightId>333002</userRightId>
        <userRightId>2000</userRightId>
        <userRightId>2001</userRightId>
        <userRightId>3025</userRightId>
        <userRightId>461526</userRightId>
        <userRightId>505302</userRightId>
        <userRightId>2002</userRightId>
        <userRightId>3026</userRightId>
        <userRightId>505301</userRightId>
        <userRightId>2003</userRightId>
        <userRightId>3027</userRightId>
        <userRightId>461524</userRightId>
        <userRightId>2004</userRightId>
        <userRightId>3028</userRightId>
        <userRightId>2005</userRightId>
        <userRightId>3029</userRightId>
        <userRightId>2006</userRightId>
        <userRightId>461521</userRightId>
        <userRightId>2007</userRightId>
        <userRightId>461520</userRightId>
        <userRightId>2008</userRightId>
        <userRightId>23000</userRightId>
        <userRightId>2009</userRightId>
        <userRightId>23001</userRightId>
        <userRightId>2010</userRightId>
        <userRightId>23003</userRightId>
        <userRightId>23004</userRightId>
        <userRightId>2015</userRightId>
        <userRightId>2017</userRightId>
        <userRightId>300005</userRightId>
        <userRightId>300007</userRightId>
        <userRightId>12005</userRightId>
        <userRightId>12006</userRightId>
        <userRightId>300002</userRightId>
        <userRightId>1000</userRightId>
        <userRightId>12009</userRightId>
        <userRightId>3056</userRightId>
        <userRightId>310002</userRightId>
        <userRightId>481520</userRightId>
        <userRightId>470015</userRightId>
        <userRightId>75000</userRightId>
        <userRightId>3066</userRightId>
        <userRightId>300005</userRightId>
      </userRights>
      <jobExecutionId>9231180984</jobExecutionId>
      <hostIp>10.42.63.22</hostIp>
      <hostName>10.42.63.22</hostName>
    </userContext>
  </soap:Header>
   <soap:Body>
      <typ:searchRequest>
         <typ:systemName>default</typ:systemName>
         <typ:index>registry</typ:index>
         <!--Optional:-->
         <typ:groupId>204</typ:groupId>
         <typ:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"2768"}}}</typ:request>
      </typ:searchRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://emias.mos.ru/registry/searchService/v1/searchServicePortType/searchRequest" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>dbType</con:name><con:value>postgre</con:value></con:property><con:property><con:name>dbLogin</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>elastic</con:name><con:value>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/vaccination_vaccination/_search</con:value></con:property><con:property><con:name>patientId</con:name><con:value>3203</con:value></con:property><con:property><con:name>limit</con:name><con:value>100</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:jmsConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest"><con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to ReadyAPI functional tests

// If hardcoding the token, uncomment and change line 5
// token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script></con:eventHandlers><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new java.io.FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new java.io.PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script></con:eventHandlers><con:authRepository/><con:tags/><con:sensitiveInformation/></con:soapui-project>