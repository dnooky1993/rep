<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="8f5017b9-1185-464b-b3e6-9eae7aaa527b" created="3.10.0" activeEnvironment="Default" name="Реестр пациентов Elastic" updated="3.10.0 2021-09-14T15:18:10Z" abortOnError="false" runType="SEQUENTIAL" soapui-version="5.7.0" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="0c43d5d4-eb33-4860-be8d-080e9bbe1371" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint></con:endpoints><con:resource name="_search" path="/default_registry/_search" id="15d6cb01-de32-4e44-a7f6-4de2d4414c72"><con:settings/><con:parameters/><con:method name="_search" id="31a4953e-dda0-45dd-9e14-57934f26ef9f" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search">_se:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>406 400</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search">_se:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="search по пациенту" id="ba4195bf-baee-4de0-95ed-d9c43c6c8448" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":0,"track_total_hits":false,"query":{"bool":{"must":[{"match":{"groupId":{"query":"10000290"}}},{"match":{"data.attachment.attachments.areaId":{"query":196}}}]}},"aggs":{"attached":{"filter":{"bool":{"must":[{"match":{"data.attachment.attached.areaId":{"query":196}}},{"match":{"data.attachment.attached.moId":{"query":10000290}}}]}}},"detached":{"filter":{"bool":{"must":[{"match":{"data.attachment.attachments.areaId":{"query":196}}}]}}}}}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="_search 2" id="13727415-8c30-4049-8b89-788eff1606d5" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search">_se:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="search test" id="9c86ab62-bfff-412f-8979-3588b8bcfba3" mediaType="application/json"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{\r
    "query": {\r
        "bool": {\r
            "must": [\r
            {\r
                "exists": {\r
                    "field": "data.patientInfo.policyNumber"\r
                }\r
            }]\r
        }\r
    }\r
}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="_search 3" id="fab60f62-8fc4-49e9-9c14-99e464346c73" method="POST"><con:settings/><con:parameters/><con:request name="search test Copy" id="587bb2f1-978e-405c-8721-d88abaf448ad" mediaType="application/json"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":true,"query":{"bool":{"must":[{"match":{"groupId":{"query":"10000290"}}},\r
{"match":{"data.attachment.attachments.areaId":{"query":196}}},\r
{"match":{"data.attachment.attached.areaId":{"query":196}}},\r
{"match":{"data.attachment.attached.moId":{"query":10000290}}},\r
{"match":{"data.attachment.attachments.areaId":{"query":196}}},\r
{"match":{"data.attachment.attached.moId":{"query":10000290}}}\r
]}}}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="_search" path="/analytics_covid_li/_search" id="5fb08074-b2a5-489b-a5da-1f8359be5d80"><con:settings/><con:parameters/><con:method name="_search" id="4514c466-ce21-4d61-b6ff-c66fc18a57b8" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search">_se:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="covid_li search по пациенту" id="73e8f69e-9a15-4ef2-87e7-86d0ce33600f" mediaType="application/json"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"928"}}}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="_search 2" id="f4318e78-f3f1-44f4-8938-175303d8c761" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search">_se:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="covid_li search test" id="c93f9a58-d353-422b-bb96-ef6ed887431c" mediaType="application/json"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{\r
    "query": {\r
        "bool": {\r
            "must": [{\r
                "match": {\r
                    "data.patientInfo.death": "true"\r
                }\r
            }]\r
        }\r
    }\r
}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="20911307_156" path="/default_registry/_update/20911307_156" id="12536b51-1e60-476d-b62e-d1494602630c"><con:settings/><con:parameters/><con:method name="20911307_156" id="3c4aaae7-dbfd-47d9-becc-f1d30c9ca1d1" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>routing</con:name><con:value>156</con:value><con:style>QUERY</con:style><con:default>156</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:_se="http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search">_se:Fault</con:element></con:representation><con:request name="create" id="e21d8b9a-88d6-49c2-9fb6-9c9803a39082" mediaType="application/json"><con:settings/><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{\r
  "doc":\r
{\r
         "patientId": "20911307",\r
         "data": {\r
                        "ambulance": {\r
                            "updated": "2021-05-12T15:15:40.764059+03:00",\r
                            "ambulanceCounter": 3,\r
                            "ambulanceItems": [\r
                                {\r
                                    "ambulanceDate": "2019-07-28",\r
                                    "timeCommitted": "2020-07-28T11:09:02.451+03:00",\r
                                    "documentId": "002cf655-aa75-46c6-8953-5e4663daaa5f"\r
                                },\r
                                {\r
                                    "compositionId": "5e852089-58fa-4801-bc48-c8482edb9f08",\r
                                    "ambulanceDate": "2020-12-09",\r
                                    "timeCommitted": "2020-12-09T15:57:32.097+03:00"\r
                                },\r
                                {\r
                                    "compositionId": "002cf655-aa75-46c6-8953-5e4663daaa5f",\r
                                    "ambulanceDate": "2020-07-28",\r
                                    "timeCommitted": "2020-07-28T11:09:02.451+03:00"\r
                                }\r
                            ]\r
                        }\r
                        }\r
                    }\r
}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><con:entry key="routing" value="156"/></con:parameters><con:parameterOrder><con:entry>routing</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="fc9035b4-5228-483b-8fae-838798ea4d88" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://ehr-index.svc-emias-registry.test.emias.mos.ru" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://ehr-index.svc-emias-registry.test.emias.mos.ru</con:endpoint></con:endpoints><con:resource name="Job" path="/api/rest/v1/job" id="366be657-af6f-4597-b1d1-c0f771e32fa7"><con:settings/><con:parameters/><con:method name="Job 1" id="890ab149-aba6-4f96-8f81-5bbc78c53002" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:job="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job">job:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="fb029a4e-dd6b-4015-8e42-bcf112a96a53" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-AUTHENTICATION-TOKEN" value="YWRtaW4kJCQxfDIwMjItMTAtMDZUMTE6Mzk6MzIuNTY1NDgzfGZlMjE3MzllYmQ3NTQ5N2QxZTUwZTg2MzY5MjQ5ZGZm" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ehr-index.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request/><con:originalUri>http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="stop" path="/api/rest/v1/job/{jobId}/stop" id="77aca0fe-ae19-42b9-a3fd-4cc3776cb491"><con:settings/><con:parameters><con:parameter><con:name>jobId</con:name><con:value>24951</con:value><con:style>TEMPLATE</con:style><con:default>24951</con:default></con:parameter></con:parameters><con:method name="Method 1" id="97a4c9ba-8c9b-4e6c-af08-d92ca626b6f5" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>405 400</con:status><con:params/><con:element xmlns:stop="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job/25751/stop">stop:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="cf544f01-9dd4-4272-9e0f-0d2743672ece" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-AUTHENTICATION-TOKEN" value="YWRtaW4kJCQxfDIwMjItMTAtMDZUMTE6Mzk6MzIuNTY1NDgzfGZlMjE3MzllYmQ3NTQ5N2QxZTUwZTg2MzY5MjQ5ZGZm" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ehr-index.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request/><con:originalUri>http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job/25751/stop</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jobId" value="24952" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jobId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="restart" path="/api/rest/v1/job/{jobId}/restart" id="77aca0fe-ae19-42b9-a3fd-4cc3776cb491"><con:settings/><con:parameters><con:parameter><con:name>jobId</con:name><con:value>24951</con:value><con:style>TEMPLATE</con:style><con:default>24951</con:default></con:parameter></con:parameters><con:method name="Method 1" id="97a4c9ba-8c9b-4e6c-af08-d92ca626b6f5" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>405 400</con:status><con:params/><con:element xmlns:stop="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job/25751/stop">stop:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="cf544f01-9dd4-4272-9e0f-0d2743672ece" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-AUTHENTICATION-TOKEN" value="YWRtaW4kJCQxfDIwMjItMTAtMDZUMTE6Mzk6MzIuNTY1NDgzfGZlMjE3MzllYmQ3NTQ5N2QxZTUwZTg2MzY5MjQ5ZGZm" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ehr-index.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request/><con:originalUri>http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job/25751/stop</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jobId" value="24952" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jobId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="cancel" path="/api/rest/v1/job/{jobId}/cancel" id="77aca0fe-ae19-42b9-a3fd-4cc3776cb491"><con:settings/><con:parameters><con:parameter><con:name>jobId</con:name><con:value>24951</con:value><con:style>TEMPLATE</con:style><con:default>24951</con:default></con:parameter></con:parameters><con:method name="Method 1" id="97a4c9ba-8c9b-4e6c-af08-d92ca626b6f5" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>405 400</con:status><con:params/><con:element xmlns:stop="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job/25751/stop">stop:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="cf544f01-9dd4-4272-9e0f-0d2743672ece" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-AUTHENTICATION-TOKEN" value="YWRtaW4kJCQxfDIwMjItMTAtMDZUMTE6Mzk6MzIuNTY1NDgzfGZlMjE3MzllYmQ3NTQ5N2QxZTUwZTg2MzY5MjQ5ZGZm" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ehr-index.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request/><con:originalUri>http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job/25751/stop</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jobId" value="24952" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jobId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="start" path="/api/rest/v1/job/{jobId}/start" id="77aca0fe-ae19-42b9-a3fd-4cc3776cb491"><con:settings/><con:parameters><con:parameter><con:name>jobId</con:name><con:value>24951</con:value><con:style>TEMPLATE</con:style><con:default>24951</con:default></con:parameter></con:parameters><con:method name="Method 1" id="97a4c9ba-8c9b-4e6c-af08-d92ca626b6f5" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>405 400</con:status><con:params/><con:element xmlns:stop="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job/25751/stop">stop:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="cf544f01-9dd4-4272-9e0f-0d2743672ece" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-AUTHENTICATION-TOKEN" value="YWRtaW4kJCQxfDIwMjItMTAtMDZUMTE6Mzk6MzIuNTY1NDgzfGZlMjE3MzllYmQ3NTQ5N2QxZTUwZTg2MzY5MjQ5ZGZm" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ehr-index.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request/><con:originalUri>http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job/25751/stop</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jobId" value="24952" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jobId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="steps" path="/api/rest/v1/job/steps" id="366be657-af6f-4597-b1d1-c0f771e32fa7"><con:settings/><con:parameters/><con:method name="Job 1" id="890ab149-aba6-4f96-8f81-5bbc78c53002" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:job="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job">job:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:job="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job">job:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>502</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="fb029a4e-dd6b-4015-8e42-bcf112a96a53" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-AUTHENTICATION-TOKEN" value="YWRtaW4kJCQxfDIwMjItMTAtMDZUMTE6Mzk6MzIuNTY1NDgzfGZlMjE3MzllYmQ3NTQ5N2QxZTUwZTg2MzY5MjQ5ZGZm" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ehr-index.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{
  "paging": {
    "page": 0,
    "pageSize": 50
  },
  "parameters": {
    "jobId": 24952
  }
}</con:request><con:originalUri>http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="dispensaryObservationDiagnosis" path="/api/rest/v1/dictionary/dispensaryObservationDiagnosis/items" id="366be657-af6f-4597-b1d1-c0f771e32fa7"><con:settings/><con:parameters/><con:method name="Job 1" id="890ab149-aba6-4f96-8f81-5bbc78c53002" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:job="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job">job:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:job="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job">job:Fault</con:element></con:representation><con:request name="Request 1" id="fb029a4e-dd6b-4015-8e42-bcf112a96a53" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-AUTHENTICATION-TOKEN" value="YWRtaW4kJCQxfDIwMjItMTAtMDZUMTE6Mzk6MzIuNTY1NDgzfGZlMjE3MzllYmQ3NTQ5N2QxZTUwZTg2MzY5MjQ5ZGZm" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ehr-index.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{
  "paging": {
    "page": 0,
    "pageSize": 50
  },
  "parameters": {
    "jobId": 24951
  }
}</con:request><con:originalUri>http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="dictionary" path="/api/rest/v1/dictionary/{code}/jobs" id="366be657-af6f-4597-b1d1-c0f771e32fa7"><con:settings/><con:parameters><con:parameter><con:name>code</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="Job 1" id="890ab149-aba6-4f96-8f81-5bbc78c53002" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:job="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job">job:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:job="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job">job:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="fb029a4e-dd6b-4015-8e42-bcf112a96a53" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-AUTHENTICATION-TOKEN" value="YWRtaW4kJCQxfDIwMjItMTAtMDZUMTE6Mzk6MzIuNTY1NDgzfGZlMjE3MzllYmQ3NTQ5N2QxZTUwZTg2MzY5MjQ5ZGZm" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ehr-index.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{
  "paging": {
    "page": 0,
    "pageSize": 50
  },
  "parameters": {
    "jobId": 24951
  }
}</con:request><con:originalUri>http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="code" value="dispensaryObservationDiagnosis" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>code</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="getStoragePatient" path="/api/rest/v1/system/getStoragePatient" id="366be657-af6f-4597-b1d1-c0f771e32fa7"><con:settings/><con:parameters><con:parameter><con:name>code</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="Job 1" id="890ab149-aba6-4f96-8f81-5bbc78c53002" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:job="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job">job:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:job="http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job">job:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="fb029a4e-dd6b-4015-8e42-bcf112a96a53" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-AUTHENTICATION-TOKEN" value="YWRtaW4kJCQxfDIwMjItMTAtMDZUMTE6Mzk6MzIuNTY1NDgzfGZlMjE3MzllYmQ3NTQ5N2QxZTUwZTg2MzY5MjQ5ZGZm" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ehr-index.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{
  "indexSchemaCode": "registry",
  "patientId": "4867",
  "systemName": "default"
}</con:request><con:originalUri>http://ehr-index.svc-emias-registry.test.emias.mos.ru/api/rest/v1/job</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="code" value="dispensaryObservationDiagnosis" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>code</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="5ba63cb7-be5a-454f-b9a8-41687b201490" name="address"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="14ab0571-3718-46dd-9500-e1f7de6b92c0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование данных об адресе пациента из топика" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="255c15ac-91ff-4fa1-a094-4a45394adb28"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search 2" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"1249"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Все поля" id="dd78e302-9d3f-487b-b6a8-248ec8323ebd"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientAddresses","""{
   "id": 5494563,
   "operationDate": "2022-02-15T11:02:17.932+03:00",
   "emiasId":  """+patientId+""",
   "uklErp": "9925449",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "addresses",
   "entityData": [
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "FACT",
                  "value": "адрес фактического проживания"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Фактической, д. 4, кв. 28"
               }
            },
            {
               "name": "globalIdNsi",
               "type": "integer",
               "value": {
                  "value": "70992447"
               }
            },
			{
               "name": "codeKLADR",
               "type": "string",
               "value": {
                  "value": "4200700100000"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
			{
               "name": "streetId",
               "type": "integer",
               "value": {
                  "value": "68126131"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Фактической"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "buildName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "constructionName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-15T10:46:29.424806+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821882"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "RCONST",
                  "value": "адрес постоянной регистрации"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи постоянной, д. 4, кв. 28"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
			{
               "name": "codeKLADR",
               "type": "string",
               "value": {
                  "value": "4200700100000"
               }
            },
            {
               "name": "globalIdNsi",
               "type": "integer",
               "value": {
                  "value": "70992447"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи постоянной"
               }
            },
			{
               "name": "streetId",
               "type": "integer",
               "value": {
                  "value": "68126131"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "buildName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "constructionName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            }
         ]
      },
	  {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "RTEMP",
                  "value": "адрес временного проживания"
               }
            },
			{
               "name": "codeKLADR",
               "type": "string",
               "value": {
                  "value": "4200700100000"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Временной, д. 4, кв. 28"
               }
            },
            {
               "name": "globalIdNsi",
               "type": "integer",
               "value": {
                  "value": "70992447"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Временной"
               }
            },
			{
               "name": "streetId",
               "type": "integer",
               "value": {
                  "value": "68126131"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "buildName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "constructionName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-15T10:46:29.424806+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="072969c7-fee7-411c-8601-111bd6133da0"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientAddresses","""{
   "id": 5494563,
   "operationDate": "2022-02-15T11:02:17.932+03:00",
   "emiasId":  """+patientId+""",
   "uklErp": "9925449",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "addresses",
   "entityData": [
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "FACT",
                  "value": "адрес фактического проживания"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Фактической, д. 4, кв. 28"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Фактической2"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-14T10:46:29.424806+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821882"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "RCONST",
                  "value": "адрес постоянной регистрации"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи постоянной, д. 4, кв. 28"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи постоянной"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            }
         ]
      },
	  {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "RTEMP",
                  "value": "адрес временного проживания"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Временной, д. 4, кв. 28"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Временной2"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-16T10:46:29.424806+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="только rtempAddress" id="b8380ced-6f64-4716-8437-5671ea91cb32"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientAddresses","""{
   "id": 5494563,
   "operationDate": "2022-02-15T11:02:17.932+03:00",
   "emiasId":  """+patientId+""",
   "uklErp": "9925449",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "addresses",
   "entityData": [
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "RTEMP",
                  "value": "адрес временного проживания"
               }
            },
			{
               "name": "codeKLADR",
               "type": "string",
               "value": {
                  "value": "4200700100000"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Временной, д. 4, кв. 28"
               }
            },
            {
               "name": "globalIdNsi",
               "type": "integer",
               "value": {
                  "value": "70992447"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Временной"
               }
            },
			{
               "name": "streetId",
               "type": "integer",
               "value": {
                  "value": "68126131"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "buildName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "constructionName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-15T10:46:29.424806+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="только rconstAddress" id="c0557c24-7255-49f7-8b0b-1193870a47fe"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientAddresses","""{
   "id": 5494563,
   "operationDate": "2022-02-15T11:02:17.932+03:00",
   "emiasId":  """+patientId+""",
   "uklErp": "9925449",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "addresses",
   "entityData": [
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "RCONST",
                  "value": "адрес временного проживания"
               }
            },
			{
               "name": "codeKLADR",
               "type": "string",
               "value": {
                  "value": "4200700100000"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Временной, д. 4, кв. 28"
               }
            },
            {
               "name": "globalIdNsi",
               "type": "integer",
               "value": {
                  "value": "70992447"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Временной"
               }
            },
			{
               "name": "streetId",
               "type": "integer",
               "value": {
                  "value": "68126131"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "buildName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "constructionName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-15T10:46:29.424806+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="только factAddress" id="3eed2b55-17ad-4a3a-9d83-e5a39c82a2d9"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientAddresses","""{
   "id": 5494563,
   "operationDate": "2022-02-15T11:02:17.932+03:00",
   "emiasId":  """+patientId+""",
   "uklErp": "9925449",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "addresses",
   "entityData": [
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "FACT",
                  "value": "адрес временного проживания"
               }
            },
			{
               "name": "codeKLADR",
               "type": "string",
               "value": {
                  "value": "4200700100000"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Временной, д. 4, кв. 28"
               }
            },
            {
               "name": "globalIdNsi",
               "type": "integer",
               "value": {
                  "value": "70992447"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Временной"
               }
            },
			{
               "name": "streetId",
               "type": "integer",
               "value": {
                  "value": "68126131"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "buildName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "constructionName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "addressChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-15T10:46:29.424806+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="без addressChangeDate" id="8fd1cb35-9290-44ef-872d-1e52ef4f434e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientAddresses","""{
   "id": 5494563,
   "operationDate": "2022-02-15T11:02:17.932+03:00",
   "emiasId":  """+patientId+""",
   "uklErp": "9925449",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "addresses",
   "entityData": [
      {
         "attributes": [
            {
               "name": "addressId",
               "type": "integer",
               "value": {
                  "value": "13821881"
               }
            },
            {
               "name": "addressMode",
               "type": "dictionary",
               "value": {
                  "code": "RTEMP",
                  "value": "адрес временного проживания"
               }
            },
			{
               "name": "codeKLADR",
               "type": "string",
               "value": {
                  "value": "4200700100000"
               }
            },
            {
               "name": "addressString",
               "type": "string",
               "value": {
                  "value": "г. Москва, улица Наташи Временной, д. 4, кв. 28"
               }
            },
            {
               "name": "globalIdNsi",
               "type": "integer",
               "value": {
                  "value": "70992447"
               }
            },
            {
               "name": "regionName",
               "type": "string",
               "value": {
                  "value": "Москва"
               }
            },
            {
               "name": "regionTypeFull",
               "type": "string",
               "value": {
                  "value": "Город"
               }
            },
            {
               "name": "regionTypeShort",
               "type": "string",
               "value": {
                  "value": "г"
               }
            },
            {
               "name": "regionId",
               "type": "string",
               "value": {
                  "value": "67200856"
               }
            },
            {
               "name": "regionCode",
               "type": "string",
               "value": {
                  "value": "77"
               }
            },
            {
               "name": "streetCodeOMKUM",
               "type": "string",
               "value": {
                  "value": "09807"
               }
            },
            {
               "name": "streetName",
               "type": "string",
               "value": {
                  "value": "улица Наташи Временной"
               }
            },
			{
               "name": "streetId",
               "type": "integer",
               "value": {
                  "value": "68126131"
               }
            },
            {
               "name": "houseName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "buildName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
			{
               "name": "constructionName",
               "type": "string",
               "value": {
                  "value": "4"
               }
            },
            {
               "name": "flatName",
               "type": "string",
               "value": {
                  "value": "28"
               }
            },
            {
               "name": "elevator",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1249111</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="e29ed5c8-76f6-44c4-a1d8-08f39b142472" name="adultHealthGroup (Взрослая группа здоровья)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="c9346168-8014-45ad-92cb-3b17219f64c4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о взрослой группе здоровья" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="257b3328-b22a-4e24-80a7-01fe8160fa6c"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"13341111"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Создание" id="077b7f9a-4320-4abe-84b1-29a10f9c132d"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("DNclinicalExamination","""{
   "domain": "default",
   "ehrUid": "6cd22e9f-17a8-441e-bb77-fca99b67e9c6",
   "operationType": "create",
   "eventName": "dn_parks_PCU_conclusion",
   "compositionId": "dce061a6-2e4f-4210-9229-5439f3d4f55e::default::1",
   "newResults": [
      {
         "compositionId": "dce061a6-2e4f-4210-9229-5439f3d4f55e::default::1",
         "templateId": "openEHR-EHR-COMPOSITION.t_parks_PCU_conclusion.v1",
         "patientId": \""""+patientId+"""\",
         "healthGroup": "IIIa",
         "dateConclusion": "2022-06-26T15:48:51.556254+03:00"
      }
   ],
   "auditDetails": {
      "@class": "AUDIT_DETAILS",
      "system_id": "default",
      "committer": {
         "@class": "PARTY_IDENTIFIED",
         "name": "emias_qa"
      },
      "time_committed": {
         "@class": "DV_DATE_TIME",
         "value": "2022-06-24T15:48:51.556254+03:00"
      },
      "change_type": {
         "@class": "DV_CODED_TEXT",
         "value": "creation",
         "defining_code": {
            "@class": "CODE_PHRASE",
            "terminology_id": {
               "@class": "TERMINOLOGY_ID",
               "value": "openehr"
            },
            "code_string": "249"
         }
      }
   }
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>13341111</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-05-29T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-05-29</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-04-29</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property></con:properties></con:testSuite><con:testSuite id="dbeb4176-0e95-4b72-80dc-fb3ac985ea8a" name="ambulance(Вызовы скорой)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e69b6b5c-9367-49e7-a2b5-9075bed0fcad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#270709" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePatient" id="6aeed2d1-ea3a-4531-9005-d429d8b8e26d"><con:settings/><con:config><script>def randomNumber = new Random().nextInt(999001) + 1000
def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("patientId", randomNumber.toString())
testRunner.testCase.setPropertyValue("uid", randomuid.toString())

log.info randomNumber</script></con:config></con:testStep><con:testStep type="groovy" name="GetDate_Old step 1" id="9d859c0a-290f-45e4-8d44-f06a1b712d74"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")
def currentDate = LocalDateTime.now().minusYears(1).minusDays(+1).format(dateTimeFormatter)
testRunner.testCase.setPropertyValue("dateLower", currentDate)</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="d2434922-cc6d-498f-a3ce-adaf13d283d4"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

//Генерация timecommitted
LocalDateTime dateTime = LocalDateTime.now()
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")
String formattedDateTime = dateTime.format(formatter)
testRunner.testCase.setPropertyValue("currentDate", formattedDateTime)


def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
String file =scripts.returnFileAsText("create")
 
def patientId =testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
def uid=testRunner.testCase.getPropertyValue("uid")
 
String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower).replace("\$currentDate",formattedDateTime)
//return message
scripts. sendMessageToKafka(topic, message)

log.info(dateLower2)</script></con:config></con:testStep><con:testStep type="groovy" name="GetDate_yesterday step 2" id="c11c8597-d9af-4cbd-a8bf-64cd5bc1ff84"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")
def currentDate = LocalDateTime.now().minusDays(+1).format(dateTimeFormatter)
testRunner.testCase.setPropertyValue("dateLower_yesterday", currentDate)</script></con:config></con:testStep><con:testStep type="groovy" name="Create_yesterday" id="f1e6cd35-38f2-49e8-bfca-583d0c63ae33"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

//Генерация timecommitted
LocalDateTime dateTime = LocalDateTime.now()
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")
String formattedDateTime = dateTime.format(formatter)
testRunner.testCase.setPropertyValue("currentDate", formattedDateTime)


def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
String file =scripts.returnFileAsText("create")
 
def patientId =testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")
 def dateLower_yesterday=testRunner.testCase.getPropertyValue("dateLower_yesterday")
def uid=testRunner.testCase.getPropertyValue("uid")
 
String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower_yesterday).replace("\$currentDate",formattedDateTime)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="GetDate_today step 3" id="be70a428-7323-42a2-ae79-64fc6f2ad692"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")
def currentDate = LocalDateTime.now().format(dateTimeFormatter)
testRunner.testCase.setPropertyValue("dateLower_today", currentDate)</script></con:config></con:testStep><con:testStep type="groovy" name="Create_today" id="4dcc8bab-1850-42b7-a1fd-c84bc2fbecc6"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
String file =scripts.returnFileAsText("create")

def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("uid", randomuid.toString())

//Генерация timecommitted
LocalDateTime dateTime = LocalDateTime.now()
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")
String formattedDateTime = dateTime.format(formatter)
testRunner.testCase.setPropertyValue("currentDate", formattedDateTime)
 
def patientId =testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")
def dateLower_today=testRunner.testCase.getPropertyValue("dateLower_today")
def uid=testRunner.testCase.getPropertyValue("uid")
 
 String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower_today).replace("\$currentDate",formattedDateTime)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create_timeCommitted &lt; ambulanceItems.timeCommitted step 4" id="5eb9e713-cd8a-4d71-9780-5a65eb394c63"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
String file =scripts.returnFileAsText("create")

//Генерация timecommitted
LocalDateTime dateTime = LocalDateTime.now()
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")
String formattedDateTime = dateTime.minusDays(10).format(formatter)
testRunner.testCase.setPropertyValue("currentDate", formattedDateTime - 10)
 //Создание переменных
def patientId =testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")
def dateLower_today=testRunner.testCase.getPropertyValue("dateLower_today")
def uid=testRunner.testCase.getPropertyValue("uid")

 // Замена значений в сообщении 
 String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower_today).replace("\$currentDate",formattedDateTime)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>592807</con:value></con:property><con:property><con:name>Create</con:name><con:value>\Реестр\card_of_call_embulanceComposition create.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>316051</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-03-26</con:value></con:property><con:property><con:name>dateLower_yesterday</con:name><con:value>2023-03-26</con:value></con:property><con:property><con:name>dateLower_today</con:name><con:value>2023-03-27</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-17T13:31:37</con:value></con:property></con:properties></con:testCase><con:testCase id="3c711fe2-c0d2-4776-9693-5140dc7e467f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#270745" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePatient" id="b70e03e4-616e-4203-ba20-93871ea125dd"><con:settings/><con:config><script>def randomNumber = new Random().nextInt(999001) + 1000
def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("patientId", randomNumber.toString())
testRunner.testCase.setPropertyValue("uid", randomuid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="GenerateUID" id="801cb454-5f85-4b95-9108-7b47a7ffd440"><con:settings/><con:config><script>def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("uid", randomuid.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="GetDate_today" id="c6629c1a-5a81-405d-9562-35fd592599ac"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")
def currentDate = LocalDateTime.now().format(dateTimeFormatter)
testRunner.testCase.setPropertyValue("dateLower_today", currentDate)</script></con:config></con:testStep><con:testStep type="groovy" name="Create_today" id="c9a735a3-2d4a-4a02-8c06-554353692082"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
String file =scripts.returnFileAsText("create")

//Генерация timecommitted
LocalDateTime dateTime = LocalDateTime.now()
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")
String formattedDateTime = dateTime.format(formatter)
testRunner.testCase.setPropertyValue("currentDate", formattedDateTime)
 
def patientId =testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")
def dateLower_today=testRunner.testCase.getPropertyValue("dateLower_today")
def uid=testRunner.testCase.getPropertyValue("uid")
 
 String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower_today).replace("\$currentDate",formattedDateTime)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="ff6536a0-947c-446f-8416-20f9807906f7"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("delete")
 
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateLower=testRunner.testCase.getPropertyValue("dateLower")
 def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
 def uid=testRunner.testCase.getPropertyValue("uid")
 def operation = testRunner.testCase.getPropertyValue("operationType")
 
 String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower).replace("\$operationType",operation)
 //return message
scripts. sendMessageToKafka(topic, message)

log.info(dateLower2)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>302399</con:value></con:property><con:property><con:name>create</con:name><con:value>\Реестр\card_of_call_embulanceComposition create.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>399028</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-03-16T17:55:02</con:value></con:property><con:property><con:name>dateLower_yesterday</con:name><con:value>2023-03-16T18:32:21</con:value></con:property><con:property><con:name>dateLower_today</con:name><con:value>2023-03-27T14:55:32</con:value></con:property><con:property><con:name>delete</con:name><con:value>\Реестр\card_of_call_embulanceComposition delete.json</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-04-11T13:37:38</con:value></con:property><con:property><con:name>operationType</con:name><con:value>deleted</con:value></con:property></con:properties></con:testCase><con:testCase id="c0d15501-ba0a-4e02-8639-8071c95b0b05" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#275907" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePatient" id="a50b9c7c-2658-4578-ba38-7984c257f9da"><con:settings/><con:config><script>def randomNumber = new Random().nextInt(999001) + 1000
def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("patientId", randomNumber.toString())
testRunner.testCase.setPropertyValue("uid", randomuid.toString())

log.info randomNumber</script></con:config></con:testStep><con:testStep type="groovy" name="GetDate_Old step 1" id="9c9ed38c-bf63-4b1a-bd0f-f5ada172804f"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")
def currentDate = LocalDateTime.now().minusYears(1).minusDays(+1).format(dateTimeFormatter)
testRunner.testCase.setPropertyValue("dateLower", currentDate)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="7b4c3630-d320-4cbd-b448-c786593d2308"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

//Генерация timecommitted
LocalDateTime dateTime = LocalDateTime.now()
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")
String formattedDateTime = dateTime.format(formatter)
testRunner.testCase.setPropertyValue("currentDate", formattedDateTime)


def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
String file =scripts.returnFileAsText("create")
 
def patientId =testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
def uid=testRunner.testCase.getPropertyValue("uid")
 
String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower).replace("\$currentDate",formattedDateTime)
//return message
scripts. sendMessageToKafka(topic, message)

log.info(dateLower2)</script></con:config></con:testStep><con:testStep type="groovy" name="GetDate_yesterday step 2" id="3023d17b-d0d3-4277-be98-984af78f5e45"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")
def currentDate = LocalDateTime.now().minusDays(+1).format(dateTimeFormatter)
testRunner.testCase.setPropertyValue("dateLower_yesterday", currentDate)</script></con:config></con:testStep><con:testStep type="groovy" name="Update_yesterday" id="55201d90-7ff1-448d-bf01-d79cc940d0fd"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

//Генерация timecommitted
LocalDateTime dateTime = LocalDateTime.now()
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")
String formattedDateTime = dateTime.format(formatter)
testRunner.testCase.setPropertyValue("currentDate", formattedDateTime)


def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
String file =scripts.returnFileAsText("Update")
 
def patientId =testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")
 def dateLower_yesterday=testRunner.testCase.getPropertyValue("dateLower_yesterday")
def uid=testRunner.testCase.getPropertyValue("uid")
 
String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower_yesterday).replace("\$currentDate",formattedDateTime)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="GetDate_today step 3" id="92e1c13a-b2d1-464f-9084-8f666a6d01db"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")
def currentDate = LocalDateTime.now().format(dateTimeFormatter)
testRunner.testCase.setPropertyValue("dateLower_today", currentDate)</script></con:config></con:testStep><con:testStep type="groovy" name="Update_today" id="d61b799f-8dc1-4cac-9ceb-0157f86ffb35"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
String file =scripts.returnFileAsText("Update")

def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("uid", randomuid.toString())

//Генерация timecommitted
LocalDateTime dateTime = LocalDateTime.now()
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")
String formattedDateTime = dateTime.format(formatter)
testRunner.testCase.setPropertyValue("currentDate", formattedDateTime)
 
def patientId =testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")
def dateLower_today=testRunner.testCase.getPropertyValue("dateLower_today")
def uid=testRunner.testCase.getPropertyValue("uid")
 
 String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower_today).replace("\$currentDate",formattedDateTime)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update_timeCommitted &lt; ambulanceItems.timeCommitted step 4" id="bece033d-e611-4163-921d-586804dfd7a0"><con:settings/><con:config><script>import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
String file =scripts.returnFileAsText("create")

//Генерация timecommitted
LocalDateTime dateTime = LocalDateTime.now()
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")
String formattedDateTime = dateTime.minusDays(10).format(formatter)
testRunner.testCase.setPropertyValue("currentDate", formattedDateTime - 10)
 //Создание переменных
def patientId =testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")
def dateLower_today=testRunner.testCase.getPropertyValue("dateLower_today")
def uid=testRunner.testCase.getPropertyValue("uid")

 // Замена значений в сообщении 
 String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower_today).replace("\$currentDate",formattedDateTime)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>94300</con:value></con:property><con:property><con:name>Update</con:name><con:value>\Реестр\card_of_call_embulanceComposition update.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>691806</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-03-26</con:value></con:property><con:property><con:name>dateLower_yesterday</con:name><con:value>2023-03-26</con:value></con:property><con:property><con:name>dateLower_today</con:name><con:value>2023-03-27</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-27T17:30:43</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>topicFix</con:name><con:value>t_dispensary_observation_programComposition.patientregistry</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>dbType</con:name><con:value>postgre</con:value></con:property><con:property><con:name>dbLogin</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>dn</con:value></con:property><con:property><con:name>registryLogin</con:name><con:value>erp_dn_view</con:value></con:property><con:property><con:name>registryPassword</con:name><con:value>wd#0311FD8</con:value></con:property><con:property><con:name>registryConnect</con:name><con:value>@//10.0.49.100:1521/erptest</con:value></con:property><con:property><con:name>registryTestLogin</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestPassword</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestConnect</con:name><con:value>@//10.2.172.16:1521/patient_registry.mosgorzdrav.local</con:value></con:property><con:property><con:name>limit</con:name><con:value>100</con:value></con:property><con:property><con:name>patientId</con:name><con:value>1000000</con:value></con:property><con:property><con:name>topic2</con:name><con:value>card_of_call_embulanceComposition</con:value></con:property><con:property><con:name>topic3</con:name><con:value>t_dispensary_at_home_proactive_questionnaireComposition</con:value></con:property><con:property><con:name>topic4</con:name><con:value>t_selfcontrol_dispensary_questionnaireComposition</con:value></con:property><con:property><con:name>topic5</con:name><con:value>t_dispensary_at_home_proactive_questionnaireComposition</con:value></con:property></con:properties></con:testSuite><con:testSuite id="581534fe-b7ff-4750-9bed-d342ca7cd751" name="attachment"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="6cece055-51e5-4a7f-af55-a51d466364b1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="patientInfoAttachmentTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="c40a4c3e-3da1-4728-8283-2d4f1971f1b6"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="35f5146f-4d42-4880-991d-06462e49cc53" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create actual = true" id="d33d3414-8a3c-417e-813b-815298c1aae8"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 51169031,
      "dateTime": "2017-04-24T11:01:32",
      "eventType": "CHANGE"
   },
   "attachmentNewValue": {
      "attachId": 41963393,
       "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 234,
      "muId": 10020728,
      "areaId": 444717,
      "attachBeginDate": "2017-04-24",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "10",
         "title": "По участковому принципу (основное)"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   },
   "attachmentOldValue": {
      "attachId": 41963393,
      "patientId": 2242802117,
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10488128,
      "muId": 10079153,
      "areaId": 2868832,
      "attachBeginDate": "2016-10-13",
      "attachType": {
         "globalId": 128619858,
         "code": "0",
         "title": "небазовое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Create actual == false" id="a1ff0766-82cd-41c6-8429-979668d2c357"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
    "event": {
       "id": 33606129,
       "dateTime": "2022-04-07T21:25:45",
       "eventType": "CREATE"
    },
    "attachmentOldValue": {
       "attachId": 32778999,
       "patientId": """+patientId+""",
       "isActual": false,
       "attachPolType": {
          "globalId": 125694322,
          "code": "1",
          "title": "Обязательное медицинское страхование"
       },
       "noSelfAppointment": false,
       "moId": 204,
       "muId": 204,
       "areaId": 17891,
       "areaTypeCode": 10,
       "attachBeginDate": "2014-12-28",
       "attachEndDate": "2021-12-28",
       "attachEndCauseCode": "8",
       "attachEndCauseName": "проверка",
       "attachType": {
          "globalId": 128619858,
          "code": "0",
          "title": "базовое терапевтическое"
       },
       "processOfAttachment": {
          "globalId": 135857403,
          "code": "2",
          "title": "По заявлению"
       },
       "attachChangeType": {
          "globalId": 128619920,
          "code": "50",
          "title": "По причине переприкрепления (или при реорганизации участков)"
       },
       "attachForm": {
          "globalId": 128620009,
          "code": "20",
          "title": "По участковому принципу (основное)"
       }
    }
 }""")</script></con:config></con:testStep><con:testStep type="groovy" name="Change разные areaId" id="54f6ae21-d47b-4608-a48c-fcd3503a685a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2023-03-06T13:54:14",
      "eventType": "CREATE"
   },
      "attachmentNewValue": {
      "attachId": 140998741,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 10747456,
      "muId": 10645986,
      "areaId": 17411935007,
      "areaTypeCode": 10,
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Close" id="c871d820-1e9f-43d2-bd7a-844dcdeeffbd"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-09-19T15:41:54",
      "eventType": "CLOSE"
   },
   "attachmentNewValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": false,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": 1789,
      "areaTypeCode": 10,
      "attachBeginDate": "2022-02-21T15:41:54",
      "attachEndDate":"2022-10-02T15:41:54",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachEndCause":{
         "globalId":128619959,
         "code":"10",
         "title":"Выбор другой мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Change одинаковые areaId" id="9c11a855-ad67-43df-a886-f3cdc1815f82"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-02-21T15:41:54",
      "eventType": "CHANGE"
   },
      "attachmentNewValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 205,
      "muId": 204,
      "areaId": 1789,
      "areaTypeCode": 20,
      "attachBeginDate": "2022-02-21T15:41:54",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   },
   "attachmentOldValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": 1789,
      "areaTypeCode": 10,
      "attachBeginDate": "2022-02-21T15:41:54",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="moId == NULL" id="5a432fca-7735-4b4a-9c18-792ca1c0807a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-02-21T15:41:54",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": null,
      "muId": 204,
      "areaId": 1789,
      "areaTypeCode": 10,
      "attachBeginDate": "2022-02-21T15:41:54",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="areaId == NULL" id="88853b98-0da7-45df-bc17-7032f9a95ac7"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-02-21T15:41:54",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": null,
      "areaTypeCode": 10,
      "attachBeginDate": "2022-02-21T15:41:54",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="typeCode == NULL" id="46b106f4-668f-4536-aea7-c3db0606ec76"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-02-21T15:41:54",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": 1789,
      "areaTypeCode": null,
      "attachBeginDate": "2022-02-21T15:41:54",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="code != typeCode" id="0151c0ea-a34b-406e-90c2-683c64b8f9fb"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-02-21T15:41:54",
      "eventType": "CREATE"
   },
   "attachmentNewValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": true,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": 1789,
      "areaTypeCode": 110,
      "attachBeginDate": "2022-02-21T15:41:54",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Close > года" id="d2561e68-0b02-4103-b200-663b067cc4a7"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event": {
      "id": 33606129,
      "dateTime": "2022-02-07T21:25:45",
      "eventType": "CLOSE"
   },
   "attachmentNewValue": {
      "attachId": 127636388,
      "patientId": """+patientId+""",
      "isActual": false,
      "attachPolType": {
         "globalId": 125694322,
         "code": "1",
         "title": "Обязательное медицинское страхование"
      },
      "noSelfAppointment": false,
      "moId": 204,
      "muId": 204,
      "areaId": 1789,
      "areaTypeCode": 10,
      "attachBeginDate": "2010-02-21T15:41:54",
      "attachEndDate":"2020-10-02T15:41:54",
      "attachType": {
         "globalId": 128619858,
         "code": "1",
         "title": "базовое терапевтическое"
      },
      "processOfAttachment": {
         "globalId": 135857403,
         "code": "2",
         "title": "По заявлению"
      },
      "attachChangeType": {
         "globalId": 128619920,
         "code": "20",
         "title": "Выбор мед. организации пациентом"
      },
      "attachEndCause":{
         "globalId":128619959,
         "code":"10",
         "title":"Выбор другой мед. организации пациентом"
      },
      "attachForm": {
         "globalId": 128620009,
         "code": "10",
         "title": "По участковому принципу (основное)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check" id="a8a592ec-1162-4bdb-9fdc-7b8065289131"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Создан attachClosedDispensaryObservation"><con:configuration><path>$.hits.hits[1]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations</path><content>[{"attachBeginDate":"2019-06-18T12:01:01.27","areaId":20196464,"attachUpdateDate":"2020-09-30T12:01:01.27","id":63114870,"moId":10478903}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create с End" id="eaa7b8e3-0c9f-4b9c-99d4-e4828d2184a1"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
  "event": {
    "id": 32778991,
    "dateTime": "2017-04-24T21:25:45",
    "eventType": "CREATE"
  },
  "attachmentNewValue": {
    "attachId": 97139701,
    "patientId": """+patientId+""",
    "isActual": true,
    "attachPolType": {
      "globalId": 125694322,
      "code": "1",
      "title": "Обязательное медицинское страхование"
    },
    "noSelfAppointment": false,
    "moId": 234,
    "muId": 10000389,
    "areaId": 444717,
    "areaTypeCode": 20,
    "attachBeginDate": "2017-04-24T15:41:54",
    "attachType": {
      "globalId": 128619858,
      "code": "1",
      "title": "базовое терапевтическое"
    },
    "processOfAttachment": {
      "globalId": 135857403,
      "code": "2",
      "title": "По заявлению"
    },
    "attachChangeType": {
      "globalId": 128619920,
      "code": "20",
      "title": "Выбор мед. организации пациентом"
    },
    "attachForm": {
      "globalId": 128620009,
      "code": "10",
      "title": "По участковому принципу (основное)"
    }
  }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Change с End" id="0cbd5c42-bab3-4f2d-a196-f48bda2fe1a2"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
  "event": {
    "id": 33606128,
    "dateTime": "2022-04-07T21:25:45",
    "eventType": "CREATE"
  },
  "attachmentNewValue": {
    "attachId": 32778990,
    "patientId": """+patientId+""",
    "isActual": false,
    "attachPolType": {
      "globalId": 125694322,
      "code": "1",
      "title": "Обязательное медицинское страхование"
    },
    "noSelfAppointment": false,
    "moId": 204,
    "muId": 204,
    "areaId": 1790,
    "areaTypeCode": 10,
    "attachBeginDate": "2022-02-22T15:41:54",
    "attachEndDate": "2022-02-26T15:41:54",
    "attachEndCause": {
                                "code": "10",
                                "title": "Выбор другой мед. организации пациентом"
                            },
    "attachType": {
      "globalId": 128619858,
      "code": "0",
      "title": "базовое терапевтическое"
    },
    "processOfAttachment": {
      "globalId": 135857403,
      "code": "2",
      "title": "По заявлению"
    },
    "attachChangeType": {
      "globalId": 128619920,
      "code": "50",
      "title": "По причине переприкрепления (или при реорганизации участков)"
    },
    "attachForm": {
      "globalId": 128620009,
      "code": "20",
      "title": "По участковому принципу (основное)"
    }
  },
  "attachmentOldValue": {
    "attachId": 32778990,
    "patientId": """+patientId+""",
    "isActual": false,
    "attachPolType": {
      "globalId": 125694322,
      "code": "1",
      "title": "Обязательное медицинское страхование"
    },
    "noSelfAppointment": false,
    "moId": 204,
    "muId": 204,
    "areaId": 1791,
    "areaTypeCode": 10,
    "attachBeginDate": "2022-02-22T15:41:54",
    "attachEndDate": "2022-02-26T15:41:54",
    "attachEndCause": {
                                "code": "10",
                                "title": "Выбор другой мед. организации пациентом"
                            },
    "attachType": {
      "globalId": 128619858,
      "code": "0",
      "title": "базовое терапевтическое"
    },
    "processOfAttachment": {
      "globalId": 135857403,
      "code": "2",
      "title": "По заявлению"
    },
    "attachChangeType": {
      "globalId": 128619920,
      "code": "50",
      "title": "По причине переприкрепления (или при реорганизации участков)"
    },
    "attachForm": {
      "globalId": 128620009,
      "code": "20",
      "title": "По участковому принципу (основное)"
    }
  }
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000491</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="2b5a93a6-5c1b-401f-bec6-729149e6bb72" name="attachClosedDispensaryObservation"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="a25b5dc3-3a8f-41e6-aa7d-c14435d3ad6d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="attachClosedDispensaryObservationAttachmentEventTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="#202137 Find patientId" id="f850f3c4-1a2e-42ed-8423-de9d6a073fd6"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="63e08575-50ee-4bc3-a03e-73d52d0c9d04" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202137 Step 1" id="a382d712-695d-4ab8-a2bf-7516200fd155"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2020-09-30T12:01:01.27",
      "eventType":"CREATE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="b0ae2462-3e19-4124-a5de-3ef2875b6e66"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#202137 Check Step 1" id="bea19df0-80cb-4cde-aaa4-1bda5268697b"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202137 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Создан attachClosedDispensaryObservation"><con:configuration><path>$.hits.hits[0]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations</path><content>[{"attachBeginDate":"2019-06-18T12:01:01.27","areaId":20196464,"attachUpdateDate":"2020-09-30T12:01:01.27","id":63114870,"moId":10478903}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202137 Step 2" id="40297809-a99e-498f-b231-d1d0328efa0b"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:01.27",
      "eventType":"CHANGE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="97ab9833-45ee-4a18-9853-9908d19bdb8b"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#202137 Check Step 2" id="f95afed5-1dc8-4913-8e68-790e8436cd8e"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202137 Check Step 2" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Обновлен attachClosedDispensaryObservation"><con:configuration><path>$.hits.hits[1]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations</path><content>[{"attachBeginDate":"2019-06-18T12:01:01.27","areaId":20196464,"attachUpdateDate":"2022-09-30T12:01:01.27","id":63114870,"attachEndDate":"2030-06-20T12:01:01.27","moId":10478903}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202137 Step 3" id="cbc7b388-c57c-42fd-891f-04f7697f78a7"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:00.27",
      "eventType":"CHANGE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-19T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="#202137 Check Step 3" id="fe5992fe-0921-4aba-997c-ee091a546626"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202137 Check Step 3" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Обновлен attachClosedDispensaryObservation"><con:configuration><path>$.hits.hits[1]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations</path><content>[{"attachBeginDate":"2019-06-18T12:01:01.27","areaId":20196464,"attachUpdateDate":"2022-09-30T12:01:01.27","id":63114870,"attachEndDate":"2030-06-20T12:01:01.27","moId":10478903}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202137 Step 4" id="082f993f-35ca-4864-a81a-0b8d0eae1525"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:03.27",
      "eventType":"CHANGE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-19T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="#202137 Check Step 4" id="57f03ba4-0161-4a88-8b75-6c32414a28a7"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202137 Check Step 4" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Обновлен attachClosedDispensaryObservation"><con:configuration><path>$.hits.hits[1]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations</path><content>[{"attachBeginDate":"2019-06-19T12:01:01.27","areaId":20196464,"attachUpdateDate":"2022-09-30T12:01:03.27","id":63114870,"attachEndDate":"2030-06-20T12:01:01.27","moId":10478903}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202137 Step 5" id="e6270bd5-2420-47b5-9704-7e88371edb33"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:03.27",
      "eventType":"CHANGE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-20T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="#202137 Check Step 5" id="810892b6-30e8-4cb8-9a18-bdad6079a8ed"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202137 Check Step 5" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Не обновлен attachClosedDispensaryObservation"><con:configuration><path>$.hits.hits[1]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations</path><content>[{"attachBeginDate":"2019-06-19T12:01:01.27","areaId":20196464,"attachUpdateDate":"2022-09-30T12:01:03.27","id":63114870,"attachEndDate":"2030-06-20T12:01:01.27","moId":10478903}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202145 Step 1" id="c89d7369-4c9b-4478-9a51-46298f6caf31"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:01.27",
      "eventType":"CLOSE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="88bf66f4-863e-4bb3-9071-d378b5f4c974"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#202145 Check Step 1" id="d3ecaafb-c7bd-4bb2-b4f6-c31bbb4cf6f8"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202145 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Обновлен attachClosedDispensaryObservation"><con:configuration><path>$.hits.hits[1]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations</path><content>[{"attachBeginDate":"2019-06-18T12:01:01.27","areaId":20196464,"attachUpdateDate":"2022-09-30T12:01:01.27","id":63114870,"attachEndDate":"2030-06-20T12:01:01.27","moId":10478903}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202139 Find patientId" id="f878b0ba-98e6-4a6d-9069-16e6ff7aeb23"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="#202139 Step 1" id="2ff679c5-b115-48bd-9573-48eb5ae80d63"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2020-09-30T12:01:01.27",
      "eventType":"CREATE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":null,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="#202139 Check Step 1" id="047cb6ec-9143-43a4-aafa-6db838bf8df0"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202139 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="136dfeba-54b5-4101-b44f-4c5344577f36" name="Не создан attachClosedDispObservations"><con:configuration><token>attachClosedDispObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202141 Find patientId" id="2cd4a2c7-b0d9-4937-82cf-3137510123ba"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="#202141 Step 1" id="e9c173fa-1af3-45ca-b427-84dd79fc3d73"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2020-09-30T12:01:01.27",
      "eventType":"CREATE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":null,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="#202141 Check Step 1" id="3ba2f80a-afdd-4662-b9e8-762dfcf42066"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202141 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="136dfeba-54b5-4101-b44f-4c5344577f36" name="Не создан attachClosedDispObservations"><con:configuration><token>attachClosedDispObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202143 Find patientId" id="b2ca67f8-c729-4fb3-9e03-9bcee0576d69"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="#202143 Step 1" id="99e9981e-6ec5-4f45-bfc0-ad51b6f0a35a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2020-09-30T12:01:01.27",
      "eventType":"CREATE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": null,
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="#202143 Check Step 1" id="2c5d8daf-e861-4e99-b610-45f8aa031b1b"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202143 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="136dfeba-54b5-4101-b44f-4c5344577f36" name="Не создан attachClosedDispObservations"><con:configuration><token>attachClosedDispObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202144 Find patientId" id="0765cafd-9b98-4534-9ad0-ae8af3c62b54"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="#202144 Step 1" id="92b0b3ab-d4da-46a2-8584-a641c015d15a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2020-09-30T12:01:01.27",
      "eventType":"CREATE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "701111",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="#202144 Check Step 1" id="7da8c64b-467b-4b2a-b2dc-0147de15b4ec"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202144 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="136dfeba-54b5-4101-b44f-4c5344577f36" name="Не создан attachClosedDispObservations"><con:configuration><token>attachClosedDispObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202151 Find patientId" id="ef45df8f-9663-474b-9346-df0642f21608"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="#202151 Step 1" id="1b3e58d2-6afe-419b-8d5b-59e7da38b985"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2020-09-30T12:01:01.27",
      "eventType":"CREATE"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   },
   "attachmentOldValue":{
      "attachId":63114871,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196465,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="#202151 Check Step 1" id="49f6834f-e234-467b-bc15-edf7520ab752"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202151 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="73a58a29-ed14-465f-8781-38ed256aa24a" name="Создан attachClosedDispObservations"><con:configuration><path>$.hits.hits[1]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations</path><content>[{"attachBeginDate":"2019-06-18T12:01:01.27","areaId":20196465,"attachUpdateDate":"2020-09-30T12:01:01.27","id":63114871,"moId":10478903},{"attachBeginDate":"2019-06-18T12:01:01.27","areaId":20196464,"attachUpdateDate":"2020-09-30T12:01:01.27","id":63114870,"moId":10478903}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>28545778</con:value></con:property></con:properties></con:testCase><con:testCase id="b3fb986f-2d36-4ae7-9fca-2a09ef78745f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="attachClosedDispensaryObservationDnForm30ToDispTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="#202155 Find patientId" id="84453e3b-29bc-4f71-be62-0de298216a27"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="fd8e389c-abed-4cea-99ff-2474cbb7914e" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202155 Data Create" id="a64db17a-87cd-4dde-a0f1-701cbd48fc06"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:01.27",
      "eventType":"OPEN"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="7ded3ec8-cc55-4e65-a9fe-ab1072e5a477"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="#202155 Step 1" id="001ea688-7066-4267-9d44-25a3bc365694"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "change",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0054",
   "groupName": "Нарушения обмена липопротеидов и другие липидемии",
   "groupSpecializationCode": "76",
   "groupSpecializationName": "Терапия",
   "doctorFIO": "Мишеева Вера Анатольевна",
   "employeeId": 10004434,
   "noDoctor": false,
   "specialityCode": "602",
   "specialityName": "Врач-терапевт участковый",
   "specializationCode": "76",
   "specializationName": "Терапия",
   "diagnosisCode": "E78.0",
   "diagnosisName": "Чистая гиперхолестеринемия",
   "diagnosisDate": "2022-08-01T00:00:00.0",
   "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
   "startDate": "2022-08-01",
   "endDate": "2023-08-01",   
   "cancelReasonCode": "2",
   "cancelReasonName": "Выбытие из района обслуживания",   
   "timeCommitted": "2022-08-09T16:18:02.094479",
   "dnDoctorJobExecutionId": "10005163"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="ce8a5c49-4acb-435b-a542-da6ca1faa14b"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#202155 Check Step 1" id="68d41cbb-9312-4b99-b6ce-a13296422ebc"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202155 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Создан closedDispObservations"><con:configuration><path>$.hits.hits[1]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations[0].closedDispObservations</path><content>[{"doctor":{"speciality":{"code":"602","name":"Врач-терапевт участковый"},"changeDate":"2022-08-09T16:18:02.094479+03:00","noDoctor":false,"specialization":{"code":"76","name":"Терапия"},"dnDoctorJobExecutionId":"10005163","employeeId":10004434,"fio":"Мишеева Вера Анатольевна"},"dispensaryObservationEndDate":"2023-08-01","diagnosis":{"code":"E78.0","diagnosisDate":"2022-08-01T00:00:00.0","repeat":"острое (+), впервые в жизни установленное хроническое (+)","name":"Чистая гиперхолестеринемия","diagnosisChangeDate":"2022-08-01T00:00:00.0"},"dispensaryObservationStartDate":"2022-08-01","cancelReason":{"code":"2","name":"Выбытие из района обслуживания"},"dispensaryObservationGroupCode":"DNA0054","dispensaryObservationUpdateDate":"2022-08-09T16:18:02.094479+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="2e01bcc8-ab37-428d-8d00-fb52c045dc91"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="#202155 Step 2" id="6efd818d-7d5c-4cfe-9704-31131cb6f76c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "change",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0054",
   "groupName": "Нарушения обмена липопротеидов и другие липидемии",
   "groupSpecializationCode": "76",
   "groupSpecializationName": "Терапия",
   "doctorFIO": "Мишеева Вера Анатольевна",
   "employeeId": 10004434,
   "noDoctor": true,
   "specialityCode": "602",
   "specialityName": "Врач-терапевт участковый",
   "specializationCode": "76",
   "specializationName": "Терапия",
   "diagnosisCode": "E78.0",
   "diagnosisName": "Чистая гиперхолестеринемия",
   "diagnosisDate": "2022-08-01T00:00:00.0",
   "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
   "startDate": "2022-08-01",
   "endDate": "2023-08-01",   
   "cancelReasonCode": "2",
   "cancelReasonName": "Выбытие из района обслуживания",   
   "timeCommitted": "2022-08-09T16:18:01.094479",
   "dnDoctorJobExecutionId": "10005163"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 4" id="85291acb-25d7-4f11-a7c5-2d57ec32f618"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#202155 Check Step 2" id="f93be8f8-c652-497a-9b30-98dc60543009"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202155 Check Step 2" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Не обновлен closedDispObservations"><con:configuration><path>$.hits.hits[0]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations[0].closedDispObservations</path><content>[{"doctor":{"speciality":{"code":"602","name":"Врач-терапевт участковый"},"changeDate":"2022-08-09T16:18:02.094479+03:00","noDoctor":false,"specialization":{"code":"76","name":"Терапия"},"dnDoctorJobExecutionId":"10005163","employeeId":10004434,"fio":"Мишеева Вера Анатольевна"},"dispensaryObservationEndDate":"2023-08-01","diagnosis":{"code":"E78.0","diagnosisDate":"2022-08-01T00:00:00.0","repeat":"острое (+), впервые в жизни установленное хроническое (+)","name":"Чистая гиперхолестеринемия","diagnosisChangeDate":"2022-08-01T00:00:00.0"},"dispensaryObservationStartDate":"2022-08-01","cancelReason":{"code":"2","name":"Выбытие из района обслуживания"},"dispensaryObservationGroupCode":"DNA0054","dispensaryObservationUpdateDate":"2022-08-09T16:18:02.094479+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202155 Step 3" id="2ebb80d9-840b-45e4-9b2d-0de21e3d43d0"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "change",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0054",
   "groupName": "Нарушения обмена липопротеидов и другие липидемии",
   "groupSpecializationCode": "76",
   "groupSpecializationName": "Терапия",
   "doctorFIO": "Мишеева Вера Анатольевна1",
   "employeeId": 10004435,
   "noDoctor": true,
   "specialityCode": "605",
   "specialityName": "Врач-терапевт участковый1",
   "specializationCode": "77",
   "specializationName": "Терапия1",
   "diagnosisCode": "E78.1",
   "diagnosisName": "Чистая гиперхолестеринемия1",
   "diagnosisDate": "2022-08-02T00:00:00.0",
   "repeat": "острое (+), впервые в жизни установленное хроническое (+)1",
   "startDate": "2022-08-02",
   "endDate": "2023-08-02",   
   "cancelReasonCode": "3",
   "cancelReasonName": "Выбытие из района обслуживания1",   
   "timeCommitted": "2022-08-09T16:18:03.094479",
   "dnDoctorJobExecutionId": "10005164"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 5" id="5ad2b7b7-bdbb-49ef-8e88-9e55915a628c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#202155 Check Step 3" id="fca9df7d-be12-4e0b-a2f0-89274ba89cf5"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202155 Check Step 3" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Обновлен closedDispObservations"><con:configuration><path>$.hits.hits[0]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations[0].closedDispObservations</path><content>[{"doctor":{"speciality":{"code":"605","name":"Врач-терапевт участковый1"},"changeDate":"2022-08-09T16:18:03.094479+03:00","noDoctor":true,"specialization":{"code":"77","name":"Терапия1"},"dnDoctorJobExecutionId":"10005164","employeeId":10004435,"fio":"Мишеева Вера Анатольевна1"},"dispensaryObservationEndDate":"2023-08-02","diagnosis":{"code":"E78.1","diagnosisDate":"2022-08-02T00:00:00.0","repeat":"острое (+), впервые в жизни установленное хроническое (+)1","name":"Чистая гиперхолестеринемия1","diagnosisChangeDate":"2022-08-09T16:18:03.094479+03:00"},"dispensaryObservationStartDate":"2022-08-02","cancelReason":{"code":"3","name":"Выбытие из района обслуживания1"},"dispensaryObservationGroupCode":"DNA0054","dispensaryObservationUpdateDate":"2022-08-09T16:18:03.094479+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202160 Find patientId" id="a537ccf4-57e7-4a31-93a4-0952c9414e36"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="#202160 Data Create" id="f80cd2d6-e34d-458c-aaaa-63311c7ada90"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:01.27",
      "eventType":"OPEN"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 6" id="7b1804c3-312a-42de-b756-f025dfc69d76"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="#202160 Step 1" id="e8e7bc2a-48a6-4a90-9765-74f319bd0cd1"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0054",
   "groupName": "Нарушения обмена липопротеидов и другие липидемии",
   "groupSpecializationCode": "76",
   "groupSpecializationName": "Терапия",
   "doctorFIO": "Мишеева Вера Анатольевна",
   "employeeId": 10004434,
   "noDoctor": false,
   "specialityCode": "602",
   "specialityName": "Врач-терапевт участковый",
   "specializationCode": "76",
   "specializationName": "Терапия",
   "diagnosisCode": "E78.0",
   "diagnosisName": "Чистая гиперхолестеринемия",
   "diagnosisDate": "2022-08-01T00:00:00.0",
   "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
   "startDate": "2022-08-01",
   "endDate": "2023-08-01",   
   "cancelReasonCode": "2",
   "cancelReasonName": "Выбытие из района обслуживания",   
   "timeCommitted": "2022-08-09T16:18:02.094479",
   "dnDoctorJobExecutionId": "10005163"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 7" id="a8c3cd6e-e752-4a44-870d-a0f4dff3c0a6"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#202160 Check Step 1" id="2f1077f6-d1d7-428f-8b9c-153563b8e158"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202160 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="b06386c9-80b9-4019-b01c-b53d25405c6a" name="Не создан closedDispObservations"><con:configuration><token>closedDispObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202792 Find patientId" id="0a7f6520-8dc5-40b2-be39-85cdc2e1cc36"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="#202792 Data Create" id="6d92c886-77c8-445c-b878-f82c640d7622"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:01.27",
      "eventType":"OPEN"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 8" id="17495c17-bcf8-4d1e-b9d1-f83fbfb13256"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="#202792 Step 1" id="1d6ff77c-8316-43b5-a6e3-37695fd8eb2f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "close",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0054",
   "groupName": "Нарушения обмена липопротеидов и другие липидемии",
   "groupSpecializationCode": "76",
   "groupSpecializationName": "Терапия",
   "doctorFIO": "Мишеева Вера Анатольевна",
   "employeeId": 10004434,
   "noDoctor": false,
   "specialityCode": "602",
   "specialityName": "Врач-терапевт участковый",
   "specializationCode": "76",
   "specializationName": "Терапия",
   "diagnosisCode": "E78.0",
   "diagnosisName": "Чистая гиперхолестеринемия",
   "diagnosisDate": "2022-08-01T00:00:00.0",
   "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
   "startDate": "2022-08-01", 
   "cancelReasonCode": "2",
   "cancelReasonName": "Выбытие из района обслуживания",   
   "timeCommitted": "2022-08-09T16:18:02.094479",
   "dnDoctorJobExecutionId": "10005163"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 9" id="7a260cc5-d966-4956-bc7a-3741f5ff276a"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#202792 Check Step 1" id="583e49b1-867e-4803-8555-3cc23f45d07e"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202792 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="b06386c9-80b9-4019-b01c-b53d25405c6a" name="Не создан closedDispObservations"><con:configuration><token>closedDispObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#202805 Find patientId" id="2a737ea0-0f9a-45c8-9141-8add34c19941"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="#202805 Data Create" id="8d8fcec0-4829-439a-bfc7-9682e80756dc"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:01.27",
      "eventType":"OPEN"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 10" id="94f2e0ff-d950-4af8-bff3-dc55b37f9450"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="#202805 Step 1" id="a8f6c791-8f6c-42d9-a1c0-aef4ae14d681"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "close",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0054",
   "groupName": "Нарушения обмена липопротеидов и другие липидемии",
   "groupSpecializationCode": "76",
   "groupSpecializationName": "Терапия",
   "doctorFIO": "Мишеева Вера Анатольевна",
   "employeeId": 10004434,
   "noDoctor": false,
   "specialityCode": "602",
   "specialityName": "Врач-терапевт участковый",
   "specializationCode": "76",
   "specializationName": "Терапия",
   "diagnosisCode": "E78.0",
   "diagnosisName": "Чистая гиперхолестеринемия",
   "diagnosisDate": "2022-08-01T00:00:00.0",
   "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
   "startDate": "2022-08-01",
   "endDate": "2023-08-01",   
   "cancelReasonCode": "2",
   "cancelReasonName": "Выбытие из района обслуживания",   
   "timeCommitted": "2022-08-09T16:18:02.094479",
   "dnDoctorJobExecutionId": "10005163"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 11" id="6ef81a29-64a2-40e7-96ea-8e3b825c51c3"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#202805 Check Step 1" id="12516ca1-9dfc-41e7-831f-23fffa0a3ece"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#202805 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Создан closedDispObservations"><con:configuration><path>$.hits.hits[1]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations[0].closedDispObservations</path><content>[{"doctor":{"speciality":{"code":"602","name":"Врач-терапевт участковый"},"changeDate":"2022-08-09T16:18:02.094479+03:00","noDoctor":false,"specialization":{"code":"76","name":"Терапия"},"dnDoctorJobExecutionId":"10005163","employeeId":10004434,"fio":"Мишеева Вера Анатольевна"},"dispensaryObservationEndDate":"2023-08-01","diagnosis":{"code":"E78.0","diagnosisDate":"2022-08-01T00:00:00.0","repeat":"острое (+), впервые в жизни установленное хроническое (+)","name":"Чистая гиперхолестеринемия","diagnosisChangeDate":"2022-08-01T00:00:00.0"},"dispensaryObservationStartDate":"2022-08-01","cancelReason":{"code":"2","name":"Выбытие из района обслуживания"},"dispensaryObservationGroupCode":"DNA0054","dispensaryObservationUpdateDate":"2022-08-09T16:18:02.094479+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#203066 Find patientId" id="c358123a-d424-4b66-8c97-56e31a19d3a5"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="#203066 Data Create" id="67129755-b2bc-4746-9248-c032ecbe0aa4"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:01.27",
      "eventType":"OPEN"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 12" id="222625e6-985e-4007-bbe9-ed703483da14"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="#203066 Data Create 2" id="2288bea3-c68b-4647-b8db-efc65a667296"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "change",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0054",
   "groupName": "Нарушения обмена липопротеидов и другие липидемии",
   "groupSpecializationCode": "76",
   "groupSpecializationName": "Терапия",
   "doctorFIO": "Мишеева Вера Анатольевна",
   "employeeId": 10004434,
   "noDoctor": false,
   "specialityCode": "602",
   "specialityName": "Врач-терапевт участковый",
   "specializationCode": "76",
   "specializationName": "Терапия",
   "diagnosisCode": "E78.0",
   "diagnosisName": "Чистая гиперхолестеринемия",
   "diagnosisDate": "2022-08-01T00:00:00.0",
   "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
   "startDate": "2022-08-01",
   "endDate": "2023-08-01",   
   "cancelReasonCode": "2",
   "cancelReasonName": "Выбытие из района обслуживания",   
   "timeCommitted": "2022-08-09T16:18:02.094479",
   "dnDoctorJobExecutionId": "10005163"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 13" id="e3071db4-c1f9-426d-bdda-a5bbdab4e01d"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="#203066 Step 1" id="c4f97ca6-6080-4364-a43e-58e711e67931"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "cancel",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0055",
   "groupName": "Нарушения обмена липопротеидов и другие липидемии",
   "groupSpecializationCode": "76",
   "groupSpecializationName": "Терапия",
   "doctorFIO": "Мишеева Вера Анатольевна",
   "employeeId": 10004434,
   "noDoctor": false,
   "specialityCode": "602",
   "specialityName": "Врач-терапевт участковый",
   "specializationCode": "76",
   "specializationName": "Терапия",
   "diagnosisCode": "E78.0",
   "diagnosisName": "Чистая гиперхолестеринемия",
   "diagnosisDate": "2022-08-01T00:00:00.0",
   "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
   "startDate": "2022-08-01",
   "endDate": "2023-08-01",   
   "cancelReasonCode": "2",
   "cancelReasonName": "Выбытие из района обслуживания",   
   "timeCommitted": "2022-08-09T16:18:02.094479",
   "dnDoctorJobExecutionId": "10005163"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 14" id="766ec130-e10d-426e-b2b3-d7ade7b2f99b"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#203066 Check Step 1" id="362d8ae4-829d-48b9-81cd-4d87b5750f73"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#203066 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Создан closedDispObservations"><con:configuration><path>$.hits.hits[0]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations[0].closedDispObservations</path><content>[{"doctor":{"speciality":{"code":"602","name":"Врач-терапевт участковый"},"changeDate":"2022-08-09T16:18:02.094479+03:00","noDoctor":false,"specialization":{"code":"76","name":"Терапия"},"dnDoctorJobExecutionId":"10005163","employeeId":10004434,"fio":"Мишеева Вера Анатольевна"},"dispensaryObservationEndDate":"2023-08-01","diagnosis":{"code":"E78.0","diagnosisDate":"2022-08-01T00:00:00.0","repeat":"острое (+), впервые в жизни установленное хроническое (+)","name":"Чистая гиперхолестеринемия","diagnosisChangeDate":"2022-08-01T00:00:00.0"},"dispensaryObservationStartDate":"2022-08-01","cancelReason":{"code":"2","name":"Выбытие из района обслуживания"},"dispensaryObservationGroupCode":"DNA0054","dispensaryObservationUpdateDate":"2022-08-09T16:18:02.094479+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#203066 Step 2" id="92f81f38-664b-4a94-bb03-72bec4ba1195"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "cancel",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0054",
   "groupName": "Нарушения обмена липопротеидов и другие липидемии",
   "groupSpecializationCode": "76",
   "groupSpecializationName": "Терапия",
   "doctorFIO": "Мишеева Вера Анатольевна",
   "employeeId": 10004434,
   "noDoctor": false,
   "specialityCode": "602",
   "specialityName": "Врач-терапевт участковый",
   "specializationCode": "76",
   "specializationName": "Терапия",
   "diagnosisCode": "E78.0",
   "diagnosisName": "Чистая гиперхолестеринемия",
   "diagnosisDate": "2022-08-01T00:00:00.0",
   "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
   "startDate": "2022-08-01",
   "endDate": "2023-08-01",   
   "cancelReasonCode": "2",
   "cancelReasonName": "Выбытие из района обслуживания",   
   "timeCommitted": "2022-08-09T16:18:02.094479",
   "dnDoctorJobExecutionId": "10005163"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 15" id="b93e0112-f19b-4679-a444-157c0a5bc2f1"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#203066 Check Step 2" id="20cf0f73-10b2-4bc9-8d9c-c06a2681ba6f"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#203066 Check Step 2" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="82e4250b-41ee-4a91-b268-3988fd6c9006" name="Удален closedDispObservations"><con:configuration><token>closedDispObservations</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="#203245 Find patientId" id="6568258e-b782-4e44-b3b2-cc285ba8cad8"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="groovy" name="#203245 Data Create 1" id="98e8d9d9-5c38-4290-80e0-8b9eb94b8b48"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-09-30T12:01:01.27",
      "eventType":"OPEN"
   },
   "attachmentNewValue":{
      "attachId":63114870,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196464,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-18T12:01:01.27",
      "attachEndDate":"2030-06-20T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="#203245 Data Create 2" id="464ae027-ebeb-4698-a7cf-cef34802a8ad"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("AttachmentEvent","""{
   "event":{
      "id":8003,
      "dateTime":"2022-10-02T12:01:01.27",
      "eventType":"OPEN"
   },
   "attachmentNewValue":{
      "attachId":63114872,
      "patientId": """+patientId+""",
      "isActual":true,
      "attachPolType":{
         "globalId":125694322,
         "code":"1",
         "title":"Обязательное медицинское страхование"
      },
      "noSelfAppointment":false,
      "moId":10478903,
      "muId":11065203,
      "areaId":20196465,
      "areaTypeCode": "70",
      "attachBeginDate":"2019-06-19T12:01:01.27",
      "attachType":{
         "globalId":128619858,
         "code":"0",
         "title":"небазовое"
      },
      "attachChangeType":{
         "globalId":128619921,
         "code":"30",
         "title":"По инициативе врача или медицинского учреждения (по мед. показаниям)"
      }
   }
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 16" id="42d9f977-d356-4335-ab4a-0ccfd69cd944"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="#203245 Step 1" id="9e094ad5-f921-4833-9e01-41ac14e61992"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "change",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0054",
   "groupName": "Нарушения обмена липопротеидов и другие липидемии",
   "groupSpecializationCode": "76",
   "groupSpecializationName": "Терапия",
   "doctorFIO": "Мишеева Вера Анатольевна",
   "employeeId": 10004434,
   "noDoctor": false,
   "specialityCode": "602",
   "specialityName": "Врач-терапевт участковый",
   "specializationCode": "76",
   "specializationName": "Терапия",
   "diagnosisCode": "E78.0",
   "diagnosisName": "Чистая гиперхолестеринемия",
   "diagnosisDate": "2022-08-01T00:00:00.0",
   "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
   "startDate": "2022-08-01",
   "endDate": "2023-08-01",   
   "cancelReasonCode": "2",
   "cancelReasonName": "Выбытие из района обслуживания",   
   "timeCommitted": "2022-08-09T16:18:02.094479",
   "dnDoctorJobExecutionId": "10005163"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 17" id="660de6f3-483c-444b-a14a-0d8b0714990c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="#203245 Check Step 1" id="679e75b9-f3b5-4854-bd9e-8a64edcabbd6"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="#203245 Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="5336aea5-e8e0-40f6-a2e8-3d3dbe479bea" name="Создан closedDispObservations"><con:configuration><path>$.hits.hits[0]._source.data.attachClosedDispensaryObservation.attachClosedDispObservations[1].closedDispObservations</path><content>[{"doctor":{"speciality":{"code":"602","name":"Врач-терапевт участковый"},"changeDate":"2022-08-09T16:18:02.094479+03:00","noDoctor":false,"specialization":{"code":"76","name":"Терапия"},"dnDoctorJobExecutionId":"10005163","employeeId":10004434,"fio":"Мишеева Вера Анатольевна"},"dispensaryObservationEndDate":"2023-08-01","diagnosis":{"code":"E78.0","diagnosisDate":"2022-08-01T00:00:00.0","repeat":"острое (+), впервые в жизни установленное хроническое (+)","name":"Чистая гиперхолестеринемия","diagnosisChangeDate":"2022-08-01T00:00:00.0"},"dispensaryObservationStartDate":"2022-08-01","cancelReason":{"code":"2","name":"Выбытие из района обслуживания"},"dispensaryObservationGroupCode":"DNA0054","dispensaryObservationUpdateDate":"2022-08-09T16:18:02.094479+03:00"}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000276</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="d0cd74cf-7ac3-4efa-af9f-d5306428f5a3" name="childrenHealthGroup (детская группа здоровья)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="960d138c-200b-46bf-ab2e-64038ab054b7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о группах здоровья для детей" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="32152d6f-abf7-4abd-94f8-44149bb44de3"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"1514111"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Основной сценарий" id="9b1169ed-d199-4111-bfa7-6fa085cc7664"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("JuvenileHealthGroupReconsiderationComposition","""
{
    "patientId": \""""+patientId+"""\",
    "childrenHealthGroup": {
        "childrenHealthGroupCode": "1",
        "childrenHealthGroupName": "I группа",
        "dateConclusion": "2018-11-13",
        "isAnnulled": false
    },
    "physicalEducationGroup": {
        "physicalEducationGroupCode": "2",
        "physicalEducationGroupName": "II (подготовительная)",
        "dateConclusion": "2019-01-10",
        "isAnnulled": false
    }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="childHealthGroup.date > dateConclusion" id="a7decb4a-a7cc-4d00-a1bb-6900da63610f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("JuvenileClinicalExaminationChange","""
{
    "patientId": \""""+patientId+"""\",
    "childrenHealthGroup": {
        "childrenHealthGroupCode": "1",
        "childrenHealthGroupName": "II группа",
        "dateConclusion": "2018-11-12",
        "isAnnulled": false
    },
    "physicalEducationGroup": {
        "physicalEducationGroupCode": "2",
        "physicalEducationGroupName": "II (подготовительная)",
        "dateConclusion": "2019-01-10",
        "isAnnulled": false
    }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="childHealthGroup.date &lt; dateConclusion" id="e4870f00-29f5-4e0e-ae4b-ec729805fc84"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("JuvenileClinicalExaminationChange","""
{
    "patientId": \""""+patientId+"""\",
    "childrenHealthGroup": {
        "childrenHealthGroupCode": "1",
        "childrenHealthGroupName": "II группа",
        "dateConclusion": "2018-11-14",
        "isAnnulled": false
    },
    "physicalEducationGroup": {
        "physicalEducationGroupCode": "2",
        "physicalEducationGroupName": "II (подготовительная)",
        "dateConclusion": "2019-01-10",
        "isAnnulled": false
    }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="isAnnuled = true другое значение" id="2ff05cf1-0fb0-4055-8dce-b365b1b92327"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("JuvenileClinicalExaminationChange","""
{
    "patientId": \""""+patientId+"""\",
    "childrenHealthGroup": {
        "childrenHealthGroupCode": "1",
        "childrenHealthGroupName": "I группа",
        "dateConclusion": "2018-11-13",
        "isAnnulled": true
    },
    "physicalEducationGroup": {
        "physicalEducationGroupCode": "2",
        "physicalEducationGroupName": "II (подготовительная)",
        "dateConclusion": "2019-01-10",
        "isAnnulled": false
    }
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1514111</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2021-12-22T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2021-12-22</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic1</con:name><con:value>JuvenileHealthGroupReconsiderationComposition</con:value></con:property><con:property><con:name>topic2</con:name><con:value>JuvenileHealthGroupReconsiderationComposition.patientregistry</con:value></con:property></con:properties></con:testSuite><con:testSuite id="cee43a59-f6af-4bc5-a02c-d72ffb6f9d5e" name="clinicalExamination (Диспансеризация)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="57ffd5bf-5e94-46c4-aa1d-352d17346d34" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="clinicalExaminationTrigger" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="6f1cf12f-b89b-4cfa-912d-b89182d4fef7"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"155911111"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Создание" id="09d3a882-9aac-48a5-a6dc-59525bf00abc"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("DNclinicalExamination","""{
   "domain": "default",
   "ehrUid": "6cd22e9f-17a8-441e-bb77-fca99b67e9c6",
   "operationType": "create",
   "eventName": "dn_parks_PCU_conclusion",
   "compositionId": "dce061a6-2e4f-4210-9229-5439f3d4f55e::default::1",
   "newResults": [
      {
         "compositionId": "dce061a6-2e4f-4210-9229-5439f3d4f55e::default::1",
         "templateId": "openEHR-EHR-COMPOSITION.t_parks_PCU_conclusion.v1",
         "patientId": \""""+patientId+"""\",
         "healthGroup": "IIIa",
         "dateConclusion": "2022-06-24T15:48:51.556254+03:00"
      }
   ],
   "auditDetails": {
      "@class": "AUDIT_DETAILS",
      "system_id": "default",
      "committer": {
         "@class": "PARTY_IDENTIFIED",
         "name": "emias_qa"
      },
      "time_committed": {
         "@class": "DV_DATE_TIME",
         "value": "2022-06-24T15:48:51.556254+03:00"
      },
      "change_type": {
         "@class": "DV_CODED_TEXT",
         "value": "creation",
         "defining_code": {
            "@class": "CODE_PHRASE",
            "terminology_id": {
               "@class": "TERMINOLOGY_ID",
               "value": "openehr"
            },
            "code_string": "249"
         }
      }
   }
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>155911111</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-05-29T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-05-29</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-04-29</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="b265acce-6a1b-46e4-8035-b359a4245474" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="clinicalExaminationPreventiveExaminationReferenceFormsTopicJob" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="11945193-8493-4725-81c4-e493e40dcbb1"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="fcf389dc-bc22-407b-980b-6115eb7e11f7" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create v1" id="03dfe3bb-374a-4b37-a7a5-f4ccec6c6341"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("directory4")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def date =testRunner.testCase.getPropertyValue("date")
 String message = file.replace("\$patientId",patientId).replace("\$date",date)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create v1 дата выше" id="edd2288d-6763-465a-a064-67c2afa2a664"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("directory4")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def dateHigher =testRunner.testCase.getPropertyValue("dateHigher")
 String message = file.replace("\$patientId",patientId).replace("\$date",dateHigher)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create v1 дата ниже" id="61077e36-7010-4ec4-8579-2c6abe863655"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("directory4")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def dateLower =testRunner.testCase.getPropertyValue("dateHigher")
 String message = file.replace("\$patientId",patientId).replace("\$date",dateLower)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create v1.2" id="9ecd60bd-5ef1-4c15-8540-8c9be4e7b9f5"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("directory5")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def date =testRunner.testCase.getPropertyValue("date")
 String message = file.replace("\$patientId",patientId).replace("\$date",date)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create v1.2 дата выше" id="9215a464-5837-4e6e-bc23-145ddcdc54dc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("directory5")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def dateHigher =testRunner.testCase.getPropertyValue("dateHigher")
 String message = file.replace("\$patientId",patientId).replace("\$date",dateHigher)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create v1.2 дата ниже" id="c24176cd-dde6-4a0d-a81f-487db938e2ab"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("directory4")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def dateLower =testRunner.testCase.getPropertyValue("dateHigher")
 String message = file.replace("\$patientId",patientId).replace("\$date",dateLower)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create v1.1" id="e0ef8a42-3f8f-4c2d-8396-410f68728e78"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("directory6")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def date =testRunner.testCase.getPropertyValue("date")
 String message = file.replace("\$patientId",patientId).replace("\$date",date)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create v1.1 дата выше" id="7d92ae69-565d-4468-9127-1dcbaf23bbab"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("directory6")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def dateHigher =testRunner.testCase.getPropertyValue("dateHigher")
 String message = file.replace("\$patientId",patientId).replace("\$date",dateHigher)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create v1.1 дата ниже" id="16801423-f0d7-495a-a067-4f15f2f35944"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic1")
 String file =scripts.returnFileAsText("directory6")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def dateLower =testRunner.testCase.getPropertyValue("dateHigher")
 String message = file.replace("\$patientId",patientId).replace("\$date",dateLower)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check обычная дата" id="67f57c47-074d-485c-ac5d-20bb6dba7b11"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check обычная дата" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="07aa4f74-c315-4dee-ba86-6204662d5953" name="Создан examinationDate"><con:configuration><path>._source.data.clinicalExamination.examinationDate</path><content>[2022-10-12]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Сheck дата выше" id="253f7141-3210-432c-862b-d2f33813a815"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Сheck дата выше" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="07aa4f74-c315-4dee-ba86-6204662d5953" name="Создан examinationDate"><con:configuration><path>._source.data.clinicalExamination.examinationDate</path><content>[2022-10-13]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Check дата ниже" id="2b19ecf0-794e-4cdb-a21a-ab6696d28574"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check дата ниже" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="07aa4f74-c315-4dee-ba86-6204662d5953" name="Не обновлено examinationDate"><con:configuration><path>._source.data.clinicalExamination.examinationDate</path><content>[2022-10-13]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000043</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-10-12</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-10-11</con:value></con:property><con:property><con:name>dateHigher</con:name><con:value>2022-10-13</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property><con:property><con:name>directory4</con:name><con:value>\Реестр\t_preventive_examination_reference_forms_112_025.v1 create.json</con:value></con:property><con:property><con:name>directory5</con:name><con:value>\Реестр\t_preventive_examination_reference_forms_112_025.v1.2 create.json</con:value></con:property><con:property><con:name>directory6</con:name><con:value>\Реестр\t_preventive_examination_reference_forms_112_025.v1.1 create.json</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>topic1</con:name><con:value>t_preventive_examination_reference_forms_112_025Composition</con:value></con:property></con:properties></con:testSuite><con:testSuite id="61cb8f87-15b5-48c1-ade6-cd323a00bd42" name="deviation (Наличие отклонений в результатах ЛИ)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="26af0e6c-d223-4e1f-ad39-c9f283faeafe" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о ЛИ с отклонениями (топик)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="0c86717f-61ba-4423-8623-8b17215f841e"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="b722500c-f253-4757-b19b-e2bd4653b23a" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set date &lt;365" id="daa457f0-737d-42b5-8514-0e3f6a721d0f"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 364;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set date >365" id="19e9fdba-02c5-4df0-9741-b7346aac2a8a"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 366;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="t_laboratory_test_result_report.v2 create" id="cc42252d-2799-4595-831e-2b304606db56"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("v2Create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def isDeviation =testRunner.testCase.getPropertyValue("isDeviation")
 def dateLower2 =testRunner.testCase.getPropertyValue("dateLower2")
 def testCode =testRunner.testCase.getPropertyValue("testCode")
 String message = file.replace("\$patientId",patientId).replace("\$isDeviation",isDeviation).replace("\$dateLower2",dateLower2).replace("\$testCode",testCode)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="t_laboratory_test_result_report.v2 update" id="353bc1ed-2232-48b1-97a9-e7d00294f90f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("v2Update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def isDeviation =testRunner.testCase.getPropertyValue("isDeviation")
 def dateLower2 =testRunner.testCase.getPropertyValue("dateLower2")
 def testCode =testRunner.testCase.getPropertyValue("testCode")
 String message = file.replace("\$patientId",patientId).replace("\$isDeviation",isDeviation).replace("\$dateLower2",dateLower2).replace("\$testCode",testCode)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="t_laboratory_test_result_report.v2 delete" id="d6bcd874-9615-423c-9736-8b9850913cc0"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("v2Delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def isDeviation =testRunner.testCase.getPropertyValue("isDeviation")
 def dateLower2 =testRunner.testCase.getPropertyValue("dateLower2")
 def testCode =testRunner.testCase.getPropertyValue("testCode")
 String message = file.replace("\$patientId",patientId).replace("\$isDeviation",isDeviation).replace("\$dateLower2",dateLower2).replace("\$testCode",testCode)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="t_laboratory_test_result_report.v2.1 create" id="98f8296e-5bea-49c6-a5fc-79072430db9f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("v21Create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def isDeviation =testRunner.testCase.getPropertyValue("isDeviation")
 def dateLower2 =testRunner.testCase.getPropertyValue("dateLower2")
 def testCode =testRunner.testCase.getPropertyValue("testCode")
 String message = file.replace("\$patientId",patientId).replace("\$isDeviation",isDeviation).replace("\$dateLower2",dateLower2).replace("\$testCode",testCode)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="t_laboratory_test_result_report.v2.1 update" id="09b24dc7-e3ff-4639-9395-0a415302e18e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("v21Update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def isDeviation =testRunner.testCase.getPropertyValue("isDeviation")
 def dateLower2 =testRunner.testCase.getPropertyValue("dateLower2")
 def testCode =testRunner.testCase.getPropertyValue("testCode")
 String message = file.replace("\$patientId",patientId).replace("\$isDeviation",isDeviation).replace("\$dateLower2",dateLower2).replace("\$testCode",testCode)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="t_laboratory_test_result_report.v2.1 delete" id="d128d441-eb31-421f-9aa9-e5038c4bec17"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("v21Delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def isDeviation =testRunner.testCase.getPropertyValue("isDeviation")
 def dateLower2 =testRunner.testCase.getPropertyValue("dateLower2")
 def testCode =testRunner.testCase.getPropertyValue("testCode")
 String message = file.replace("\$patientId",patientId).replace("\$isDeviation",isDeviation).replace("\$dateLower2",dateLower2).replace("\$testCode",testCode)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Проверка" id="a68fb807-ed44-4056-9107-af8cd1d4e694"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверка" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="53e6c2ca-b05d-4160-ba8c-b8e9668e8b8b" name="Contains"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000449</con:value></con:property><con:property><con:name>v2Create</con:name><con:value>\Реестр\t_laboratory_test_result_report.v2 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2023-03-26T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-03-29</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2023-01-09</con:value></con:property><con:property><con:name>isDeviation</con:name><con:value>true</con:value></con:property><con:property><con:name>testCode</con:name><con:value>738</con:value></con:property><con:property><con:name>v2Delete</con:name><con:value>\Реестр\t_laboratory_test_result_report.v2 delete.json</con:value></con:property><con:property><con:name>v21Create</con:name><con:value>\Реестр\t_laboratory_test_result_report.v2.1 create.json</con:value></con:property><con:property><con:name>v21Delete</con:name><con:value>\Реестр\t_laboratory_test_result_report.v2.1 delete.json</con:value></con:property><con:property><con:name>v2Update</con:name><con:value>\Реестр\t_laboratory_test_result_report.v2 update.json</con:value></con:property><con:property><con:name>v21Update</con:name><con:value>\Реестр\t_laboratory_test_result_report.v2.1 update.json</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_laboratory_test_result_reportComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>topicFix</con:name><con:value>t_dispensary_observation_programComposition.patientregistry</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>dbType</con:name><con:value>postgre</con:value></con:property><con:property><con:name>dbLogin</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>dn</con:value></con:property><con:property><con:name>registryLogin</con:name><con:value>erp_dn_view</con:value></con:property><con:property><con:name>registryPassword</con:name><con:value>wd#0311FD8</con:value></con:property><con:property><con:name>registryConnect</con:name><con:value>@//10.0.49.100:1521/erptest</con:value></con:property><con:property><con:name>registryTestLogin</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestPassword</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestConnect</con:name><con:value>@//10.2.172.16:1521/patient_registry.mosgorzdrav.local</con:value></con:property><con:property><con:name>limit</con:name><con:value>100</con:value></con:property><con:property><con:name>patientId</con:name><con:value>1000000</con:value></con:property><con:property><con:name>topic2</con:name><con:value>card_of_call_embulanceComposition</con:value></con:property><con:property><con:name>topic3</con:name><con:value>t_dispensary_at_home_proactive_questionnaireComposition</con:value></con:property><con:property><con:name>topic4</con:name><con:value>t_selfcontrol_dispensary_questionnaireComposition</con:value></con:property></con:properties></con:testSuite><con:testSuite id="f70b8a80-0dec-4b81-bc8e-ec65dd70969c" name="dispensaryAtHomeProactiveQuestionnaire"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b000d457-764a-46ca-a9f3-12f5369718a4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#276162" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePatient" id="5cb503df-e451-4c24-a207-0b57b9899ecd"><con:settings/><con:config><script>def randomNumber = new Random().nextInt(999001) + 1000
def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("patientId", randomNumber.toString())
testRunner.testCase.setPropertyValue("uid", randomuid.toString())

log.info randomNumber</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="c362f684-a9f9-4791-acdc-84fcd9be02c4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
String file =scripts.returnFileAsText("Create")

// Переменные
def patientId =testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

String message = file.replace("\$patientId",patientId).replace("\$uid",uid)
//return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>750343</con:value></con:property><con:property><con:name>Create</con:name><con:value>\Реестр\t_dispensary_at_home_proactive_questionnaire create.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>863238</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-03-26</con:value></con:property><con:property><con:name>dateLower_yesterday</con:name><con:value>2023-03-26</con:value></con:property><con:property><con:name>dateLower_today</con:name><con:value>2023-03-27</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-17T13:31:37</con:value></con:property></con:properties></con:testCase><con:testCase id="b6b61a76-debb-4a75-b0ad-143800c5d0cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#276164" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePatient" id="657bc483-cce8-419d-8e2a-b68ac7c8453c"><con:settings/><con:config><script>def randomNumber = new Random().nextInt(999001) + 1000
def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("patientId", randomNumber.toString())
testRunner.testCase.setPropertyValue("uid", randomuid.toString())

log.info randomNumber</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="b43a66c7-2b1d-450a-b977-41530d9e7e79"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
String file =scripts.returnFileAsText("update")

// Переменные
def patientId =testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

String message = file.replace("\$patientId",patientId).replace("\$uid",uid)
//return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>750343</con:value></con:property><con:property><con:name>update</con:name><con:value>\Реестр\t_dispensary_at_home_proactive_questionnaire update.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>863239</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-03-26</con:value></con:property><con:property><con:name>dateLower_yesterday</con:name><con:value>2023-03-26</con:value></con:property><con:property><con:name>dateLower_today</con:name><con:value>2023-03-27</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-17T13:31:37</con:value></con:property></con:properties></con:testCase><con:testCase id="c5577894-b267-4746-9d0a-aab640410b69" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#276163" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePatient" id="2a61f741-f791-4ba7-ad33-2c1e3e15fa22"><con:settings/><con:config><script>def randomNumber = new Random().nextInt(999001) + 1000
def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("patientId", randomNumber.toString())
testRunner.testCase.setPropertyValue("uid", randomuid.toString())

log.info randomNumber</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="50ae13cc-394c-48ff-a274-a5c38dd1a853"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
String file =scripts.returnFileAsText("create")

// Переменные
def patientId =testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

String message = file.replace("\$patientId",patientId).replace("\$uid",uid)
//return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="6ebf7911-9fe9-4b1d-afce-241ff3bebbaa"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
String file =scripts.returnFileAsText("update")

// Переменные
def patientId =testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

String message = file.replace("\$patientId",patientId).replace("\$uid",uid)
//return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>256515</con:value></con:property><con:property><con:name>delete</con:name><con:value>\Реестр\t_dispensary_at_home_proactive_questionnaire delete.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>968191</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-03-26</con:value></con:property><con:property><con:name>dateLower_yesterday</con:name><con:value>2023-03-26</con:value></con:property><con:property><con:name>dateLower_today</con:name><con:value>2023-03-27</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-17T13:31:37</con:value></con:property><con:property><con:name>create</con:name><con:value>\Реестр\t_dispensary_at_home_proactive_questionnaire create.json</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>topicFix</con:name><con:value>t_dispensary_observation_programComposition.patientregistry</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>dbType</con:name><con:value>postgre</con:value></con:property><con:property><con:name>dbLogin</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>dn</con:value></con:property><con:property><con:name>registryLogin</con:name><con:value>erp_dn_view</con:value></con:property><con:property><con:name>registryPassword</con:name><con:value>wd#0311FD8</con:value></con:property><con:property><con:name>registryConnect</con:name><con:value>@//10.0.49.100:1521/erptest</con:value></con:property><con:property><con:name>registryTestLogin</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestPassword</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestConnect</con:name><con:value>@//10.2.172.16:1521/patient_registry.mosgorzdrav.local</con:value></con:property><con:property><con:name>limit</con:name><con:value>100</con:value></con:property><con:property><con:name>patientId</con:name><con:value>1000000</con:value></con:property><con:property><con:name>topic2</con:name><con:value>card_of_call_embulanceComposition</con:value></con:property><con:property><con:name>topic3</con:name><con:value>t_dispensary_at_home_proactive_questionnaireComposition</con:value></con:property><con:property><con:name>topic4</con:name><con:value>t_selfcontrol_dispensary_questionnaireComposition</con:value></con:property><con:property><con:name>topic5</con:name><con:value>t_dispensary_at_home_proactive_questionnaireComposition</con:value></con:property></con:properties></con:testSuite><con:testSuite id="2693701a-8932-4328-989e-ba9f7aea509a" name="dispensaryObservation (Диспансерное наблюдение)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8fbf8014-a248-47d3-9587-cc160ddecadf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о диспансерном наблюдении пациента" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="f51cc7b9-a411-44ab-8ee3-fd0695358687"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="b8c47b4a-1f91-49b8-b1fb-dba192b42642" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="dispensaryObservationDNTrigger new" id="072351c7-06ac-414f-8f15-7715d084fbe1"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("DnForm30ToDisp","""{
  "operationType": "new",
  "basisTaskType": "DIGITIZED_DOCUMENT",
  "patientId": \""""+patientId+"""\",
  "groupCode": "DNA0014",
  "groupName": "Болезни желудка и двенадцатиперстной кишки",
  "groupSpecializationCode": "8",
  "groupSpecializationName": "Гастроэнтерология",
  "doctorFIO": "Липатова Татьяна Владимировна",
  "employeeId": 15246,
  "noDoctor": true,
  "specialityCode": "602",
  "specialityName": "Врач-терапевт участковый",
  "specializationCode": "76",
  "specializationName": "Терапия",
  "diagnosisCode": "I14",
  "diagnosisName": "Язва двенадцатиперстной кишки хроническая без кровотечения или прободения",
  "diagnosisDate": "2023-03-07T11:45:06.467",
  "diagnosisProactive": true,
  "diagnosisObservationPeriod": "12",
  "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
  "startDate": "2023-03-07",
  "endDate": null,
  "cancelReasonCode": null,
  "cancelReasonName": null,
  "timeCommitted": "2021-11-21T15:00:58+03:00",
  "dnDoctorJobExecutionId": "11312201"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="dispensaryObservationDNTrigger change" id="cf9d7950-a067-40ff-9f4f-6b88db424a56"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("DnForm30ToDisp","""{
  "operationType": "change",
  "basisTaskType": "DIGITIZED_DOCUMENT",
  "patientId": \""""+patientId+"""\",
  "groupCode": "DNA0011",
  "groupName": "Болезни желудка и двенадцатиперстной кишки",
  "groupSpecializationCode": "8",
  "groupSpecializationName": "Гастроэнтерология",
  "doctorFIO": "Липатова Татьяна Евгеньевна",
  "employeeId": 15246,
  "noDoctor": true,
  "specialityCode": "602",
  "specialityName": "Врач-терапевт участковый",
  "specializationCode": "86",
  "specializationName": "Терапия",
  "diagnosisCode": "К26.7",
  "diagnosisName": "Язва двенадцатиперстной кишки хроническая без кровотечения или прободения",
  "diagnosisDate": "2023-03-07T11:45:06.467",
  "diagnosisProactive": true,
  "diagnosisObservationPeriod": "12",
  "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
  "startDate": "2023-03-07",
  "endDate": null,
  "cancelReasonCode": null,
  "cancelReasonName": null,
  "timeCommitted": "2023-03-13T15:00:58+03:00",
  "dnDoctorJobExecutionId": "11312201"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="dispensaryObservationDNTrigger close" id="69332424-db72-4dc9-a8c1-09b26494a1b3"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("DnForm30ToDisp","""{
  "operationType": "close",
  "basisTaskType": "DIGITIZED_DOCUMENT",
  "patientId": \""""+patientId+"""\",
  "groupCode": "DNA0011",
  "groupName": "Болезни желудка и двенадцатиперстной кишки",
  "groupSpecializationCode": "8",
  "groupSpecializationName": "Гастроэнтерология",
  "doctorFIO": "Липатова Татьяна Владимировна",
  "employeeId": 15246,
  "noDoctor": true,
  "specialityCode": "602",
  "specialityName": "Врач-терапевт участковый",
  "specializationCode": "86",
  "specializationName": "Терапия",
  "diagnosisCode": "К26.7",
  "diagnosisName": "Язва двенадцатиперстной кишки хроническая без кровотечения или прободения",
  "diagnosisDate": "2023-03-07T11:45:06.467",
  "diagnosisProactive": true,
  "diagnosisObservationPeriod": "12",
  "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
  "startDate": "2023-03-07",
  "endDate": "2023-03-15",
  "cancelReasonCode": "1",
  "cancelReasonName": "Выздоровление",
  "timeCommitted": "2023-03-14T15:00:58+03:00",
  "dnDoctorJobExecutionId": "11312201"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="dispensaryObservationDNTrigger cancel" id="fe6903aa-7aca-4bf1-9e62-1491af0ddd21"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("DnForm30ToDisp","""{
  "operationType": "cancel",
  "basisTaskType": "DIGITIZED_DOCUMENT",
  "patientId": \""""+patientId+"""\",
  "groupCode": "DNA0011",
  "groupName": "Болезни желудка и двенадцатиперстной кишки",
  "groupSpecializationCode": "8",
  "groupSpecializationName": "Гастроэнтерология",
  "doctorFIO": "Липатова Татьяна Владимировна",
  "employeeId": 15246,
  "noDoctor": true,
  "specialityCode": "602",
  "specialityName": "Врач-терапевт участковый",
  "specializationCode": "86",
  "specializationName": "Терапия",
  "diagnosisCode": "К26.7",
  "diagnosisName": "Язва двенадцатиперстной кишки хроническая без кровотечения или прободения",
  "diagnosisDate": "2023-03-07T11:45:06.467",
  "diagnosisProactive": true,
  "diagnosisObservationPeriod": "12",
  "repeat": "острое (+), впервые в жизни установленное хроническое (+)",
  "startDate": "2023-03-07",
  "endDate": "2023-03-15",
  "cancelReasonCode": "1",
  "cancelReasonName": "Выздоровление",
  "timeCommitted": "2023-03-15T15:00:58+03:00",
  "dnDoctorJobExecutionId": "11312201"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="dispensaryObservationDNFixTrigger" id="462a0bc1-f6ec-47b7-8bef-87151279f21e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "fix",
   "groupSpecializationCode": 66,
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование"
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Проверка dispensaryObservations" id="71a6fc69-57b1-4661-802c-06c132b23173"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверка dispensaryObservations" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="b12473b8-e458-43ad-af75-1f08472787c6" name="Contains"><con:configuration><token>"dispensaryObservation"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000463</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-08-20T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-08-20</con:value></con:property></con:properties></con:testCase><con:testCase id="ec63f918-1f37-43cf-a05b-ba78a93d7659" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о наличии ПДН для ДН" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="0d0bf1ac-823c-492d-a27c-305629c9b5bb"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"1024111"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create dispansaryObservation" id="b0d86e1e-df1c-42ee-b19b-8b0af068cbde"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "change",
   "basisTaskType": "DIGITIZED_DOCUMENT",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNC0411",
   "groupName": "Наименование",
   "groupSpecializationCode": "35",
   "groupSpecializationName": "464",
   "doctorFIO": "проверка",
   "employeeId": "45354",
   "noDoctor": "false",
   "specialityCode": "6346",
   "specialityName": "643645",
   "specializationCode": "6547865",
   "specializationName": "657",
   "diagnosisCode": ""I10",
   "diagnosisName": "7658",
   "diagnosisDate": "2021-10-16",
   "repeat": "повторно",
   "startDate": "2021-10-16",
   "endDate": null,
   "cancelReasonCode": "4",
   "cancelReasonName": "Пациент достиг 18 лет",
   "timeCommitted": "2021-11-21T15:00:58+03:00",
   "dnDoctorJobExecutionId": "3454",
   "diagnosisProactive": true
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Get Date" id="c9be62be-009b-44d5-a140-54ea7cc85bb1"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 2;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )
def currentDate3 = today.getTime() - 32;
def currentDate_formatted3 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate3);
testRunner.testCase.setPropertyValue( "dateLower3", currentDate_formatted3 )</script></con:config></con:testStep><con:testStep type="groovy" name="CREATE PDN" id="b62c5e35-c673-4ccb-842b-d1bf802912f5"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventNotify",""" 
{
  "notificationEvent": {
    "id": 77752345,
    "type": "CREATE",
    "time": "2021-02-12T09:00:00.000+03:00"
  },
  "planOfEvents": {
    "id": 77752345,
    "patient_id": """+patientId+""",
    "jobExecutionId": 11312193,
    "end_time": "2023-03-14T09:00:00.000+03:00",
    "status": "ACTIVE",
    "pdnDocumentId": "bbc293ab-d496-44b5-b48d-51b523f50e24",
    "diagnosis": [
      {
        "code": "K25.9"
      }
    ]
  }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="CHANGE PDN" id="cb80d187-c2da-4d9c-b149-fac8f68703c5"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventNotify",""" 
{
  "notificationEvent": {
    "id": 984613,
    "type": "CHANGE",
    "time": "2020-02-12T09:00:00.000+03:00"
  },
  "planOfEvents": {
    "id": 984613,
    "patient_id": """+patientId+""",
    "jobExecutionId": 87654321,
    "end_time": "2023-03-14T09:00:00.000+03:00",
    "status": "ACTIVE",
    "pdnDocumentId": "846811843514777",
    "diagnosis": [
      {
        "code": "K25.9"
      }
    ]
  }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="STATUS_CHANGE PDN" id="2fb05a57-1537-4cc0-8d16-1c865445cb0a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventNotify",""" 
{
  "notificationEvent": {
    "id": 984613,
    "type": "STATUS_CHANGE",
    "time": "2020-02-12T09:00:00.000+03:00"
  },
  "planOfEvents": {
    "id": 984613,
    "patient_id": """+patientId+""",
    "jobExecutionId": 87654321,
    "end_time": "2023-03-14T09:00:00.000+03:00",
    "status": "N",
    "pdnDocumentId": "846811843514777",
    "diagnosis": [
      {
        "code": "E11"
      }
    ]
  }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="CANCEL PDN" id="717e0dbb-aec2-4707-bc8e-dac010c13a17"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventNotify",""" 
{
  "notificationEvent": {
    "id": 984613,
    "type": "CANCEL",
    "time": "2020-02-12T09:00:00.000+03:00"
  },
  "planOfEvents": {
    "id": 984613,
    "patient_id": """+patientId+""",
    "jobExecutionId": 87654321,
    "end_time": "2023-03-14T09:00:00.000+03:00",
    "status": "Y",
    "pdnDocumentId": "846811843514666",
    "diagnosis": [
      {
        "code": "E11"
      }
    ]
  }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Проверка dispensaryObservationPlan" id="c6b6e716-3642-4179-b126-87d057283ebd"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверка dispensaryObservationPlan" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="53e6c2ca-b05d-4160-ba8c-b8e9668e8b8b" name="Contains"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>10421</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-11-26T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-11-26</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-10-27</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="619394a2-4f93-4781-af2f-1cd3560c95e2" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="externalDispensaryObservation (наблюдение во внешней МО)" searchProperties="true" timeout="0" maxResults="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="restrequest" name="Поиск пациента" id="caf47dc0-1563-4a6b-bb2c-2e43737a9f18"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"9211"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Generate uid" id="bc2cc9ce-bafb-4f10-b7f6-d5983eb7e13d"><con:settings/><con:config><script>Random rnd = new Random()
log.info(rnd.nextInt(10000)) // 2 bits of random number that is, one of the following: 0,1,2,3

String testString = (rnd.nextInt(10000)) 
testRunner.testCase.setPropertyValue( "uid", testString )
def getLocalPropValue = testRunner.testCase.getPropertyValue("uid")
log.info(getLocalPropValue)</script></con:config></con:testStep><con:testStep type="jdbc" name="Get MKB" id="93b48694-fd8e-4922-a800-0be8e4e35fba"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://${#TestSuite#dbConnect}?stringtype=unspecified&amp;user=dn&amp;password=dn</con:connectionString><con:connectionProperties/><con:query>SELECT * FROM d_mkb10 dm where dm.archived = false
ORDER BY random()
LIMIT 1;</con:query><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="607f7c0a-a800-44f9-994f-73908cab9290"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.ID</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>code</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get MKB</con:sourceStep><con:sourcePath>//D_MKB10.CODE</con:sourcePath><con:targetType>code</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Change" id="9041b481-dcc8-4eb7-a1ea-23e9eda3e7ca"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("DnExternalRecordToDisp","""{
  "operationType":"change",
  "patientId": \""""+patientId+"""\",
  "documentId": \""""+uid+"""\",
  "compositionId": \""""+uid+"""\",
  "openedDate": "2021-12-08T12:00:00.000000",
  "openedMonth": 1,
  "openedYear": 21,
  "endDate": "2021-12-09T12:00:00.000000",
  "moId": "204",
  "moName": "moName",
  "diagnosisCode": "A00.1",
  "diagnosisName": "diagnosisName"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Change без end date" id="274bc89c-b1e1-42e1-8cf0-993949456409"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("DnExternalRecordToDisp","""{
  "operationType":"change",
  "patientId": \""""+patientId+"""\",
  "documentId": \""""+uid+"""\",
  "compositionId": \""""+uid+"""\",
  "openedDate": "2021-12-08T12:00:00.000000",
  "openedMonth": 2,
  "openedYear": 3,
  "moId": "204",
  "moName": "moName",
  "diagnosisCode": "A00.1",
  "diagnosisName": "diagnosisName2"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Change без moId" id="e255314d-f5b0-4c97-b788-8ec21d1b45aa"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("DnExternalRecordToDisp","""{
  "operationType":"change",
  "patientId": \""""+patientId+"""\",
  "documentId": \""""+uid+"""\",
  "compositionId": \""""+uid+"""\",
  "openedDate": "2021-12-08T12:00:00.000000",
  "openedMonth": 1,
  "openedYear": 2,
  "endDate": "2021-12-09T12:00:00.000000",
  "moName": "moName",
  "diagnosisCode": "A00.1",
  "diagnosisName": "diagnosisName3"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Cancel" id="6d7fc4b4-00ff-419f-9b08-69e14297168b"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("DnExternalRecordToDisp","""{
  "operationType":"cancel",
  "patientId": \""""+patientId+"""\",
  "documentId": \""""+uid+"""\",
  "compositionId": \""""+uid+"""\",
  "openedDate": "2021-12-08T12:00:00.000000",
  "openedMonth": 1,
  "openedYear": 2,
  "endDate": "2021-12-09T12:00:00.000000",
   "moId": "204",
   "moName": "moName",
   "diagnosisCode": "A00.1",
   "diagnosisName": "diagnosisName"
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>9211</con:value></con:property><con:property><con:name>uid</con:name><con:value>8741</con:value></con:property><con:property><con:name>code</con:name><con:value>E28.9</con:value></con:property><con:property><con:name>id</con:name><con:value>128288391</con:value></con:property><con:property><con:name>msg</con:name><con:value>{&#13;
   "domain": "default",&#13;
   "ehrUid": "8f9dbefb-e279-4437-83f5-157231d13614",&#13;
   "operationType": "update",&#13;
   "eventName": "t_external_dispensary_case_recordQueue",&#13;
   "compositionId": "6897",&#13;
   "newResults": [&#13;
      {&#13;
         "version_": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1",&#13;
         "patientId": "1350111",&#13;
         "composition_": {&#13;
            "@class": "COMPOSITION",&#13;
            "name": {&#13;
               "@class": "DV_TEXT",&#13;
               "value": "Запись о наличии наблюдения во внешней МО"&#13;
            },&#13;
            "uid": {&#13;
               "@class": "OBJECT_VERSION_ID",&#13;
               "value": "6897"&#13;
            },&#13;
            "archetype_details": {&#13;
               "@class": "ARCHETYPED",&#13;
               "archetype_id": {&#13;
                  "@class": "ARCHETYPE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.report.v1"&#13;
               },&#13;
               "template_id": {&#13;
                  "@class": "TEMPLATE_ID",&#13;
                  "value": "openEHR-EHR-COMPOSITION.t_external_dispensary_case_record.v1"&#13;
               },&#13;
               "rm_version": "1.0.4"&#13;
            },&#13;
            "archetype_node_id": "openEHR-EHR-COMPOSITION.report.v1",&#13;
            "language": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_639-1"&#13;
               },&#13;
               "code_string": "ru"&#13;
            },&#13;
            "territory": {&#13;
               "@class": "CODE_PHRASE",&#13;
               "terminology_id": {&#13;
                  "@class": "TERMINOLOGY_ID",&#13;
                  "value": "ISO_3166-1"&#13;
               },&#13;
               "code_string": "RU"&#13;
            },&#13;
            "category": {&#13;
               "@class": "DV_CODED_TEXT",&#13;
               "value": "event",&#13;
               "defining_code": {&#13;
                  "@class": "CODE_PHRASE",&#13;
                  "terminology_id": {&#13;
                     "@class": "TERMINOLOGY_ID",&#13;
                     "value": "openehr"&#13;
                  },&#13;
                  "code_string": "433"&#13;
               }&#13;
            },&#13;
            "composer": {&#13;
               "@class": "PARTY_IDENTIFIED",&#13;
               "external_ref": {&#13;
                  "@class": "PARTY_REF",&#13;
                  "id": {&#13;
                     "@class": "GENERIC_ID",&#13;
                     "value": "20585024948",&#13;
                     "scheme": "undefined"&#13;
                  },&#13;
                  "namespace": "Парус",&#13;
                  "type": "ANY"&#13;
               },&#13;
               "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
            },&#13;
            "context": {&#13;
               "@class": "EVENT_CONTEXT",&#13;
               "start_time": {&#13;
                  "@class": "DV_DATE_TIME",&#13;
                  "value": "2022-03-30T16:54:43+03:00"&#13;
               },&#13;
               "setting": {&#13;
                  "@class": "DV_CODED_TEXT",&#13;
                  "value": "other care",&#13;
                  "defining_code": {&#13;
                     "@class": "CODE_PHRASE",&#13;
                     "terminology_id": {&#13;
                        "@class": "TERMINOLOGY_ID",&#13;
                        "value": "openehr"&#13;
                     },&#13;
                     "code_string": "238"&#13;
                  }&#13;
               },&#13;
               "other_context": {&#13;
                  "@class": "ITEM_TREE",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "*Tree(en)"&#13;
                  },&#13;
                  "archetype_node_id": "at0001",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "CLUSTER",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Подробности контекста"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-CLUSTER.composition_context_details_simi.v0",&#13;
                        "items": [&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД события"&#13;
                              },&#13;
                              "archetype_node_id": "at0035",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "294474038",&#13;
                                 "type": "Идентификатор События"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД документа"&#13;
                              },&#13;
                              "archetype_node_id": "at0073",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "16897",&#13;
                                 "type": "Идентификатор документа СИМИ"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "ELEMENT",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "ИД пациента"&#13;
                              },&#13;
                              "archetype_node_id": "at0075",&#13;
                              "value": {&#13;
                                 "@class": "DV_IDENTIFIER",&#13;
                                 "issuer": "undefined",&#13;
                                 "assigner": "undefined",&#13;
                                 "id": "1350111",&#13;
                                 "type": "Идентификатор пациента"&#13;
                              }&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Автор информации"&#13;
                              },&#13;
                              "archetype_node_id": "at0036",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Идентификатор исполнения должности медработника"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0092",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "undefined",&#13;
                                       "assigner": "undefined",&#13;
                                       "id": "12018042375",&#13;
                                       "type": "EMIAS"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование должности"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0037",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Врач - терапевт участковый"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование структурного подразделения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0038",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Терапевтическое отделение № 1"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование филиала"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0039",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование юридического лица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0040",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Структура медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0014",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ИД объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0015",&#13;
                                    "value": {&#13;
                                       "@class": "DV_IDENTIFIER",&#13;
                                       "issuer": "issuer",&#13;
                                       "assigner": "assigner",&#13;
                                       "id": "204",&#13;
                                       "type": "type"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Тип объекта"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0018",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "амбулаторно-поликлинический центр",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0019"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Наименование"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0016",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "ГБУЗ ГП №175 ДЗМ"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Адрес медицинской организации"&#13;
                              },&#13;
                              "archetype_node_id": "at0022",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0026",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0027",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0076",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0025",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0078",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0079",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0077",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0024",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_дома"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер строения"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0029",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_строения"&#13;
                                          }&#13;
                                       },&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер корпуса"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0028",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "номер_корпуса"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0080",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0081",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Информация о месте Cобытия"&#13;
                              },&#13;
                              "archetype_node_id": "at0061",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Событие произошло"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0069",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "В медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0070"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Субъект РФ"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0062",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Москва"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Муниципальный район (городской округ)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0063",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "муниципальный_район_городской_округ"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Поселение"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0064",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "поселение"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Населенный пункт"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0065",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "населенный_пункт"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Элемент планировочной структуры"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0066",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "элемент_планировочной_структуры"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Улица"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0067",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "внутригородская территория поселение Филимонковское, деревня Верхнее Валуево, 5-я Валуевская улица"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "CLUSTER",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер здания (сооружения)"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0082",&#13;
                                    "items": [&#13;
                                       {&#13;
                                          "@class": "ELEMENT",&#13;
                                          "name": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "Номер дома"&#13;
                                          },&#13;
                                          "archetype_node_id": "at0085",&#13;
                                          "value": {&#13;
                                             "@class": "DV_TEXT",&#13;
                                             "value": "20"&#13;
                                          }&#13;
                                       }&#13;
                                    ]&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер земельного участка"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0030",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_земельного_участка"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Номер помещения"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0031",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "номер_помещения"&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Дополнительная информация"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0032",&#13;
                                    "value": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "дополнительная_информация"&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           },&#13;
                           {&#13;
                              "@class": "CLUSTER",&#13;
                              "name": {&#13;
                                 "@class": "DV_TEXT",&#13;
                                 "value": "Дополнительная информация"&#13;
                              },&#13;
                              "archetype_node_id": "at0046",&#13;
                              "items": [&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Профиль медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0086",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "Терапия",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0087"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Виды медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0047",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "специализированная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0051"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Условия оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0048",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "вне медицинской организации",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0054"&#13;
                                       }&#13;
                                    }&#13;
                                 },&#13;
                                 {&#13;
                                    "@class": "ELEMENT",&#13;
                                    "name": {&#13;
                                       "@class": "DV_TEXT",&#13;
                                       "value": "Форма оказания медицинской помощи"&#13;
                                    },&#13;
                                    "archetype_node_id": "at0049",&#13;
                                    "value": {&#13;
                                       "@class": "DV_CODED_TEXT",&#13;
                                       "value": "экстренная",&#13;
                                       "defining_code": {&#13;
                                          "@class": "CODE_PHRASE",&#13;
                                          "terminology_id": {&#13;
                                             "@class": "TERMINOLOGY_ID",&#13;
                                             "value": "local"&#13;
                                          },&#13;
                                          "code_string": "at0058"&#13;
                                       }&#13;
                                    }&#13;
                                 }&#13;
                              ]&#13;
                           }&#13;
                        ]&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               "health_care_facility": {&#13;
                  "@class": "PARTY_IDENTIFIED",&#13;
                  "external_ref": {&#13;
                     "@class": "PARTY_REF",&#13;
                     "id": {&#13;
                        "@class": "GENERIC_ID",&#13;
                        "value": "1037719010757",&#13;
                        "scheme": "undefined"&#13;
                     },&#13;
                     "namespace": "Сервис РМР/РМУ",&#13;
                     "type": "ANY"&#13;
                  },&#13;
                  "name": "ГБУЗ ГП №175 ДЗМ"&#13;
               },&#13;
               "participations": [&#13;
                  {&#13;
                     "@class": "PARTICIPATION",&#13;
                     "function": {&#13;
                        "@class": "DV_TEXT",&#13;
                        "value": "Врач"&#13;
                     },&#13;
                     "performer": {&#13;
                        "@class": "PARTY_IDENTIFIED",&#13;
                        "external_ref": {&#13;
                           "@class": "PARTY_REF",&#13;
                           "id": {&#13;
                              "@class": "GENERIC_ID",&#13;
                              "value": "12018042375"&#13;
                           },&#13;
                           "type": "ANY"&#13;
                        },&#13;
                        "name": "Дуйшаева Мээримгул Абдулмуталибовна"&#13;
                     },&#13;
                     "mode": {&#13;
                        "@class": "DV_CODED_TEXT",&#13;
                        "value": "not specified",&#13;
                        "defining_code": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "openehr"&#13;
                           },&#13;
                           "code_string": "193"&#13;
                        }&#13;
                     }&#13;
                  }&#13;
               ]&#13;
            },&#13;
            "content": [&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о МО"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Медицинская организация, наблюдающая пациента"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Медицинская организация, наблюдающая пациента"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.organisation.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.organisation.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Медицинская организация, наблюдающая пациента"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_CODED_TEXT",&#13;
                                          "value": "АО \"Плутон\"",&#13;
                                          "defining_code": {&#13;
                                             "@class": "CODE_PHRASE",&#13;
                                             "terminology_id": {&#13;
                                                "@class": "TERMINOLOGY_ID",&#13;
                                                "value": "ABSENT_TERMINOLOGY"&#13;
                                             },&#13;
                                             "code_string": "11565403"&#13;
                                          }&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Сведения о датах начала и окончания наблюдения в МО по диагнозу"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "ADMIN_ENTRY",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Даты начала и окончания наблюдения в МО по диагнозу"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-ADMIN_ENTRY.container_simi.v0",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "Дерево"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата начала наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2022-03-30"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              },&#13;
                              {&#13;
                                 "@class": "CLUSTER",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                 },&#13;
                                 "archetype_details": {&#13;
                                    "@class": "ARCHETYPED",&#13;
                                    "archetype_id": {&#13;
                                       "@class": "ARCHETYPE_ID",&#13;
                                       "value": "openEHR-EHR-CLUSTER.date_simi.v1"&#13;
                                    },&#13;
                                    "rm_version": "1.0.4"&#13;
                                 },&#13;
                                 "archetype_node_id": "openEHR-EHR-CLUSTER.date_simi.v1",&#13;
                                 "items": [&#13;
                                    {&#13;
                                       "@class": "ELEMENT",&#13;
                                       "name": {&#13;
                                          "@class": "DV_TEXT",&#13;
                                          "value": "Дата окончания наблюдения в МО по диагнозу"&#13;
                                       },&#13;
                                       "archetype_node_id": "at0001",&#13;
                                       "value": {&#13;
                                          "@class": "DV_DATE",&#13;
                                          "value": "2022-03-31"&#13;
                                       }&#13;
                                    }&#13;
                                 ]&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               },&#13;
               {&#13;
                  "@class": "SECTION",&#13;
                  "name": {&#13;
                     "@class": "DV_TEXT",&#13;
                     "value": "Диагноз наблюдения пациента"&#13;
                  },&#13;
                  "archetype_details": {&#13;
                     "@class": "ARCHETYPED",&#13;
                     "archetype_id": {&#13;
                        "@class": "ARCHETYPE_ID",&#13;
                        "value": "openEHR-EHR-SECTION.adhoc.v1"&#13;
                     },&#13;
                     "rm_version": "1.0.4"&#13;
                  },&#13;
                  "archetype_node_id": "openEHR-EHR-SECTION.adhoc.v1",&#13;
                  "items": [&#13;
                     {&#13;
                        "@class": "EVALUATION",&#13;
                        "name": {&#13;
                           "@class": "DV_TEXT",&#13;
                           "value": "Диагноз"&#13;
                        },&#13;
                        "archetype_details": {&#13;
                           "@class": "ARCHETYPED",&#13;
                           "archetype_id": {&#13;
                              "@class": "ARCHETYPE_ID",&#13;
                              "value": "openEHR-EHR-EVALUATION.problem_diagnosis.v1"&#13;
                           },&#13;
                           "rm_version": "1.0.4"&#13;
                        },&#13;
                        "archetype_node_id": "openEHR-EHR-EVALUATION.problem_diagnosis.v1",&#13;
                        "language": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "ISO_639-1"&#13;
                           },&#13;
                           "code_string": "ru"&#13;
                        },&#13;
                        "encoding": {&#13;
                           "@class": "CODE_PHRASE",&#13;
                           "terminology_id": {&#13;
                              "@class": "TERMINOLOGY_ID",&#13;
                              "value": "IANA_character-sets"&#13;
                           },&#13;
                           "code_string": "UTF-8"&#13;
                        },&#13;
                        "subject": {&#13;
                           "@class": "PARTY_SELF"&#13;
                        },&#13;
                        "data": {&#13;
                           "@class": "ITEM_TREE",&#13;
                           "name": {&#13;
                              "@class": "DV_TEXT",&#13;
                              "value": "structure"&#13;
                           },&#13;
                           "archetype_node_id": "at0001",&#13;
                           "items": [&#13;
                              {&#13;
                                 "@class": "ELEMENT",&#13;
                                 "name": {&#13;
                                    "@class": "DV_TEXT",&#13;
                                    "value": "Код диагноза по МКБ-10"&#13;
                                 },&#13;
                                 "archetype_node_id": "at0002",&#13;
                                 "value": {&#13;
                                    "@class": "DV_CODED_TEXT",&#13;
                                    "value": "A00.1 - Холера, вызванная холерным вибрионом 01, биовар eltor",&#13;
                                    "defining_code": {&#13;
                                       "@class": "CODE_PHRASE",&#13;
                                       "terminology_id": {&#13;
                                          "@class": "TERMINOLOGY_ID",&#13;
                                          "value": "NSI"&#13;
                                       },&#13;
                                       "code_string": "S76.1"&#13;
                                    }&#13;
                                 }&#13;
                              }&#13;
                           ]&#13;
                        }&#13;
                     }&#13;
                  ]&#13;
               }&#13;
            ]&#13;
         }&#13;
      }&#13;
   ],&#13;
   "comment": "Modify Composition",&#13;
   "auditDetails": {&#13;
      "@class": "AUDIT_DETAILS",&#13;
      "system_id": "default",&#13;
      "committer": {&#13;
         "@class": "PARTY_IDENTIFIED",&#13;
         "name": "MDuishaeva"&#13;
      },&#13;
      "time_committed": {&#13;
         "@class": "DV_DATE_TIME",&#13;
         "value": "2022-03-30T16:56:20.944129+03:00"&#13;
      },&#13;
      "change_type": {&#13;
         "@class": "DV_CODED_TEXT",&#13;
         "value": "modification",&#13;
         "defining_code": {&#13;
            "@class": "CODE_PHRASE",&#13;
            "terminology_id": {&#13;
               "@class": "TERMINOLOGY_ID",&#13;
               "value": "openehr"&#13;
            },&#13;
            "code_string": "251"&#13;
         }&#13;
      },&#13;
      "description": {&#13;
         "@class": "DV_TEXT",&#13;
         "value": "Modify Composition"&#13;
      }&#13;
   }&#13;
}</con:value></con:property><con:property><con:name>directory</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create MO no year.xml</con:value></con:property><con:property><con:name>year</con:name><con:value>2022</con:value></con:property><con:property><con:name>year70</con:name><con:value>70</con:value></con:property><con:property><con:name>year69</con:name><con:value>69</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\А_ЕСУ_08\t_external_dispensary_case_recordComposition create no MO year.xml</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>topicFix</con:name><con:value>t_dispensary_observation_programComposition.patientregistry</con:value></con:property></con:properties></con:testSuite><con:testSuite id="ad885e87-4545-4a01-8fb9-cd4789f9982e" name="dispensaryObservationCalls (Обзвоны пациентов на ДН)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="be64997f-b56d-4fb9-b04d-19aa4b14184d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о заданиях на обзвон и их результатах" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="de48f477-3358-486e-8741-14d4cc16f291"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="a53e1307-3717-4be2-99d7-5c9c1b0ef7cd" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="addCallTask" id="1b309d72-0f4f-458f-970c-40a847158397"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("patientCallingEvent","""{
    "patientId": """+patientId+""",
    "eventType": "addCallTask",
    "callTask": {
        "sourceTasksFileName": "RArtamonova_090223.xlsx",
        "taskId": 36537,
        "taskCallDate": "2023-02-09",
		"taskCreationDateTime": "2023-04-10T16:16:00.034318",
		"taskType": "scheduled",
		"operatorLogin": "test",
        "eventStatuses": [
            {
                "code": "noControlCheckUpAppointment"
            },
            {
                "code": "noExaminationAppointment"
            }
        ],
        "pdnProgress": [
            {
                "code": "NeedAppointmentToControlCheckUp"
            },
            {
                "code": "NeedAppointmentToExamination"
            }
        ],
         "unplannedEventTypes": [
            {
                "eventType": "ambulance"
            },
            {
                "eventType": "urgentDischarge"
            }
        ]
    },
    "patientCommonComment": null,
    "callResult": null
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="addCallTask update" id="f0a6d446-a252-4c5b-ab9c-474864907778"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("patientCallingEvent","""{
    "patientId": """+patientId+""",
    "eventType": "addCallTask",
    "callTask": {
        "sourceTasksFileName": "обновлено",
        "taskId": 36537,
        "taskCallDate": "2023-02-11",
		"taskCreationDateTime": "2023-04-11T16:16:00.034318",
		"taskType": "unscheduled",
		"operatorLogin": "обновлено",
        "eventStatuses": [
            {
                "code": "noControlCheckUpAppointment"
            },
            {
                "code": "noExaminationAppointment"
            },
            {
                "code": "examinationAppointmentExpired"
            }
        ],
        "pdnProgress": [
            {
                "code": "NeedAppointmentToControlCheckUp"
            },
            {
                "code": "NeedAppointmentToExamination"
            },
            {
                "code": "ExaminationExpired"
            }
        ],
         "unplannedEventTypes": [
            {
                "eventType": "ambulance"
            },
            {
                "eventType": "urgentDischarge"
            },
            {
                "eventType": "selfcontrolDispensaryQuestionnaire"
            }
        ]
    },
    "patientCommonComment": null,
    "callResult": null
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="addCallTask минимальный набор полей" id="3e7d9274-c063-4980-bea5-5f66a264faa1"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("patientCallingEvent","""{
    "patientId": """+patientId+""",
    "eventType": "addCallTask",
    "callTask": {
        "taskId": 36537,
        "taskCallDate": "2023-02-09",
		"taskCreationDateTime": "2023-04-10T16:16:00.034318",
		"taskType": "scheduled"
    }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="addCallTask без callTask" id="0ac3023e-7f04-45b4-bf88-87922677ab33"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("patientCallingEvent","""{
    "patientId": """+patientId+""",
    "eventType": "addCallTask",
    "patientCommonComment": null,
    "callResult": null
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="addCallResult" id="a5b3a427-4d2d-49e2-84a6-f0093b5a6b5e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("patientCallingEvent","""{
  "patientId": """+patientId+""",
  "eventType": "addCallResult",
  "callTask": null,
  "patientCommonComment": null,
  "callResult": {
	 "resultId": 36527,
      "taskId": 36628,
      "callDateTime": "2023-02-09 10:05:11",
      "callResultType": "Rescheduling",
      "callStatuses": [
          {
              "code": "doesNotBelongToPatient"
          }
      ],
      "callComment": "комментарий",
      "newCallDateTime": "2023-02-09 09:04:43",
      "unsuccessCallCounter": 0,
      "callAppointmentEvents": [
        {
          "eventType": "Приём",
          "appointmentDateTime": "2023-02-09 09:04:4",
          "appointmentDestination": "Больница 2"
        }
      ]
  }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="addCallResult update" id="eabf23db-8677-4657-b23a-887bbf84685a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("patientCallingEvent","""{
  "patientId": """+patientId+""",
  "eventType": "addCallResult",
  "callTask": null,
  "patientCommonComment": null,
  "callResult": {
	 "resultId": 36527,
      "taskId": 366281,
      "callDateTime": "2023-02-11 10:05:11",
      "callResultType": "Success",
      "callStatuses": [
          {
              "code": "refusedToTalk"
          }
      ],
      "callComment": "обновлено",
      "newCallDateTime": "2023-02-11 09:04:43",
      "unsuccessCallCounter": 1,
      "callAppointmentEvents": [
        {
          "eventType": "Приём",
          "appointmentDateTime": "2023-02-11 09:04:4",
          "appointmentDestination": "обновлено"
        }
      ]
  }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="addCallResult минимальный набор полей" id="f00ce38c-dde8-4920-8de6-1701f647188f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("patientCallingEvent","""{
  "patientId": """+patientId+""",
  "eventType": "addCallResult",
  "callTask": null,
  "patientCommonComment": null,
  "callResult": {
	 "resultId": 36527,
      "taskId": 36628,
      "callDateTime": "2023-02-09 10:05:11",
      "callResultType": "Rescheduling"
  }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="addCallResult без callResult" id="e044b20a-d9f1-4fe9-ba09-4aa519ce1184"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("patientCallingEvent","""{
  "patientId": """+patientId+""",
  "eventType": "addCallResult",
  "callTask": null,
  "patientCommonComment": null
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="addCommonComment" id="a1e271ef-90df-48d4-87ce-c3dd7cc00b3c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("patientCallingEvent",""" 
{
    "patientId": """+patientId+""",
    "eventType": "addCommonComment",
    "patientCommonComment": "test"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="addCommonComment без patientCommonComment" id="2e792d05-baa7-46e3-9d83-1cc6874f1ee9"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("patientCallingEvent",""" 
{
    "patientId": """+patientId+""",
    "eventType": "addCommonComment",
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Проверка dispensaryObservations" id="ea492035-7581-427a-bd35-cb78f3c30784"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверка dispensaryObservations" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="b12473b8-e458-43ad-af75-1f08472787c6" name="Contains"><con:configuration><token>dispensaryObservation</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000523</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-08-20T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-08-20</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>topicFix</con:name><con:value>t_dispensary_observation_programComposition.patientregistry</con:value></con:property></con:properties></con:testSuite><con:testSuite id="40a8c708-9d6c-4d82-8b4f-fb011c411747" name="dispensaryObservationEvent (Мероприятия ПДН)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="4850fa53-624d-4117-9222-1f711164078d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="dispanseryObservationEvent (Мероприятия ПДН)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="6f50589d-ed5f-430f-b4aa-f23034153a03"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"15501111"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get Date" id="6ab4087f-1191-49bd-85fe-12188ebef2c9"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 2;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="dispensaryObservationEvent consultation" id="c6456c3d-4e53-4199-b76e-25d997bc3778"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "12b68104c7-ed21-4b45-9001-bab85281f7ae",
   "pdnEventId": 16506,
   "patientId": \""""+patientId+"""\",
   "isActual": true,
   "status": "PLANNED",
   "start": \""""+dateLower+"""\",
   "end": "2023-12-13T21:19:52.879000",
   "eventType": "consultationEvent",
   "referralCreated": true,
   "destinationType": "Назначение в текущую МО",
   "destinationMedicalOrganizationId": "124",
   "destinationMedicalOrganizationName": "Наименование МО",
   "passedBeforePDNCreated": true,
   "eventExecutionType": "Обязательно",
   "examinationPassedInExternalMO": true,
   "diagnoses": {
      "diagnosisCode": "I10",
      "diagnosisName": "Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении"
   },
   "consultationEvent": {
      "consultationAssignmentId": "123",
      "consultationResultDocId": null,
      "consultationCancelDocId": null,
      "specializationCode": "76",
      "specializationTitle": "Педиатрия",
      "specialityCode": "10",
      "assigmentToControlCheckUp": true
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2022-03-22T12:00:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-24T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="dispensaryObservationEvent drugsEvent" id="f30456b3-7c54-4d77-b2dc-f2f002dc8bbe"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "12b68104c7-ed21-4b45-9001-bab85281f7ae",
   "pdnEventId": 16507,
   "patientId": \""""+patientId+"""\",
   "isActual": true,
   "status": "PLANNED",
   "start": \""""+dateLower+"""\",
   "end": "2023-12-13T21:19:52.879000",
   "eventType": "drugsEvent",
   "referralCreated": true,
   "destinationType": "Назначение в текущую МО",
   "destinationMedicalOrganizationId": "124",
   "destinationMedicalOrganizationName": "Наименование МО",
   "passedBeforePDNCreated": true,
   "eventExecutionType": "Обязательно",
   "examinationPassedInExternalMO": false,
   "diagnoses": {
      "diagnosisCode": "A16.5",
      "diagnosisName": "Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении"
   },
   "drugsEvent": {
      "prescriptionId": "123",
      "drugMnnId": "123",
      "drugTnId": "123",
      "title": "Наименование ЛП"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2022-03-22T12:00:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-24T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="dispensaryObservationEvent laboratoryEvent" id="4666513c-98c2-459c-a397-f88fa630aa2a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "12b68104c7-ed21-4b45-9001-bab85281f7ae",
   "pdnEventId": 16507,
   "patientId": \""""+patientId+"""\",
   "isActual": true,
   "status": "PLANNED",
   "start": \""""+dateLower+"""\",
   "end": "2023-12-13T21:19:52.879000",
   "eventType": "laboratoryEvent",
   "referralCreated": true,
   "destinationType": "Назначение в текущую МО",
   "destinationMedicalOrganizationId": "124",
   "destinationMedicalOrganizationName": "Наименование МО",
   "passedBeforePDNCreated": true,
   "eventExecutionType": "Обязательно",
   "examinationPassedInExternalMO": true,   
   "diagnoses": {
      "diagnosisCode": "A16.5",
      "diagnosisName": "Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении"
   },
   "laboratoryEvent": {
      "laboratoryCode": "123",
      "laboratoryTitle": "Наименование из справочника Laboratory",
      "laboratoryAssignmentId": "123",
      "laboratoryResultDocId": "Идентификатор результата ЛИ в СИМИ",
      "laboratoryCancelDocId": "Идентификатор документа отмены назначения в СИМИ"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2022-03-22T12:00:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-24T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="dispensaryObservationEvent instrumentalEvent" id="3819b7fe-a07d-460a-8dd7-aca3c6f2af86"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "12b68104c7-ed21-4b45-9001-bab85281f7ae",
   "pdnEventId": 16507,
   "patientId": \""""+patientId+"""\",
   "isActual": true,
   "status": "PLANNED",
   "start": \""""+dateLower+"""\",
   "end": "2023-12-13T21:19:52.879000",
   "eventType": "instrumentalEvent",
   "referralCreated": true,
   "destinationType": "Назначение в текущую МО",
   "destinationMedicalOrganizationId": "124",
   "destinationMedicalOrganizationName": "Наименование МО",
   "passedBeforePDNCreated": true,
   "eventExecutionType": "Обязательно",
   "examinationPassedInExternalMO": true,   
   "diagnoses": {
      "diagnosisCode": "A16.5",
      "diagnosisName": "Туберкулезный плеврит без упоминания о бактериологическом или гистологическом подтверждении"
   },
   "instrumentalEvent": {
      "instrumentalAssignmentId": "123",
      "instrumentalProtocolDocId": "Идентификатор протокола проведения ИД в СИМИ",
      "instrumentalResultDocId": "Идентификатор результата проведения ИД в СИМИ ",
      "mainDiagnosticId": "123",
      "mainDiagnosticShortTitle": "Краткое наименование из справочника Diagnostic_v2 "
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2022-03-22T12:00:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-24T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="dispensaryObservationPlan" id="9a94e99b-a6ea-4fdd-9976-2c405181a314"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="plannedObservationDate" id="2f9e6e96-131d-4599-8307-069ce212cf27"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "1b58104c7-ed21-4b45-9001-bab85281f7ae",
   "patientId": \""""+patientId+"""\",
   "status": "PLANNED",
   "start": "2022-04-15",
   "end": "2023-12-13T21:19:52.879000",
   "eventType": "consultationEvent",
   "consultationEvent": {
      "consultationAssignmentId": "123",
      "consultationResultDocId": null,
      "consultationCancelDocId": null,
      "specializationCode": "76",
      "specializationTitle": "Педиатрия"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2022-03-22T12:00:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-21T14:30:26.621347"
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000320</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2023-02-14T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2023-02-14</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-03-15</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="b8b6b8f8-19dc-4d71-869e-055dcf0ce4be" name="dispensaryObservationPlan (Программа ПДН)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ad693c47-731b-40f6-bce5-59fec3156fd4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о посещениях пациентом врача ведущего ДН" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="bd7317f5-62b3-4507-a0ab-93c245b4ef05"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="889e41c5-b51f-4b2b-865c-79ee778c3daa" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get Date" id="a07c5ffc-9572-4a95-83f7-745aea0c0b70"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 2;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )
def currentDate3 = today.getTime() - 32;
def currentDate_formatted3 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate3);
testRunner.testCase.setPropertyValue( "dateLower3", currentDate_formatted3 )</script></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan" id="a2552430-9170-4bd2-a405-11e250b772bc"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Проверка dispensaryObservationPlan" id="7484413a-b2c9-44df-9f79-7205d7084343"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверка dispensaryObservationPlan" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="53e6c2ca-b05d-4160-ba8c-b8e9668e8b8b" name="Contains"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="plannedObservationDate create" id="1e30f416-39c1-40db-8be4-b9800a1193ee"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "b58104c7-ed21-4b45-9001-bab85281f7ae",
   "patientId": \""""+patientId+"""\",
   "status": "PLANNED",
   "start": "2022-06-15T00:19:52.879000",
   "end": "2022-12-13T21:19:52.879000",
   "eventType": "consultationEvent",
   "consultationEvent": {
      "consultationAssignmentId": null,
      "consultationResultDocId": null,
      "consultationCancelDocId": null,
      "specializationCode": "76",
      "specializationTitle": "Педиатрия"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2021-12-08T11:30:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-21T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="plannedObservationDate create дата не в текущем месяце" id="46ef59c9-bc90-4000-ba7f-83fe6350398d"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower3=testRunner.testCase.getPropertyValue("dateLower3")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "b58104c7-ed21-4b45-9001-bab85281f7ae",
   "patientId": \""""+patientId+"""\",
   "status": "PLANNED",
   "start": \""""+dateLower3+"""\",
   "end": "2021-12-13T21:19:52.879000",
   "eventType": "consultationEvent",
   "consultationEvent": {
      "consultationAssignmentId": null,
      "consultationResultDocId": "123",
      "consultationCancelDocId": null,
      "specializationCode": "76",
      "specializationTitle": "Педиатрия"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2021-12-08T11:30:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-21T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="plannedObservationDate change" id="677b524a-b73a-48e8-843a-edab97cc200b"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "b58104c7-ed21-4b45-9001-bab85281f7ae",
   "patientId": \""""+patientId+"""\",
   "status": "PLANNED",
   "start": \""""+dateLower+"""\",
   "end": "2021-12-13T21:19:52.879000",
   "eventType": "consultationEvent",
   "consultationEvent": {
      "consultationAssignmentId": null,
      "consultationResultDocId": "123",
      "consultationCancelDocId": null,
      "specializationCode": "76",
      "specializationTitle": "Педиатрия"
   },
   "appointmentStatus": "change",
   "appointmentStartDate": "2021-12-08T11:30:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-21T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="plannedObservationDate cancel" id="51f87482-fbe5-41b9-9d02-7dbb601e1934"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "b58104c7-ed21-4b45-9001-bab85281f7ae",
   "patientId": \""""+patientId+"""\",
   "status": "CANCELLED",
   "start": \""""+dateLower+"""\",
   "end": "2021-12-13T21:19:52.879000",
   "eventType": "consultationEvent",
   "consultationEvent": {
      "consultationAssignmentId": null,
      "consultationResultDocId": null,
      "consultationCancelDocId": null,
      "specializationCode": "76",
      "specializationTitle": "Педиатрия"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2021-12-08T11:30:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-21T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="eventType != 'consultationEvent'" id="fbfc973e-b93c-40bf-acfd-6d9fbedcd353"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "b58104c7-ed21-4b45-9001-bab85281f7ae",
   "patientId": \""""+patientId+"""\",
   "status": "PLANNED",
   "start": \""""+dateLower+"""\",
   "end": "2021-12-13T21:19:52.879000",
   "eventType": "consultationEvent1",
   "consultationEvent": {
      "consultationAssignmentId": null,
      "consultationResultDocId": "123",
      "consultationCancelDocId": null,
      "specializationCode": "76",
      "specializationTitle": "Педиатрия"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2021-12-08T11:30:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-21T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="specializationCode != '76'" id="6a148cb4-9960-42b7-9886-080c31a385d7"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "b58104c7-ed21-4b45-9001-bab85281f7ae",
   "patientId": \""""+patientId+"""\",
   "status": "PLANNED",
   "start": \""""+dateLower+"""\",
   "end": "2021-12-13T21:19:52.879000",
   "eventType": "consultationEvent",
   "consultationEvent": {
      "consultationAssignmentId": null,
      "consultationResultDocId": "123",
      "consultationCancelDocId": null,
      "specializationCode": "761",
      "specializationTitle": "Педиатрия"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2021-12-08T11:30:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-21T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="start > 30 дней" id="ddd7935c-7e2d-4ab7-a50b-ec6ed17e7cc0"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "b58104c7-ed21-4b45-9001-bab85281f7ae",
   "patientId": \""""+patientId+"""\",
   "status": "PLANNED",
   "start": "2020-12-13T21:19:52.879000",
   "end": "2021-12-13T21:19:52.879000",
   "eventType": "consultationEvent",
   "consultationEvent": {
      "consultationAssignmentId": null,
      "consultationResultDocId": "123",
      "consultationCancelDocId": null,
      "specializationCode": "76",
      "specializationTitle": "Педиатрия"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2021-12-08T11:30:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-21T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="start > 30 дней и consultationResultDocId = null" id="55d44c99-1661-4c10-8ec4-f7006c57058f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "b58104c7-ed21-4b45-9001-bab85281f7ae",
   "patientId": \""""+patientId+"""\",
   "status": "PLANNED",
   "start": "2020-12-13T21:19:52.879000",
   "end": "2021-12-13T21:19:52.879000",
   "eventType": "consultationEvent",
   "consultationEvent": {
      "consultationAssignmentId": null,
      "consultationResultDocId": null,
      "consultationCancelDocId": null,
      "specializationCode": "76",
      "specializationTitle": "Педиатрия"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2021-12-08T11:30:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-21T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Проверка plannedObservationDate" id="beee89f3-50e6-473c-9e90-e9163295e39e"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверка plannedObservationDate" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="b12473b8-e458-43ad-af75-1f08472787c6" name="Contains"><con:configuration><token>plannedObservationDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Даты в прошлом" id="1d6d2314-839a-49bd-a0ae-7c358c21112d"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "b58104c7-ed21-4b45-9001-bab85281f7ae",
   "patientId": \""""+patientId+"""\",
   "status": "PLANNED",
   "start": \""""+dateLower+"""\",
   "end": "2021-12-13T21:19:52.879000",
   "eventType": "consultationEvent",
   "consultationEvent": {
      "consultationAssignmentId": null,
      "consultationResultDocId": null,
      "consultationCancelDocId": null,
      "specializationCode": "76",
      "specializationTitle": "Педиатрия"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2021-12-08T11:30:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-21T14:30:26.621347"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Даты в будущем" id="e459d108-b4f3-4bb4-ba57-1bf92e1b8e2b"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PDNEventStatusNotify",""" 
{
   "pdnDocumentId": "b58104c7-ed21-4b45-9001-bab85281f7ae",
   "patientId": \""""+patientId+"""\",
   "status": "PLANNED",
   "start": "2022-04-30T11:30:00.000000",
   "end": "2021-12-13T21:19:52.879000",
   "eventType": "consultationEvent",
   "consultationEvent": {
      "consultationAssignmentId": null,
      "consultationResultDocId": "123",
      "consultationCancelDocId": null,
      "specializationCode": "76",
      "specializationTitle": "Педиатрия"
   },
   "appointmentStatus": "create",
   "appointmentStartDate": "2022-04-30T11:30:00.000000",
   "appointmentEndDate": "2021-12-08T12:00:00.000000",
   "updateDate": "2021-12-21T14:30:26.621347"
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000458</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2023-03-26T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2023-03-26</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2023-02-24</con:value></con:property></con:properties></con:testCase><con:testCase id="ff448777-e39f-4974-88c8-4e53930d3c0f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о программе ПДН" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="9e8f40bd-fc37-4c66-a0a8-7078fd47c1db"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"134311111"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get Date" id="8f064415-ddb4-4a41-99c3-cd6ac663fa5a"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 2;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )
def currentDate3 = today.getTime() - 32;
def currentDate_formatted3 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate3);
testRunner.testCase.setPropertyValue( "dateLower3", currentDate_formatted3 )</script></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan v1" id="e7723d4a-073a-4b30-9b1f-a63fe9fdd408"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление dispensaryObservationPlan v1" id="67025899-ed20-405f-98c9-3aedd9eced91"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory4")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan v2" id="250bbe80-2db0-468b-acd5-b4c7596df0c4"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление dispensaryObservationPlan v2" id="7ccf98a7-35aa-40fa-8435-4eeeed5f3b90"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory3")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Проверка dispensaryObservationPlan" id="4f8d8771-e94e-4c88-ae19-974087dbd158"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверка dispensaryObservationPlan" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="53e6c2ca-b05d-4160-ba8c-b8e9668e8b8b" name="Contains"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan v1 - один диагноз" id="7de1c8a0-1928-47e7-b699-6f1fe06fa92e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory5")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Удаление dispensaryObservationPlan v1 - один диагноз" id="52910e3c-c209-4905-9f7a-3cf57a30299f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory6")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>102111</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-12-10T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-12-10</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-11-10</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property><con:property><con:name>directory4</con:name><con:value>\Реестр\t_dispensary_observation_programComposition delete.json</con:value></con:property><con:property><con:name>directory5</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create one diagnose.json</con:value></con:property><con:property><con:name>directory6</con:name><con:value>\Реестр\t_dispensary_observation_programComposition delete one diagnose.json</con:value></con:property></con:properties></con:testCase><con:testCase id="ce70b0b1-6304-44ae-87a1-7a9d76636449" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#183480 Формирование сведений о необходимости внепланового приёма на основании изменения диагноза наблюдения другим врачом" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="8936d330-6fca-40a6-acb1-e7f461ed8d7e"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="6b2609f7-c31f-4865-9dd7-946b5a1ca111" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Step 1" id="31b167d0-8602-4a69-9f10-1dc5db55b4c4"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0009",
   "groupName": "Ожирение",
   "doctorFIO": "Никитина Юлия Петровна",
   "employeeId": 10002704,
   "noDoctor": "",
   "specialityCode": 50,
   "specialityName": "Врач-инфекционист",
   "specializationCode": 24,
   "specializationName": "Инфекционные болезни",
   "diagnosisCode": "I11",
   "dnDoctorJobExecutionId":"5584556426",
   "diagnosisName": "Ожирение, обусловленное избыточным поступлением энергетических ресурсов",
   "diagnosisDate": "2020-12-23T13:02:29.487",
   "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
   "startDate": "2020-12-02",
   "endDate": null,
   "cancelReasonCode": null,
   "cancelReasonName": null,
   "timeCommitted": "2020-12-24"
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="00ab79a3-7824-4db6-85ba-c93c69850f0f"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8794e1fa-3464-41ca-924e-5061f41d8d6c" name="Не создано поле urgentDiagnosisDate"><con:configuration><token>urgentDiagnosisDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000010</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-07-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-07-06</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-06-06</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property><con:property><con:name>directory4</con:name><con:value>\Реестр\t_dispensary_observation_programComposition delete.json</con:value></con:property><con:property><con:name>directory5</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create one diagnose.json</con:value></con:property><con:property><con:name>directory6</con:name><con:value>\Реестр\t_dispensary_observation_programComposition delete one diagnose.json</con:value></con:property></con:properties></con:testCase><con:testCase id="e5a6c6ae-7003-4c5f-8869-53d904e4dea7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о необходимости внепланового приёма на основании вызова скорой" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="677a8efd-72c2-4da2-8279-9dafcf368eb3"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="f084f508-4a60-4582-b1ac-089f9c763272" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get Date" id="52648acb-6327-4297-8af8-481f5feaf4cf"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 2;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )
def currentDate3 = today.getTime() - 32;
def currentDate_formatted3 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate3);
testRunner.testCase.setPropertyValue( "dateLower3", currentDate_formatted3 )</script></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan v1" id="ca7b5711-edbe-4e1a-9584-3c201312c9b0"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("PDNEventNotify","""{
  "notificationEvent": {
    "type": "CREATE",
    "time": "2020-02-12T09:00:00.000+03:00"
  },
  "planOfEvents": {
    "patient_id": """+patientId+""",
    "jobExecutionId": 87654321,
    "start_time": "2022-09-23T00:00:00.000000", 
    "end_time": "2023-03-14T09:00:00.000+03:00",
    "pdnDocumentId": "448511236548122",
    "diagnosis": [
      {
        "code": "E11"
      }
    ], 
    "timeCommitted": "2022-09-23T00:00:00.000000",
    "specialization": "Y",
    "name": "Abrogim Abrosimov", 
    "compositionId": "78723649893"
  }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="e4b41856-2fa3-41fa-835a-c8531068769a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def date=testRunner.testCase.getPropertyValue("date")
 def uid=testRunner.testCase.getPropertyValue("uid")
 String message = file.replace("\$patientId",patientId).replace("\$date",date).replace("\$uid",uid)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="f30bb967-a71a-4db3-9042-7dc66673f606"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def date=testRunner.testCase.getPropertyValue("date")
 def uid=testRunner.testCase.getPropertyValue("uid")
 String message = file.replace("\$patientId",patientId).replace("\$date",date).replace("\$uid",uid)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="94ca6018-39b2-4115-a271-197dea81718c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
 def uid=testRunner.testCase.getPropertyValue("uid")
 String message = file.replace("\$patientId",patientId).replace("\$dateLower2",dateLower2).replace("\$uid",uid)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Deleted" id="91e4c698-b0d9-436d-b7a9-eb845d8324a0"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("deleted")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
 def uid=testRunner.testCase.getPropertyValue("uid")
 String message = file.replace("\$patientId",patientId).replace("\$dateLower2",dateLower2).replace("\$uid",uid)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без ambulanceDate" id="bf308cbd-d28e-46d1-9975-bf2f5edaa19e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("create1")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
 def uid=testRunner.testCase.getPropertyValue("uid")
 String message = file.replace("\$patientId",patientId).replace("\$dateLower2",dateLower2).replace("\$uid",uid)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="9002b41b-4412-4e34-9a6c-85dd19f35c6b"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="4239e836-9521-4ba6-b92d-bb06fc6d527e" name="Создан ambulanceItems"><con:configuration><token>ambulanceItems</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8581204c-2f25-46e3-99cb-89c15f340815" name="Создан dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000368</con:value></con:property><con:property><con:name>create</con:name><con:value>\Реестр\card_of_call_embulanceComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2023-03-07T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2023-03-07</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2023-02-05</con:value></con:property><con:property><con:name>uid</con:name><con:value>1438</con:value></con:property><con:property><con:name>update</con:name><con:value>\Реестр\card_of_call_embulanceComposition update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\Реестр\card_of_call_embulanceComposition delete.json</con:value></con:property><con:property><con:name>create1</con:name><con:value>\Реестр\card_of_call_embulance.v1 no date.json</con:value></con:property><con:property><con:name>deleted</con:name><con:value>\Реестр\card_of_call_embulanceComposition deleted.json</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-03-08</con:value></con:property></con:properties></con:testCase><con:testCase id="1eb4b992-4809-4ef0-9585-54c750c161ed" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#183483" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="491280bd-0884-4fee-bc85-6ad402cd9897"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="ccd82a17-6c5e-4f62-a661-ba2cbd56a895" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="6f5c9e2f-8165-4e4e-860e-dd96bcbcc888" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan v1" id="20eb10d3-a6a4-44cc-a40d-0eb08ee76c95"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="05cfd9e4-aa17-4202-98fd-95abfae78a97"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="993b9064-dc35-4af6-9007-4e093f1a954d"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestSuite#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8794e1fa-3464-41ca-924e-5061f41d8d6c" name="Не создано поле urgentDiagnosisDate"><con:configuration><token>urgentDiagnosisDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e638a47e-42e6-4e81-a3ec-edd362ed85a0" name="Создано dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Step 1" id="7e84e673-afa4-4977-b5ef-6b53757cd39d"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "close",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0009",
   "groupName": "Ожирение",
   "doctorFIO": "Никитина Юлия Петровна",
   "employeeId": 10002704,
   "noDoctor": "",
   "specialityCode": 50,
   "specialityName": "Врач-инфекционист",
   "specializationCode": 24,
   "specializationName": "Инфекционные болезни",
   "diagnosisCode": "I11",
   "dnDoctorJobExecutionId":"5584556426",
   "diagnosisName": "Ожирение, обусловленное избыточным поступлением энергетических ресурсов",
   "diagnosisDate": "2020-12-23T13:02:29.487",
   "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
   "startDate": "2020-12-02",
   "endDate": null,
   "cancelReasonCode": null,
   "cancelReasonName": null,
   "timeCommitted": "2020-12-24"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="2e3bf561-2cac-48d9-ac81-54a78de14e61"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient Step 1" id="700b0f9f-8810-4d23-98e7-b322a380d62f"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestSuite#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8794e1fa-3464-41ca-924e-5061f41d8d6c" name="Не создано поле urgentDiagnosisDate"><con:configuration><token>urgentDiagnosisDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e638a47e-42e6-4e81-a3ec-edd362ed85a0" name="Создано dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000003</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-07-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-07-06</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-06-06</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property><con:property><con:name>directory4</con:name><con:value>\Реестр\t_dispensary_observation_programComposition delete.json</con:value></con:property><con:property><con:name>directory5</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create one diagnose.json</con:value></con:property><con:property><con:name>directory6</con:name><con:value>\Реестр\t_dispensary_observation_programComposition delete one diagnose.json</con:value></con:property></con:properties></con:testCase><con:testCase id="d430a7cd-490e-4368-9f40-6d5123981424" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#183484" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="e75cff9f-c941-49c6-b4ad-d8639aa8cf12"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="b34b6213-c244-4b98-915d-d2944c28569d" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="6f5c9e2f-8165-4e4e-860e-dd96bcbcc888" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan v1" id="30646ccb-283a-4924-9948-42b930ad2400"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="04ed1713-911c-43cc-bb1f-c003a69a43c8"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="ac7b3756-d121-4a73-b0c6-fec1831a8501"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8794e1fa-3464-41ca-924e-5061f41d8d6c" name="Не создано поле urgentDiagnosisDate"><con:configuration><token>urgentDiagnosisDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e638a47e-42e6-4e81-a3ec-edd362ed85a0" name="Создано dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Step 1" id="0473724a-a494-436d-b5b9-402879946063"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0009",
   "groupName": "Ожирение",
   "doctorFIO": "Никитина Юлия Петровна",
   "employeeId": 10002704,
   "noDoctor": "",
   "specialityCode": 50,
   "specialityName": "Врач-инфекционист",
   "specializationCode": 24,
   "specializationName": "Инфекционные болезни",
   "diagnosisCode": "I11",
   "dnDoctorJobExecutionId":"5584556426",
   "diagnosisName": "Ожирение, обусловленное избыточным поступлением энергетических ресурсов",
   "diagnosisDate": "2020-12-23T13:02:29.487",
   "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
   "startDate": "2020-12-02",
   "endDate": null,
   "cancelReasonCode": null,
   "cancelReasonName": null,
   "timeCommitted": "2020-12-24"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="e83fae0f-bdef-46f4-8dc2-3d32ea66fe62"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient Step 1" id="a2a326d1-cfed-481f-b4cf-717158f3afa4"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="e638a47e-42e6-4e81-a3ec-edd362ed85a0" name="Создано dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b03ed85e-8a0d-4c76-8f99-5fc7c909602d" name="Создано unplannedEvents"><con:configuration><path>$.hits.hits[0]._source.data.dispensaryObservationPlan.unplannedEvents</path><content>{"urgentDiagnosisDate":"2020-12-24T00:00:00+03:00"}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000007</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-07-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-07-06</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-06-06</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property><con:property><con:name>directory4</con:name><con:value>\Реестр\t_dispensary_observation_programComposition delete.json</con:value></con:property><con:property><con:name>directory5</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create one diagnose.json</con:value></con:property><con:property><con:name>directory6</con:name><con:value>\Реестр\t_dispensary_observation_programComposition delete one diagnose.json</con:value></con:property></con:properties></con:testCase><con:testCase id="65e7260c-192a-4b19-90c3-59992d34b118" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#183487" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="622d847b-479f-404b-b6aa-25996b2db02b"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="52137d1e-be1d-4de9-8185-e5919f845611" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="6f5c9e2f-8165-4e4e-860e-dd96bcbcc888" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan v1" id="525a573f-fb09-4e11-866c-deb8c52a2726"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory2")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="901f86fd-9a5e-44e3-a5a6-460bfaf25c7c"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="2a27f29b-0ad1-4bd9-9607-4d63bf7c26b9"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8794e1fa-3464-41ca-924e-5061f41d8d6c" name="Не создано поле urgentDiagnosisDate"><con:configuration><token>urgentDiagnosisDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e638a47e-42e6-4e81-a3ec-edd362ed85a0" name="Создано dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Создание urgentDiagnosisDate" id="de1d55bc-5e90-4948-b868-c100653fe292"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0009",
   "groupName": "Ожирение",
   "doctorFIO": "Никитина Юлия Петровна",
   "employeeId": 10002704,
   "noDoctor": "",
   "specialityCode": 50,
   "specialityName": "Врач-инфекционист",
   "specializationCode": 24,
   "specializationName": "Инфекционные болезни",
   "diagnosisCode": "I11",
   "dnDoctorJobExecutionId":"5584556426",
   "diagnosisName": "Ожирение, обусловленное избыточным поступлением энергетических ресурсов",
   "diagnosisDate": "2020-12-23T13:02:29.487",
   "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
   "startDate": "2020-12-02",
   "endDate": null,
   "cancelReasonCode": null,
   "cancelReasonName": null,
   "timeCommitted": "2020-12-24"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="494f9782-f963-464e-a449-328d8d09d4f7"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient 2" id="c4b8e731-0f6e-4274-9aed-ba4eea09c885"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient 2" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="e638a47e-42e6-4e81-a3ec-edd362ed85a0" name="Создано dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b03ed85e-8a0d-4c76-8f99-5fc7c909602d" name="Создано unplannedEvents"><con:configuration><path>$.hits.hits[0]._source.data.dispensaryObservationPlan.unplannedEvents</path><content>{"urgentDiagnosisDate":"2020-12-24T00:00:00+03:00"}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Step 1" id="a744eb93-dcc7-417e-98b7-00ca604b36f3"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0009",
   "groupName": "Ожирение",
   "doctorFIO": "Никитина Юлия Петровна",
   "employeeId": 10002704,
   "noDoctor": "",
   "specialityCode": 50,
   "specialityName": "Врач-инфекционист",
   "specializationCode": 24,
   "specializationName": "Инфекционные болезни",
   "diagnosisCode": "I11",
   "dnDoctorJobExecutionId":"5584556426",
   "diagnosisName": "Ожирение, обусловленное избыточным поступлением энергетических ресурсов",
   "diagnosisDate": "2020-12-23T13:02:29.487",
   "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
   "startDate": "2020-12-02",
   "endDate": null,
   "cancelReasonCode": null,
   "cancelReasonName": null,
   "timeCommitted": "2020-12-23"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="9078f7e8-a3d0-4b74-8cd8-db47802c1c73"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient Step 1" id="0acfe3e4-a687-4fc2-b093-899734d8f603"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="e638a47e-42e6-4e81-a3ec-edd362ed85a0" name="Создано dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d31b8b0e-33a6-4b38-934d-3d52a687fdc2" name="unplannedEvents не изменилось"><con:configuration><path>$.hits.hits[0]._source.data.dispensaryObservationPlan.unplannedEvents</path><content>{"urgentDiagnosisDate":"2020-12-24T00:00:00+03:00"}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Step 2" id="8714792c-df3b-4cbf-9239-6f1e23bd5c5e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("DnForm30ToDisp","""{
   "operationType": "new",
   "patientId": \""""+patientId+"""\",
   "groupCode": "DNA0009",
   "groupName": "Ожирение",
   "doctorFIO": "Никитина Юлия Петровна",
   "employeeId": 10002704,
   "noDoctor": "",
   "specialityCode": 50,
   "specialityName": "Врач-инфекционист",
   "specializationCode": 24,
   "specializationName": "Инфекционные болезни",
   "diagnosisCode": "I11",
   "dnDoctorJobExecutionId":"5584556426",
   "diagnosisName": "Ожирение, обусловленное избыточным поступлением энергетических ресурсов",
   "diagnosisDate": "2020-12-23T13:02:29.487",
   "repeat": "диагноз установлен в предыдущ. году или ранее (-)",
   "startDate": "2020-12-02",
   "endDate": null,
   "cancelReasonCode": null,
   "cancelReasonName": null,
   "timeCommitted": "2020-12-25"
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 4" id="bc24ecb6-2754-42db-9758-2ed1a3788aec"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient Step 2" id="112e6789-b6ff-4480-a24e-651cf394cbba"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient Step 2" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="e638a47e-42e6-4e81-a3ec-edd362ed85a0" name="Создано dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d31b8b0e-33a6-4b38-934d-3d52a687fdc2" name="unplannedEvents обновлено"><con:configuration><path>$.hits.hits[0]._source.data.dispensaryObservationPlan.unplannedEvents</path><content>{"urgentDiagnosisDate":"2020-12-25T00:00:00+03:00"}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000009</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-07-06T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-07-06</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-06-06</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property><con:property><con:name>directory4</con:name><con:value>\Реестр\t_dispensary_observation_programComposition delete.json</con:value></con:property><con:property><con:name>directory5</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create one diagnose.json</con:value></con:property><con:property><con:name>directory6</con:name><con:value>\Реестр\t_dispensary_observation_programComposition delete one diagnose.json</con:value></con:property></con:properties></con:testCase><con:testCase id="0f0bd237-57d9-4f21-a856-6e5dd1f6c247" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о необходимости внепланового приема при отклонении в анкете самоконтроля" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="c8de75ba-034f-4751-99a3-075630f2275a"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="95e97d52-b499-481b-ad8a-fcf9b05340ac" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan v1" id="5ff0053b-9f53-44dc-9294-a61470a9322b"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("PDNEventNotify","""{
  "notificationEvent": {
    "type": "CREATE",
    "time": "2020-02-12T09:00:00.000+03:00"
  },
  "planOfEvents": {
    "patient_id": """+patientId+""",
    "jobExecutionId": 87654321,
    "start_time": "2022-09-23T00:00:00.000000", 
    "end_time": "2023-03-14T09:00:00.000+03:00",
    "pdnDocumentId": "448511236548122",
    "diagnosis": [
      {
        "code": "E11"
      }
    ], 
    "timeCommitted": "2022-09-23T00:00:00.000000",
    "specialization": "Y",
    "name": "Abrogim Abrosimov", 
    "compositionId": "78723649893"
  }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="fa325bee-8b4d-4c83-b6aa-f9d52c137d98"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def pain=testRunner.testCase.getPropertyValue("pain")
 def bloodPressure=testRunner.testCase.getPropertyValue("bloodPressure")
 def bleeding=testRunner.testCase.getPropertyValue("bleeding")
 def changed=testRunner.testCase.getPropertyValue("changed")
 def gainWeight=testRunner.testCase.getPropertyValue("gainWeight")
 def thirst=testRunner.testCase.getPropertyValue("thirst")
 def loseWeight=testRunner.testCase.getPropertyValue("loseWeight")
 def irritableBowel=testRunner.testCase.getPropertyValue("irritableBowel")
 def newComplaints=testRunner.testCase.getPropertyValue("newComplaints")
 def date=testRunner.testCase.getPropertyValue("date")
 String message = file.replace("\$patientId",patientId).replace("\$pain",pain).replace("\$bloodPressure",bloodPressure).replace("\$bleeding",bleeding).replace("\$changed",changed).replace("\$gainWeight",gainWeight).replace("\$thirst",thirst).replace("\$date",date).replace("\$loseWeight",loseWeight).replace("\$irritableBowel",irritableBowel).replace("\$newComplaints",newComplaints)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="0197c568-b76c-4de2-a800-57f241f972dd"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def pain=testRunner.testCase.getPropertyValue("pain")
 def bloodPressure=testRunner.testCase.getPropertyValue("bloodPressure")
 def bleeding=testRunner.testCase.getPropertyValue("bleeding")
 def changed=testRunner.testCase.getPropertyValue("changed")
 def gainWeight=testRunner.testCase.getPropertyValue("gainWeight")
 def thirst=testRunner.testCase.getPropertyValue("thirst")
 def loseWeight=testRunner.testCase.getPropertyValue("loseWeight")
 def irritableBowel=testRunner.testCase.getPropertyValue("irritableBowel")
 def newComplaints=testRunner.testCase.getPropertyValue("newComplaints")
 def date=testRunner.testCase.getPropertyValue("date")
 String message = file.replace("\$patientId",patientId).replace("\$pain",pain).replace("\$bloodPressure",bloodPressure).replace("\$bleeding",bleeding).replace("\$changed",changed).replace("\$gainWeight",gainWeight).replace("\$thirst",thirst).replace("\$date",date).replace("\$loseWeight",loseWeight).replace("\$irritableBowel",irritableBowel).replace("\$newComplaints",newComplaints)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="b11cc6c6-d603-4726-938f-7646631ee6ad"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def pain=testRunner.testCase.getPropertyValue("pain")
 def bloodPressure=testRunner.testCase.getPropertyValue("bloodPressure")
 def bleeding=testRunner.testCase.getPropertyValue("bleeding")
 def changed=testRunner.testCase.getPropertyValue("changed")
 def gainWeight=testRunner.testCase.getPropertyValue("gainWeight")
 def thirst=testRunner.testCase.getPropertyValue("thirst")
 def loseWeight=testRunner.testCase.getPropertyValue("loseWeight")
 def irritableBowel=testRunner.testCase.getPropertyValue("irritableBowel")
 def newComplaints=testRunner.testCase.getPropertyValue("newComplaints")
 def date=testRunner.testCase.getPropertyValue("date")
 String message = file.replace("\$patientId",patientId).replace("\$pain",pain).replace("\$bloodPressure",bloodPressure).replace("\$bleeding",bleeding).replace("\$changed",changed).replace("\$gainWeight",gainWeight).replace("\$thirst",thirst).replace("\$date",date).replace("\$loseWeight",loseWeight).replace("\$irritableBowel",irritableBowel).replace("\$newComplaints",newComplaints)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без no сomplaints" id="b0e1fd25-92f5-497c-ba51-fca8a1d3c73c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create1")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def pain=testRunner.testCase.getPropertyValue("pain")
 def bloodPressure=testRunner.testCase.getPropertyValue("bloodPressure")
 def bleeding=testRunner.testCase.getPropertyValue("bleeding")
 def changed=testRunner.testCase.getPropertyValue("changed")
 def gainWeight=testRunner.testCase.getPropertyValue("gainWeight")
 def thirst=testRunner.testCase.getPropertyValue("thirst")
 def loseWeight=testRunner.testCase.getPropertyValue("loseWeight")
 def irritableBowel=testRunner.testCase.getPropertyValue("irritableBowel")
 def newComplaints=testRunner.testCase.getPropertyValue("newComplaints")
 def date=testRunner.testCase.getPropertyValue("date")
 String message = file.replace("\$patientId",patientId).replace("\$pain",pain).replace("\$bloodPressure",bloodPressure).replace("\$bleeding",bleeding).replace("\$changed",changed).replace("\$gainWeight",gainWeight).replace("\$thirst",thirst).replace("\$date",date).replace("\$loseWeight",loseWeight).replace("\$irritableBowel",irritableBowel).replace("\$newComplaints",newComplaints)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="95d0a9a1-969c-40f7-8767-5519b622a83c"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="4239e836-9521-4ba6-b92d-bb06fc6d527e" name="Создан selfcontrolDispensaryQuestionnaire"><con:configuration><token>selfcontrolDispensaryQuestionnaire</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8581204c-2f25-46e3-99cb-89c15f340815" name="Создан dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000356</con:value></con:property><con:property><con:name>create</con:name><con:value>\Реестр\t_selfcontrol_dispensary_questionnaire.v1 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-12-11T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-12-08</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-11-11</con:value></con:property><con:property><con:name>uid</con:name><con:value>123</con:value></con:property><con:property><con:name>update</con:name><con:value>\Реестр\t_selfcontrol_dispensary_questionnaire.v1 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\Реестр\t_selfcontrol_dispensary_questionnaire.v1 delete.json</con:value></con:property><con:property><con:name>create1</con:name><con:value>\Реестр\t_selfcontrol_dispensary_questionnaire.v1 no complaints.json</con:value></con:property><con:property><con:name>pain</con:name><con:value>нет</con:value></con:property><con:property><con:name>newComplaints</con:name><con:value>нет</con:value></con:property><con:property><con:name>bleeding</con:name><con:value>нет</con:value></con:property><con:property><con:name>thirst</con:name><con:value>да</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-02-12</con:value></con:property><con:property><con:name>bloodPressure</con:name><con:value>нет</con:value></con:property><con:property><con:name>changed</con:name><con:value>нет</con:value></con:property><con:property><con:name>gainWeight</con:name><con:value>нет</con:value></con:property><con:property><con:name>loseWeight</con:name><con:value>нет</con:value></con:property><con:property><con:name>irritableBowel</con:name><con:value>нет</con:value></con:property></con:properties></con:testCase><con:testCase id="09758987-21b7-4f72-8d3b-7a82e2683847" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о создании задачи на обзвон при необходимости внепланового приема" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="7bf4d86c-f83b-47d3-b648-43846f58d0aa"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="db10bc30-4b33-4684-a721-65d1c4e3e33a" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan v1" id="ec0af47a-a141-4354-af36-ab7c3d789015"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("PDNEventNotify","""{
  "notificationEvent": {
    "type": "CREATE",
    "time": "2020-02-12T09:00:00.000+03:00"
  },
  "planOfEvents": {
    "patient_id": """+patientId+""",
    "jobExecutionId": 87654321,
    "start_time": "2022-09-23T00:00:00.000000", 
    "end_time": "2023-03-14T09:00:00.000+03:00",
    "pdnDocumentId": "448511236548122",
    "diagnosis": [
      {
        "code": "E11"
      }
    ], 
    "timeCommitted": "2022-09-23T00:00:00.000000",
    "specialization": "Y",
    "name": "Abrogim Abrosimov", 
    "compositionId": "78723649893"
  }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="34ddcabd-0a24-4cf9-835f-b18a5a87448c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def event=testRunner.testCase.getPropertyValue("event")
def uid1=testRunner.testCase.getPropertyValue("uid1")
def uid2=testRunner.testCase.getPropertyValue("uid2")
def uid3=testRunner.testCase.getPropertyValue("uid3")
def uid4=testRunner.testCase.getPropertyValue("uid4")

sendMessageToKafka("callTasksFromDoctorEvent",""" 
{
   "taskId": 4,
   "eventList": [
      {
         "triggerEventType": \""""+event+"""\",
         "eventSourceDocumentId": \""""+uid1+"""\"
      },
      {
         "triggerEventType": "urgentDischarge",
         "eventSourceDocumentId": \""""+uid2+"""\"
      },
      {
         "triggerEventType": "selfControlDispensaryQuestionnaire",
         "eventSourceDocumentId": \""""+uid3+"""\"
      },
      {
         "triggerEventType": "dispensaryAtHomeProactiveQuestionnaire",
         "eventSourceDocumentId": \""""+uid4+"""\"
      }
   ],
   "patientId": """+patientId+"""
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="5436c01b-5193-4871-b8db-a6c6180124b3"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="4239e836-9521-4ba6-b92d-bb06fc6d527e" name="Создан dispensaryAtHomeProactiveQuestionnaire"><con:configuration><token>dispensaryAtHomeProactiveQuestionnaire</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8581204c-2f25-46e3-99cb-89c15f340815" name="Создан dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="4239e836-9521-4ba6-b92d-bb06fc6d527e" name="Создан ambulanceItems"><con:configuration><token>ambulanceItems</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8581204c-2f25-46e3-99cb-89c15f340815" name="Создан selfcontrolDispensaryQuestionnaire"><con:configuration><token>selfcontrolDispensaryQuestionnaire</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="431126bd-c000-4786-aa36-27d724cdaf61" name="Создан urgentDischarge"><con:configuration><token>urgentDischarge</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000356</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-12-10T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-12-10</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-11-10</con:value></con:property><con:property><con:name>event</con:name><con:value>ambulance</con:value></con:property><con:property><con:name>uid1</con:name><con:value>6008184c-3d8e-4ab0-8262-c547abe123::default::1</con:value></con:property><con:property><con:name>uid2</con:name><con:value>ef206f7a-d6e2-4c97-99e2-61a50f01000167</con:value></con:property><con:property><con:name>uid3</con:name><con:value>640a25ce-2227-4a80-8c8b-e8557cc1000356</con:value></con:property><con:property><con:name>uid4</con:name><con:value>d61fb9ee-74ad-47cc-80f1-c36f1000241</con:value></con:property></con:properties></con:testCase><con:testCase id="6693757b-de56-4762-bfa5-15ab430bad5d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о необходимости внепланового приема при отклонении в анкете ДН при посещении на дому" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="849f7bb6-05df-4946-a258-27f382da29a6"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="1785cc52-69d6-4bc4-949b-c130a230a0eb" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan v1" id="a6bf07ca-8886-4755-b3c5-499ce955f41a"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("PDNEventNotify","""{
  "notificationEvent": {
    "type": "CREATE",
    "time": "2020-02-12T09:00:00.000+03:00"
  },
  "planOfEvents": {
    "patient_id": """+patientId+""",
    "jobExecutionId": 87654321,
    "start_time": "2022-09-23T00:00:00.000000", 
    "end_time": "2023-03-14T09:00:00.000+03:00",
    "pdnDocumentId": "448511236548122",
    "diagnosis": [
      {
        "code": "E11"
      }
    ], 
    "timeCommitted": "2022-09-23T00:00:00.000000",
    "specialization": "Y",
    "name": "Abrogim Abrosimov", 
    "compositionId": "78723649893"
  }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="f54f2ef8-726b-40da-be4b-542cbf46f098"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def pain=testRunner.testCase.getPropertyValue("pain")
 def changed=testRunner.testCase.getPropertyValue("changed")
 def newComplaints=testRunner.testCase.getPropertyValue("newComplaints")
 def bleeding=testRunner.testCase.getPropertyValue("bleeding")
 def weight=testRunner.testCase.getPropertyValue("weight")
 def thirst=testRunner.testCase.getPropertyValue("thirst")
 def date=testRunner.testCase.getPropertyValue("date")
 String message = file.replace("\$patientId",patientId).replace("\$pain",pain).replace("\$changed",changed).replace("\$newComplaints",newComplaints).replace("\$bleeding",bleeding).replace("\$weight",weight).replace("\$thirst",thirst).replace("\$date",date)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="f78bbbbf-8599-4c4c-836b-a70701d65c9d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("update")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def pain=testRunner.testCase.getPropertyValue("pain")
 def changed=testRunner.testCase.getPropertyValue("changed")
 def newComplaints=testRunner.testCase.getPropertyValue("newComplaints")
 def bleeding=testRunner.testCase.getPropertyValue("bleeding")
 def weight=testRunner.testCase.getPropertyValue("weight")
 def thirst=testRunner.testCase.getPropertyValue("thirst")
 def date=testRunner.testCase.getPropertyValue("date")
 String message = file.replace("\$patientId",patientId).replace("\$pain",pain).replace("\$changed",changed).replace("\$newComplaints",newComplaints).replace("\$bleeding",bleeding).replace("\$weight",weight).replace("\$thirst",thirst).replace("\$date",date)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="edee452a-39c0-448b-a6d2-ffeb1f21ce83"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def pain=testRunner.testCase.getPropertyValue("pain")
 def changed=testRunner.testCase.getPropertyValue("changed")
 def newComplaints=testRunner.testCase.getPropertyValue("newComplaints")
 def bleeding=testRunner.testCase.getPropertyValue("bleeding")
 def weight=testRunner.testCase.getPropertyValue("weight")
 def thirst=testRunner.testCase.getPropertyValue("thirst")
 def date=testRunner.testCase.getPropertyValue("date")
 String message = file.replace("\$patientId",patientId).replace("\$pain",pain).replace("\$changed",changed).replace("\$newComplaints",newComplaints).replace("\$bleeding",bleeding).replace("\$weight",weight).replace("\$thirst",thirst).replace("\$date",date)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Create без no сomplaints" id="e616f475-3b52-4f11-adf2-71bba720e4d2"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("create1")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def pain=testRunner.testCase.getPropertyValue("pain")
 def changed=testRunner.testCase.getPropertyValue("changed")
 def newComplaints=testRunner.testCase.getPropertyValue("newComplaints")
 def bleeding=testRunner.testCase.getPropertyValue("bleeding")
 def weight=testRunner.testCase.getPropertyValue("weight")
 def thirst=testRunner.testCase.getPropertyValue("thirst")
 def date=testRunner.testCase.getPropertyValue("date")
 String message = file.replace("\$patientId",patientId).replace("\$pain",pain).replace("\$changed",changed).replace("\$newComplaints",newComplaints).replace("\$bleeding",bleeding).replace("\$weight",weight).replace("\$thirst",thirst).replace("\$date",date)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="9aff896a-68e5-40f9-87f2-f101b0909f1b"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="4239e836-9521-4ba6-b92d-bb06fc6d527e" name="Создан dispensaryAtHomeProactiveQuestionnaire"><con:configuration><token>dispensaryAtHomeProactiveQuestionnaire</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8581204c-2f25-46e3-99cb-89c15f340815" name="Создан dispensaryObservationPlan"><con:configuration><token>dispensaryObservationPlan</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>19314988</con:value></con:property><con:property><con:name>create</con:name><con:value>\Реестр\t_dispensary_at_home_proactive_questionnaire.v1 create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-12-11T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-12-08</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-11-11</con:value></con:property><con:property><con:name>uid</con:name><con:value>123</con:value></con:property><con:property><con:name>update</con:name><con:value>\Реестр\t_dispensary_at_home_proactive_questionnaire.v1 update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\Реестр\t_dispensary_at_home_proactive_questionnaire.v1 delete.json</con:value></con:property><con:property><con:name>create1</con:name><con:value>\Реестр\t_dispensary_at_home_proactive_questionnaire.v1 no сomplaints.json</con:value></con:property><con:property><con:name>pain</con:name><con:value>нет</con:value></con:property><con:property><con:name>bleeding</con:name><con:value>нет</con:value></con:property><con:property><con:name>thirst</con:name><con:value>нет</con:value></con:property><con:property><con:name>date</con:name><con:value>2023-02-12</con:value></con:property><con:property><con:name>newComplaints</con:name><con:value>да</con:value></con:property><con:property><con:name>changed</con:name><con:value>нет</con:value></con:property><con:property><con:name>weight</con:name><con:value>нет</con:value></con:property></con:properties></con:testCase><con:testCase id="b3183a83-9e33-4cf8-9105-e129339602e6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений об анекете самоконтроля" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Get Date" id="ab2e2897-289d-4c96-bbea-68d5542e0552"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(new java.util.Date());
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 2;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )
def currentDate3 = today.getTime() - 32;
def currentDate_formatted3 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate3);
testRunner.testCase.setPropertyValue( "dateLower3", currentDate_formatted3 )</script></con:config></con:testStep><con:testStep type="groovy" name="CREATE" id="bf876827-49d1-4a14-905d-b4a511197562"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
 def uid=testRunner.testCase.getPropertyValue("uid")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="2025005b-0b7b-44cb-ba5b-4d5c02f5b758"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
 def uid=testRunner.testCase.getPropertyValue("uid")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000241</con:value></con:property><con:property><con:name>create</con:name><con:value>\Реестр\t_selfcontrol_dispensary_questionnaireComposition create.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\Реестр\t_selfcontrol_dispensary_questionnaireComposition delete.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2023-01-12T16:32:59</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2023-01-10</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-12-11</con:value></con:property></con:properties></con:testCase><con:testCase id="f38e3c58-2458-47b3-8cd4-e15a63b0548c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений об анкете ДН при посещении на дому" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Create" id="c2990b92-94df-42b1-8e63-42bc0e3f3350"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic3")
 String file =scripts.returnFileAsText("create")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
 def uid=testRunner.testCase.getPropertyValue("uid")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="efcb51ab-ff26-4515-96e3-a6e9135cd40a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic5")
 String file =scripts.returnFileAsText("delete")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
 def uid=testRunner.testCase.getPropertyValue("uid")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000241</con:value></con:property><con:property><con:name>create</con:name><con:value>\Реестр\t_dispensary_at_home_proactive_questionnaire create.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\Реестр\t_dispensary_at_home_proactive_questionnaire delete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="a480bcf5-a7d0-4fcd-aa28-ee55f194f377" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о вызовах скорой помощи" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Get Date" id="c9e2f59e-023b-4382-8622-63b86013ccbd"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(new java.util.Date());
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 2;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )
def currentDate3 = today.getTime() - 32;
def currentDate_formatted3 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate3);
testRunner.testCase.setPropertyValue( "dateLower3", currentDate_formatted3 )</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="f8909468-c8b1-4529-863a-3d38563dda81"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("create")
 
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def dateLower=testRunner.testCase.getPropertyValue("dateLower")
 def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
 def uid=testRunner.testCase.getPropertyValue("uid")
 
 String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower)
 //return message
scripts. sendMessageToKafka(topic, message)

log.info(dateLower2)</script></con:config></con:testStep><con:testStep type="groovy" name="Update" id="4e4bf310-b027-4e00-9496-789364e68e76"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("update")
 
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def dateLower=testRunner.testCase.getPropertyValue("dateLower")
 def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
 def uid=testRunner.testCase.getPropertyValue("uid")
 
 String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower)
 //return message
scripts. sendMessageToKafka(topic, message)

log.info(dateLower2)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="c38d8647-c1ac-410a-b16d-22333240f480"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic2")
 String file =scripts.returnFileAsText("delete")
 
 def patientId =testRunner.testCase.getPropertyValue("patientId")
  def dateLower=testRunner.testCase.getPropertyValue("dateLower")
 def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")
 def uid=testRunner.testCase.getPropertyValue("uid")
 
 String message = file.replace("\$patientId",patientId).replace("\$uid",uid).replace("\$dateLower",dateLower)
 //return message
scripts. sendMessageToKafka(topic, message)

log.info(dateLower2)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1510</con:value></con:property><con:property><con:name>create</con:name><con:value>\Реестр\card_of_call_embulanceComposition create.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>9816511</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2023-02-21T16:20:03</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2023-02-19</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2023-01-20</con:value></con:property><con:property><con:name>update</con:name><con:value>\Реестр\card_of_call_embulanceComposition update.json</con:value></con:property><con:property><con:name>delete</con:name><con:value>\Реестр\card_of_call_embulanceComposition delete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="5d96eb06-3e37-4336-a1ea-894142ed2211" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о необходимости внепланового приёма на основании выписного эпикриза (топик EpicrisisInfo)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="88e912af-457d-4431-bbab-00f78422d4bc"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="a4de5c20-00dc-4167-9229-036bbe6fde0a" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Создание dispensaryObservationPlan" id="fc90cd1b-8fa1-431a-bd06-4a1854bc7d59"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
 def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
 String file =scripts.returnFileAsText("directory")
 def patientId =testRunner.testCase.getPropertyValue("patientId")
 String message = file.replace("\$patientId",patientId)
 //return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="operation == &quot;create&quot;" id="8d52f643-016d-4a3f-b644-08960bdcb590"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("EpicrisisInfo","""{
    "departmentName": "Гинекологическое отделение",
    "documentUpdateDate": "2023-03-02T08:07:20.742274",
    "documentCreateDate": "2023-03-02T08:07:20.741104",
    "patientId": """+patientId+""",
    "diagnosisAtDischarge": [
        {
            "type": "MAIN",
            "code": "I10",
            "detailedDiagnosis": "обрабатывает"
        },
		{
            "type": "TEST",
            "code": "O65",
            "detailedDiagnosis": "не обрабатывает"
        },
		{
            "type": "MAIN",
            "code": "A00.11111",
            "detailedDiagnosis": "не обрабатывает"
        },
		{
            "type": "MAIN",
            "code": "O65.0",
            "detailedDiagnosis": "обрабатывает"
        }
    ],
    "compositionId": "4802e6b3-9407-44e1-a1f8-6620fe267c64::default::2",
    "diagnosisAtAdmission": [
        {
            "type": "TEST",
            "detailedDiagnosis": "не обрабатывает"
        }
    ],
    "documentId": "7515ae5a-1c00-4a9c-bef0-8504822bdf13",
    "moName": "Научно-исследовательский институт скорой помощи им. Н.В. Склифосовского",
    "templateId": "openEHR-EHR-COMPOSITION.t_neonatal_epicrisis_kis.v6",
    "operation": "create",
    "moId": 10394853,
    "dischargeDate": "2023-02-19T22:50:17.9971856"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="operation == &quot;delete&quot;" id="2852b148-4e47-4593-8ae2-9c4737f478ac"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("EpicrisisInfo","""{
    "departmentName": "Гинекологическое отделение",
    "documentUpdateDate": "2023-03-02T08:07:20.742274",
    "documentCreateDate": "2023-03-02T08:07:20.741104",
    "patientId": """+patientId+""",
    "diagnosisAtDischarge": [
        {
            "type": "MAIN",
            "code": "I10",
            "detailedDiagnosis": "обрабатывает"
        },
		{
            "type": "TEST",
            "code": "O65",
            "detailedDiagnosis": "не обрабатывает"
        },
		{
            "type": "MAIN",
            "code": "A00.11111",
            "detailedDiagnosis": "не обрабатывает"
        },
		{
            "type": "MAIN",
            "code": "O65.0",
            "detailedDiagnosis": "обрабатывает"
        }
    ],
    "compositionId": "4802e6b3-9407-44e1-a1f8-6620fe267c64::default::2",
    "diagnosisAtAdmission": [
        {
            "type": "TEST",
            "detailedDiagnosis": "не обрабатывает"
        }
    ],
    "documentId": "7515ae5a-1c00-4a9c-bef0-8504822bdf13",
    "moName": "Научно-исследовательский институт скорой помощи им. Н.В. Склифосовского",
    "templateId": "openEHR-EHR-COMPOSITION.t_discharge_epicrisis_universal_kis.v2",
    "operation": "delete",
    "moId": 10394853,
    "dischargeDate": "2023-02-19T22:50:17.9971856"
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="25d59ba9-514d-48b4-ac21-daa6fada13f4"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000437</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2023-03-18T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2023-02-19</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>topicFix</con:name><con:value>t_dispensary_observation_programComposition.patientregistry</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>dbType</con:name><con:value>postgre</con:value></con:property><con:property><con:name>dbLogin</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>dn</con:value></con:property><con:property><con:name>registryLogin</con:name><con:value>erp_dn_view</con:value></con:property><con:property><con:name>registryPassword</con:name><con:value>wd#0311FD8</con:value></con:property><con:property><con:name>registryConnect</con:name><con:value>@//10.0.49.100:1521/erptest</con:value></con:property><con:property><con:name>registryTestLogin</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestPassword</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestConnect</con:name><con:value>@//10.2.172.16:1521/patient_registry.mosgorzdrav.local</con:value></con:property><con:property><con:name>limit</con:name><con:value>100</con:value></con:property><con:property><con:name>patientId</con:name><con:value>1000000</con:value></con:property><con:property><con:name>topic2</con:name><con:value>card_of_call_embulanceComposition</con:value></con:property><con:property><con:name>topic3</con:name><con:value>t_dispensary_at_home_proactive_questionnaireComposition</con:value></con:property><con:property><con:name>topic4</con:name><con:value>t_selfcontrol_dispensary_questionnaireComposition</con:value></con:property></con:properties></con:testSuite><con:testSuite id="be21b3b8-a9ca-4b4f-8a80-73c34b973073" name="eln (Электронный листок нетрудоспособности)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0322cf9c-aae6-439b-a71d-56a0ce9537cf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#85056" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="5edd47d0-d1f1-489b-ac93-740817b7d1e1"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="961e7f6a-316a-4139-bdfd-d86d589e3015" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Все поля" id="a68d2a86-baef-428a-9859-8ca54e7d21b0"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("ChangeELN","""{
   "patientId": \""""+patientId+"""\",
            "idDf": 69693537,
            "statusCode": 60,
            "diagnosisCode": "O99.8",
            "statusProcessCode": 54,
            "periodList": [
                {
                    "dateBegin": "2022-08-10",
                    "dateEnd": "2022-12-27"
                }
            ],
            "relativeList": [
                {
                    "relativeId": 123,
                    "relationshipCode": 123,
                    "relationshipName": "отец"
                }
            ]
        }""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="5d00133c-871c-461b-8891-8cc4d3d2ab7e"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="03e5c206-aed6-4d39-85a7-681576b9928b" name="Создан nElnItems"><con:configuration><path>$.hits.hits[0]._source.data.eln.nElnItems</path><content>[{"disablePeriodsList":[{"dateBegin":"2022-08-10","dateEnd":"2022-12-27"}],"statusProcessCode":2,"relativesList":[{"relationshipName":"отец","relativeId":123,"relationshipCode":123}],"diagnosisCode":"O99.8","id":69693537,"statusCode":60}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="statusCode = 63" id="450160d3-d240-4c6d-8b97-fdf09f418b95"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("ChangeELN","""{
   "patientId": \""""+patientId+"""\",
            "idDf": 69693537,
            "statusCode": 63,
            "diagnosisCode": "O99.8",
            "statusProcessCode": 2,
            "periodList": [
                {
                    "dateBegin": "2022-08-10",
                    "dateEnd": "2022-12-27"
                }
            ],
            "relativeList": [
                {
                    "relativeId": 1234,
                    "relationshipCode": 1234,
                    "relationshipName": "мать"
                }
            ]
        }""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 2" id="408c8d70-3ef7-4021-96c3-bd8ee1c79f1b"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 2" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="03e5c206-aed6-4d39-85a7-681576b9928b" name="Обновлен statusCode"><con:configuration><path>$.hits.hits[0]._source.data.eln.nElnItems</path><content>[{"disablePeriodsList":[{"dateBegin":"2022-08-10","dateEnd":"2022-12-27"}],"statusProcessCode":2,"relativesList":[{"relationshipName":"мать","relativeId":1234,"relationshipCode":1234}],"diagnosisCode":"O99.8","id":69693537,"statusCode":63}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="statusCode != 63" id="90af0ab1-87f9-4e9d-8b7b-36a00af4079c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("ChangeELN","""{
   "patientId": \""""+patientId+"""\",
            "idDf": 69693537,
            "statusCode": 62,
            "diagnosisCode": "O99.8",
            "statusProcessCode": 2,
            "periodList": [
                {
                    "dateBegin": "2022-08-10",
                    "dateEnd": "2022-12-27"
                }
            ],
            "relativeList": [
                {
                    "relativeId": 123,
                    "relationshipCode": 123,
                    "relationshipName": "отец"
                }
            ]
        }""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 3" id="2ed17cf8-9bab-4d4c-949c-cb82c350588d"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 3" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="03e5c206-aed6-4d39-85a7-681576b9928b" name="Не обновлен nElnItems"><con:configuration><path>$.hits.hits[0]._source.data.eln.nElnItems</path><content>[{"disablePeriodsList":[{"dateBegin":"2022-08-10","dateEnd":"2022-12-27"}],"relativesList":[{"relationshipName":"отец","relativeId":123,"relationshipCode":123}],"diagnosisCode":"O99.8","id":69693537,"statusCode":63}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="diagnosisCode != mkb" id="5b345792-5692-4bd8-bc4b-f0c0c8b2eb7c"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("ChangeELN","""{
   "patientId": \""""+patientId+"""\",
            "idDf": 69693537,
            "statusCode": 60,
            "diagnosisCode": "O99.9",
            "statusProcessCode": 2,
            "periodList": [
                {
                    "dateBegin": "2022-08-10",
                    "dateEnd": "2022-12-27"
                }
            ],
            "relativeList": [
                {
                    "relativeId": 123,
                    "relationshipCode": 123,
                    "relationshipName": "отец"
                }
            ]
        }""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000452</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-05-29T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-05-29</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-04-29</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="3e57889f-8288-49e3-9a83-1dc416e04d9c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#202126" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="f05f15c7-ee67-4726-929f-53a1443d0766"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="02713dea-59e4-4786-be02-8a4c61a9a6c3" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="нет relativeList" id="d37c76ea-730a-4e89-9da4-ebf450717e18"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")
def uid=testRunner.testCase.getPropertyValue("uid")

sendMessageToKafka("ChangeELN","""{
   "patientId": \""""+patientId+"""\",
            "idDf": 69693537,
            "statusCode": 60,
            "diagnosisCode": "O99.8",
            "statusProcessCode": 2,
            "periodList": [
                {
                    "dateBegin": "2022-08-10",
                    "dateEnd": "2022-12-27"
                }
            ]
        }""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Step 1" id="408f4470-7957-4bd0-a539-ba8f1ad0adea"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Step 1" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="03e5c206-aed6-4d39-85a7-681576b9928b" name="Создан nElnItems"><con:configuration><path>$.hits.hits[0]._source.data.eln.nElnItems</path><content>[{"disablePeriodsList":[{"dateBegin":"2022-08-10","dateEnd":"2022-12-27"}],"diagnosisCode":"O99.8","id":69693537,"statusCode":60}]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000025</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-05-29T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-05-29</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-04-29</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>topic1</con:name><con:value>t_preventive_examination_reference_forms_112_025Composition</con:value></con:property></con:properties></con:testSuite><con:testSuite id="838a829a-d7b5-415b-8cec-b69b735467d2" name="guardianshipInfo (Информация об опеке)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="43fd0438-fc3f-4f88-bd5a-6de297208a18" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование данных о наличии опеки" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="4e88f815-5fd8-44e2-baca-b648a429b190"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"120111"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="true" id="9aae9cc2-f564-4f17-a851-ae38da04cee5"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("GuardianshipInfo","""{
   "patientId": \""""+patientId+"""\",
   "guardianshipStatus": true
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="false" id="bf6ab55b-b1cb-49d0-aa76-00a2db35b952"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("GuardianshipInfo","""{
   "patientId": \""""+patientId+"""\",
   "guardianshipStatus": false
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>120111</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-07-16T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-07-16</con:value></con:property><con:property><con:name>dateLower3</con:name><con:value>2022-06-16</con:value></con:property><con:property><con:name>directory2</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>directory3</con:name><con:value>\Реестр\t_dispensary_observation_programComposition_dispensaryObservationPlan v2 delete.json</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>topicFix</con:name><con:value>t_dispensary_observation_programComposition.patientregistry</con:value></con:property></con:properties></con:testSuite><con:testSuite id="894fb2ca-f747-4c15-9023-56dc90ad857a" name="hospitalDischarge (Выписка из стационара)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0cd1b2fb-bca6-46b9-b3c4-08f89097ffac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений по выписным эпикризам (топик EpicrisisInfo)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="8d1c127a-899c-4fec-ab40-f11e900954b6"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="59f7833a-e6b5-4ad1-9b6a-b767f609f8aa" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set date &lt;30" id="82a88c7b-e893-4faa-bc0b-5ce97dfcba66"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 29;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set date &lt;365" id="01a92a09-14e0-40ff-8496-42b17d68546e"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 364;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set date >365" id="27d13acb-557b-4da3-89d9-9b518084dc50"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 366;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="operation == &quot;create&quot;" id="10aef09d-69dc-45c4-9cb2-7501df10d36e"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("EpicrisisInfo","""{
    "departmentName": "Гинекологическое отделение",
    "documentUpdateDate": "2023-03-02T11:07:20.742274",
    "documentCreateDate": "2023-03-02T08:07:20.741104",
    "patientId": """+patientId+""",
    "diagnosisAtDischarge": [
        {
            "type": "MAIN",
            "detailedDiagnosis": "Опухоль левого яичника"
        }
    ],
    "compositionId": "4802e6b3-9407-44e1-a1f8-6620fe267c63::default::2",
    "diagnosisAtAdmission": [
        {
            "type": "MAIN",
            "detailedDiagnosis": "Фолликулярная киста яичника"
        }
    ],
    "documentId": "7515ae5a-1c00-4a9c-bef0-8504822bdf13",
    "moName": "Научно-исследовательский институт скорой помощи им. Н.В. Склифосовского",
    "templateId": "openEHR-EHR-COMPOSITION.t_PPD_epicrisis_kis.v6",
    "operation": "create",
    "moId": 10394811,
    "dischargeDate": """"+dateLower2+"""T22:51:17.9971856"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="operation == &quot;delete&quot;" id="88a24105-6f64-4744-8e19-b18c4f16b656"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("EpicrisisInfo","""{
    "departmentName": "Гинекологическое отделение",
    "documentUpdateDate": "2023-03-02T08:07:20.742274",
    "documentCreateDate": "2023-03-02T08:07:20.741104",
    "patientId": """+patientId+""",
    "diagnosisAtDischarge": [
        {
            "type": "MAIN",
            "detailedDiagnosis": "Опухоль левого яичника"
        }
    ],
    "compositionId": "4802e6b3-9407-44e1-a1f8-6620fe267c63::default::2",
    "diagnosisAtAdmission": [
        {
            "type": "MAIN",
            "detailedDiagnosis": "Фолликулярная киста яичника"
        }
    ],
    "documentId": "7515ae5a-1c00-4a9c-bef0-8504822bdf13",
    "moName": "Научно-исследовательский институт скорой помощи им. Н.В. Склифосовского",
    "templateId": "openEHR-EHR-COMPOSITION.t_discharge_epicrisis_universal_kis.v2",
    "operation": "delete",
    "moId": 10394853,
    "dischargeDate": """"+dateLower2+"""T22:50:17.9971856"
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="8506fc5b-62c5-4498-809e-4f65ce5710fb"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000521</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2023-04-05T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2023-03-09</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="21d45946-fc73-4beb-a099-44b3855d975d" name="hospitalizationInfo (Информация о госпитализации)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8ff429da-7606-4405-8a97-b49191c49e6b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о группах здоровья для детей" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="990d7f98-a29b-463e-8212-db2568f05bc4"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"163111"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get Date" id="9278b2b8-9eea-472c-bc2a-fd4545cf0ea9"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 2;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="hospitalizationInfo" id="247cf558-ab61-4ece-9ee3-f9169a982daa"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("PatientHospitalizationInfo","""{
   "domain": "default",
   "ehrUid": "00c343ea-7a82-452e-a238-39431c3145f0",
   "operationType": "create",
   "eventName": "dn_patientHospitalizationInfo",
   "compositionId": "b0d646a1-90ab-4e86-a740-4409bd714b45::default::1",
   "newResults": [
      {
         "compositionId": "b0d646a1-90ab-4e86-a740-4409bd714b45::default::1",
         "templateId": "openEHR-EHR-COMPOSITION.t_ER_patient_hospitalization_info.v1",
         "timeCommitted": "2021-11-15T13:53:17.933203+03:00",
         "patientId": \""""+patientId+"""\",
         "medicalOrganisation": "ГБУЗ ГП №176 ДЗМ",
         "date": \""""+dateLower+"""\",
         "diagnosis": "I25.5"
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="cf94cdf5-e0b1-4ece-8e02-ce761d154a1c"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Проверка HospitalizationInfo" id="e0ba6448-7279-4463-80d6-67753eb80aad"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверка HospitalizationInfo" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="b12473b8-e458-43ad-af75-1f08472787c6" name="Contains"><con:configuration><token>hospitalizationInfo</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>163111</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2023-03-18T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2023-03-17</con:value></con:property></con:properties></con:testCase><con:testCase id="d81b6c65-1065-43f4-b037-5ae154627fc4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений по госпитализациям (топик HospitalizationInfo)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="9388202a-7885-44ee-b377-4c3ebe90341e"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="35a5bb63-b7dd-4a3b-bdbd-b9ad6d606776" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set date &lt;365" id="8b3594cc-df50-46f0-982f-d8b10fb9224e"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 364;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="Set date >365" id="774f5a23-4202-4b2d-b39b-8cfd3ab666a4"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime() - 2;
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "dateLower", currentDate_formatted )
def currentDate2 = today.getTime() - 366;
def currentDate_formatted2 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(currentDate2);
testRunner.testCase.setPropertyValue( "dateLower2", currentDate_formatted2 )</script></con:config></con:testStep><con:testStep type="groovy" name="operation == &quot;create&quot;" id="2d1b7ad5-0372-4743-871d-35d7ffdaf054"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("HospitalizationInfo","""{
    "departmentName": "Департамент 13331",
    "hospitalizationDate": "2023-02-21T23:17:39.8414921",
    "documentUpdateDate": "2023-03-15T19:16:02.772884",
    "hospitalAdmissionDate": """"+dateLower2+"""T23:50:17.9971856",
    "patientId": """+patientId+""",
    "compositionId": "2c948c8a-94ac-4fed-a791-dea6271865cc::default::1",
    "diagnosis": [
        {
            "code": "4444",
            "name": "2222 name(Все плохо)",
            "type": "MAIN",
            "detailedDiagnosis": "Всё еще плохо"
        },
        {
            "code": "3333",
            "name": "2222 name(Все плохо)",
            "type": "TEST",
            "detailedDiagnosis": "Всё плохо"
        }
    ],
    "moName": "Организация медицинская 4444",
    "templateId": "openEHR-EHR-COMPOSITION.t_ER_patient_hospitalization_infoComposition.v2",
    "moId": 102770054444,
    "documentCreateDate": "2023-03-15T19:16:02.771877",
    "documentId": "557927EF-B732-4473-99EE-CD5692DE7118",
    "operation": "create"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="operation == &quot;create&quot; без hospitalAdmissionDate" id="d01d310f-c141-495b-981b-06c3a9b92374"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("HospitalizationInfo","""{
    "departmentName": "Департамент 13331",
    "hospitalizationDate": "2023-02-21T23:17:39.8414921",
    "documentUpdateDate": "2023-03-15T19:16:02.772884",
    "patientId": """+patientId+""",
    "compositionId": "2c948c8a-94ac-4fed-a791-dea6271865cc::default::1",
    "diagnosis": [
        {
            "code": "4444",
            "name": "2222 name(Все плохо)",
            "type": "MAIN",
            "detailedDiagnosis": "Всё еще плохо"
        },
        {
            "code": "3333",
            "name": "2222 name(Все плохо)",
            "type": "TEST",
            "detailedDiagnosis": "Всё плохо"
        }
    ],
    "moName": "Организация медицинская 4444",
    "templateId": "openEHR-EHR-COMPOSITION.t_ER_patient_hospitalization_infoComposition.v2",
    "moId": 102770054444,
    "documentCreateDate": "2023-03-15T19:16:02.771877",
    "documentId": "557927EF-B732-4473-99EE-CD5692DE7120",
    "operation": "create"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="operation == &quot;delete&quot;" id="9abe32b9-90a8-4752-a02c-f42866aac7ff"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("HospitalizationInfo","""{
    "departmentName": "Департамент 13331",
    "hospitalizationDate": "2023-02-21T23:17:39.8414921",
    "documentUpdateDate": "2023-03-15T19:16:02.772884",
    "hospitalAdmissionDate": """"+dateLower2+"""T23:50:17.9971856",
    "patientId": """+patientId+""",
    "compositionId": "2c948c8a-94ac-4fed-a791-dea6271865cc::default::1",
    "diagnosis": [
        {
            "code": "4444",
            "name": "2222 name(Все плохо)",
            "type": "MAIN",
            "detailedDiagnosis": "Всё еще плохо"
        },
        {
            "code": "3333",
            "name": "2222 name(Все плохо)",
            "type": "TEST",
            "detailedDiagnosis": "Всё плохо"
        }
    ],
    "moName": "Организация медицинская 4444",
    "templateId": "openEHR-EHR-COMPOSITION.t_ER_patient_hospitalization_infoComposition.v2",
    "moId": 102770054444,
    "documentCreateDate": "2023-03-15T19:16:02.771877",
    "documentId": "557927EF-B732-4473-99EE-CD5692DE7119",
    "operation": "delete"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="operation !== &quot;create&quot; &quot;delete&quot;" id="37fab126-def3-412f-9a6d-3e1cc21760f5"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("HospitalizationInfo","""{
    "departmentName": "Департамент 13331",
    "hospitalizationDate": "2023-02-21T23:17:39.8414921",
    "documentUpdateDate": "2023-03-15T19:16:02.772884",
    "hospitalAdmissionDate": """"+dateLower2+"""T23:50:17.9971856",
    "patientId": """+patientId+""",
    "compositionId": "2c948c8a-94ac-4fed-a791-dea6271865cc::default::1",
    "diagnosis": [
        {
            "code": "4444",
            "name": "2222 name(Все плохо)",
            "type": "MAIN",
            "detailedDiagnosis": "Всё еще плохо"
        },
        {
            "code": "3333",
            "name": "2222 name(Все плохо)",
            "type": "TEST",
            "detailedDiagnosis": "Всё плохо"
        }
    ],
    "moName": "Организация медицинская 4444",
    "templateId": "openEHR-EHR-COMPOSITION.t_ER_patient_hospitalization_infoComposition.v2",
    "moId": 102770054444,
    "documentCreateDate": "2023-03-15T19:16:02.771877",
    "documentId": "557927EF-B732-4473-99EE-CD5692DE7119",
    "operation": "test"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="operation == &quot;create&quot; минимальный набор полей" id="96fad43e-ddb5-4806-9ef4-37c6883ac486"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("HospitalizationInfo","""{
    "hospitalizationDate": "2023-02-21T23:17:39.8414921",
    "documentUpdateDate": "2023-03-15T19:16:02.772884",
    "hospitalAdmissionDate": """"+dateLower2+"""T23:50:17.9971856",    
    "patientId": """+patientId+""",
    "compositionId": "2c948c8a-94ac-4fed-a791-dea6271865cc::default::1",
    "templateId": "openEHR-EHR-COMPOSITION.t_ER_patient_hospitalization_infoComposition.v2",
    "documentCreateDate": "2023-03-15T19:16:02.771877",
    "documentId": "557927EF-B732-4473-99EE-CD5692DE7118",
    "operation": "create"
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="3dd48d96-ea07-4838-a989-549eb3145f28"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000522</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2023-04-15T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-04-18</con:value></con:property></con:properties></con:testCase><con:testCase id="8c54609c-db04-43e9-a2dd-b8caf9d8644b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений по признаку &quot;госпитализирован на данный момент&quot; (топик HospitalizationSign)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="9adf9a98-06a3-4161-a1ef-c5c1f8a27d13"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="824d3bc0-2771-4c03-a935-69357f682b67" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="hospitalizationSign == true" id="acbd4e7f-7b8c-4b46-8e74-9a0a158cbb6f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("HospitalizationSign","""{
    "patientId": """+patientId+""",
    "hospitalizationSign": true,
    "hospitalizationDocumentId": "b02d621c-d487-4dbe-848b-9b29f6b1331"
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="hospitalizationSign == false" id="2f7a2edb-59ab-45b9-84a9-c080903d5c25"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("HospitalizationSign","""{
    "patientId": """+patientId+""",
    "hospitalizationSign": false
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="hospitalizationSign == true без hospitalizationDocumentId" id="8e889c8d-f470-4d0a-8c56-97919d1f67e5"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def dateLower2=testRunner.testCase.getPropertyValue("dateLower2")

sendMessageToKafka("HospitalizationSign","""{
    "patientId": """+patientId+""",
    "hospitalizationSign": true
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="9b31367f-9d9a-4afc-8520-56c2269bac9e"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000393</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2023-03-15T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2022-03-18</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property></con:properties></con:testSuite><con:testSuite id="c9220ab7-f277-4316-90d8-ec42137d52a9" name="immunoDiagnostic (Иммунодиагностика)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2bcf8f9e-1809-43ce-9c1a-2894e5d331bf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#111461" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patient" id="e1716bd0-f714-4f3e-9bb5-b59318a02c2c"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="a3a4d269-bb4b-410a-924c-61c1d76645c0" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="e4207f07-570f-4547-b2da-6d380b6ca0b6"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
String file =scripts.returnFileAsText("create")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check immunoDiagnostics" id="d2579c7b-d716-4a77-82af-16d9299a6f9c"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check immunoDiagnostics" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="dde77dc5-02dd-41b8-8573-ad82ea383ca3" name="JsonPath Match"><con:configuration><path>$.hits.hits..immunoDiagnostics</path><content>[[{"immunoTestDate":"2022-03-11","immunoTestKind":"Диаскинтест","school":1,"compositionId":"953139a4-66af-4144-b6b2-${#TestCase#patientId}::default::1","referralDate":"2022-03-11","immunoTestKindCode":"2","medicalRoomId":"2886"}]]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000337</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnostic (Иммунодиагностика)\ImmunoResult shool образовательная организация.json</con:value></con:property></con:properties></con:testCase><con:testCase id="9a7acae4-58d1-4240-822c-aa9bed182f59" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#111525" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patient" id="b46dd367-c9d9-4110-8b99-6baa532b27e9"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="2e7f4392-4d82-4b20-8fa6-81669e56ce6e" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="134c26f0-e50b-42bd-b55d-9533085a36b2"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
String file =scripts.returnFileAsText("create")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check immunoDiagnostics" id="c8af16cd-26e9-40f4-a174-006d5bc7ed9e"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check immunoDiagnostics" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="dde77dc5-02dd-41b8-8573-ad82ea383ca3" name="JsonPath Match"><con:configuration><path>$.hits.hits..immunoDiagnostics</path><content>[[{"immunoTestDate":"2022-07-08","immunoTestKind":"Проба Манту","school":0,"compositionId":"fbad009f-7bfd-4d75-8940-7969d9aa207a::default::1","referralDate":"2022-07-11","immunoTestKindCode":"1"}]]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000266</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnostic (Иммунодиагностика)\ImmunoResult shool поликлиника.json</con:value></con:property></con:properties></con:testCase><con:testCase id="6ec29ca7-74d8-4edd-a943-9214b0e2d1e2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#111599" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patient" id="7268ff5b-03d8-4aac-ad26-0f836d8a4084"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="cf86ad71-42ba-4ff5-82de-ec4e21241f49" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="bd424dac-b7e8-4a46-b87b-f2fa25ca478f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
String file =scripts.returnFileAsText("create")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check immunoDiagnostics" id="5b17d2f9-857a-4aed-9dde-2e9ace4aa9a5"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check immunoDiagnostics" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="dde77dc5-02dd-41b8-8573-ad82ea383ca3" name="JsonPath Match"><con:configuration><path>$.hits.hits..immunoDiagnostics</path><content>[]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000269</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnostic (Иммунодиагностика)\ImmunoResult accepted is false.json</con:value></con:property></con:properties></con:testCase><con:testCase id="02888c4d-dbcf-407f-9527-7c6cd7601b8e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#111600" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patient" id="777dcafe-c0e2-4132-b772-d6ca2030a8d6"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="65312416-316c-4c9d-9e4b-922da49f5037" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="a0ae3f31-910a-4823-ab1e-fb6b6a611408"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
String file =scripts.returnFileAsText("create")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check immunoDiagnostics" id="30841252-4b39-4f13-97d3-8d171d48f643"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check immunoDiagnostics" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="dde77dc5-02dd-41b8-8573-ad82ea383ca3" name="JsonPath Match"><con:configuration><path>$.hits.hits..immunoDiagnostics</path><content>[[{"immunoTestDate":"2022-07-08","immunoTestKind":"Проба Манту","school":0,"compositionId":"fbad009f-7bfd-4d75-8940-7969d9aa207a::default::1","referralDate":"2022-07-11","immunoTestKindCode":"1"}]]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000270</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnostic (Иммунодиагностика)\ImmunoResult complete.json</con:value></con:property></con:properties></con:testCase><con:testCase id="e75e2cfd-355a-4824-97de-7567b6e73472" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#111601" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patient" id="9bf5c40f-1aae-48e4-b28a-872982e11d75"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="e868e0e6-bef3-4314-807b-c4b250a42c24" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="d48c4fbe-ccf8-4c3f-be34-2804a914f68f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
String file =scripts.returnFileAsText("create")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check immunoDiagnostics" id="32e47928-1a22-45ac-975e-23cbedae0123"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check immunoDiagnostics" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="dde77dc5-02dd-41b8-8573-ad82ea383ca3" name="JsonPath Match"><con:configuration><path>$.hits.hits..immunoDiagnostics</path><content>[[{"immunoTestDate":"2022-07-08","immunoTestKind":"Проба Манту","school":0,"compositionId":"fbad009f-7bfd-4d75-8940-7969d9aa207a::default::1","referralDate":"2022-07-11","immunoTestKindCode":"1"}]]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000271</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnostic (Иммунодиагностика)\ImmunoResult operation !.json</con:value></con:property></con:properties></con:testCase><con:testCase id="299dd396-eeee-4772-a8c7-87ab22e6d839" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#111602" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patient" id="595a6f40-9bf3-48fe-ae5a-b573628ebb86"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="a38b0bf9-61af-4ecb-86db-02281f46019a" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="534b4289-3cb9-4497-a0db-c0a38e78ef80"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
String file =scripts.returnFileAsText("create")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check immunoDiagnostics" id="b9379d17-1377-4b55-8d2c-3edbca218a99"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check immunoDiagnostics" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="dde77dc5-02dd-41b8-8573-ad82ea383ca3" name="JsonPath Match"><con:configuration><path>$.hits.hits..immunoDiagnostics</path><content>[]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000272</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnostic (Иммунодиагностика)\ImmunoResult shool is null.json</con:value></con:property></con:properties></con:testCase><con:testCase id="9d1925ea-683e-4d2a-990d-136df7bcb5b1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#236759" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patient" id="31eac46d-38e7-461f-91f3-f038d4fc1ef7"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="4c8ce4a4-30ee-466e-8b18-dc2d10fe8eb9" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Create" id="a9dc17ee-7377-45f9-8d50-c383714cddce"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
String file =scripts.returnFileAsText("create")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check immunoDiagnostics" id="a56a034f-268d-485c-a77e-7fd42d6a9463"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check immunoDiagnostics" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="JsonPath Match" id="dde77dc5-02dd-41b8-8573-ad82ea383ca3" name="JsonPath Match"><con:configuration><path>$.hits.hits..immunoDiagnostics</path><content>[[{"immunoTestDate":"2022-03-11","immunoTestKind":"Диаскинтест","school":1,"compositionId":"953139a4-66af-4144-b6b2-${#TestCase#patientId}::default::1","referralDate":"2022-03-11","immunoTestKindCode":"2","medicalRoomId":"2886"}]]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="65046e36-e9df-4a3b-b7bb-2f95cad68c65"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic")
String file =scripts.returnFileAsText("delete")
def patientId =testRunner.testCase.getPropertyValue("patientId")
String message = file.replace("\$patientId",patientId)
//return message
scripts. sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="restrequest" name="Check immunoDiagnostics delete" id="a175a9e5-ea8b-44d0-a2cc-eebc0a7d5740"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check immunoDiagnostics delete" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="3827b207-80f0-4562-80dc-5e0c9bf1276b" name="Not Contains"><con:configuration><token>immunoDiagnostic</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000275</con:value></con:property><con:property><con:name>delete</con:name><con:value>\immunoDiagnostic (Иммунодиагностика)\ImmunoResult delete.json</con:value></con:property><con:property><con:name>create</con:name><con:value>\immunoDiagnostic (Иммунодиагностика)\ImmunoResult shool образовательная организация.json</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>limit</con:name><con:value>100</con:value></con:property><con:property><con:name>patientId</con:name><con:value>1000000</con:value></con:property><con:property><con:name>topic</con:name><con:value>ImmunoResult</con:value></con:property></con:properties></con:testSuite><con:testSuite id="a1a96198-12ba-455b-bd5f-e3517dcc40e3" name="patientInfo (Информация о пациенте)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="4bfb98ab-9110-4628-aa1f-90ab444192db" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование общих данных о пациенте из топика" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="a124646c-7742-41d6-a87e-cd9034736561"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="1e04efa3-9f23-4f51-b9a6-dcc08ba94d5f" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="death false" id="08696196-cb47-4fd8-a5b4-0cec77ce096f"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPersonalData","""{
   "id": 1928138,
   "operationDate": "2022-07-11T10:48:13.759+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "V3147770",
   "patientType": "I",
   "systemCode": "sch",
   "patientRecStatus": "Y",
   "entityName": "personalData",
   "entityData": [
      {
         "attributes": [
            {
               "name": "lastName",
               "type": "string",
               "value": {
                  "value": "Фамилия"
               }
            },
            {
               "name": "firstName",
               "type": "string",
               "value": {
                  "value": "Имя"
               }
            },
            {
               "name": "middleName",
               "type": "string",
               "value": {
                  "value": "Отчество"
               }
            },
            {
               "name": "birthDate",
               "type": "date",
               "value": {
                  "value": "2022-02-28"
               }
            },
            {
               "name": "birthPlace",
               "type": "string",
               "value": {
                  "value": "v_birth_place"
               }
            },
            {
               "name": "gender",
               "type": "dictionary",
               "value": {
                  "code": "2"
               }
            },
            {
               "name": "socialStatus",
               "type": "dictionary",
               "value": {
                  "id": 128650422,
                  "code": "3",
                  "value": "Работающий"
               }
            },
            {
               "name": "armyCode",
               "type": "string",
               "value": {
                  "value": "q"
               }
            },
            {
               "name": "isDependent",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "educationState",
               "type": "dictionary",
               "value": {
                  "id": 156496744,
                  "code": "6",
                  "value": "высшее"
               }
            },
            {
               "name": "citizenship",
               "type": "dictionary",
               "value": {
                  "id": 125676888,
                  "code": "178",
                  "value": "Республика Конго"
               }
            },
            {
               "name": "ethnicGroup",
               "type": "dictionary",
               "value": {
                  "id": 128650302,
                  "code": "11",
                  "value": "Грузины"
               }
            },
            {
               "name": "resident",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "Город"
               }
            },
            {
               "name": "disability",
               "type": "dictionary",
               "value": {
                  "code": "2",
                  "value": "нет"
               }
            },
            {
               "name": "comment",
               "type": "string",
               "value": {
                  "value": "v_additional_info"
               }
            },
            {
               "name": "erzSyncDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "personIdErzl",
               "type": "guid",
               "value": {
                  "value": "2adef495-b318-0146-e053-c0a8c27103b8"
               }
            },
            {
               "name": "nonresIdErzl",
               "type": "integer",
               "value": {
                  "value": "1323"
               }
            },
            {
               "name": "nonresDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "erzStatus",
               "type": "string",
               "value": {
                  "value": "Y"
               }
            },
            {
               "name": "deathDateTime",
               "type": "dateTime",
               "value": {
                  "value": null
               }
            },
            {
               "name": "deathDataSource",
               "type": "string",
               "value": {
                  "value": "21.02.22"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="death update дата меньше" id="eab62b7b-1773-4928-ac4b-02a0131bc155"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPersonalData","""{
   "id": 1928138,
   "operationDate": "2022-02-19T10:48:13.759+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "V3147770",
   "patientType": "I",
   "systemCode": "sch",
   "patientRecStatus": "Y",
   "entityName": "personalData",
   "entityData": [
      {
         "attributes": [
            {
               "name": "lastName",
               "type": "string",
               "value": {
                  "value": "Фамилия2"
               }
            },
            {
               "name": "firstName",
               "type": "string",
               "value": {
                  "value": "Имя2"
               }
            },
            {
               "name": "middleName",
               "type": "string",
               "value": {
                  "value": "Отчество2"
               }
            },
            {
               "name": "birthDate",
               "type": "date",
               "value": {
                  "value": "1996-01-16"
               }
            },
            {
               "name": "birthPlace",
               "type": "string",
               "value": {
                  "value": "v_birth_place"
               }
            },
            {
               "name": "gender",
               "type": "dictionary",
               "value": {
                  "code": "1"
               }
            },
            {
               "name": "socialStatus",
               "type": "dictionary",
               "value": {
                  "id": 128650422,
                  "code": "3",
                  "value": "Работающий"
               }
            },
            {
               "name": "armyCode",
               "type": "string",
               "value": {
                  "value": "q"
               }
            },
            {
               "name": "isDependent",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "educationState",
               "type": "dictionary",
               "value": {
                  "id": 156496744,
                  "code": "6",
                  "value": "высшее"
               }
            },
            {
               "name": "citizenship",
               "type": "dictionary",
               "value": {
                  "id": 125676888,
                  "code": "178",
                  "value": "Республика Конго"
               }
            },
            {
               "name": "ethnicGroup",
               "type": "dictionary",
               "value": {
                  "id": 128650302,
                  "code": "11",
                  "value": "Грузины"
               }
            },
            {
               "name": "resident",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "Город"
               }
            },
            {
               "name": "disability",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "нет"
               }
            },
            {
               "name": "comment",
               "type": "string",
               "value": {
                  "value": "v_additional_info"
               }
            },
            {
               "name": "erzSyncDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "personIdErzl",
               "type": "guid",
               "value": {
                  "value": "2adef495-b318-0146-e053-c0a8c27103b8"
               }
            },
            {
               "name": "nonresIdErzl",
               "type": "integer",
               "value": {
                  "value": "1323"
               }
            },
            {
               "name": "nonresDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "erzStatus",
               "type": "string",
               "value": {
                  "value": "Y"
               }
            },
            {
               "name": "deathDateTime",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "deathDataSource",
               "type": "string",
               "value": {
                  "value": "21.02.22"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="death update" id="b314c911-245c-462f-81a2-27becb446700"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPersonalData","""{
   "id": 1928138,
   "operationDate": "2022-02-22T10:48:13.759+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "V3147770",
   "patientType": "I",
   "systemCode": "sch",
   "patientRecStatus": "Y",
   "entityName": "personalData",
   "entityData": [
      {
         "attributes": [
            {
               "name": "lastName",
               "type": "string",
               "value": {
                  "value": "Фамилия2"
               }
            },
            {
               "name": "firstName",
               "type": "string",
               "value": {
                  "value": "Имя2"
               }
            },
            {
               "name": "middleName",
               "type": "string",
               "value": {
                  "value": "Отчество2"
               }
            },
            {
               "name": "birthDate",
               "type": "date",
               "value": {
                  "value": "1996-01-16"
               }
            },
            {
               "name": "birthPlace",
               "type": "string",
               "value": {
                  "value": "v_birth_place"
               }
            },
            {
               "name": "gender",
               "type": "dictionary",
               "value": {
                  "code": "1"
               }
            },
            {
               "name": "socialStatus",
               "type": "dictionary",
               "value": {
                  "id": 128650422,
                  "code": "3",
                  "value": "Работающий"
               }
            },
            {
               "name": "armyCode",
               "type": "string",
               "value": {
                  "value": "q"
               }
            },
            {
               "name": "isDependent",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "educationState",
               "type": "dictionary",
               "value": {
                  "id": 156496744,
                  "code": "6",
                  "value": "высшее"
               }
            },
            {
               "name": "citizenship",
               "type": "dictionary",
               "value": {
                  "id": 125676888,
                  "code": "178",
                  "value": "Республика Конго"
               }
            },
            {
               "name": "ethnicGroup",
               "type": "dictionary",
               "value": {
                  "id": 128650302,
                  "code": "11",
                  "value": "Грузины"
               }
            },
            {
               "name": "resident",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "Город"
               }
            },
            {
               "name": "comment",
               "type": "string",
               "value": {
                  "value": "v_additional_info"
               }
            },
            {
               "name": "erzSyncDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "personIdErzl",
               "type": "guid",
               "value": {
                  "value": "2adef495-b318-0146-e053-c0a8c27103b8"
               }
            },
            {
               "name": "nonresIdErzl",
               "type": "integer",
               "value": {
                  "value": "1323"
               }
            },
            {
               "name": "nonresDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "erzStatus",
               "type": "string",
               "value": {
                  "value": "Y"
               }
            },
            {
               "name": "deathDateTime",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "deathDataSource",
               "type": "string",
               "value": {
                  "value": "21.02.22"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="без инвалидности" id="7e90e9af-dbdc-4561-96b6-710fc38390ac"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPersonalData","""{
   "id": 1928138,
   "operationDate": "2022-03-13T10:48:13.759+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "V3147770",
   "patientType": "I",
   "systemCode": "sch",
   "patientRecStatus": "Y",
   "entityName": "personalData",
   "entityData": [
      {
         "attributes": [
            {
               "name": "lastName",
               "type": "string",
               "value": {
                  "value": "Фамилия"
               }
            },
            {
               "name": "firstName",
               "type": "string",
               "value": {
                  "value": "Имя"
               }
            },
            {
               "name": "middleName",
               "type": "string",
               "value": {
                  "value": "Отчество"
               }
            },
            {
               "name": "birthDate",
               "type": "date",
               "value": {
                  "value": "1958-06-10"
               }
            },
            {
               "name": "birthPlace",
               "type": "string",
               "value": {
                  "value": "v_birth_place"
               }
            },
            {
               "name": "gender",
               "type": "dictionary",
               "value": {
                  "code": "2"
               }
            },
            {
               "name": "socialStatus",
               "type": "dictionary",
               "value": {
                  "id": 128650422,
                  "code": "3",
                  "value": "Работающий"
               }
            },
            {
               "name": "armyCode",
               "type": "string",
               "value": {
                  "value": "q"
               }
            },
            {
               "name": "isDependent",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "educationState",
               "type": "dictionary",
               "value": {
                  "id": 156496744,
                  "code": "6",
                  "value": "высшее"
               }
            },
            {
               "name": "citizenship",
               "type": "dictionary",
               "value": {
                  "id": 125676888,
                  "code": "178",
                  "value": "Республика Конго"
               }
            },
            {
               "name": "ethnicGroup",
               "type": "dictionary",
               "value": {
                  "id": 128650302,
                  "code": "11",
                  "value": "Грузины"
               }
            },
            {
               "name": "resident",
               "type": "dictionary",
               "value": {
                  "code": "1",
                  "value": "Город"
               }
            },
            {
               "name": "comment",
               "type": "string",
               "value": {
                  "value": "v_additional_info"
               }
            },
            {
               "name": "erzSyncDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "personIdErzl",
               "type": "guid",
               "value": {
                  "value": "2adef495-b318-0146-e053-c0a8c27103b8"
               }
            },
            {
               "name": "nonresIdErzl",
               "type": "integer",
               "value": {
                  "value": "1323"
               }
            },
            {
               "name": "nonresDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-21T10:44:25+03:00"
               }
            },
            {
               "name": "erzStatus",
               "type": "string",
               "value": {
                  "value": "Y"
               }
            },
            {
               "name": "deathDateTime",
               "type": "dateTime",
               "value": {
                  "value": null
               }
            },
            {
               "name": "deathDataSource",
               "type": "string",
               "value": {
                  "value": "21.02.22"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="97743074-3fce-419e-a514-4f7250f3976f"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000380</con:value></con:property></con:properties></con:testCase><con:testCase id="410197ce-55c1-4fe4-8b6e-4a82765ff61e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование данных о полисе пациента из топика" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="147b0d7f-46a9-469b-b496-98975ccaa09d"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"12461"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get Date" id="0bb54cd4-9641-4281-835a-de903a4ef931"><con:settings/><con:config><script>def today = Calendar.getInstance();
today.set(Calendar.HOUR_OF_DAY, 0);
today.set(Calendar.MINUTE, 0);
today.set(Calendar.SECOND, 0);
today.set(Calendar.MILLISECOND, 0);
def currentDate = today.getTime()
def currentDate_formatted = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(currentDate);
testRunner.testCase.setPropertyValue( "date", currentDate_formatted )</script></con:config></con:testStep><con:testStep type="groovy" name="ErpChangePatientPolicies" id="acdc938e-87d7-4f1a-bd21-560935a3428b"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 30000000525780,
  "operationDate": "2021-12-06T11:09:48.973+03:00",
  "emiasId": \""""+patientId+"""\",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": [
    {
      "attributes": [
        {
          "name": "policyOMSType",
          "type": "dictionary",
          "value": {
            "code": "N",
            "value": "полис ОМС единого образца"
          }
        },
        {
          "name": "policyNumber",
          "type": "string",
          "value": {
            "value": "50529308890014001"
          }
        },
        {
          "name": "policyBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyEndDate",
          "type": "date",
          "value": {
            "value": "2099-12-31"
          }
        },
        {
          "name": "policySMO",
          "type": "dictionary",
          "value": {
            "id": 134750071,
            "code": "10002291",
            "value": "ОМО"
          }
        },
        {
          "name": "isExternalSMO",
          "type": "boolean",
          "value": {
            "value": "false"
          }
        },
        {
          "name": "policyInsuranceTerritoryName",
          "type": "string",
          "value": {
            "value": "г.Москва"
          }
        },
        {
          "name": "policyInsuranceTerritoryCode",
          "type": "string",
          "value": {
            "value": "45000"
          }
        },
        {
          "name": "policySMOOGRN",
          "type": "string",
          "value": {
            "value": "1027739008440"
          }
        },
        {
          "name": "policySMOBeginDate",
          "type": "date",
          "value": {
            "value": "2018-07-30"
          }
        },
        {
          "name": "policyStatus",
          "type": "dictionary",
          "value": {
            "code": "Y",
            "value": "действует"
          }
        },
        {
          "name": "policyChangeDate",
          "type": "dateTime",
          "value": {
            "value": "2021-12-14T10:54:54.926154+03:00"
          }
        }
      ]
    }
  ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="без entityData" id="e46b9f94-5188-4f67-8cf6-89b4b347be00"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientPolicies","""{
  "id": 8226,
  "operationDate": \""""+date+"""\",
  "emiasId": \""""+patientId+"""\",
  "uklErp": "30000000525780",
  "patientType": "I",
  "patientRecStatus": "Y",
  "entityName": "policies",
  "entityData": []
}
""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Проверка policyNumber" id="acb61c2b-7c7f-41ad-ade7-9fb5d3dd17b8"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Проверка policyNumber" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple Contains" id="b12473b8-e458-43ad-af75-1f08472787c6" name="Contains"><con:configuration><token>policyNumber</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>12461</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2021-12-26T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2021-12-26</con:value></con:property><con:property><con:name>date</con:name><con:value>2022-04-05T00:00:00</con:value></con:property></con:properties></con:testCase><con:testCase id="98ef9e93-f2ec-483f-bbf3-c9348afcb5d0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование данных о контактах пациента из топика" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Поиск пациента" id="368dd782-ef76-43f6-b0a8-aea242888479"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Поиск пациента" id="3fd00108-310c-4fb4-8c21-4c6f2963d49c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"163511"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.vacregistry.test.emias.mos.ru/default_vaccination/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Main" id="63f3c17a-cbf6-4143-907f-9d1e1149e272"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientContacts","""{
   "id": 5146566,
   "operationDate": "2022-02-08T19:00:51.092+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "20309545",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "contacts",
   "entityData": [
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "27017111"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866535"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "M",
                  "value": "Мобильный телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-09T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737693"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866536"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "T",
                  "value": "Домашний телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-08T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737688"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "araik.bagdasaryan@mail.ru"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "E",
                  "value": "Электронная почта"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-05T18:44:27.324439+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Дата меньше" id="2e12f795-bc21-451c-8b73-e251865a8aee"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientContacts","""{
   "id": 5146566,
   "operationDate": "2022-02-08T19:00:51.092+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "20309545",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "contacts",
   "entityData": [
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "27017111"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866534"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "M",
                  "value": "Мобильный телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-07T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737693"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866535"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "T",
                  "value": "Домашний телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-08T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737688"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "araik.bagdasaryan@mail.ru"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "E",
                  "value": "Электронная почта"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-05T18:44:27.324439+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="Дата больше" id="3483d264-c655-43df-b1a4-5f88537cf5b0"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def areaId=testRunner.testCase.getPropertyValue("areaId")
def date=testRunner.testCase.getPropertyValue("date")

sendMessageToKafka("ErpChangePatientContacts","""{
   "id": 5146566,
   "operationDate": "2022-02-08T19:00:51.092+03:00",
   "emiasId": """+patientId+""",
   "uklErp": "20309545",
   "patientType": "I",
   "patientRecStatus": "Y",
   "entityName": "contacts",
   "entityData": [
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "27017111"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866536"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "M",
                  "value": "Мобильный телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "true"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-10T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737693"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "9100866535"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "T",
                  "value": "Домашний телефон"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-08T18:44:46.859339+03:00"
               }
            }
         ]
      },
      {
         "attributes": [
            {
               "name": "contactId",
               "type": "integer",
               "value": {
                  "value": "28737688"
               }
            },
            {
               "name": "contactValue",
               "type": "string",
               "value": {
                  "value": "araik.bagdasaryan@mail.ru"
               }
            },
            {
               "name": "contactType",
               "type": "dictionary",
               "value": {
                  "code": "E",
                  "value": "Электронная почта"
               }
            },
            {
               "name": "contactAllowNotification",
               "type": "boolean",
               "value": {
                  "value": "false"
               }
            },
            {
               "name": "contactChangeDate",
               "type": "dateTime",
               "value": {
                  "value": "2022-02-05T18:44:27.324439+03:00"
               }
            }
         ]
      }
   ]
}""")</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000325</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property></con:properties></con:testSuite><con:testSuite id="a3532f54-e6a9-4b8a-80de-e12b21e700fa" name="physicalEducationGroup (Физкультурная группа здоровья)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="3569235b-1354-4635-bc85-7074a6457071" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Формирование сведений о медицинских группах для занятий физической культурой" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Find patientId" id="a1a6d382-4d78-48ed-8945-dbd9d797c487"><con:settings/><con:config><script>limit =testRunner.testCase.testSuite.project.getPropertyValue("limit").toInteger()

patientId =testRunner.testCase.testSuite.project.getPropertyValue("patientId").toInteger()

patientFound = false

i=0

while (patientFound==false &amp;&amp; i&lt;limit){

	testRunner.testCase.setPropertyValue("patientId", patientId.toString())

	testRunner.runTestStepByName( "search")

	obj = context.testCase.getTestStepByName("search")
	
	assertions = obj.getAssertionList()
	//errors=assertions[0].getErrors().toString()
	//log.info assertions[4].status
	patientId=patientId+1
	
	assertions.each{ //log.info(it.name + ' --> ' + it.status)
		stat = (it.status).toString()
		//log.info stat
	 	 if(stat == "VALID"){
	 	 	log.info " статус "+stat+" пациент "+(patientId-1)
	 	 	testRunner.testCase.testSuite.project.setPropertyValue("patientId",patientId.toString())
			patientFound=true
	   }
	}
	i=i+1
}
  </script></con:config></con:testStep><con:testStep type="restrequest" name="search" id="75e84f59-fd79-4fc2-b3de-a96366b65fec" disabled="true"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="search" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:assertion type="Simple NotContains" id="8d52577f-6d09-444d-9a3c-2d2bfa3b78cd" name="Not Contains"><con:configuration><token>patientId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="isAnnulled = false" id="09e3496c-e453-4f0f-a5a0-e5f76635b151"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("JuvenileClinicalExaminationChange","""
{
    "patientId": \""""+patientId+"""\",
    "childrenHealthGroup": {
        "childrenHealthGroupCode": "1",
        "childrenHealthGroupName": "I группа",
        "dateConclusion": "2018-11-13",
        "isAnnulled": false
    },
    "physicalEducationGroup": {
        "physicalEducationGroupCode": "2",
        "physicalEducationGroupName": "II (подготовительная)",
        "dateConclusion": "2020-01-10",
        "isAnnulled": false
    }
}""")</script></con:config></con:testStep><con:testStep type="groovy" name="isAnnulled = true" id="293d1872-e0e1-4153-a62e-b67fe9909c22"><con:settings/><con:config><script>import org.apache.kafka.clients.*
import org.apache.kafka.clients.producer.Callback
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.RecordMetadata
import java.time.*

import groovy.sql.Sql
//if (context.dbConnect != null) {      
//  sql = context.dbConnect;

username =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_user")
password =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_password")
dbconstring =testRunner.testCase.testSuite.project.getPropertyValue("db_rir2_con")
bootstrapServers =testRunner.testCase.testSuite.project.getPropertyValue("bootstrapServers")

def sendMessageToKafka(String topicName, String textMessage){

  Properties props = new Properties()
  props.put('zk.connect', '10.2.172.24:2181')
  props.put('bootstrap.servers', bootstrapServers)
  props.put('key.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
  props.put('value.serializer', 'org.apache.kafka.common.serialization.StringSerializer')
     
  def producer = new KafkaProducer(props)
  
  def messageSender = { String topic, String message ->
      log.info( "messageSender: "+topic+"; "+message )
      def key =  UUID.randomUUID().toString()
      def Date date = new Date(); 
     def  long  timestamp= date.getTime()
     def int partition =0
      String compoundMessage = "$message"
      producer.send(
              new ProducerRecord&lt;String, String>(topic, partition, timestamp,  key, compoundMessage),
              { RecordMetadata metadata, Exception e ->
                  log.info( "The offset of the record we just sent is: ${metadata.offset()}")
              } as Callback
      )
  }

  String msg =textMessage.toString()
  //log.info(topic1+" "+messageCreateMf)
   messageSender(topicName, msg)
   
   producer.close() 
}

def patientId=testRunner.testCase.getPropertyValue("patientId")
def dateLower=testRunner.testCase.getPropertyValue("dateLower")

sendMessageToKafka("JuvenileClinicalExaminationChange","""
{
    "patientId": \""""+patientId+"""\",
    "childrenHealthGroup": {
        "childrenHealthGroupCode": "1",
        "childrenHealthGroupName": "I группа",
        "dateConclusion": "2018-11-14",
        "isAnnulled": true
    },
    "physicalEducationGroup": {
        "physicalEducationGroupCode": "2",
        "physicalEducationGroupName": "II (подготовительная)",
        "dateConclusion": "2020-01-11",
        "isAnnulled": true
    }
}""")</script></con:config></con:testStep><con:testStep type="restrequest" name="Check Patient" id="e68f3f49-bc08-4329-b412-2bb4d5c8e78a"><con:settings/><con:config service="http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru" methodName="_search" resourcePath="/default_registry/_search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Check Patient" id="da114997-8e92-4c1f-b8b6-43cdc396fd3a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru</con:endpoint><con:request>{"size":20,"track_total_hits":false,"query":{"match":{"patientId":"${#TestCase#patientId}"}}}</con:request><con:originalUri>http://ehr-index-elasticsearch.svc-emias-registry.test.emias.mos.ru/default_registry/_search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>1000520</con:value></con:property><con:property><con:name>directory</con:name><con:value>\Реестр\t_dispensary_observation_programComposition create.json</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2021-12-22T00:00:00</con:value></con:property><con:property><con:name>dateLower2</con:name><con:value>2021-12-22</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>DNclinicalExamination</con:value></con:property></con:properties></con:testSuite><con:testSuite id="fe51a3b6-d8f9-4135-93cc-7cd7cbea7eaa" name="selfcontrolDispensaryQuestionnaire"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="4592d421-acf0-49f5-a9b1-8df988221f44" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#276291" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePatient" id="7ddedbba-286e-4733-85c6-06e3ff892c43"><con:settings/><con:config><script>def randomNumber = new Random().nextInt(999001) + 1000
def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("patientId", randomNumber.toString())
testRunner.testCase.setPropertyValue("uid", randomuid.toString())

log.info randomNumber</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="b24d2e2d-ffd1-4dd1-8dfd-17a8a2d5474a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
String file =scripts.returnFileAsText("Create")

// Переменные
def patientId =testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

String message = file.replace("\$patientId",patientId).replace("\$uid",uid)
//return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>750343</con:value></con:property><con:property><con:name>Create</con:name><con:value>\Реестр\t_selfcontrol_dispensary_questionnaireComposition create.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>863238</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-03-26</con:value></con:property><con:property><con:name>dateLower_yesterday</con:name><con:value>2023-03-26</con:value></con:property><con:property><con:name>dateLower_today</con:name><con:value>2023-03-27</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-17T13:31:37</con:value></con:property></con:properties></con:testCase><con:testCase id="26ef34ac-5a5e-446c-8c2d-70f07d015ae5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#276292" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePatient" id="e16eda51-c2bb-4efd-bf77-0f30c950e474"><con:settings/><con:config><script>def randomNumber = new Random().nextInt(999001) + 1000
def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("patientId", randomNumber.toString())
testRunner.testCase.setPropertyValue("uid", randomuid.toString())

log.info randomNumber</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="c88d3c84-879a-4ab2-83ee-82d6b69e4661"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
String file =scripts.returnFileAsText("update")

// Переменные
def patientId =testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

String message = file.replace("\$patientId",patientId).replace("\$uid",uid)
//return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>750343</con:value></con:property><con:property><con:name>update</con:name><con:value>\Реестр\t_selfcontrol_dispensary_questionnaireComposition update.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>863239</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-03-26</con:value></con:property><con:property><con:name>dateLower_yesterday</con:name><con:value>2023-03-26</con:value></con:property><con:property><con:name>dateLower_today</con:name><con:value>2023-03-27</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-17T13:31:37</con:value></con:property></con:properties></con:testCase><con:testCase id="8ff0df8e-9e87-46c2-b0be-cb9d977aa547" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="#276293" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePatient" id="21604a85-a1e8-418d-805a-bbacc9f97ae0"><con:settings/><con:config><script>def randomNumber = new Random().nextInt(999001) + 1000
def randomuid = new Random().nextInt(999001) + 1000
testRunner.testCase.setPropertyValue("patientId", randomNumber.toString())
testRunner.testCase.setPropertyValue("uid", randomuid.toString())

log.info randomNumber</script></con:config></con:testStep><con:testStep type="groovy" name="Create" id="9ece721e-2b72-43e3-8490-ae15d4b66b6e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
String file =scripts.returnFileAsText("create")

// Переменные
def patientId =testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

String message = file.replace("\$patientId",patientId).replace("\$uid",uid)
//return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:testStep type="groovy" name="Delete" id="d916c07a-a9a7-421d-82dc-a94f1bed8e60"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
def topic =testRunner.testCase.testSuite.getPropertyValue("topic4")
String file =scripts.returnFileAsText("update")

// Переменные
def patientId =testRunner.testCase.getPropertyValue("patientId")
def uid=testRunner.testCase.getPropertyValue("uid")

String message = file.replace("\$patientId",patientId).replace("\$uid",uid)
//return message
scripts.sendMessageToKafka(topic, message)</script></con:config></con:testStep><con:properties><con:property><con:name>patientId</con:name><con:value>256515</con:value></con:property><con:property><con:name>delete</con:name><con:value>\Реестр\t_selfcontrol_dispensary_questionnaireComposition delete.json</con:value></con:property><con:property><con:name>uid</con:name><con:value>968191</con:value></con:property><con:property><con:name>dateLower</con:name><con:value>2022-03-26</con:value></con:property><con:property><con:name>dateLower_yesterday</con:name><con:value>2023-03-26</con:value></con:property><con:property><con:name>dateLower_today</con:name><con:value>2023-03-27</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-17T13:31:37</con:value></con:property><con:property><con:name>create</con:name><con:value>\Реестр\t_selfcontrol_dispensary_questionnaireComposition create.json</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>topic</con:name><con:value>t_dispensary_observation_programComposition</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>topicFix</con:name><con:value>t_dispensary_observation_programComposition.patientregistry</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>dbType</con:name><con:value>postgre</con:value></con:property><con:property><con:name>dbLogin</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>dn</con:value></con:property><con:property><con:name>registryLogin</con:name><con:value>erp_dn_view</con:value></con:property><con:property><con:name>registryPassword</con:name><con:value>wd#0311FD8</con:value></con:property><con:property><con:name>registryConnect</con:name><con:value>@//10.0.49.100:1521/erptest</con:value></con:property><con:property><con:name>registryTestLogin</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestPassword</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestConnect</con:name><con:value>@//10.2.172.16:1521/patient_registry.mosgorzdrav.local</con:value></con:property><con:property><con:name>limit</con:name><con:value>100</con:value></con:property><con:property><con:name>patientId</con:name><con:value>1000000</con:value></con:property><con:property><con:name>topic2</con:name><con:value>card_of_call_embulanceComposition</con:value></con:property><con:property><con:name>topic3</con:name><con:value>t_dispensary_at_home_proactive_questionnaireComposition</con:value></con:property><con:property><con:name>topic4</con:name><con:value>t_selfcontrol_dispensary_questionnaireComposition</con:value></con:property><con:property><con:name>topic5</con:name><con:value>t_dispensary_at_home_proactive_questionnaireComposition</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>dbType</con:name><con:value>postgre</con:value></con:property><con:property><con:name>dbLogin</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>dn</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.172.90:5432/dn</con:value></con:property><con:property><con:name>registryLogin</con:name><con:value>erp_dn_view</con:value></con:property><con:property><con:name>registryPassword</con:name><con:value>wd#0311FD8</con:value></con:property><con:property><con:name>registryConnect</con:name><con:value>@//10.0.49.100:1521/erptest</con:value></con:property><con:property><con:name>registryTestLogin</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestPassword</con:name><con:value>PATIENT_REGISTRY_TEST</con:value></con:property><con:property><con:name>registryTestConnect</con:name><con:value>@//10.2.172.16:1521/patient_registry.mosgorzdrav.local</con:value></con:property><con:property><con:name>limit</con:name><con:value>100</con:value></con:property><con:property><con:name>patientId</con:name><con:value>1000524</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:jmsConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest"><con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to ReadyAPI functional tests

// If hardcoding the token, uncomment and change line 5
// token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script></con:eventHandlers><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new java.io.FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new java.io.PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script></con:eventHandlers><con:authRepository/><con:tags/><con:sensitiveInformation/></con:soapui-project>