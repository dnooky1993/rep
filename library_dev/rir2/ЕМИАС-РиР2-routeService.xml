<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="e9f055a8-badb-4bcf-887d-9d6e3eba3f5b" activeEnvironment="Default" name="ЕМИАС.РиР2 routeService" resourceRoot="" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" id="fbe1bcbe-5c0e-4983-9066-01a0edc00553" wsaVersion="NONE" name="routeServiceBinding" type="wsdl" bindingName="{http://emias.mos.ru/supp/rir2/routeService/v1/}routeServiceBinding" soapVersion="1_2" anonymous="optional" definition="http://arschedule.rir2.test.emias.mos.ru/api/Route?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://arschedule.rir2.test.emias.mos.ru/api/Route?wsdl"><con:part><con:url>http://arschedule.rir2.test.emias.mos.ru/api/Route?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="routeService" targetNamespace="http://emias.mos.ru/supp/rir2/routeService/v1/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns:tns="http://emias.mos.ru/supp/rir2/routeService/v1/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:nsf="http://emias.mos.ru/system/v1/faults/" xmlns:ns1="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/">
  <wsdl:documentation>Версия 1.0.0</wsdl:documentation>
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
      <xs:import namespace="http://emias.mos.ru/system/v1/faults/" schemaLocation="http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=../../system/v1/emias.system.v1.faults.xsd"/>
      <xs:import namespace="http://emias.mos.ru/supp/rir2/routeService/v1/types/" schemaLocation="http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=supp.rir2.routeService.v1.types.xsd"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="archiveRouteOutput">
    <wsdl:part element="ns1:archiveRouteResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getRouteOutput">
    <wsdl:part element="ns1:getRouteResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchRoutesInput">
    <wsdl:part element="ns1:searchRoutesRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchRoutesForAssignmentInput">
    <wsdl:part element="ns1:searchRoutesForAssignmentRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="restoreArchivedRouteInput">
    <wsdl:part element="ns1:restoreArchivedRouteRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchRoutesOutput">
    <wsdl:part element="ns1:searchRoutesResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="restoreArchivedRouteOutput">
    <wsdl:part element="ns1:restoreArchivedRouteResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userContext">
    <wsdl:documentation>Контекст пользователя</wsdl:documentation>
    <wsdl:part element="uctx:userContext" name="userContext"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getRouteInput">
    <wsdl:part element="ns1:getRouteRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getRouteHistoryInput">
    <wsdl:part element="ns1:getRouteHistoryRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createRouteOutput">
    <wsdl:part element="ns1:createRouteResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="editRouteInput">
    <wsdl:part element="ns1:editRouteRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getRouteHistoryOutput">
    <wsdl:part element="ns1:getRouteHistoryResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="editRouteOutput">
    <wsdl:part element="ns1:editRouteResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="archiveRouteInput">
    <wsdl:part element="ns1:archiveRouteRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createRouteInput">
    <wsdl:part element="ns1:createRouteRequest" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchRoutesForAssignmentOutput">
    <wsdl:part element="ns1:searchRoutesForAssignmentResponse" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="fault">
    <wsdl:documentation>Ошибка</wsdl:documentation>
    <wsdl:part element="nsf:fault" name="body"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="routeServicePortType">
    <wsdl:documentation>Описание методов работы с Маршрутами движения пациентов</wsdl:documentation>
    <wsdl:operation name="archiveRoute">
      <wsdl:documentation>Метод перевода маршрута в архив</wsdl:documentation>
      <wsdl:input message="tns:archiveRouteInput"></wsdl:input>
      <wsdl:output message="tns:archiveRouteOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createRoute">
      <wsdl:documentation>Метод создания маршрута</wsdl:documentation>
      <wsdl:input message="tns:createRouteInput"></wsdl:input>
      <wsdl:output message="tns:createRouteOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="editRoute">
      <wsdl:documentation>Метод редактирования маршрута</wsdl:documentation>
      <wsdl:input message="tns:editRouteInput"></wsdl:input>
      <wsdl:output message="tns:editRouteOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getRouteHistory">
      <wsdl:documentation>Метод получения истории маршрута</wsdl:documentation>
      <wsdl:input message="tns:getRouteHistoryInput"></wsdl:input>
      <wsdl:output message="tns:getRouteHistoryOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getRoute">
      <wsdl:documentation>Метод получения сведений о маршруте</wsdl:documentation>
      <wsdl:input message="tns:getRouteInput"></wsdl:input>
      <wsdl:output message="tns:getRouteOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="restoreArchivedRoute">
      <wsdl:documentation>Метод перевода маршрута их архива</wsdl:documentation>
      <wsdl:input message="tns:restoreArchivedRouteInput"></wsdl:input>
      <wsdl:output message="tns:restoreArchivedRouteOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchRoutesForAssignment">
      <wsdl:documentation>Метод поиска маршрутов для назначения</wsdl:documentation>
      <wsdl:input message="tns:searchRoutesForAssignmentInput"></wsdl:input>
      <wsdl:output message="tns:searchRoutesForAssignmentOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchRoutes">
      <wsdl:documentation>Метод поиска маршрутов</wsdl:documentation>
      <wsdl:input message="tns:searchRoutesInput"></wsdl:input>
      <wsdl:output message="tns:searchRoutesOutput"></wsdl:output>
      <wsdl:fault message="tns:fault" name="fault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="routeServiceBinding" type="tns:routeServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="archiveRoute">
      <soap:operation soapAction="archiveRoute"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createRoute">
      <soap:operation soapAction="createRoute"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="editRoute">
      <soap:operation soapAction="editRoute"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getRouteHistory">
      <soap:operation soapAction="getRouteHistory"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getRoute">
      <soap:operation soapAction="getRoute"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="restoreArchivedRoute">
      <soap:operation soapAction="restoreArchivedRoute"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchRoutesForAssignment">
      <soap:operation soapAction="searchRoutesForAssignment"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="searchRoutes">
      <soap:operation soapAction="searchRoutes"/>
      <wsdl:input>
        <soap:header message="tns:userContext" part="userContext" use="literal"></soap:header>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="fault">
        <soap:fault name="fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="routeService">
    <wsdl:port binding="tns:routeServiceBinding" name="routeServicePort">
      <soap:address location="http://arschedule.rir2.test.emias.mos.ru/api/Route"/>
    </wsdl:port>
    <wsp:PolicyReference URI="#authPolicy"/>
  </wsdl:service>
  <wsp:Policy wsu:Id="authPolicy">
    <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
      <wsp:Policy>
        <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
          <wsp:Policy>
            <sp:NoPassword/>
          </wsp:Policy>
        </sp:UsernameToken>
      </wsp:Policy>
    </sp:SupportingTokens>
  </wsp:Policy>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=../../system/v1/emias.system.v1.userContext.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/userContext/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/system/v1/userContext/">
  <xs:include schemaLocation="http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=../../core/v1/emias.core.v1.xsd"/>
  <xs:element name="userContext" type="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserContext">
    <xs:annotation>
      <xs:documentation>Контекст пользователя</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="systemName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Шифр системы-потребителя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя пользователя (логин)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRoleId" type="ID">
        <xs:annotation>
          <xs:documentation>Код Роли</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isUserRoleSystemWide" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Общесистемная Роль"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="userRights">
        <xs:annotation>
          <xs:documentation>Коллекция Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Код Полномочия</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="jobExecutionId" type="ID"/>
      <xs:element minOccurs="0" name="hostIp" type="xs:string">
        <xs:annotation>
          <xs:documentation>IP адрес хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hostName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Имя хоста</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="options" type="Options">
        <xs:annotation>
          <xs:documentation>Набор именованных значений</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=../../core/v1/emias.core.v1.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=../../system/v1/emias.system.v1.xsd"/>
  <!--references-->
  <xs:element name="medicalOrganizationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинской организации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="medicalFacilityId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--async operation status-->
  <xs:element name="operationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор операции</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OperationExecutionStatus">
    <xs:annotation>
      <xs:documentation>Статус выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isCompleted" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак окончания выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="completenessProgress" type="OperationCompletenessBase">
        <xs:annotation>
          <xs:documentation>Сведения о текущем статусе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="hasSucceded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак успешности выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
        <xs:annotation>
          <xs:documentation>Коллекция сообщений, порожденных в ходе выполнения операции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор операции</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType abstract="false" name="OperationCompletenessPercentage">
    <xs:annotation>
      <xs:documentation>Описание текущего статуса выполнения операции в процентах (0%-100%)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OperationCompletenessBase">
        <xs:sequence>
          <xs:element name="completenessStatus">
            <xs:annotation>
              <xs:documentation>Статус (0%-100%)</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:unsignedByte">
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="100"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="OperationCompletenessBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания текущего статуса выполнения операции</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--calling methods' options-->
  <xs:element name="options" type="Options">
    <xs:annotation>
      <xs:documentation>Параметры вызова метода</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Options">
    <xs:annotation>
      <xs:documentation>Набор именованных значений</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entry" type="KeyValuePair">
        <xs:annotation>
          <xs:documentation>Именованное значение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--pagination-->
  <xs:element name="pagingOptions" type="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="PagingResults">
    <xs:annotation>
      <xs:documentation>Список с пагинацией</xs:documentation>
    </xs:annotation>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageTotal" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Общее количество страниц</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="morePagesAvailable" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>Флаг доступности других страниц с результатами для "постраничного листания" (true - если доступны еще страницы; false - иначе)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="PagingOptions">
    <xs:annotation>
      <xs:documentation>Параметры пагинации</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="sortingOptions"/>
    </xs:sequence>
    <xs:attribute name="pageNumber" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Номер страницы (zero-based)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageSize" type="xs:int" use="required">
      <xs:annotation>
        <xs:documentation>Размер страницы</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--sorting-->
  <xs:element name="sortingOptions" type="SortingOptions">
    <xs:annotation>
      <xs:documentation>Параметры сортировки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SortingOptions">
    <xs:annotation>
      <xs:documentation>Условия сортировки</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="3" name="sortOrder" type="SortOrder">
        <xs:annotation>
          <xs:documentation>Условия сортировки
						(используются в соответствии с
						переданной последовательностью)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SortOrder">
    <xs:annotation>
      <xs:documentation>Сортировка</xs:documentation>
    </xs:annotation>
    <xs:attribute name="attributeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Наименование поля, по которому должна быть произведена сортировка</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute default="false" name="desceding" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Направление сортировки</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--void response-->
  <xs:element fixed="true" name="result">
    <xs:annotation>
      <xs:documentation>Элемент для использования в методах, не предполагающих возврат какого-либо значения</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:boolean"/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <!--base types-->
  <xs:complexType name="TimeInterval">
    <xs:annotation>
      <xs:documentation>Временной период (время)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время начала интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:time">
        <xs:annotation>
          <xs:documentation>Время окончания интервала</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriod">
    <xs:annotation>
      <xs:documentation>Временной период (дата)</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="start" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата начала периода</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="end" type="xs:date">
        <xs:annotation>
          <xs:documentation>Дата окончания периода</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=../../system/v1/emias.system.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--error message description-->
  <xs:complexType name="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений об ошибках</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="message" type="ErrorMessage">
        <xs:annotation>
          <xs:documentation>Сообщение об ошибке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ErrorMessage">
    <xs:annotation>
      <xs:documentation>Сообщение об ошибке</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Message">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameters">
            <xs:annotation>
              <xs:documentation>Коллекция параметров сообщения</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="parameter" type="KeyValuePair">
                  <xs:annotation>
                    <xs:documentation>Параметр сообщения</xs:documentation>
                  </xs:annotation>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Сопутствующие сообщения об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="ErrorMessageTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип сообщения</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ErrorMessageTypes">
    <xs:annotation>
      <xs:documentation>Тип сообщения об ошибке</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>Ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Предупреждение (не блокирующая ошибка)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>Информационное сообщение</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  <xs:simpleType name="GUID">
    <xs:annotation>
      <xs:documentation>Глобальный 128-битный идентификатор (Globally Unique Identifier)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="KeyValuePair">
    <xs:annotation>
      <xs:documentation>Представляет тип "ключ/значение"</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="key" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Ключ</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="Message">
    <xs:annotation>
      <xs:documentation>Сообщение</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string">
        <xs:annotation>
          <xs:documentation>Код сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:string">
        <xs:annotation>
          <xs:documentation>Текст сообщения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=../../system/v1/emias.system.v1.faults.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2017 rel. 3 sp1 (x64) (http://www.altova.com) by Vladimir Makarov (Private)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/system/v1/faults/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:uctx="http://emias.mos.ru/system/v1/userContext/" xmlns="http://emias.mos.ru/system/v1/faults/">
  <xs:include schemaLocation="http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=../../system/v1/emias.system.v1.xsd"/>
  <xs:import namespace="http://emias.mos.ru/system/v1/userContext/" schemaLocation="http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=../../system/v1/emias.system.v1.userContext.xsd"/>
  <!--faults-->
  <xs:element name="fault" type="BaseFault">
    <xs:annotation>
      <xs:documentation>Базовый тип ошибки</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SecurityFault">
    <xs:annotation>
      <xs:documentation>Ошибка безопасности</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element ref="uctx:userContext"/>
          <xs:choice>
            <xs:element name="unauthorizedRequestSecurityException" type="UnauthorizedRequestSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="otherSecurityException" type="OtherSecurityException">
              <xs:annotation>
                <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute fixed="SECURITY" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BusinessFault">
    <xs:annotation>
      <xs:documentation>Бизнес ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="messages" type="ErrorMessageCollection">
            <xs:annotation>
              <xs:documentation>Коллекция Сообщений об ошибках</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasErrors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак наличия ошибок в списке сообщений</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="BUSINESS" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="UnexpectedFault">
    <xs:annotation>
      <xs:documentation>Непредвиденная ошибка</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseFault">
        <xs:sequence>
          <xs:element name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>Версия продукта-сервиса</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackTrace">
            <xs:annotation>
              <xs:documentation>Стек вызова (последние 10  записей)</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="10" name="stackTraceRecord">
                  <xs:annotation>
                    <xs:documentation>Запись StackTrace</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="declaringClass" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование класса, содержащего метод</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="methodName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование метода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="fileName" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>Наименование файла</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element minOccurs="0" name="lineNumber" type="xs:int">
                        <xs:annotation>
                          <xs:documentation>Номер строки кода</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="UNEXPECTED" name="type" type="FaultTypes" use="required">
          <xs:annotation>
            <xs:documentation>Тип ошибки</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="BaseFault">
    <xs:annotation>
      <xs:documentation>Описание базового типа описания ошибки</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <!--security exceptions-->
  <xs:complexType name="UnauthorizedRequestSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа UNAUTHORIZED_REQUEST_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="requiredRights">
        <xs:annotation>
          <xs:documentation>Перечень идентификаторов недостающих Полномочий пользователя</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="userRightId" type="ID">
              <xs:annotation>
                <xs:documentation>Идентификатор Полномочия пользователя</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="UNAUTHORIZED_REQUEST_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OtherSecurityException">
    <xs:annotation>
      <xs:documentation>Исключение безопасности типа OTHER_SECURITY_EXCEPTION</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="message" type="Message">
        <xs:annotation>
          <xs:documentation>Сообщение</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute fixed="OTHER_SECURITY_EXCEPTION" name="type" type="SecurityExceptionTypes" use="required">
      <xs:annotation>
        <xs:documentation>Тип исключения безопасности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:simpleType name="SecurityExceptionTypes">
    <xs:annotation>
      <xs:documentation>Типы исключений безопасности</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNAUTHORIZED_REQUEST_EXCEPTION"/>
      <xs:enumeration value="OTHER_SECURITY_EXCEPTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--components-->
  <xs:simpleType name="FaultTypes">
    <xs:annotation>
      <xs:documentation>Тип ошибки</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="SECURITY">
        <xs:annotation>
          <xs:documentation>Непредвиденная ошибка приложения</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BUSINESS">
        <xs:annotation>
          <xs:documentation>Бизнес ошибка</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNEXPECTED">
        <xs:annotation>
          <xs:documentation>Ошибка безопасности</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=supp.rir2.routeService.v1.types.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/routeService/v1/types/" version="Версия 1.1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:route="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:core="http://emias.mos.ru/supp/rir2/core/v1/" xmlns="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/">
  <xs:import namespace="http://emias.mos.ru/supp/rir2/route/core/v1/" schemaLocation="http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=supp.rir2.route.core.v1.xsd"/>
  <xs:import namespace="http://emias.mos.ru/supp/rir2/core/v1/" schemaLocation="http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=supp.rir2.core.v1.xsd"/>
  <xs:element name="archiveRouteRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода archiveRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routeId" type="core:ID"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="archiveRouteResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода archiveRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="core:result"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createRouteRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода createRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="params" type="route:RouteCreationParams"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createRouteResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода createRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="route" type="route:Route"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="editRouteRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода editRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="params" type="route:RouteEditParams"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="editRouteResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода editRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="core:result"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getRouteHistoryRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getRouteHistory</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routeId" type="core:ID"/>
        <xs:element minOccurs="0" name="eventsStartDate" type="xs:dateTime"/>
        <xs:element minOccurs="0" name="eventsEndDate" type="xs:dateTime"/>
        <xs:element minOccurs="0" name="pagingOptions" type="core:PagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getRouteHistoryResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getRouteHistory</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="journalListPage" type="route:JournalListPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getRouteRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода getRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routeId" type="core:ID"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getRouteResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода getRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="route" type="route:Route"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="restoreArchivedRouteRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода restoreArchivedRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routeId" type="core:ID"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="restoreArchivedRouteResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода restoreArchivedRoute</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="core:result"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchRoutesForAssignmentRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода searchRoutesForAssignment</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="params" type="route:SearchRoutesForAssignmentRequest"/>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchRoutesForAssignmentResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода searchRoutesForAssignment</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routesPage" type="route:RoutesPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchRoutesRequest">
    <xs:annotation>
      <xs:documentation>Входные параметры метода searchRoutes</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="params" type="route:SearchRoutesParams"/>
        <xs:element minOccurs="0" ref="core:pagingOptions"/>
        <xs:element minOccurs="0" ref="core:options"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="searchRoutesResponse">
    <xs:annotation>
      <xs:documentation>Выходные параметры метода searchRoutes</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="routesPage" type="route:RoutesPage"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=supp.rir2.route.core.v1.xsd</con:url><con:content><![CDATA[<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/route/core/v1/" version="Версия 1.1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:core="http://emias.mos.ru/supp/rir2/core/v1/" xmlns="http://emias.mos.ru/supp/rir2/arScheduleService/v1/types/">
  <xs:import namespace="http://emias.mos.ru/supp/rir2/core/v1/" schemaLocation="http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=supp.rir2.core.v1.xsd"/>
  <xs:complexType name="Route">
    <xs:annotation>
      <xs:documentation>Маршрут движения пациентов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="document" type="xs:string"/>
      <xs:element name="created" type="xs:dateTime"/>
      <xs:element name="updated" type="xs:dateTime"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="diagnosis" type="core:Diagnosis"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="referralPositionProfile" type="core:PositionProfile"/>
      <xs:element name="receivingTreatmentCategoryCode" type="xs:string"/>
      <xs:element maxOccurs="unbounded" name="receivingTreatment" type="core:Treatment"/>
      <xs:element name="receivingMedicalOrganizationId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="receivingMedicalFacilityId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" name="referralMedicalOrganizationId" type="core:ID"/>
      <xs:element name="needReferral" type="xs:boolean"/>
    </xs:sequence>
    <xs:attribute name="id" type="core:ID" use="required"/>
    <xs:attribute name="number" type="xs:string" use="required"/>
    <xs:attribute name="isActive" type="xs:boolean" use="required"/>
  </xs:complexType>
  <xs:complexType name="RouteCreationParams">
    <xs:annotation>
      <xs:documentation>Параметры создания маршрута</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="document" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="diagnosisId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="referralPositionProfileId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" name="receivingTreatmentId" type="core:ID"/>
      <xs:element name="receivingMedicalOrganizationId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="receivingMedicalFacilityId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" name="referralMedicalOrganizationId" type="core:ID"/>
      <xs:element name="needReferral" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RouteEditParams">
    <xs:annotation>
      <xs:documentation>Параметры изменения маршрута</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="core:ID"/>
      <xs:element name="document" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="diagnosisId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="referralPositionProfileId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" name="receivingTreatmentId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="receivingMedicalFacilityId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" name="referralMedicalOrganizationId" type="core:ID"/>
      <xs:element name="needReferral" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SearchRoutesParams">
    <xs:annotation>
      <xs:documentation>Параметры поиска маршрутов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:sequence>
        <xs:element minOccurs="0" name="isActive" type="xs:boolean"/>
        <xs:element minOccurs="0" name="number" type="xs:string"/>
        <xs:element minOccurs="0" name="document" type="xs:string"/>
        <xs:element minOccurs="0" name="diagnosisCode" type="xs:string"/>
        <xs:element minOccurs="0" name="referralPositionProfileCode" type="xs:string"/>
        <xs:element minOccurs="0" name="referralMedicalOrganizationId" type="core:ID"/>
        <xs:element minOccurs="0" name="receivingMedicalOrganizationId" type="core:ID"/>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="receivingMedicalFacilityId" type="core:ID"/>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="receivingTreatmentCode" type="xs:string"/>
        <xs:element minOccurs="0" name="needReferral" type="xs:boolean"/>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SearchRoutesForAssignmentRequest">
    <xs:annotation>
      <xs:documentation>Параметры поиска маршрутов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:sequence>
        <xs:element minOccurs="0" name="diagnosisId" type="core:ID"/>
        <xs:element minOccurs="1" name="referralPositionProfileCode" type="xs:string"/>
        <xs:element maxOccurs="unbounded" minOccurs="1" name="referralMedicalOrganizationId" type="core:ID"/>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="receivingTreatmentId" type="core:ID"/>
        <xs:element minOccurs="1" name="receivingTreatmentCategoryCode" type="xs:string"/>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MedicalObject">
    <xs:annotation>
      <xs:documentation>Информация о мед. учреждении</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="core:ID"/>
      <xs:element name="title" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MedicalOrganizationWithTitle">
    <xs:annotation>
      <xs:documentation>Медицинская организация с доп информацией</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="medicalOrganization" type="tns:MedicalObject"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="medicalFacility" type="tns:MedicalObject"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="EventType">
    <xs:annotation>
      <xs:documentation>Тип изменения маршрута</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="CREATE"/>
      <xs:enumeration value="EDIT"/>
      <xs:enumeration value="ARCHIVE"/>
      <xs:enumeration value="RESTORE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="RoutesPage">
    <xs:annotation>
      <xs:documentation>Страница элементов информации о маршрутах</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="items" type="tns:Route"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="JournalListPage">
    <xs:annotation>
      <xs:documentation>Страница элементов с журналом маршрута</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:PagingResults">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="journalListItem" type="tns:JournalListItem"></xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RouteChanges">
    <xs:annotation>
      <xs:documentation>Сведения об изменениях маршрута</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="diagnosisCode" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="referralMedicalPosition" type="core:PositionProfile"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="receivingTreatmentId" type="core:ID"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="referralMedicalOrganization" type="tns:MedicalOrganizationWithTitle"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="receivingMedicalOrganization" type="tns:MedicalOrganizationWithTitle"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ChangeDetails">
    <xs:annotation>
      <xs:documentation>Сведения о деталях изменения маршрута</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="isActive" type="xs:boolean"/>
      <xs:element minOccurs="0" name="document" type="xs:string"/>
      <xs:element minOccurs="0" name="adding" type="tns:RouteChanges"/>
      <xs:element minOccurs="0" name="deletion" type="tns:RouteChanges"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="JournalListItem">
    <xs:annotation>
      <xs:documentation>Элемент журнала маршрута</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="eventType" type="tns:EventType"/>
      <xs:element name="eventDateTime" type="xs:dateTime"/>
      <xs:element name="authorMedicalOrganizationId" type="core:ID"/>
      <xs:element name="authorJobExecutionId" type="core:ID"/>
      <xs:element name="changeDetails" type="tns:ChangeDetails"/>
    </xs:sequence>
    <xs:attribute name="id" type="core:ID" use="required"/>
    <xs:attribute name="routeId" type="core:ID" use="required"/>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=supp.rir2.core.v1.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2011 rel. 2 (http://www.altova.com) by DIT (DIT)-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://emias.mos.ru/supp/rir2/core/v1/" version="Версия 1.3.2" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://emias.mos.ru/supp/rir2/core/v1/">
  <xs:include schemaLocation="http://arschedule.rir2.test.emias.mos.ru/api/Route?xsd=../../core/v1/emias.core.v1.xsd"/>
  <!--rules components-->
  <xs:complexType name="TreatmentsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Медицинских манипуляций</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Медицинской манипуляции</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MedicalFacilityIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Медицинских манипуляций</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="medicalFacilityId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Медицинского учреждения</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AgeGroupsIdCollection">
    <xs:annotation>
      <xs:documentation>Коллекция идентификаторов Возрастных групп</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="ageGroupId" type="ID">
        <xs:annotation>
          <xs:documentation>Идентификатор Возрастной группы</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RuleTimeInterval">
    <xs:annotation>
      <xs:documentation>Временной интервал Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TimeInterval">
        <xs:sequence>
          <xs:element name="start" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время начала интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:time">
            <xs:annotation>
              <xs:documentation>Время окончания интервала</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="RuleTypeId">
    <xs:annotation>
      <xs:documentation>Идентификатор типа Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:simpleType name="LocationId">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ID"/>
  </xs:simpleType>
  <xs:complexType name="RuleDatePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Правила расписания</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!--excluded dates definition-->
  <xs:complexType name="ExcludedDates">
    <xs:annotation>
      <xs:documentation>Описание исключаемых дней</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="excludedDay" type="xs:date">
        <xs:annotation>
          <xs:documentation>Исключаемые даты</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="isExcludedHoliday" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Признак "Исключая праздничные дни" (в соответствии с производственным
                        календарем)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="7" minOccurs="0" name="excludedDayOfWeek" type="DayOfWeekNumber">
        <xs:annotation>
          <xs:documentation>Исключаемые дни недели</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--date templates definitions-->
  <xs:complexType name="DayOfMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно в заданные даты каждого календарного месяца"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="31" name="dayOfMonth" type="DayOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер дня месяца (число от 1 до 31)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekByMonthDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "Ежемесячно по дням недели" (например, каждый 3-й понедельник месяца)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="5" name="week" type="WeekOfMonthNumber">
            <xs:annotation>
              <xs:documentation>Номер недели месяца (число от 1 до 5)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SpecialDayDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "В конкретные даты" (например, 25 января 2015 года и т. д)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="day" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EvenDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По четным или нечетным числам"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element name="isEven" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак «Четные числа»</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DayOfWeekDatesTemplate">
    <xs:annotation>
      <xs:documentation>Шаблон дат "По дням недели"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatesTemplate">
        <xs:sequence>
          <xs:element maxOccurs="7" name="dayOfWeek" type="DayOfWeekNumber">
            <xs:annotation>
              <xs:documentation>Номер дня недели (число от 1 до 7)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="DatesTemplate">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип описания Шаблона дат</xs:documentation>
    </xs:annotation>
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="dayOfWeek">
    <xs:annotation>
      <xs:documentation>День недели</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:int">
        <xs:minInclusive value="1"/>
        <xs:maxInclusive value="7"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <!--templates components-->
  <xs:simpleType name="DayOfWeekNumber">
    <xs:annotation>
      <xs:documentation>Номер дня недели</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="7"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DayOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер дня месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="31"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="WeekOfMonthNumber">
    <xs:annotation>
      <xs:documentation>Номер недели месяца</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedByte">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="5"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources schedule-->
  <xs:complexType name="CompositeResourceSchedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="compositeResource" type="CompositeResource">
            <xs:annotation>
              <xs:documentation>Композитный ресурс</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceScheduleInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Расписании композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceScheduleBase">
        <xs:sequence>
          <xs:element name="scheduleInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Расписании МО/МУ, которому принадлежит Расписание СДР</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="schedulePeriod"/>
                <xs:element ref="scheduleActiveState"/>
              </xs:sequence>
              <xs:attribute name="isLocked" type="xs:boolean" use="optional">
                <xs:annotation>
                  <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность
                                        внесения изменений в определение его содержания</xs:documentation>
                </xs:annotation>
              </xs:attribute>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceScheduleBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Расписание композитного ресурса"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="resourceScheduleStatus">
            <xs:annotation>
              <xs:documentation>Статус</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="completeness" type="xs:unsignedByte">
            <xs:annotation>
              <xs:documentation>Полнота расписания</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceScheduleStatus" type="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статус Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceScheduleStatuses">
    <xs:annotation>
      <xs:documentation>Статусы Расписания композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="NOT_DEFINED"/>
      <xs:enumeration value="DIRTY"/>
      <xs:enumeration value="READY"/>
      <xs:enumeration value="CALCULATION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopySarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="SarScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SarScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания СДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CopyArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР подлежащих копированию</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ArScheduleRuleTypeKinds">
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
      <xs:enumeration value="SERVICED_MEDICAL_FACILITY_RESTRICTION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ArScheduleRuleTypeKinds">
    <xs:annotation>
      <xs:documentation>Виды Типов правил расписания ДР</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="WORK_TIME_DEFINITION"/>
      <xs:enumeration value="REJECTION"/>
      <xs:enumeration value="TREATMENT_REDEFINITION"/>
      <xs:enumeration value="AGE_GROUP_RESTRICTION"/>
      <xs:enumeration value="LOCATION_REDEFINITION"/>
      <xs:enumeration value="ROUTE_REDEFINITION"/>
      <xs:enumeration value="SERVICED_MEDICAL_FACILITY_RESTRICTION"/>
    </xs:restriction>
  </xs:simpleType>
  <!--composite resources-->
  <xs:complexType name="SpecialAvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Специальный доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="Equipment">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Специализированный кабинет"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="SPECIAL_AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AvailableResource">
    <xs:annotation>
      <xs:documentation>Сущность "Доступный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="parent" type="JobExecution">
            <xs:annotation>
              <xs:documentation>Родительская сущность "Исполнение должности"</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute fixed="AVAILABLE_RESOURCE" name="kind" type="ResourceKinds" use="required">
          <xs:annotation>
            <xs:documentation>Вид Композитного ресурса</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResource">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ResourceBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="info" type="CompositeResourceInfo">
            <xs:annotation>
              <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceWithTreatments">
    <xs:annotation>
      <xs:documentation>Сущность "Композитный ресурс" со сведениями о проводимых манипуляциях.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="directMedicalOrganization" type="ID"/>
      <xs:element maxOccurs="unbounded" name="treatmentId" type="ID"/>
      <xs:element name="resource" type="CompositeResourceForAssignment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceForAssignment">
    <xs:annotation>
      <xs:documentation>Краткие сведения о ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="title" type="xs:string"/>
      <xs:element name="medicalOrganization" type="MedicalOrganizationShort"/>
      <xs:element name="medicalFacility" type="MedicalFacilityShort"/>
    </xs:sequence>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="MedicalOrganizationShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MedicalFacilityShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения о Медицинской организации</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="shortName" type="xs:string"/>
          <xs:element name="addressObject" type="AddressObjectShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressObjectShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об Адресном объекте</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressShort" type="AddressShort"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AddressShort">
    <xs:annotation>
      <xs:documentation>Краткие сведения об адресе</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="addressString" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CompositeResourceInfo">
    <xs:annotation>
      <xs:documentation>Сведения о Композитном ресурсе</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="resourceKind">
        <xs:annotation>
          <xs:documentation>Вид Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parentId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="parentTypeId" type="ID">
        <xs:annotation>
          <xs:documentation>Хранит идентификатор типа сущности, принадлежащей ЕМИАС.СКУУ.СВМР, на основании которой
						был сформирован Композитный ресурс.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="type" type="CompositeResourceType">
        <xs:annotation>
          <xs:documentation>Тип Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalOrganizationId">
        <xs:annotation>
          <xs:documentation>Идентификатор МО, которой принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="department" type="Department">
        <xs:annotation>
          <xs:documentation>Структурное подразделение МО, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="functionTitle" type="xs:string">
        <xs:annotation>
          <xs:documentation>Наименование функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="functionVolume" type="xs:float">
        <xs:annotation>
          <xs:documentation>Объем функции Композитного ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="medicalFacilityId">
        <xs:annotation>
          <xs:documentation>Идентификатор МУ, которому принадлежит Композитный ресурс</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="location" type="Location">
        <xs:annotation>
          <xs:documentation>Локация, связанная с Композитным ресурсом</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CompositeResourceType">
    <xs:annotation>
      <xs:documentation>Сведения о типе Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ResourceBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип для описания сущности "Композитный ресурс"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="syncStatus" type="ResourceSyncStatuses">
            <xs:annotation>
              <xs:documentation>Статус синхронизации</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="parameters" type="ResourceParameterCollection">
            <xs:annotation>
              <xs:documentation>Параметры</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ResourceParameterCollection">
    <xs:annotation>
      <xs:documentation>Коллекция Параметров ресурса</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="parameter" type="ResourceParameter">
        <xs:annotation>
          <xs:documentation>Параметр ресурса</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResourceParameter">
    <xs:annotation>
      <xs:documentation>Параметр ресурса</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="KeyValuePair">
        <xs:attribute name="ownerSystemName" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Владелец параметра (шифр системы-потребителя, породившего параметр)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="resourceKind" type="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Вид Композитного ресурса</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="ResourceKinds">
    <xs:annotation>
      <xs:documentation>Виды Композитного ресурса</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="AVAILABLE_RESOURCE"/>
      <xs:enumeration value="SPECIAL_AVAILABLE_RESOURCE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResourceSyncStatuses">
    <xs:annotation>
      <xs:documentation>Статусы синхронизации Композитных ресурсов</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="IN_PROGRESS"/>
      <xs:enumeration value="PROCESSING"/>
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
    </xs:restriction>
  </xs:simpleType>
  <!--MO/MU shedule and its components-->
  <xs:complexType name="Schedule">
    <xs:annotation>
      <xs:documentation>Сущность "Расписаниие МО/МУ"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionedEntityBase">
        <xs:sequence>
          <xs:element ref="medicalFacilityId"/>
          <xs:element ref="schedulePeriod"/>
          <xs:element ref="scheduleActiveState"/>
        </xs:sequence>
        <xs:attribute name="isMo" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак принадлежности расписания МО</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isLocked" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак блокировки Расписания МО/МУ, определяющий невозможность внесения
                            изменений в определение его содержания</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="scheduleId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="locationId" type="ID">
    <xs:annotation>
      <xs:documentation>Идентификатор локации</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="scheduleActiveState" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>Статус "Действующее" для Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="schedulePeriod" type="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SchedulePeriod">
    <xs:annotation>
      <xs:documentation>Период действия Расписания МО/МУ</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DatePeriod">
        <xs:sequence>
          <xs:element name="start" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата начала периода</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="end" type="xs:date">
            <xs:annotation>
              <xs:documentation>Дата окончания периода</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeekDefinition">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursForDayOfWeek">
    <xs:annotation>
      <xs:documentation>Сведения о расписании в конкретный день</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="dayOfWeek"/>
      <xs:element minOccurs="0" name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>Комментарий пользователя</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="workHours" type="RuleTimeInterval">
          <xs:annotation>
            <xs:documentation>Временной интервал рабочих часов Медицинского учреждения</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="WorkHoursCollection">
    <xs:annotation>
      <xs:documentation>Сведения о расписании работы учереждения</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="7" minOccurs="0" name="workHoursForDayOfWeek" type="WorkHoursForDayOfWeekDefinition">
        <xs:annotation>
          <xs:documentation>Элемент Сведения о расписании в конкретный день</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--business entities which belong to SVMR and their components-->
  <xs:complexType name="JobExecution">
    <xs:annotation>
      <xs:documentation>Сущность "Исполнение должности"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование должности в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор должности (в соответствии с Номенклатурой должностей
                                медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="employee" type="Employee">
            <xs:annotation>
              <xs:documentation>Сведения о работнике МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionVolume" type="xs:float">
            <xs:annotation>
              <xs:documentation>Ставка</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobExecutionPeriod">
            <xs:annotation>
              <xs:documentation>Период исполнения должности</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:complexContent>
                <xs:restriction base="DatePeriod">
                  <xs:sequence>
                    <xs:element name="start" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата начала периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element minOccurs="0" name="end" type="xs:date">
                      <xs:annotation>
                        <xs:documentation>Дата окончания периода</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:restriction>
              </xs:complexContent>
            </xs:complexType>
          </xs:element>
          <xs:element ref="medicalOrganizationId"/>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="maternityLeave" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак "Декретный отпуск"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultMedicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ в котором "по умолчанию" осуществляется деятельность
                                работника</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="positionProfile" type="PositionProfile"/>
        </xs:sequence>
        <xs:attribute name="isResource" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Признак "Композитный ресурс"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Location">
    <xs:annotation>
      <xs:documentation>Сущность "Локация"</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignEntityBase">
        <xs:sequence>
          <xs:element name="roomTitle" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование кабинета (номер на табличке двери кабинета)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="stage" type="xs:short">
            <xs:annotation>
              <xs:documentation>Этаж, на котором располагается Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="subBuilding" type="xs:string">
            <xs:annotation>
              <xs:documentation>Корпус (строение) - используется в случае, если по адресу Адресного
                                объекта располагается несколько "корпусов"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="building" type="Building">
            <xs:annotation>
              <xs:documentation>Сведения об Адресном объекте</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="specialization" type="Specialization">
            <xs:annotation>
              <xs:documentation>Специализация</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="medicalFacilityId">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ, которому принадлежит Локация</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignEntityBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:attribute name="archived" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>Признак "Архивная сущность"</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EquipmentProfile">
    <xs:annotation>
      <xs:documentation>Элемент справочника "Профиль оборудования".</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Equipment">
    <xs:annotation>
      <xs:documentation>Оборудование</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="equipmentId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор единицы Медицинского оборудования в ЕМИАС.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentModel" type="xs:string">
            <xs:annotation>
              <xs:documentation>Модель оборудования в ЕМИАС.СВМР.2</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentProfile" type="EquipmentProfile">
            <xs:annotation>
              <xs:documentation>Профиль Оборудования</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="equipmentTypeId" type="ID">
            <xs:annotation>
              <xs:documentation>Наименование оборудования в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalOrganizationId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="medicalFacilityId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="department" type="Department">
            <xs:annotation>
              <xs:documentation>Структурное подразделение МО</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="personalizedService" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Признак индивидуального обслуживания</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="capacityForRoom" type="xs:int">
            <xs:annotation>
              <xs:documentation>Количество одновременно обслуживаемых пациентов с учетом ограничивающих условий Локации МУ</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultLocation" type="Location">
            <xs:annotation>
              <xs:documentation>Локация, к которой прикреплено оборудование</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="treatments">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="treatment">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="info" type="Treatment">
                        <xs:annotation>
                          <xs:documentation>Сведения о Медицинской манипуляции</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="useByDefault" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Признак "Использовать по умолчанию" в определении Правила рабочего времени.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="archived" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Department">
    <xs:annotation>
      <xs:documentation>Структурное подразделение</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование структурного подразделения МО в ЕМИАС.СКУУ.СВМР</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="nomId" type="ID">
            <xs:annotation>
              <xs:documentation>Идентификатор структурного подразделения (в соответствии с Номенклатурой
                                структурных подразделений медицинских организаций)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Employee">
    <xs:annotation>
      <xs:documentation>Сведения о работнике МО</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="snils" type="xs:string">
            <xs:annotation>
              <xs:documentation>СНИЛС</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="lastName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Фамилия</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="firstName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Имя</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="middleName" type="xs:string">
            <xs:annotation>
              <xs:documentation>Отчество</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Building">
    <xs:annotation>
      <xs:documentation>Адресный объект</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ForeignBase">
        <xs:sequence>
          <xs:element name="buildingAddress" type="xs:string">
            <xs:annotation>
              <xs:documentation>Строковое представление адреса Адресного объекта</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="ForeignBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для компонентов сущностей ЕМИАС.СКУУ.СВМР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор (совпадает с идентификатором с ЕМИАС.СКУУ.СВМР)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--nsi-->
  <xs:complexType name="PositionProfile">
    <xs:annotation>
      <xs:documentation>Должности медработников, которые могут направить пациентов по маршруту</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase">
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Код элемента справочника</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Diagnosis">
    <xs:annotation>
      <xs:documentation>Диагноз</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase">
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Код элемента справочника</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Treatment">
    <xs:annotation>
      <xs:documentation>Медицинская манипуляция</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase">
        <xs:sequence>
          <xs:element name="categoryCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>Код категории медицинской манипуляции. Соответствует полю "code" справочника "Категории медицинских манипуляций".</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="code" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>Код элемента справочника</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Specialization">
    <xs:annotation>
      <xs:documentation>Специализация</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TitledNsiBase"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="TitledNsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников с полем title</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NsiBase">
        <xs:sequence>
          <xs:element name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Наименование</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="NsiBase">
    <xs:annotation>
      <xs:documentation>Базовый тип для справочников</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="archived" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>Признак "Архивная запись"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <!--base types and elements-->
  <xs:element name="entityVersion" type="xs:long">
    <xs:annotation>
      <xs:documentation>Версия сущности ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="VersionedEntityBase">
    <xs:annotation>
      <xs:documentation>Версионированная сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EntityBase">
        <xs:attribute name="version" type="xs:long" use="required">
          <xs:annotation>
            <xs:documentation>Версия сущности</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="EntityBase">
    <xs:annotation>
      <xs:documentation>Базовая сущность ЕМИАС.СУПП.РиР</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="ID" use="required">
      <xs:annotation>
        <xs:documentation>Идентификатор сущности</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:element name="warnings" type="ErrorMessageCollection">
    <xs:annotation>
      <xs:documentation>Коллекция сообщений (предупреждений) об ошибках</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType abstract="true" name="ProcessingResultBase">
    <xs:annotation>
      <xs:documentation>Базовый абстрактный тип, определяющий результат выполнения операции обработки сущностей
                или их компонентов</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="succeededNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Количество обработанных сущностей (или компоненотов сущности)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="totalNumber" type="xs:int">
        <xs:annotation>
          <xs:documentation>Общее количество сущностей (или компонентов сущности), подлежащих обработке</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://arschedule.rir2.test.emias.mos.ru/api/Route</con:endpoint></con:endpoints><con:operation id="fea56a91-8bd7-40cf-92a8-8e147f64cbfe" isOneWay="false" action="archiveRoute" name="archiveRoute" bindingOperationName="archiveRoute" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="f63a4e03-165f-4936-807c-678be6b1370e" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://arschedule.rir2.test.emias.mos.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:archiveRouteRequest>\r
         <typ:routeId>?</typ:routeId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:archiveRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/archiveRouteRequest"/></con:call></con:operation><con:operation id="58bff6bc-90c5-4a14-99a0-30acceecae05" isOneWay="false" action="createRoute" name="createRoute" bindingOperationName="createRoute" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="8611fdb1-0b5f-4cec-bc33-f3f963ce5eee" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://arschedule.rir2.test.emias.mos.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>?</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>?</v1:diagnosisId>\r
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>?</v1:referralPositionProfileId>\r
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>?</v1:receivingTreatmentId>\r
            <v1:receivingMedicalOrganizationId>?</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>?</v1:receivingMedicalFacilityId>\r
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>?</v1:referralMedicalOrganizationId>\r
            <v1:needReferral>?</v1:needReferral>\r
         </typ:params>\r
         <!--Optional:-->\r
         <v11:options>\r
            <!--Zero or more repetitions:-->\r
            <v11:entry key="?">?</v11:entry>\r
         </v11:options>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="e19addc1-6d3c-4969-887f-faba67612560" isOneWay="false" action="editRoute" name="editRoute" bindingOperationName="editRoute" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="a10faafc-7e06-4012-bef0-aebcc7300533" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://arschedule.rir2.test.emias.mos.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:editRouteRequest>\r
         <typ:params>\r
            <v1:id>?</v1:id>\r
            <v1:document>?</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>?</v1:diagnosisId>\r
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>?</v1:referralPositionProfileId>\r
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>?</v1:receivingTreatmentId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>?</v1:receivingMedicalFacilityId>\r
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>?</v1:referralMedicalOrganizationId>\r
            <v1:needReferral>?</v1:needReferral>\r
         </typ:params>\r
         <!--Optional:-->\r
         <v11:options>\r
            <!--Zero or more repetitions:-->\r
            <v11:entry key="?">?</v11:entry>\r
         </v11:options>\r
      </typ:editRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/editRouteRequest"/></con:call></con:operation><con:operation id="f5ac4446-98be-40ba-9d2b-e64647b4429a" isOneWay="false" action="getRoute" name="getRoute" bindingOperationName="getRoute" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e72ac954-a637-420f-832a-26390cf9668f" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
       <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:getRouteRequest>\r
         <typ:routeId>100151</typ:routeId>\r
      </typ:getRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/getRouteRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="5442c2b8-b377-439e-9c57-9b287e870cc8" isOneWay="false" action="getRouteHistory" name="getRouteHistory" bindingOperationName="getRouteHistory" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="34529d49-a7ad-4886-b123-95e22f875f23" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://arschedule.rir2.test.emias.mos.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:getRouteHistoryRequest>\r
         <typ:routeId>?</typ:routeId>\r
         <!--Optional:-->\r
         <typ:eventsStartDate>?</typ:eventsStartDate>\r
         <!--Optional:-->\r
         <typ:eventsEndDate>?</typ:eventsEndDate>\r
         <!--Optional:-->\r
         <typ:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v1:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v1:sortOrder attributeName="?" desceding="false"/>\r
            </v1:sortingOptions>\r
         </typ:pagingOptions>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:getRouteHistoryRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/getRouteHistoryRequest"/></con:call></con:operation><con:operation id="cb3a8b58-2a88-4fb0-b0ca-c25aaa00d06b" isOneWay="false" action="restoreArchivedRoute" name="restoreArchivedRoute" bindingOperationName="restoreArchivedRoute" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="53015c5d-b826-446f-8cd6-1f2068888f83" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://arschedule.rir2.test.emias.mos.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:restoreArchivedRouteRequest>\r
         <typ:routeId>?</typ:routeId>\r
         <!--Optional:-->\r
         <v1:options>\r
            <!--Zero or more repetitions:-->\r
            <v1:entry key="?">?</v1:entry>\r
         </v1:options>\r
      </typ:restoreArchivedRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/restoreArchivedRouteRequest"/></con:call></con:operation><con:operation id="8c5cf464-39ed-4138-98d2-9ae90f03ec4c" isOneWay="false" action="searchRoutes" name="searchRoutes" bindingOperationName="searchRoutes" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="622ee118-a30c-471a-8ff7-d3d41b57c97c" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://arschedule.rir2.test.emias.mos.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:searchRoutesRequest>\r
         <typ:params>\r
            <!--Optional:-->\r
            <v1:isActive>?</v1:isActive>\r
            <!--Optional:-->\r
            <v1:number>?</v1:number>\r
            <!--Optional:-->\r
            <v1:document>?</v1:document>\r
            <!--Optional:-->\r
            <v1:diagnosisCode>?</v1:diagnosisCode>\r
            <!--Optional:-->\r
            <v1:referralPositionProfileCode>?</v1:referralPositionProfileCode>\r
            <!--Optional:-->\r
            <v1:referralMedicalOrganizationId>?</v1:referralMedicalOrganizationId>\r
            <!--Optional:-->\r
            <v1:receivingMedicalOrganizationId>?</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>?</v1:receivingMedicalFacilityId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingTreatmentCode>?</v1:receivingTreatmentCode>\r
            <!--Optional:-->\r
            <v1:needReferral>?</v1:needReferral>\r
         </typ:params>\r
         <!--Optional:-->\r
         <v11:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v11:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v11:sortOrder attributeName="?" desceding="false"/>\r
            </v11:sortingOptions>\r
         </v11:pagingOptions>\r
         <!--Optional:-->\r
         <v11:options>\r
            <!--Zero or more repetitions:-->\r
            <v11:entry key="?">?</v11:entry>\r
         </v11:options>\r
      </typ:searchRoutesRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/searchRoutesRequest"/></con:call></con:operation><con:operation id="ce79ef29-a8ec-41ac-ab92-4679d5e43db4" isOneWay="false" action="searchRoutesForAssignment" name="searchRoutesForAssignment" bindingOperationName="searchRoutesForAssignment" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="9f882e9c-23a1-4931-92a6-fba7cc772cc9" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://arschedule.rir2.test.emias.mos.ru/api/Route</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <user:userContext>\r
         <user:systemName>?</user:systemName>\r
         <user:userName>?</user:userName>\r
         <user:userRoleId>?</user:userRoleId>\r
         <!--Optional:-->\r
         <user:isUserRoleSystemWide>?</user:isUserRoleSystemWide>\r
         <user:userRights>\r
            <!--Zero or more repetitions:-->\r
            <user:userRightId>?</user:userRightId>\r
         </user:userRights>\r
         <user:jobExecutionId>?</user:jobExecutionId>\r
         <!--Optional:-->\r
         <user:hostIp>?</user:hostIp>\r
         <!--Optional:-->\r
         <user:hostName>?</user:hostName>\r
         <!--Optional:-->\r
         <user:options>\r
            <!--Zero or more repetitions:-->\r
            <user:entry key="?">?</user:entry>\r
         </user:options>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:searchRoutesForAssignmentRequest>\r
         <typ:params>\r
            <!--Optional:-->\r
            <v1:diagnosisId>?</v1:diagnosisId>\r
            <v1:referralPositionProfileCode>?</v1:referralPositionProfileCode>\r
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>?</v1:referralMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingTreatmentId>?</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentCategoryCode>?</v1:receivingTreatmentCategoryCode>\r
         </typ:params>\r
         <!--Optional:-->\r
         <v11:pagingOptions pageNumber="?" pageSize="?">\r
            <!--Optional:-->\r
            <v11:sortingOptions>\r
               <!--1 to 3 repetitions:-->\r
               <v11:sortOrder attributeName="?" desceding="false"/>\r
            </v11:sortingOptions>\r
         </v11:pagingOptions>\r
         <!--Optional:-->\r
         <v11:options>\r
            <!--Zero or more repetitions:-->\r
            <v11:entry key="?">?</v11:entry>\r
         </v11:options>\r
      </typ:searchRoutesForAssignmentRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/searchRoutesForAssignmentRequest"/></con:call></con:operation></con:interface><con:testSuite id="aba255e0-0cb3-4ec8-97d5-894fac9cc026" name="createRoute"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="54859adb-c8d4-4606-8daa-b2e6ead9f484" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута со всеми параметрами и needRef=true_ID48245" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="bff32bd4-4ac3-42dc-8dd9-bb9d18d02011"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")

def je = new JobExecution(context, testRunner, log) 
je.posProf.getPositionProfilesWithAnySpecId()

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="175105fc-a3d5-4cf5-8ffc-7a318f186882"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.saveCurrentDateToProperty()

</script></con:config></con:testStep><con:testStep type="request" id="4c4eac40-75a8-42fc-96e7-dc97e871ab7d" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="115cf5e3-26fb-48a5-a449-08d1c92f7f1a" name="Not SOAP Fault"/><con:assertion type="Valid HTTP Status Codes" id="c254010f-34a0-48dc-86df-0dc4009a2337" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="isActive=true"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns6='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/routeService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns3='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:route/@isActive</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral"><con:configuration><path>//*:document</path><content>${#TestCase#document1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="created >= записанной ранее текущей дате"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

createdDate= parsedResponse.Body.createRouteResponse.route.created.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(createdDate)
def parsedCreateDate = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

log.info parsedCurrentDate

assert parsedCurrentDate&lt;=parsedCreateDate
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="updated >= записанной ранее текущей дате"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

updatedDate= parsedResponse.Body.createRouteResponse.route.updated.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество diagnosis соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper


countDiagnosis=messageExchange.modelItem.testStep.testCase.getPropertyValue("countDiagnosis").toInteger()

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

assert  diagnosis.size()==countDiagnosis
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="diagnosis соответствуют переданным в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
        
sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&amp;password="+password, "org.postgresql.Driver")

map=[]
for(int i=1; i&lt;=2; i++){
	diagnosId=messageExchange.modelItem.testStep.testCase.getPropertyValue("diagnosId"+i)
	diagnosis=sql.firstRow("select * from diagnosis where id="+diagnosId)
	map &lt;&lt; diagnosis
}

return map[0].code


def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

return diagnosis[0].@id.toString()
/*
currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
*/</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralPositionProfile соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralPositionProfile= parsedResponse.Body.createRouteResponse.route.referralPositionProfile
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger()

assert  referralPositionProfile.size()==countPosProf
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralPositionProfile соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tablePosProf")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
for(int i=1; i<=countPosProf; i++){
	posProfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("posProfId"+i)
	posProfiles=sql.firstRow("select * from "+table+" where id="+posProfId)
	posProfiles.remove('specialization_id')
	posProfiles.remove('profile_of_primary_position')
	map << posProfiles
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
diagnosis= parsedResponse.Body.createRouteResponse.route.referralPositionProfile

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<diagnosis.size(); i++){
	id=diagnosis[i].@id.toLong()
	code=diagnosis[i].@code.toString()
	archived=diagnosis[i].@archived.toBoolean()
	title=diagnosis[i].title.toString()
	item=[id:id, archived:archived, title:title,code:code]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingTreatmentCategoryCode соответствует категории ММ переданных receivingTreatmentId"><con:configuration><path>//*:receivingTreatmentCategoryCode</path><content>${#TestCase#tcCode1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingTreatment соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingTreatment= parsedResponse.Body.createRouteResponse.route.receivingTreatment
countTreatments=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger()

assert  receivingTreatment.size()==countTreatments
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingTreatment соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableT")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
tcCode=messageExchange.modelItem.testStep.testCase.getPropertyValue("tcCode1")
for(int i=1; i<=count; i++){
	treatmentId=messageExchange.modelItem.testStep.testCase.getPropertyValue("tId"+i)
	treatments=sql.firstRow("select * from "+table+" where id="+treatmentId)
	treatments.remove('default_duration')
	treatments.remove('treatment_category_id')
	treatments.put("categoryCode",tcCode)
	map << treatments
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingTreatments= parsedResponse.Body.createRouteResponse.route.receivingTreatment

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<receivingTreatments.size(); i++){
	id=receivingTreatments[i].@id.toLong()
	code=receivingTreatments[i].@code.toString()
	archived=receivingTreatments[i].@archived.toBoolean()
	title=receivingTreatments[i].title.toString()
	categoryCode=receivingTreatments[i].categoryCode.toString()
	item=[id:id, archived:archived, title:title,code:code, categoryCode:categoryCode]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingMedicalOrganizationId соответствует переданному значению receivingMedicalOrganizationId"><con:configuration><path>//*:receivingMedicalOrganizationId</path><content>${#TestCase#moId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingMedicalFacilityId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId
countReceiveMF=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger()

assert  receivingMedicalFacilityId.size()==countReceiveMF
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingMedicalFacilityId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger() 

//собрать все принимающих МУ должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	mfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("mfId"+i).toInteger()
	ids=[id:mfId]
	map << ids
}

map.sort{it.id}

//получить принимающие МУ из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId

//собрать принимающие МУ из ответа в мапу
mapResp=[]
for(int i=0; i<receivingMedicalFacilityId.size(); i++){
	id=receivingMedicalFacilityId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralMedicalOrganizationId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId
countReferralMO=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger()

assert  referralMedicalOrganizationId.size()==countReferralMO
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralMedicalOrganizationId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger() 

//собрать все направляющие МО должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	moId=messageExchange.modelItem.testStep.testCase.getPropertyValue("otherMoId"+i).toInteger()
	ids=[id:moId]
	map << ids
}

map.sort{it.id}

//получить направляющие МО из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId

//собрать направляющие МО из ответа в мапу
mapResp=[]
for(int i=0; i<referralMedicalOrganizationId.size(); i++){
	id=referralMedicalOrganizationId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral2"><con:configuration><path>//*:needReferral</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить id, number, created, updated созданного маршрута" id="f38726bf-fc82-4320-8819-afc4d7e65285"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:route/@id</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>number</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:route/@number</con:sourcePath><con:targetType>number</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>created</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:created</con:sourcePath><con:targetType>created</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>updated</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:updated</con:sourcePath><con:targetType>updated</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route" id="5c831989-4a98-4de4-9322-141328469ee0"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT * FROM "+table+"  WHERE ID="+id
items= sql.rows(getItems)
if ( items.size()== 0){
		testRunner.fail("Запись в таблице "+table+" с id ="+id+"  не найдена")
}
else {
	log.info("Запись в таблице  "+table+" с id ="+id+"  найдена") 
	//log.info(items)
	def req_number=testRunner.testCase.getPropertyValue("number")
	def req_document = testRunner.testCase.getPropertyValue("document1")
	def req_created = testRunner.testCase.getPropertyValue("created").replace("T"," ")
	def req_updated = testRunner.testCase.getPropertyValue("updated").replace("T"," ")
	def req_tcId=testRunner.testCase.getPropertyValue("tcId1")
	def req_moId = testRunner.testCase.getPropertyValue("moId1")
	
	def db_active = items[0].active
	def db_needReferral = items[0].need_referral
	def db_number = items[0].number.toString()
	def db_document = items[0].document
	def db_created = items[0].created.toString()
	def db_updated = items[0].updated.toString()
	def db_tcId = items[0].receiving_treatment_category.toString()
	def db_moId = items[0].receiving_medical_organization.toString()
	
	assert db_active == true
	assert db_needReferral == true
	assert db_number ==req_number
	assert db_document ==req_document
	assert db_created ==req_created
	assert db_updated ==req_updated
	assert db_tcId ==req_tcId
	assert db_moId ==req_moId
	log.info("Запись в таблице создана корректно.")
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_diagnosis" id="f9a0b3bb-4c45-456e-823d-9cf3772305d5"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteDiag")
count =testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT diagnosis_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	diagnosId=testRunner.testCase.getPropertyValue("diagnosId"+i).toInteger()
	diagnosis=[id:diagnosId]
	map &lt;&lt; diagnosis
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_position_profile" id="67bf0e4f-ef0c-4a84-a544-1956920eca05"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoutePosProf")
count =testRunner.testCase.getPropertyValue("countPosProf").toInteger()
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT referral_position_profile_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("posProfId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_treatment" id="83e747a6-4b86-4c72-b711-7c57b81f5329"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteT")
count =testRunner.testCase.getPropertyValue("countTreatments").toInteger()
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT receiving_treatment_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("tId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_receiving_medical_facility" id="eb5e0c9f-aa85-4eea-93dd-77f0ab809836"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteRecMF")
count =testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT receiving_medical_facility_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("mfId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_referral_medical_organization" id="d4927eab-48f6-464c-b0f2-f2a421b43566"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteRefMO")
count =testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT referral_medical_organization_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("otherMoId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="1f304ebc-d666-437a-8127-3e8656900207"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

def Routes = new Routes(context, testRunner, log)
Routes.clearRoute("id")

def je = new JobExecution(context, testRunner, log) 
je.posProf.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-03-14T21:52:49.515038</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-03-14T21:52:48.000995</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100452</con:value></con:property><con:property><con:name>number</con:name><con:value>100452</con:value></con:property><con:property><con:name>specId1</con:name><con:value>125676759</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-03-14T21:52:49.515038</con:value></con:property></con:properties></con:testCase><con:testCase id="8ca67009-5ed9-4e16-aa7d-7068560ea392" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута только с обязательными параметрами и needRef=false 61318" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="a3e95f59-9375-4f6f-949c-3fcd44ed9ecb"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

/*
countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)
*/
countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")

//def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="6a5cb4f1-b787-4683-afad-7bc1603969df"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.saveCurrentDateToProperty("yyyy-MM-dd'T'HH:mm:ss.SSSSSS")

</script></con:config></con:testStep><con:testStep type="request" id="68738d6c-9a2f-47bd-b916-c6a52f6a0d9b" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
            <v1:needReferral>false</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="115cf5e3-26fb-48a5-a449-08d1c92f7f1a" name="Not SOAP Fault"/><con:assertion type="Valid HTTP Status Codes" id="c254010f-34a0-48dc-86df-0dc4009a2337" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="isActive=true"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns6='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/routeService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns3='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:route/@isActive</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral"><con:configuration><path>//*:document</path><content>${#TestCase#document1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="created >= записанной ранее текущей дате"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

createdDate= parsedResponse.Body.createRouteResponse.route.created.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(createdDate)
def parsedCreateDate = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

log.info parsedCurrentDate

assert parsedCurrentDate&lt;=parsedCreateDate
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="updated >= записанной ранее текущей дате"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

updatedDate= parsedResponse.Body.createRouteResponse.route.updated.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingTreatmentCategoryCode соответствует категории ММ переданных receivingTreatmentId"><con:configuration><path>//*:receivingTreatmentCategoryCode</path><content>${#TestCase#tcCode1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingTreatment соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingTreatment= parsedResponse.Body.createRouteResponse.route.receivingTreatment
countTreatments=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger()

assert  receivingTreatment.size()==countTreatments
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingTreatment соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableT")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
tcCode=messageExchange.modelItem.testStep.testCase.getPropertyValue("tcCode1")
for(int i=1; i<=count; i++){
	treatmentId=messageExchange.modelItem.testStep.testCase.getPropertyValue("tId"+i)
	treatments=sql.firstRow("select * from "+table+" where id="+treatmentId)
	treatments.remove('default_duration')
	treatments.remove('treatment_category_id')
	treatments.put("categoryCode",tcCode)
	map << treatments
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingTreatments= parsedResponse.Body.createRouteResponse.route.receivingTreatment

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<receivingTreatments.size(); i++){
	id=receivingTreatments[i].@id.toLong()
	code=receivingTreatments[i].@code.toString()
	archived=receivingTreatments[i].@archived.toBoolean()
	title=receivingTreatments[i].title.toString()
	categoryCode=receivingTreatments[i].categoryCode.toString()
	item=[id:id, archived:archived, title:title,code:code, categoryCode:categoryCode]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingMedicalOrganizationId соответствует переданному значению receivingMedicalOrganizationId"><con:configuration><path>//*:receivingMedicalOrganizationId</path><content>${#TestCase#moId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralMedicalOrganizationId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId
countReferralMO=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger()

assert  referralMedicalOrganizationId.size()==countReferralMO
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralMedicalOrganizationId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger() 

//собрать все направляющие МО должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	moId=messageExchange.modelItem.testStep.testCase.getPropertyValue("otherMoId"+i).toInteger()
	ids=[id:moId]
	map << ids
}

map.sort{it.id}

//получить направляющие МО из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId

//собрать направляющие МО из ответа в мапу
mapResp=[]
for(int i=0; i<referralMedicalOrganizationId.size(); i++){
	id=referralMedicalOrganizationId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral2"><con:configuration><path>//*:needReferral</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ee57a9d1-7d1d-4241-ac4d-b770ee4c222b" name="В ответе нет diagnosis"><con:configuration><token>diagnosis</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ee57a9d1-7d1d-4241-ac4d-b770ee4c222b" name="В ответе нет receivingMedicalFacilityId"><con:configuration><token>receivingMedicalFacilityId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="ee57a9d1-7d1d-4241-ac4d-b770ee4c222b" name="В ответе нет referralPositionProfile"><con:configuration><token>referralPositionProfile</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить id, number, created, updated созданного маршрута" id="7e0cdbcb-6c89-45a7-a6b9-aca903288bc1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:route/@id</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>number</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:route/@number</con:sourcePath><con:targetType>number</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>created</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:created</con:sourcePath><con:targetType>created</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>updated</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:updated</con:sourcePath><con:targetType>updated</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route" id="296034b0-686f-49c2-844a-05e6edcb4c20"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT * FROM "+table+"  WHERE ID="+id
items= sql.rows(getItems)
if ( items.size()== 0){
		testRunner.fail("Запись в таблице "+table+" с id ="+id+"  не найдена")
}
else {
	log.info("Запись в таблице  "+table+" с id ="+id+"  найдена") 
	//log.info(items)
	def req_number=testRunner.testCase.getPropertyValue("number")
	def req_document = testRunner.testCase.getPropertyValue("document1")
	def req_created = testRunner.testCase.getPropertyValue("created").replace("T"," ")
	def req_updated = testRunner.testCase.getPropertyValue("updated").replace("T"," ")
	def req_tcId=testRunner.testCase.getPropertyValue("tcId1")
	def req_moId = testRunner.testCase.getPropertyValue("moId1")
	
	def db_active = items[0].active
	def db_needReferral = items[0].need_referral
	def db_number = items[0].number.toString()
	def db_document = items[0].document
	def db_created = items[0].created.toString()
	def db_updated = items[0].updated.toString()
	def db_tcId = items[0].receiving_treatment_category.toString()
	def db_moId = items[0].receiving_medical_organization.toString()
	
	assert db_active == true
	assert db_needReferral == false
	assert db_number ==req_number
	assert db_document ==req_document
	assert db_created ==req_created
	assert db_updated ==req_updated
	assert db_tcId ==req_tcId
	assert db_moId ==req_moId
	log.info("Запись в таблице создана корректно.")
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в таблице route_diagnosis" id="2be3f528-5a21-419b-8e37-80c806cd9620"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteDiag")
count =testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT diagnosis_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	diagnosId=testRunner.testCase.getPropertyValue("diagnosId"+i).toInteger()
	diagnosis=[id:diagnosId]
	map &lt;&lt; diagnosis
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие записи в таблице route_position_profile" id="ec866737-1bc4-42ca-abef-fbf493bb547a"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoutePosProf")
count =testRunner.testCase.getPropertyValue("countPosProf").toInteger()
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT referral_position_profile_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("posProfId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_treatment" id="939be681-33f0-4bc5-88dc-a0b27f2f036f"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteT")
count =testRunner.testCase.getPropertyValue("countTreatments").toInteger()
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT receiving_treatment_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("tId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_receiving_medical_facility" id="b9960c6c-9af2-4f66-ac37-f4cf685fb043"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteRecMF")
count =testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT receiving_medical_facility_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("mfId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_referral_medical_organization" id="115eaf6f-c35c-4310-b6c9-3ba7f24aec21"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteRefMO")
count =testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
id = testRunner.testCase.getPropertyValue("id")
getItems = "SELECT referral_medical_organization_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("otherMoId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="003f97ab-1d22-4078-9c8f-4e69a1ea9049"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

def Routes = new Routes(context, testRunner, log)
Routes.clearRoute("id")

//def JobExecution = new JobExecution(context, testRunner, log) JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

/*
countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)
*/

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>0</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>0</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>0</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>1</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>1</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-27T16:23:54.230553</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-27T16:23:53.000669</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100424</con:value></con:property><con:property><con:name>number</con:name><con:value>100424</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-27T16:23:54.230553</con:value></con:property></con:properties></con:testCase><con:testCase id="d7e3811c-bb56-417f-a4b9-1cd3652e46f9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание дубля активного маршрута(E602) 61577" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="abb00a3e-40ab-4c2f-bc9c-a04bc2f529f4"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")

def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="d2543c80-914b-4dfb-a94b-08e755585b3f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.saveCurrentDateToProperty("yyyy-MM-dd'T'HH:mm:ss.SSSSSS")

</script></con:config></con:testStep><con:testStep type="request" id="095ca194-bfd8-4c58-bbdd-cf24a42289a4" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="115cf5e3-26fb-48a5-a449-08d1c92f7f1a" name="Not SOAP Fault"/><con:assertion type="Valid HTTP Status Codes" id="c254010f-34a0-48dc-86df-0dc4009a2337" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="isActive=true"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns6='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/routeService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns3='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:route/@isActive</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral"><con:configuration><path>//*:document</path><content>${#TestCase#document1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="created >= записанной ранее текущей дате"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

createdDate= parsedResponse.Body.createRouteResponse.route.created.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(createdDate)
def parsedCreateDate = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

log.info parsedCurrentDate

assert parsedCurrentDate&lt;=parsedCreateDate
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="updated >= записанной ранее текущей дате"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

updatedDate= parsedResponse.Body.createRouteResponse.route.updated.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество diagnosis соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper


countDiagnosis=messageExchange.modelItem.testStep.testCase.getPropertyValue("countDiagnosis").toInteger()

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

assert  diagnosis.size()==countDiagnosis
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="diagnosis соответствуют переданным в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
        
sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&amp;password="+password, "org.postgresql.Driver")

map=[]
for(int i=1; i&lt;=2; i++){
	diagnosId=messageExchange.modelItem.testStep.testCase.getPropertyValue("diagnosId"+i)
	diagnosis=sql.firstRow("select * from diagnosis where id="+diagnosId)
	map &lt;&lt; diagnosis
}

return map[0].code


def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

return diagnosis[0].@id.toString()
/*
currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
*/</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralPositionProfile соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralPositionProfile= parsedResponse.Body.createRouteResponse.route.referralPositionProfile
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger()

assert  referralPositionProfile.size()==countPosProf
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralPositionProfile соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tablePosProf")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
for(int i=1; i<=countPosProf; i++){
	posProfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("posProfId"+i)
	posProfiles=sql.firstRow("select * from "+table+" where id="+posProfId)
	posProfiles.remove('specialization_id')
	posProfiles.remove('profile_of_primary_position')
	map << posProfiles
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
diagnosis= parsedResponse.Body.createRouteResponse.route.referralPositionProfile

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<diagnosis.size(); i++){
	id=diagnosis[i].@id.toLong()
	code=diagnosis[i].@code.toString()
	archived=diagnosis[i].@archived.toBoolean()
	title=diagnosis[i].title.toString()
	item=[id:id, archived:archived, title:title,code:code]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingTreatmentCategoryCode соответствует категории ММ переданных receivingTreatmentId"><con:configuration><path>//*:receivingTreatmentCategoryCode</path><content>${#TestCase#tcCode1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingTreatment соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingTreatment= parsedResponse.Body.createRouteResponse.route.receivingTreatment
countTreatments=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger()

assert  receivingTreatment.size()==countTreatments
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingTreatment соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableT")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
tcCode=messageExchange.modelItem.testStep.testCase.getPropertyValue("tcCode1")
for(int i=1; i<=count; i++){
	treatmentId=messageExchange.modelItem.testStep.testCase.getPropertyValue("tId"+i)
	treatments=sql.firstRow("select * from "+table+" where id="+treatmentId)
	treatments.remove('default_duration')
	treatments.remove('treatment_category_id')
	treatments.put("categoryCode",tcCode)
	map << treatments
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingTreatments= parsedResponse.Body.createRouteResponse.route.receivingTreatment

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<receivingTreatments.size(); i++){
	id=receivingTreatments[i].@id.toLong()
	code=receivingTreatments[i].@code.toString()
	archived=receivingTreatments[i].@archived.toBoolean()
	title=receivingTreatments[i].title.toString()
	categoryCode=receivingTreatments[i].categoryCode.toString()
	item=[id:id, archived:archived, title:title,code:code, categoryCode:categoryCode]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingMedicalOrganizationId соответствует переданному значению receivingMedicalOrganizationId"><con:configuration><path>//*:receivingMedicalOrganizationId</path><content>${#TestCase#moId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingMedicalFacilityId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId
countReceiveMF=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger()

assert  receivingMedicalFacilityId.size()==countReceiveMF
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingMedicalFacilityId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger() 

//собрать все принимающих МУ должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	mfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("mfId"+i).toInteger()
	ids=[id:mfId]
	map << ids
}

map.sort{it.id}

//получить принимающие МУ из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId

//собрать принимающие МУ из ответа в мапу
mapResp=[]
for(int i=0; i<receivingMedicalFacilityId.size(); i++){
	id=receivingMedicalFacilityId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralMedicalOrganizationId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId
countReferralMO=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger()

assert  referralMedicalOrganizationId.size()==countReferralMO
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralMedicalOrganizationId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger() 

//собрать все направляющие МО должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	moId=messageExchange.modelItem.testStep.testCase.getPropertyValue("otherMoId"+i).toInteger()
	ids=[id:moId]
	map << ids
}

map.sort{it.id}

//получить направляющие МО из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId

//собрать направляющие МО из ответа в мапу
mapResp=[]
for(int i=0; i<referralMedicalOrganizationId.size(); i++){
	id=referralMedicalOrganizationId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral2"><con:configuration><path>//*:needReferral</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить id, number, created, updated созданного маршрута" id="3a8f1b9f-45c3-4b94-a19b-bfb8caa93280"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:route/@id</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>number</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:route/@number</con:sourcePath><con:targetType>number</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>created</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:created</con:sourcePath><con:targetType>created</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>updated</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:updated</con:sourcePath><con:targetType>updated</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" id="0a252b6b-77d6-41d0-bef7-2ac5b2a78956" name="createRoute 2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute 2" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E602"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E602:  Маршрут движения пациентов не может быть сохранен, поскольку существует маршрут с идентификатором ${#TestCase#id}, у которого аналогичные параметры.
Parameters:
 duplicateRouteId:  ${#TestCase#id}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Маршрут движения пациентов не может быть сохранен, поскольку существует маршрут с идентификатором ${#TestCase#id}, у которого аналогичные параметры.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=duplicateRouteId"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>duplicateRouteId</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра duplicateRouteId =id созданного ранее маршрута"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#id}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E602"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E602</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="2386cf1b-9995-4e52-8968-7debac820caa"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

def Routes = new Routes(context, testRunner, log)
Routes.clearRoute("id")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T16:26:51.000333</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100414</con:value></con:property><con:property><con:name>number</con:name><con:value>100414</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>diagnosId2</con:name><con:value>3</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>moId1</con:name><con:value>-10922980</con:value></con:property><con:property><con:name>moIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>-24</con:value></con:property><con:property><con:name>aoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-10922980</con:value></con:property><con:property><con:name>mfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>locId1</con:name><con:value>-7</con:value></con:property><con:property><con:name>locIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId2</con:name><con:value>-25</con:value></con:property><con:property><con:name>aoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId2</con:name><con:value>-10922981</con:value></con:property><con:property><con:name>mfIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>locId2</con:name><con:value>-8</con:value></con:property><con:property><con:name>locIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10922982</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId2</con:name><con:value>-10922983</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="73a8a012-eb49-4150-88b1-22f01b00a2b7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание дубля не активного маршрута" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="2d9b2350-830d-443a-921e-850a912395f6"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")

def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="request" id="42589ade-20a8-45bf-8a86-d79ce8ab92f9" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="115cf5e3-26fb-48a5-a449-08d1c92f7f1a" name="Not SOAP Fault"/><con:assertion type="Valid HTTP Status Codes" id="c254010f-34a0-48dc-86df-0dc4009a2337" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="isActive=true"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns6='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/routeService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns3='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:route/@isActive</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral"><con:configuration><path>//*:document</path><content>${#TestCase#document1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="created >= записанной ранее текущей дате" disabled="true"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

createdDate= parsedResponse.Body.createRouteResponse.route.created.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(createdDate)
def parsedCreateDate = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

log.info parsedCurrentDate

assert parsedCurrentDate&lt;=parsedCreateDate
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="updated >= записанной ранее текущей дате" disabled="true"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

updatedDate= parsedResponse.Body.createRouteResponse.route.updated.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество diagnosis соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper


countDiagnosis=messageExchange.modelItem.testStep.testCase.getPropertyValue("countDiagnosis").toInteger()

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

assert  diagnosis.size()==countDiagnosis
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="diagnosis соответствуют переданным в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
        
sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&amp;password="+password, "org.postgresql.Driver")

map=[]
for(int i=1; i&lt;=2; i++){
	diagnosId=messageExchange.modelItem.testStep.testCase.getPropertyValue("diagnosId"+i)
	diagnosis=sql.firstRow("select * from diagnosis where id="+diagnosId)
	map &lt;&lt; diagnosis
}

return map[0].code


def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

return diagnosis[0].@id.toString()
/*
currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
*/</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralPositionProfile соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralPositionProfile= parsedResponse.Body.createRouteResponse.route.referralPositionProfile
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger()

assert  referralPositionProfile.size()==countPosProf
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralPositionProfile соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tablePosProf")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
for(int i=1; i<=countPosProf; i++){
	posProfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("posProfId"+i)
	posProfiles=sql.firstRow("select * from "+table+" where id="+posProfId)
	posProfiles.remove('specialization_id')
	posProfiles.remove('profile_of_primary_position')
	map << posProfiles
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
diagnosis= parsedResponse.Body.createRouteResponse.route.referralPositionProfile

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<diagnosis.size(); i++){
	id=diagnosis[i].@id.toLong()
	code=diagnosis[i].@code.toString()
	archived=diagnosis[i].@archived.toBoolean()
	title=diagnosis[i].title.toString()
	item=[id:id, archived:archived, title:title,code:code]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingTreatmentCategoryCode соответствует категории ММ переданных receivingTreatmentId"><con:configuration><path>//*:receivingTreatmentCategoryCode</path><content>${#TestCase#tcCode1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingTreatment соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingTreatment= parsedResponse.Body.createRouteResponse.route.receivingTreatment
countTreatments=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger()

assert  receivingTreatment.size()==countTreatments
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingTreatment соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableT")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
tcCode=messageExchange.modelItem.testStep.testCase.getPropertyValue("tcCode1")
for(int i=1; i<=count; i++){
	treatmentId=messageExchange.modelItem.testStep.testCase.getPropertyValue("tId"+i)
	treatments=sql.firstRow("select * from "+table+" where id="+treatmentId)
	treatments.remove('default_duration')
	treatments.remove('treatment_category_id')
	treatments.put("categoryCode",tcCode)
	map << treatments
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingTreatments= parsedResponse.Body.createRouteResponse.route.receivingTreatment

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<receivingTreatments.size(); i++){
	id=receivingTreatments[i].@id.toLong()
	code=receivingTreatments[i].@code.toString()
	archived=receivingTreatments[i].@archived.toBoolean()
	title=receivingTreatments[i].title.toString()
	categoryCode=receivingTreatments[i].categoryCode.toString()
	item=[id:id, archived:archived, title:title,code:code, categoryCode:categoryCode]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingMedicalOrganizationId соответствует переданному значению receivingMedicalOrganizationId"><con:configuration><path>//*:receivingMedicalOrganizationId</path><content>${#TestCase#moId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingMedicalFacilityId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId
countReceiveMF=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger()

assert  receivingMedicalFacilityId.size()==countReceiveMF
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingMedicalFacilityId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger() 

//собрать все принимающих МУ должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	mfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("mfId"+i).toInteger()
	ids=[id:mfId]
	map << ids
}

map.sort{it.id}

//получить принимающие МУ из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId

//собрать принимающие МУ из ответа в мапу
mapResp=[]
for(int i=0; i<receivingMedicalFacilityId.size(); i++){
	id=receivingMedicalFacilityId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralMedicalOrganizationId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId
countReferralMO=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger()

assert  referralMedicalOrganizationId.size()==countReferralMO
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralMedicalOrganizationId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger() 

//собрать все направляющие МО должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	moId=messageExchange.modelItem.testStep.testCase.getPropertyValue("otherMoId"+i).toInteger()
	ids=[id:moId]
	map << ids
}

map.sort{it.id}

//получить направляющие МО из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId

//собрать направляющие МО из ответа в мапу
mapResp=[]
for(int i=0; i<referralMedicalOrganizationId.size(); i++){
	id=referralMedicalOrganizationId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral2"><con:configuration><path>//*:needReferral</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить id созданного маршрута" id="d0e2f961-a5a6-41fc-862b-fc11d461449d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:route/@id</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Обновить активность маршурта" id="77990ba2-9719-4c50-ad17-a963b40dd795"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
id = testRunner.testCase.getPropertyValue("id")
sql.execute("update "+table+" set active=false where id="+id)</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="71239493-5921-4b69-ab2b-65183e3f6d9d"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.saveCurrentDateToProperty("yyyy-MM-dd'T'HH:mm:ss.SSSSSS")

</script></con:config></con:testStep><con:testStep type="request" id="d32b4d43-2dab-4875-8c6d-97a019eeecc9" name="createRoute 2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute 2" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="115cf5e3-26fb-48a5-a449-08d1c92f7f1a" name="Not SOAP Fault"/><con:assertion type="Valid HTTP Status Codes" id="c254010f-34a0-48dc-86df-0dc4009a2337" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="isActive=true"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns6='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/routeService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns3='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:route/@isActive</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral"><con:configuration><path>//*:document</path><content>${#TestCase#document1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="created >= записанной ранее текущей дате"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

createdDate= parsedResponse.Body.createRouteResponse.route.created.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(createdDate)
def parsedCreateDate = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

log.info parsedCurrentDate

assert parsedCurrentDate&lt;=parsedCreateDate
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="updated >= записанной ранее текущей дате"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

updatedDate= parsedResponse.Body.createRouteResponse.route.updated.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество diagnosis соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper


countDiagnosis=messageExchange.modelItem.testStep.testCase.getPropertyValue("countDiagnosis").toInteger()

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

assert  diagnosis.size()==countDiagnosis
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="diagnosis соответствуют переданным в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
        
sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&amp;password="+password, "org.postgresql.Driver")

map=[]
for(int i=1; i&lt;=2; i++){
	diagnosId=messageExchange.modelItem.testStep.testCase.getPropertyValue("diagnosId"+i)
	diagnosis=sql.firstRow("select * from diagnosis where id="+diagnosId)
	map &lt;&lt; diagnosis
}

return map[0].code


def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

return diagnosis[0].@id.toString()
/*
currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
*/</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralPositionProfile соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralPositionProfile= parsedResponse.Body.createRouteResponse.route.referralPositionProfile
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger()

assert  referralPositionProfile.size()==countPosProf
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralPositionProfile соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tablePosProf")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
for(int i=1; i<=countPosProf; i++){
	posProfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("posProfId"+i)
	posProfiles=sql.firstRow("select * from "+table+" where id="+posProfId)
	posProfiles.remove('specialization_id')
	posProfiles.remove('profile_of_primary_position')
	map << posProfiles
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
diagnosis= parsedResponse.Body.createRouteResponse.route.referralPositionProfile

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<diagnosis.size(); i++){
	id=diagnosis[i].@id.toLong()
	code=diagnosis[i].@code.toString()
	archived=diagnosis[i].@archived.toBoolean()
	title=diagnosis[i].title.toString()
	item=[id:id, archived:archived, title:title,code:code]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingTreatmentCategoryCode соответствует категории ММ переданных receivingTreatmentId"><con:configuration><path>//*:receivingTreatmentCategoryCode</path><content>${#TestCase#tcCode1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingTreatment соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingTreatment= parsedResponse.Body.createRouteResponse.route.receivingTreatment
countTreatments=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger()

assert  receivingTreatment.size()==countTreatments
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingTreatment соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableT")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
tcCode=messageExchange.modelItem.testStep.testCase.getPropertyValue("tcCode1")
for(int i=1; i<=count; i++){
	treatmentId=messageExchange.modelItem.testStep.testCase.getPropertyValue("tId"+i)
	treatments=sql.firstRow("select * from "+table+" where id="+treatmentId)
	treatments.remove('default_duration')
	treatments.remove('treatment_category_id')
	treatments.put("categoryCode",tcCode)
	map << treatments
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingTreatments= parsedResponse.Body.createRouteResponse.route.receivingTreatment

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<receivingTreatments.size(); i++){
	id=receivingTreatments[i].@id.toLong()
	code=receivingTreatments[i].@code.toString()
	archived=receivingTreatments[i].@archived.toBoolean()
	title=receivingTreatments[i].title.toString()
	categoryCode=receivingTreatments[i].categoryCode.toString()
	item=[id:id, archived:archived, title:title,code:code, categoryCode:categoryCode]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingMedicalOrganizationId соответствует переданному значению receivingMedicalOrganizationId"><con:configuration><path>//*:receivingMedicalOrganizationId</path><content>${#TestCase#moId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingMedicalFacilityId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId
countReceiveMF=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger()

assert  receivingMedicalFacilityId.size()==countReceiveMF
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingMedicalFacilityId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger() 

//собрать все принимающих МУ должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	mfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("mfId"+i).toInteger()
	ids=[id:mfId]
	map << ids
}

map.sort{it.id}

//получить принимающие МУ из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId

//собрать принимающие МУ из ответа в мапу
mapResp=[]
for(int i=0; i<receivingMedicalFacilityId.size(); i++){
	id=receivingMedicalFacilityId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralMedicalOrganizationId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId
countReferralMO=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger()

assert  referralMedicalOrganizationId.size()==countReferralMO
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralMedicalOrganizationId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger() 

//собрать все направляющие МО должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	moId=messageExchange.modelItem.testStep.testCase.getPropertyValue("otherMoId"+i).toInteger()
	ids=[id:moId]
	map << ids
}

map.sort{it.id}

//получить направляющие МО из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId

//собрать направляющие МО из ответа в мапу
mapResp=[]
for(int i=0; i<referralMedicalOrganizationId.size(); i++){
	id=referralMedicalOrganizationId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral2"><con:configuration><path>//*:needReferral</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить id, number, created, updated созданного маршрута 2" id="96a99861-6ac7-42c1-81c8-2c9a3ea62153"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute 2</con:sourceStep><con:sourcePath>//*:route/@id</con:sourcePath><con:targetType>id2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>number</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute 2</con:sourceStep><con:sourcePath>//*:route/@number</con:sourcePath><con:targetType>number</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>created</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute 2</con:sourceStep><con:sourcePath>//*:created</con:sourcePath><con:targetType>created</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>updated</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute 2</con:sourceStep><con:sourcePath>//*:updated</con:sourcePath><con:targetType>updated</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route" id="d9aef8b8-e561-421a-b183-2e41203f0d6e"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT * FROM "+table+"  WHERE ID="+id
items= sql.rows(getItems)
if ( items.size()== 0){
		testRunner.fail("Запись в таблице "+table+" с id ="+id+"  не найдена")
}
else {
	log.info("Запись в таблице  "+table+" с id ="+id+"  найдена") 
	//log.info(items)
	def req_number=testRunner.testCase.getPropertyValue("number")
	def req_document = testRunner.testCase.getPropertyValue("document1")
	def req_created = testRunner.testCase.getPropertyValue("created").replace("T"," ")
	def req_updated = testRunner.testCase.getPropertyValue("updated").replace("T"," ")
	def req_tcId=testRunner.testCase.getPropertyValue("tcId1")
	def req_moId = testRunner.testCase.getPropertyValue("moId1")
	
	def db_active = items[0].active
	def db_needReferral = items[0].need_referral
	def db_number = items[0].number.toString()
	def db_document = items[0].document
	def db_created = items[0].created.toString()
	def db_updated = items[0].updated.toString()
	def db_tcId = items[0].receiving_treatment_category.toString()
	def db_moId = items[0].receiving_medical_organization.toString()
	
	assert db_active == true
	assert db_needReferral == true
	assert db_number ==req_number
	assert db_document ==req_document
	assert db_created ==req_created
	assert db_updated ==req_updated
	assert db_tcId ==req_tcId
	assert db_moId ==req_moId
	log.info("Запись в таблице создана корректно.")
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_diagnosis" id="df62e824-efff-4322-9bcd-cca841dca324"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteDiag")
count =testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT diagnosis_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	diagnosId=testRunner.testCase.getPropertyValue("diagnosId"+i).toInteger()
	diagnosis=[id:diagnosId]
	map &lt;&lt; diagnosis
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_position_profile" id="630eaf0b-7fc7-41be-bc62-cc65f79e701e"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoutePosProf")
count =testRunner.testCase.getPropertyValue("countPosProf").toInteger()
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT referral_position_profile_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("posProfId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_treatment" id="5780e67d-cdca-40eb-ba4c-e8ce1c9d86cd"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteT")
count =testRunner.testCase.getPropertyValue("countTreatments").toInteger()
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT receiving_treatment_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("tId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_receiving_medical_facility" id="49e342cc-a9dd-40eb-8c10-89f1b868ef80"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteRecMF")
count =testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT receiving_medical_facility_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("mfId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_referral_medical_organization" id="b6061d5b-3678-4c69-935f-798808819cd0"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteRefMO")
count =testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT referral_medical_organization_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("otherMoId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="7b7849d3-24f3-4875-bf09-73a815d62994"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

def Routes = new Routes(context, testRunner, log)
Routes.clearRoute("id")
Routes.clearRoute("id2")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:49:20.975318</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T16:49:21.000004</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100417</con:value></con:property><con:property><con:name>number</con:name><con:value>100418</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:49:20.975318</con:value></con:property><con:property><con:name>id2</con:name><con:value>100418</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>diagnosId2</con:name><con:value>3</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>moId1</con:name><con:value>-10922984</con:value></con:property><con:property><con:name>moIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>-26</con:value></con:property><con:property><con:name>aoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-10922984</con:value></con:property><con:property><con:name>mfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>locId1</con:name><con:value>-9</con:value></con:property><con:property><con:name>locIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId2</con:name><con:value>-27</con:value></con:property><con:property><con:name>aoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId2</con:name><con:value>-10922985</con:value></con:property><con:property><con:name>mfIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>locId2</con:name><con:value>-10</con:value></con:property><con:property><con:name>locIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10922986</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId2</con:name><con:value>-10922987</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="8101f810-4794-4fd4-9cc8-578df37f9fa9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута, для которого есть активный дубль по всем параметрам, кроме document" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="ba7fff94-4070-46ab-bfc0-eb8ce79b6853"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")

def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="request" id="d6113497-6169-487d-b8c3-886bb4454026" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="115cf5e3-26fb-48a5-a449-08d1c92f7f1a" name="Not SOAP Fault"/><con:assertion type="Valid HTTP Status Codes" id="c254010f-34a0-48dc-86df-0dc4009a2337" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="isActive=true"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns6='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/routeService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns3='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:route/@isActive</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral"><con:configuration><path>//*:document</path><content>${#TestCase#document1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="created >= записанной ранее текущей дате" disabled="true"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

createdDate= parsedResponse.Body.createRouteResponse.route.created.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(createdDate)
def parsedCreateDate = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

log.info parsedCurrentDate

assert parsedCurrentDate&lt;=parsedCreateDate
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="updated >= записанной ранее текущей дате" disabled="true"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

updatedDate= parsedResponse.Body.createRouteResponse.route.updated.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество diagnosis соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper


countDiagnosis=messageExchange.modelItem.testStep.testCase.getPropertyValue("countDiagnosis").toInteger()

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

assert  diagnosis.size()==countDiagnosis
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="diagnosis соответствуют переданным в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
        
sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&amp;password="+password, "org.postgresql.Driver")

map=[]
for(int i=1; i&lt;=2; i++){
	diagnosId=messageExchange.modelItem.testStep.testCase.getPropertyValue("diagnosId"+i)
	diagnosis=sql.firstRow("select * from diagnosis where id="+diagnosId)
	map &lt;&lt; diagnosis
}

return map[0].code


def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

return diagnosis[0].@id.toString()
/*
currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
*/</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralPositionProfile соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralPositionProfile= parsedResponse.Body.createRouteResponse.route.referralPositionProfile
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger()

assert  referralPositionProfile.size()==countPosProf
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralPositionProfile соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tablePosProf")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
for(int i=1; i<=countPosProf; i++){
	posProfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("posProfId"+i)
	posProfiles=sql.firstRow("select * from "+table+" where id="+posProfId)
	posProfiles.remove('specialization_id')
	posProfiles.remove('profile_of_primary_position')
	map << posProfiles
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
diagnosis= parsedResponse.Body.createRouteResponse.route.referralPositionProfile

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<diagnosis.size(); i++){
	id=diagnosis[i].@id.toLong()
	code=diagnosis[i].@code.toString()
	archived=diagnosis[i].@archived.toBoolean()
	title=diagnosis[i].title.toString()
	item=[id:id, archived:archived, title:title,code:code]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingTreatmentCategoryCode соответствует категории ММ переданных receivingTreatmentId"><con:configuration><path>//*:receivingTreatmentCategoryCode</path><content>${#TestCase#tcCode1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingTreatment соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingTreatment= parsedResponse.Body.createRouteResponse.route.receivingTreatment
countTreatments=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger()

assert  receivingTreatment.size()==countTreatments
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingTreatment соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableT")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
tcCode=messageExchange.modelItem.testStep.testCase.getPropertyValue("tcCode1")
for(int i=1; i<=count; i++){
	treatmentId=messageExchange.modelItem.testStep.testCase.getPropertyValue("tId"+i)
	treatments=sql.firstRow("select * from "+table+" where id="+treatmentId)
	treatments.remove('default_duration')
	treatments.remove('treatment_category_id')
	treatments.put("categoryCode",tcCode)
	map << treatments
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingTreatments= parsedResponse.Body.createRouteResponse.route.receivingTreatment

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<receivingTreatments.size(); i++){
	id=receivingTreatments[i].@id.toLong()
	code=receivingTreatments[i].@code.toString()
	archived=receivingTreatments[i].@archived.toBoolean()
	title=receivingTreatments[i].title.toString()
	categoryCode=receivingTreatments[i].categoryCode.toString()
	item=[id:id, archived:archived, title:title,code:code, categoryCode:categoryCode]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingMedicalOrganizationId соответствует переданному значению receivingMedicalOrganizationId"><con:configuration><path>//*:receivingMedicalOrganizationId</path><content>${#TestCase#moId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingMedicalFacilityId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId
countReceiveMF=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger()

assert  receivingMedicalFacilityId.size()==countReceiveMF
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingMedicalFacilityId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger() 

//собрать все принимающих МУ должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	mfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("mfId"+i).toInteger()
	ids=[id:mfId]
	map << ids
}

map.sort{it.id}

//получить принимающие МУ из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId

//собрать принимающие МУ из ответа в мапу
mapResp=[]
for(int i=0; i<receivingMedicalFacilityId.size(); i++){
	id=receivingMedicalFacilityId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralMedicalOrganizationId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId
countReferralMO=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger()

assert  referralMedicalOrganizationId.size()==countReferralMO
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralMedicalOrganizationId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger() 

//собрать все направляющие МО должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	moId=messageExchange.modelItem.testStep.testCase.getPropertyValue("otherMoId"+i).toInteger()
	ids=[id:moId]
	map << ids
}

map.sort{it.id}

//получить направляющие МО из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId

//собрать направляющие МО из ответа в мапу
mapResp=[]
for(int i=0; i<referralMedicalOrganizationId.size(); i++){
	id=referralMedicalOrganizationId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral2"><con:configuration><path>//*:needReferral</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить id созданного маршрута" id="5102c1c8-3af7-45c6-930d-840780af2188"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute</con:sourceStep><con:sourcePath>//*:route/@id</con:sourcePath><con:targetType>id</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Обновить активность маршурта" id="477a7574-f64b-47fd-aca5-870e61ecfbe7"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
id = testRunner.testCase.getPropertyValue("id")
sql.execute("update "+table+" set active=false where id="+id)</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущую дату" id="564aaee3-00a6-41b4-8f2e-74be2824f53c"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)

scripts.saveCurrentDateToProperty("yyyy-MM-dd'T'HH:mm:ss.SSSSSS")

</script></con:config></con:testStep><con:testStep type="request" id="47178c04-2560-4654-bf8c-d346eb46cd33" name="createRoute 2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute 2" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document2}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="115cf5e3-26fb-48a5-a449-08d1c92f7f1a" name="Not SOAP Fault"/><con:assertion type="Valid HTTP Status Codes" id="c254010f-34a0-48dc-86df-0dc4009a2337" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="isActive=true"><con:configuration><path>declare namespace ns1='http://emias.mos.ru/supp/rir2/route/core/v1/';
declare namespace ns6='http://emias.mos.ru/supp/rir2/journalService/v1/types/';
declare namespace ns2='http://emias.mos.ru/supp/rir2/routeService/v1/types/';
declare namespace ns4='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
declare namespace ns3='http://emias.mos.ru/supp/rir2/core/v1/';
declare namespace ns5='http://emias.mos.ru/system/v1/faults/';
//*:route/@isActive</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="document соответствует переданному значению document"><con:configuration><path>//*:document</path><content>${#TestCase#document2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="created >= записанной ранее текущей дате"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

createdDate= parsedResponse.Body.createRouteResponse.route.created.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(createdDate)
def parsedCreateDate = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

log.info parsedCurrentDate

assert parsedCurrentDate&lt;=parsedCreateDate
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="updated >= записанной ранее текущей дате"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat

 newFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
 oldFormat="yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

updatedDate= parsedResponse.Body.createRouteResponse.route.updated.toString()

currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество diagnosis соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper


countDiagnosis=messageExchange.modelItem.testStep.testCase.getPropertyValue("countDiagnosis").toInteger()

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

assert  diagnosis.size()==countDiagnosis
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="diagnosis соответствуют переданным в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper
import java.text.SimpleDateFormat
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
        
sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&amp;password="+password, "org.postgresql.Driver")

map=[]
for(int i=1; i&lt;=2; i++){
	diagnosId=messageExchange.modelItem.testStep.testCase.getPropertyValue("diagnosId"+i)
	diagnosis=sql.firstRow("select * from diagnosis where id="+diagnosId)
	map &lt;&lt; diagnosis
}

return map[0].code


def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

diagnosis= parsedResponse.Body.createRouteResponse.route.diagnosis

return diagnosis[0].@id.toString()
/*
currentDate=messageExchange.modelItem.testStep.testCase.getPropertyValue( "currentDate" )

def formatDate=new SimpleDateFormat(newFormat)
Date date2=new SimpleDateFormat(oldFormat).parse(updatedDate)
def parsedUpdated = formatDate.format(date2)

Date date3=new SimpleDateFormat(oldFormat).parse(currentDate)
def parsedCurrentDate = formatDate.format(date3)

assert parsedCurrentDate&lt;=parsedUpdated
*/</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralPositionProfile соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralPositionProfile= parsedResponse.Body.createRouteResponse.route.referralPositionProfile
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger()

assert  referralPositionProfile.size()==countPosProf
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralPositionProfile соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tablePosProf")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
countPosProf=messageExchange.modelItem.testStep.testCase.getPropertyValue("countPosProf").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
for(int i=1; i<=countPosProf; i++){
	posProfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("posProfId"+i)
	posProfiles=sql.firstRow("select * from "+table+" where id="+posProfId)
	posProfiles.remove('specialization_id')
	posProfiles.remove('profile_of_primary_position')
	map << posProfiles
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
diagnosis= parsedResponse.Body.createRouteResponse.route.referralPositionProfile

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<diagnosis.size(); i++){
	id=diagnosis[i].@id.toLong()
	code=diagnosis[i].@code.toString()
	archived=diagnosis[i].@archived.toBoolean()
	title=diagnosis[i].title.toString()
	item=[id:id, archived:archived, title:title,code:code]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingTreatmentCategoryCode соответствует категории ММ переданных receivingTreatmentId"><con:configuration><path>//*:receivingTreatmentCategoryCode</path><content>${#TestCase#tcCode1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingTreatment соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingTreatment= parsedResponse.Body.createRouteResponse.route.receivingTreatment
countTreatments=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger()

assert  receivingTreatment.size()==countTreatments
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingTreatment соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper
import groovy.sql.Sql

def login =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbLogin")
def password =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbPassword")
def dbconstring =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("dbConnect")
def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableT")

sql=Sql.newInstance("jdbc:postgresql://"+dbconstring+"?user="+login+"&password="+password, "org.postgresql.Driver")
count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countTreatments").toInteger() 
//собрать все параметры профилей должностей из бд в мапу
map=[]
tcCode=messageExchange.modelItem.testStep.testCase.getPropertyValue("tcCode1")
for(int i=1; i<=count; i++){
	treatmentId=messageExchange.modelItem.testStep.testCase.getPropertyValue("tId"+i)
	treatments=sql.firstRow("select * from "+table+" where id="+treatmentId)
	treatments.remove('default_duration')
	treatments.remove('treatment_category_id')
	treatments.put("categoryCode",tcCode)
	map << treatments
}

map.sort{it.id}

//получить профили должностей из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingTreatments= parsedResponse.Body.createRouteResponse.route.receivingTreatment

//собрать профили должностей из ответа в мапу
mapResp=[]
for(int i=0; i<receivingTreatments.size(); i++){
	id=receivingTreatments[i].@id.toLong()
	code=receivingTreatments[i].@code.toString()
	archived=receivingTreatments[i].@archived.toBoolean()
	title=receivingTreatments[i].title.toString()
	categoryCode=receivingTreatments[i].categoryCode.toString()
	item=[id:id, archived:archived, title:title,code:code, categoryCode:categoryCode]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="receivingMedicalOrganizationId соответствует переданному значению receivingMedicalOrganizationId"><con:configuration><path>//*:receivingMedicalOrganizationId</path><content>${#TestCase#moId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество receivingMedicalFacilityId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId
countReceiveMF=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger()

assert  receivingMedicalFacilityId.size()==countReceiveMF
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры receivingMedicalFacilityId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReceiveMF").toInteger() 

//собрать все принимающих МУ должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	mfId=messageExchange.modelItem.testStep.testCase.getPropertyValue("mfId"+i).toInteger()
	ids=[id:mfId]
	map << ids
}

map.sort{it.id}

//получить принимающие МУ из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
receivingMedicalFacilityId= parsedResponse.Body.createRouteResponse.route.receivingMedicalFacilityId

//собрать принимающие МУ из ответа в мапу
mapResp=[]
for(int i=0; i<receivingMedicalFacilityId.size(); i++){
	id=receivingMedicalFacilityId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="количество referralMedicalOrganizationId соответствует количеству в запросе"><con:configuration><scriptText>import groovy.xml.XmlSlurper

def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)

referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId
countReferralMO=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger()

assert  referralMedicalOrganizationId.size()==countReferralMO
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="48b65fda-09b6-431a-be38-16f85eac1c60" name="параметры referralMedicalOrganizationId соответствуют переданным в запросе"><con:configuration><scriptText><![CDATA[import groovy.xml.XmlSlurper

def table =messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("tableMF")

count=messageExchange.modelItem.testStep.testCase.getPropertyValue("countReferralMO").toInteger() 

//собрать все направляющие МО должностей из бд в мапу
map=[]
for(int i=1; i<=count; i++){
	moId=messageExchange.modelItem.testStep.testCase.getPropertyValue("otherMoId"+i).toInteger()
	ids=[id:moId]
	map << ids
}

map.sort{it.id}

//получить направляющие МО из ответа
def response = context.expand('${createRoute#Response}')
parsedResponse = new XmlSlurper().parseText(response)
referralMedicalOrganizationId= parsedResponse.Body.createRouteResponse.route.referralMedicalOrganizationId

//собрать направляющие МО из ответа в мапу
mapResp=[]
for(int i=0; i<referralMedicalOrganizationId.size(); i++){
	id=referralMedicalOrganizationId[i].toLong()
	item=[id:id]
	mapResp << item
}

mapResp.sort{it.id}
//return mapResp

assert mapResp==map
//return diagnosis[0].@id.toString()
]]></scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" id="14ce8327-2663-4fd1-a793-7f1b6eb554b6" name="needReferral соответствует переданному значению needReferral2"><con:configuration><path>//*:needReferral</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Получить id, number, created, updated созданного маршрута 2" id="19a1c8f3-ebf8-4793-83d7-77740fd6b08f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute 2</con:sourceStep><con:sourcePath>//*:route/@id</con:sourcePath><con:targetType>id2</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>number</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute 2</con:sourceStep><con:sourcePath>//*:route/@number</con:sourcePath><con:targetType>number</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>created</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute 2</con:sourceStep><con:sourcePath>//*:created</con:sourcePath><con:targetType>created</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>updated</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createRoute 2</con:sourceStep><con:sourcePath>//*:updated</con:sourcePath><con:targetType>updated</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route" id="8c26c39f-82ea-44a7-abd1-0d4f70f653d1"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT * FROM "+table+"  WHERE ID="+id
items= sql.rows(getItems)
if ( items.size()== 0){
		testRunner.fail("Запись в таблице "+table+" с id ="+id+"  не найдена")
}
else {
	log.info("Запись в таблице  "+table+" с id ="+id+"  найдена") 
	//log.info(items)
	def req_number=testRunner.testCase.getPropertyValue("number")
	def req_document = testRunner.testCase.getPropertyValue("document2")
	def req_created = testRunner.testCase.getPropertyValue("created").replace("T"," ")
	def req_updated = testRunner.testCase.getPropertyValue("updated").replace("T"," ")
	def req_tcId=testRunner.testCase.getPropertyValue("tcId1")
	def req_moId = testRunner.testCase.getPropertyValue("moId1")
	
	def db_active = items[0].active
	def db_needReferral = items[0].need_referral
	def db_number = items[0].number.toString()
	def db_document = items[0].document
	def db_created = items[0].created.toString()
	def db_updated = items[0].updated.toString()
	def db_tcId = items[0].receiving_treatment_category.toString()
	def db_moId = items[0].receiving_medical_organization.toString()
	
	assert db_active == true
	assert db_needReferral == true
	assert db_number ==req_number
	assert db_document ==req_document
	assert db_created ==req_created
	assert db_updated ==req_updated
	assert db_tcId ==req_tcId
	assert db_moId ==req_moId
	log.info("Запись в таблице создана корректно.")
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_diagnosis" id="026e9ca1-fcbd-4392-9b78-01a04533fb71"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteDiag")
count =testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT diagnosis_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	diagnosId=testRunner.testCase.getPropertyValue("diagnosId"+i).toInteger()
	diagnosis=[id:diagnosId]
	map &lt;&lt; diagnosis
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_position_profile" id="e9ec5172-6591-4ba1-bbd7-fec3a5409d37"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoutePosProf")
count =testRunner.testCase.getPropertyValue("countPosProf").toInteger()
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT referral_position_profile_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("posProfId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_treatment" id="ebd73f46-1abb-4c13-97d4-a53d4cd7a8a5"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteT")
count =testRunner.testCase.getPropertyValue("countTreatments").toInteger()
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT receiving_treatment_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("tId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_receiving_medical_facility" id="c18dc08f-e9e8-4cd3-af9f-4cc518925b26"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteRecMF")
count =testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT receiving_medical_facility_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("mfId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Проверить созданные записи в таблице route_referral_medical_organization" id="b82292e6-3f19-416a-9756-706ea79e99e2"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRouteRefMO")
count =testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
id = testRunner.testCase.getPropertyValue("id2")
getItems = "SELECT referral_medical_organization_id as id FROM "+table+"  WHERE route_id="+id
dbItems= sql.rows(getItems)
if ( dbItems.size() != count){
		testRunner.fail("Количество ожидаемых  в таблице "+table+" с route_id ="+id+"  не совпало с ожидаемым. Ожидаемое: "+count+", фактическое: "+dbItems.size())
}

log.info dbItems.sort{it.id}

map=[]
for(int i=1; i&lt;=count; i++){
	id=testRunner.testCase.getPropertyValue("otherMoId"+i).toInteger()
	ids=[id:id]
	map &lt;&lt; ids
}

map.sort{it.id}

assert map==dbItems
</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="44c23212-e525-43dd-801b-9c5e32e91047"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

def Routes = new Routes(context, testRunner, log)
Routes.clearRoute("id")
Routes.clearRoute("id2")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:54:33.544058</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T16:54:33.000966</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100419</con:value></con:property><con:property><con:name>number</con:name><con:value>100420</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:54:33.544058</con:value></con:property><con:property><con:name>id2</con:name><con:value>100420</con:value></con:property><con:property><con:name>document2</con:name><con:value>document2</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>diagnosId2</con:name><con:value>3</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>moId1</con:name><con:value>-10922988</con:value></con:property><con:property><con:name>moIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>-28</con:value></con:property><con:property><con:name>aoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-10922988</con:value></con:property><con:property><con:name>mfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>locId1</con:name><con:value>-11</con:value></con:property><con:property><con:name>locIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId2</con:name><con:value>-29</con:value></con:property><con:property><con:name>aoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId2</con:name><con:value>-10922989</con:value></con:property><con:property><con:name>mfIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>locId2</con:name><con:value>-12</con:value></con:property><con:property><con:name>locIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10922990</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId2</con:name><con:value>-10922991</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="2831877e-c3a9-4ec0-80b7-4c01fba296bd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута с несуществующим referralMoId(E121)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="7ef35469-526e-4e21-bc22-07e4d87e36a3"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")
MedOrganizations.getNonExistedMO(2)

def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущее количество маршрутов" id="5b9a3452-304a-4962-81b1-ee80e0ab1b10"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
count= items.size()
testRunner.testCase.setPropertyValue("countRoutes", count.toString())
</script></con:config></con:testStep><con:testStep type="request" id="f8661240-34d3-4f33-9407-162908fbf251" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#nonExistedMoId1}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E121"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E121:  Значение справочника "Медицинские организации" с кодом ${#TestCase#nonExistedMoId1} не найдено.
Parameters:
 code:  ${#TestCase#nonExistedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Значение справочника "Медицинские организации" с кодом ${#TestCase#nonExistedMoId1} не найдено.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=code"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>code</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра duplicateRouteId =id созданного ранее маршрута"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#nonExistedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E121"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E121</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" id="6d3ef02e-f91b-488b-9c1f-690699003068" name="createRoute 2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute 2" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#nonExistedMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#nonExistedMoId2}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E121"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E121:  Значение справочника "Медицинские организации" с кодом ${#TestCase#nonExistedMoId1} не найдено.
Parameters:
 code:  ${#TestCase#nonExistedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Значение справочника "Медицинские организации" с кодом ${#TestCase#nonExistedMoId1} не найдено.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=code"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>code</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра duplicateRouteId =id созданного ранее маршрута"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#nonExistedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E121"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E121</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" id="549f110d-a390-49ea-941c-eee0df4d7eb7" name="createRoute 3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute 3" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#nonExistedMoId1}</v1:referralMedicalOrganizationId>\r
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E121"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E121:  Значение справочника "Медицинские организации" с кодом ${#TestCase#nonExistedMoId1} не найдено.
Parameters:
 code:  ${#TestCase#nonExistedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Значение справочника "Медицинские организации" с кодом ${#TestCase#nonExistedMoId1} не найдено.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=code"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>code</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра duplicateRouteId =id созданного ранее маршрута"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#nonExistedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E121"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E121</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие новой записи в таблице route" id="68413fea-f551-4245-911b-16ca14461154"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
countOld = testRunner.testCase.getPropertyValue("countRoutes").toInteger()

getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
countNew= items.size()

assert countOld==countNew</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="c8328c91-ef59-41d8-b0a6-3e9388ca1846"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

//def Routes = new Routes(context, testRunner, log)
//Routes.clearRoute("id")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>1</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T17:04:25.000709</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100414</con:value></con:property><con:property><con:name>number</con:name><con:value>100414</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>nonExistedMoId1</con:name><con:value>200001799096</con:value></con:property><con:property><con:name>nonExistedMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>countRoutes</con:name><con:value>81</con:value></con:property><con:property><con:name>nonExistedMoId2</con:name><con:value>200001799097</con:value></con:property><con:property><con:name>nonExistedMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>diagnosId2</con:name><con:value>3</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>moId1</con:name><con:value>-10922996</con:value></con:property><con:property><con:name>moIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>-32</con:value></con:property><con:property><con:name>aoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-10922996</con:value></con:property><con:property><con:name>mfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>locId1</con:name><con:value>-15</con:value></con:property><con:property><con:name>locIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId2</con:name><con:value>-33</con:value></con:property><con:property><con:name>aoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId2</con:name><con:value>-10922997</con:value></con:property><con:property><con:name>mfIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>locId2</con:name><con:value>-16</con:value></con:property><con:property><con:name>locIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10922998</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="e654b357-392e-484a-93e5-ae6e7f096466" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута с архивным referralMoId(E044)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="41a8117c-c5d5-4738-ba0a-9031fedc56f2"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")
MedOrganizations.createArchivedMO()

def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущее количество маршрутов" id="f0233ca4-20de-4232-8279-8f5d7308dc6b"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
count= items.size()
testRunner.testCase.setPropertyValue("countRoutes", count.toString())
</script></con:config></con:testStep><con:testStep type="request" id="145a7ff4-2e30-47a8-9c85-91a3a2c264af" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#archivedMoId1}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E044"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E044:  Медицинская организация с идентификатором ${#TestCase#archivedMoId1} является архивной.
Parameters:
 id:  ${#TestCase#archivedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Медицинская организация с идентификатором ${#TestCase#archivedMoId1} является архивной.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=id"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>id</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра id=id архивного МО"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#archivedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E044"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E044</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие новой записи в таблице route" id="79670a4a-c15e-4b43-828d-c0449539f379"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
countOld = testRunner.testCase.getPropertyValue("countRoutes").toInteger()

getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
countNew= items.size()

assert countOld==countNew</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="6013ecd3-3d7a-46c1-aac6-6e5dd4740835"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

//def Routes = new Routes(context, testRunner, log)
//Routes.clearRoute("id")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")
MedOrganizations.clearArchivedMO()



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>1</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T17:04:25.000709</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100414</con:value></con:property><con:property><con:name>number</con:name><con:value>100414</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>countRoutes</con:name><con:value>81</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>diagnosId2</con:name><con:value>3</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>moId1</con:name><con:value>-10922999</con:value></con:property><con:property><con:name>moIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>-34</con:value></con:property><con:property><con:name>aoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-10922999</con:value></con:property><con:property><con:name>mfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>locId1</con:name><con:value>-17</con:value></con:property><con:property><con:name>locIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId2</con:name><con:value>-35</con:value></con:property><con:property><con:name>aoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId2</con:name><con:value>-10923000</con:value></con:property><con:property><con:name>mfIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>locId2</con:name><con:value>-18</con:value></con:property><con:property><con:name>locIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10923001</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>archivedMoId1</con:name><con:value>-10923002</con:value></con:property><con:property><con:name>archivedMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="7ec58c7a-d1c6-420f-9f97-034fa7ccb444" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута с несуществующим reciecingMoId(E121)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="af634fb8-089c-47e3-b8e3-ebc0409a418a"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)

//countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
//MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")
MedOrganizations.getNonExistedMO(2)

def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущее количество маршрутов" id="c0bcbc9b-1b5b-4360-b630-645e1734079f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
count= items.size()
testRunner.testCase.setPropertyValue("countRoutes", count.toString())
</script></con:config></con:testStep><con:testStep type="request" id="7521c85a-5849-48fb-bbdb-38df5a4b053b" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#nonExistedMoId1}</v1:receivingMedicalOrganizationId>\r
         
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E121"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E121:  Значение справочника "Медицинские организации" с кодом ${#TestCase#nonExistedMoId1} не найдено.
Parameters:
 code:  ${#TestCase#nonExistedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Значение справочника "Медицинские организации" с кодом ${#TestCase#nonExistedMoId1} не найдено.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=code"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>code</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра duplicateRouteId =id созданного ранее маршрута"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#nonExistedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E121"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E121</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие новой записи в таблице route" id="b8d15f62-e06e-4227-851f-a64a784e07b1"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
countOld = testRunner.testCase.getPropertyValue("countRoutes").toInteger()

getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
countNew= items.size()

assert countOld==countNew</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="ace25a40-dc77-44bd-9e6f-b8ca47d2eef8"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

//def Routes = new Routes(context, testRunner, log)
//Routes.clearRoute("id")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
//MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T17:04:25.000709</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100414</con:value></con:property><con:property><con:name>number</con:name><con:value>100414</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>countRoutes</con:name><con:value>81</con:value></con:property><con:property><con:name>nonExistedMoId1</con:name><con:value>200001799096</con:value></con:property><con:property><con:name>nonExistedMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>nonExistedMoId2</con:name><con:value>200001799097</con:value></con:property><con:property><con:name>nonExistedMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>diagnosId2</con:name><con:value>3</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10923003</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId2</con:name><con:value>-10923004</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="37196a17-709b-4b03-b229-f51f88011573" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута с архивным reciecingMoId(E044)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="97b3a16d-f45f-45cf-adf5-bf109d2c3b16"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)

//countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
//MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")
MedOrganizations.getNonExistedMO(2)

def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущее количество маршрутов" id="f55fb16f-7a59-4431-9b2f-24ed4beef3cd"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
count= items.size()
testRunner.testCase.setPropertyValue("countRoutes", count.toString())
</script></con:config></con:testStep><con:testStep type="request" id="990829e8-d435-4481-b05b-b47f94d30cb7" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
             <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>
            <v1:receivingMedicalOrganizationId>${#TestCase#nonExistedMoId1}</v1:receivingMedicalOrganizationId>\r
         
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
             <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E121"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E121:  Значение справочника "Медицинские организации" с кодом ${#TestCase#nonExistedMoId1} не найдено.
Parameters:
 code:  ${#TestCase#nonExistedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Значение справочника "Медицинские организации" с кодом ${#TestCase#nonExistedMoId1} не найдено.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=code"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>code</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра duplicateRouteId =id созданного ранее маршрута"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#nonExistedMoId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E121"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E121</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие новой записи в таблице route" id="7782e596-aaaf-4f06-a575-3137b1229740"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
countOld = testRunner.testCase.getPropertyValue("countRoutes").toInteger()

getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
countNew= items.size()

assert countOld==countNew</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="90fb5f56-35f3-4817-8e78-289e5328c5e2"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

//def Routes = new Routes(context, testRunner, log)
//Routes.clearRoute("id")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
//MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T17:04:25.000709</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100414</con:value></con:property><con:property><con:name>number</con:name><con:value>100414</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>countRoutes</con:name><con:value>82</con:value></con:property><con:property><con:name>nonExistedMoId1</con:name><con:value>200001799096</con:value></con:property><con:property><con:name>nonExistedMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>nonExistedMoId2</con:name><con:value>200001799097</con:value></con:property><con:property><con:name>nonExistedMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>diagnosId2</con:name><con:value>3</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10923005</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId2</con:name><con:value>-10923006</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="80ea583c-be99-4b50-b0f6-01092f8b7b10" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута с несуществующим reciecingMfId(E122)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="b054373b-83db-4d45-acf3-b9d4ef6b9b81"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")
MedOrganizations.getNonExistedMF(1)

def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущее количество маршрутов" id="0488edff-b4cb-449f-bd4f-bd5b96b818b6"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
count= items.size()
testRunner.testCase.setPropertyValue("countRoutes", count.toString())
</script></con:config></con:testStep><con:testStep type="request" id="01ba2a02-5478-47d4-8964-110faf86e409" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>\r
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
            <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>\r
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>\r
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#nonExistedMfId1}</v1:receivingMedicalFacilityId>\r
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>\r
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E122"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E122:  Значение справочника "Медицинские учреждения" с кодом ${#TestCase#nonExistedMfId1} не найдено.
Parameters:
 code:  ${#TestCase#nonExistedMfId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Значение справочника "Медицинские учреждения" с кодом ${#TestCase#nonExistedMfId1} не найдено.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=code"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>code</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра code = id несуществующего МУ"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#nonExistedMfId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E122"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E122</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие новой записи в таблице route" id="ddb7c1b8-323f-4a1a-9726-af42aca43e1d"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
countOld = testRunner.testCase.getPropertyValue("countRoutes").toInteger()

getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
countNew= items.size()

assert countOld==countNew</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="1147bada-f7f7-4f5c-96de-b52660d3311d"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

//def Routes = new Routes(context, testRunner, log)
//Routes.clearRoute("id")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>1</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T17:04:25.000709</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100414</con:value></con:property><con:property><con:name>number</con:name><con:value>100414</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>countRoutes</con:name><con:value>82</con:value></con:property><con:property><con:name>nonExistedMfId1</con:name><con:value>200001812168</con:value></con:property><con:property><con:name>nonExistedMfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>diagnosId2</con:name><con:value>3</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>moId1</con:name><con:value>-10923007</con:value></con:property><con:property><con:name>moIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>-36</con:value></con:property><con:property><con:name>aoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-10923007</con:value></con:property><con:property><con:name>mfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>locId1</con:name><con:value>-19</con:value></con:property><con:property><con:name>locIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10923008</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId2</con:name><con:value>-10923009</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="4315b887-d933-44bd-86b4-69eca2fb74cf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута с архивным reciecingMfId(E041)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="4b5c9819-8df4-4e4e-a905-dd666d8f69c5"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")
MedOrganizations.createArchivedMF()

def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущее количество маршрутов" id="001a1bfa-0be2-4d5c-9432-97a81cd4d87f"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
count= items.size()
testRunner.testCase.setPropertyValue("countRoutes", count.toString())
</script></con:config></con:testStep><con:testStep type="request" id="e336a580-f90b-4916-9194-aa9bc7a47654" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>\r
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
            <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>\r
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>\r
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#archivedMfId1}</v1:receivingMedicalFacilityId>\r
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>\r
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E041"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E041:  Медицинское учреждение с идентификатором ${#TestCase#archivedMfId1} является архивным.
Parameters:
 medicalFacilityId:  ${#TestCase#archivedMfId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Медицинское учреждение с идентификатором ${#TestCase#archivedMfId1} является архивным.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=medicalFacilityId"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>medicalFacilityId</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра medicalFacilityId = id архивного МУ"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#archivedMfId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E041"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E041</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие новой записи в таблице route" id="73414f70-f79c-4c55-b7af-66a5f3e35864"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
countOld = testRunner.testCase.getPropertyValue("countRoutes").toInteger()

getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
countNew= items.size()

assert countOld==countNew</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="3914a9bb-fff1-4506-ac37-04ecea8ca5fe"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

//def Routes = new Routes(context, testRunner, log)
//Routes.clearRoute("id")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearArchivedMF()
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")




</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>1</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countRoutes</con:name><con:value>83</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T17:04:25.000709</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100422</con:value></con:property><con:property><con:name>number</con:name><con:value>100414</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>diagnosId2</con:name><con:value>3</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>moId1</con:name><con:value>-10923010</con:value></con:property><con:property><con:name>moIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>-37</con:value></con:property><con:property><con:name>aoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-10923010</con:value></con:property><con:property><con:name>mfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>locId1</con:name><con:value>-20</con:value></con:property><con:property><con:name>locIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10923011</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId2</con:name><con:value>-10923012</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>aoForArchivedMFId1</con:name><con:value>-38</con:value></con:property><con:property><con:name>aoForArchivedMFIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>archivedMfId1</con:name><con:value>-10923011</con:value></con:property><con:property><con:name>archivedMfIdCreatedByTest1</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="1d3adcaf-b6ae-4129-b93d-5c947aec6f7e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута recievingMfId не из recievingMoId(E609)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="e27ebc54-3c12-45c1-b217-52803ea7f3a7"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createStructureOfMO(1, "new")
MedOrganizations.createMo(countReferralMO, "otherMoId")
MedOrganizations.createArchivedMF()

def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущее количество маршрутов" id="698fbe81-9002-4367-bafd-8705f5bb50d3"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
count= items.size()
testRunner.testCase.setPropertyValue("countRoutes", count.toString())
</script></con:config></con:testStep><con:testStep type="request" id="ccbc1408-d071-417e-be6b-898b7707e569" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>\r
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
            <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>\r
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>\r
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#newmfId1}</v1:receivingMedicalFacilityId>\r
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>\r
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E609"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E609:  Медицинское учреждение с идентификатором ${#TestCase#newmfId1}, указанное в качестве принимающего медицинского учреждения, не относится к медицинской организации с идентификатором ${#TestCase#moId1}, указанной в качестве принимающей медицинской организации
Parameters:
 medicalFacilityId:  ${#TestCase#newmfId1} medicalOrganizationId:  ${#TestCase#moId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Медицинское учреждение с идентификатором ${#TestCase#newmfId1}, указанное в качестве принимающего медицинского учреждения, не относится к медицинской организации с идентификатором ${#TestCase#moId1}, указанной в качестве принимающей медицинской организации</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=medicalFacilityId"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>medicalFacilityId</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра medicalFacilityId = id МУ из другого МО"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#newmfId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E609"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E609</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ второго параметра=medicalOrganizationId"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter[2]/@key</path><content>medicalOrganizationId</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра medicalOrganizationId = receivingMedicalOrganizationId"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#moId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие новой записи в таблице route" id="f6392fb4-baaf-41b0-9bb7-6724d1946936"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
countOld = testRunner.testCase.getPropertyValue("countRoutes").toInteger()

getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
countNew= items.size()

assert countOld==countNew</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="7fbf6391-04df-4455-a0b5-a9f9b3ee54e0"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

//def Routes = new Routes(context, testRunner, log)
//Routes.clearRoute("id")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearArchivedMF()
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")




</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>1</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countRoutes</con:name><con:value>83</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T17:04:25.000709</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100422</con:value></con:property><con:property><con:name>number</con:name><con:value>100414</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>newmoId1</con:name><con:value>-10923014</con:value></con:property><con:property><con:name>newmoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>newspecId1</con:name><con:value>102</con:value></con:property><con:property><con:name>newspecIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>newaoId1</con:name><con:value>-40</con:value></con:property><con:property><con:name>newaoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>newmfId1</con:name><con:value>-10923014</con:value></con:property><con:property><con:name>newmfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>newlocId1</con:name><con:value>-22</con:value></con:property><con:property><con:name>newlocIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>diagnosId2</con:name><con:value>3</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>moId1</con:name><con:value>-10923013</con:value></con:property><con:property><con:name>moIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>-39</con:value></con:property><con:property><con:name>aoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-10923013</con:value></con:property><con:property><con:name>mfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>locId1</con:name><con:value>-21</con:value></con:property><con:property><con:name>locIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10923015</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId2</con:name><con:value>-10923016</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>aoForArchivedMFId1</con:name><con:value>-41</con:value></con:property><con:property><con:name>aoForArchivedMFIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>archivedMfId1</con:name><con:value>-10923015</con:value></con:property><con:property><con:name>archivedMfIdCreatedByTest1</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="25caa341-64c1-4bb1-a88f-d98739972ef9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута с несуществующим diagnosis(E046)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="80d14e14-5555-4f86-9672-b65a1aa08d70"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)
Diagnosis.getNonExistedDiagnosis()


countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")


def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущее количество маршрутов" id="f3240d8d-5cb9-4f65-8be5-f92bdb997807"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
count= items.size()
testRunner.testCase.setPropertyValue("countRoutes", count.toString())
</script></con:config></con:testStep><con:testStep type="request" id="bbe941b7-d278-4e45-954a-442d4cd11d90" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#nonExistedDiagnosisId1}</v1:diagnosisId>\r
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
            <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>\r
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>\r
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>\r
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>\r
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E046"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E046:  Значение справочника "Диагнозы" с идентификатором ${#TestCase#nonExistedDiagnosisId1} не найдено.
Parameters:
 id:  ${#TestCase#nonExistedDiagnosisId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Значение справочника "Диагнозы" с идентификатором ${#TestCase#nonExistedDiagnosisId1} не найдено.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=id"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>id</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра id = id несуществующего диагноза"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#nonExistedDiagnosisId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E046"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E046</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие новой записи в таблице route" id="fba5da3d-252c-4a63-b1cd-ad9677cfbe56"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
countOld = testRunner.testCase.getPropertyValue("countRoutes").toInteger()

getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
countNew= items.size()

assert countOld==countNew</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="5ee1beb4-eef2-4107-a7ad-7c15f4957192"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

//def Routes = new Routes(context, testRunner, log)
//Routes.clearRoute("id")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>1</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countRoutes</con:name><con:value>83</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T17:04:25.000709</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100414</con:value></con:property><con:property><con:name>nonExistedDiagnosisId1</con:name><con:value>1001</con:value></con:property><con:property><con:name>nonExistedDiagnosisIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>number</con:name><con:value>100414</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>moId1</con:name><con:value>-10923017</con:value></con:property><con:property><con:name>moIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>-42</con:value></con:property><con:property><con:name>aoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-10923017</con:value></con:property><con:property><con:name>mfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>locId1</con:name><con:value>-23</con:value></con:property><con:property><con:name>locIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId2</con:name><con:value>-43</con:value></con:property><con:property><con:name>aoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId2</con:name><con:value>-10923018</con:value></con:property><con:property><con:name>mfIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>locId2</con:name><con:value>-24</con:value></con:property><con:property><con:name>locIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10923019</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId2</con:name><con:value>-10923020</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="5ed8690c-9d1c-4a7a-a795-a943b1c3f717" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута с архивным diagnosis(E047)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="92d3b2ff-8546-4026-ad0d-39f869daa135"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)
Diagnosis.findOrCreateArchivedDiagnosis()


countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")


def JobExecution = new JobExecution(context, testRunner, log) JobExecution.getPositionProfiles("specId1")

</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущее количество маршрутов" id="916e1f87-509e-427c-8c91-77ac543d2fad"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
count= items.size()
testRunner.testCase.setPropertyValue("countRoutes", count.toString())
</script></con:config></con:testStep><con:testStep type="request" id="14163f2a-6e46-4c2f-b866-2fe0e61c2962" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#archivedDiagnosId1}</v1:diagnosisId>\r
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
            <v1:referralPositionProfileId>${#TestCase#posProfId2}</v1:referralPositionProfileId>\r
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>\r
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>\r
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>\r
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E047"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E047:  Диагноз с идентификатором ${#TestCase#archivedDiagnosId1} является архивным.
Parameters:
 id:  ${#TestCase#archivedDiagnosId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Диагноз с идентификатором ${#TestCase#archivedDiagnosId1} является архивным.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=id"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>id</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра id = id архивного диагноза"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#archivedDiagnosId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E047"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E047</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие новой записи в таблице route" id="0528b9d6-daf4-47c0-a2d1-73faa95f9cc0"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
countOld = testRunner.testCase.getPropertyValue("countRoutes").toInteger()

getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
countNew= items.size()

assert countOld==countNew</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="34463bb7-34f8-4222-bda8-0629c7793373"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

//def Routes = new Routes(context, testRunner, log)
//Routes.clearRoute("id")

def JobExecution = new JobExecution(context, testRunner, log) 
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)
Diagnosis.clearArchivedDiagnosis()

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>1</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>2</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countRoutes</con:name><con:value>83</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T17:04:25.000709</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100414</con:value></con:property><con:property><con:name>number</con:name><con:value>100414</con:value></con:property><con:property><con:name>posProfCode1</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId1</con:name><con:value>-5</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle1</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>tcId1</con:name><con:value>128627841</con:value></con:property><con:property><con:name>tcIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId1</con:name><con:value>135469128</con:value></con:property><con:property><con:name>tIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>tId2</con:name><con:value>135469134</con:value></con:property><con:property><con:name>tIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>tcCode1</con:name><con:value>INSTRUMENTAL</con:value></con:property><con:property><con:name>diagnosId1</con:name><con:value>1</con:value></con:property><con:property><con:name>diagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>archivedDiagnosId1</con:name><con:value>4</con:value></con:property><con:property><con:name>archivedDiagnosIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>moId1</con:name><con:value>-10923021</con:value></con:property><con:property><con:name>moIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId1</con:name><con:value>-44</con:value></con:property><con:property><con:name>aoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId1</con:name><con:value>-10923021</con:value></con:property><con:property><con:name>mfIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>locId1</con:name><con:value>-25</con:value></con:property><con:property><con:name>locIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>aoId2</con:name><con:value>-45</con:value></con:property><con:property><con:name>aoIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>mfId2</con:name><con:value>-10923022</con:value></con:property><con:property><con:name>mfIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>locId2</con:name><con:value>-26</con:value></con:property><con:property><con:name>locIdCreatedByTest2</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId1</con:name><con:value>-10923023</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>otherMoId2</con:name><con:value>-10923024</con:value></con:property><con:property><con:name>otherMoIdCreatedByTest2</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="08a28438-98ee-4f3c-b3bd-c93ce7f6cc0e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Создание маршрута с несуществующим posProf(E048)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Создать тестовые данные" id="6aae0710-fb01-44fe-bd0a-9aaba60812e0"><con:settings/><con:config><script>countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.findOrCreateTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.findOrCreateDiagnosis(countDiagnosis)


countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.createStructureOfMO(countReceiveMF)
MedOrganizations.createMo(countReferralMO, "otherMoId")

def JobExecution = new JobExecution(context, testRunner, log)
JobExecution.getPositionProfiles("specId1")
JobExecution.getNonExistedPositionProfiles()
</script></con:config></con:testStep><con:testStep type="groovy" name="Запомнить текущее количество маршрутов" id="fab6d179-fdb2-4cb4-9ea7-68def1896709"><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
count= items.size()
testRunner.testCase.setPropertyValue("countRoutes", count.toString())
</script></con:config></con:testStep><con:testStep type="request" id="e7b00570-d61d-4806-99e7-97c0c2075794" name="createRoute"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>createRoute</con:operation><con:request name="createRoute" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ca7c41de-44bd-4a14-abe0-cf48f8469419"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/route/core/v1/" xmlns:v11="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\r
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">\r
            <wsse:Username>${#Project#securityUsername}</wsse:Username>\r
         </wsse:UsernameToken>\r
      </wsse:Security>\r
      <user:userContext>\r
         <user:systemName>${#Project#systemName}</user:systemName>\r
         <user:userName>${#Project#userName}</user:userName>\r
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>\r
         <user:userRights/>\r
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>\r
      </user:userContext>\r
   </soap:Header>\r
   <soap:Body>\r
      <typ:createRouteRequest>\r
         <typ:params>\r
            <v1:document>${#TestCase#document1}</v1:document>\r
            <!--Zero or more repetitions:-->\r
            <v1:diagnosisId>${#TestCase#diagnosId1}</v1:diagnosisId>\r
            <v1:diagnosisId>${#TestCase#diagnosId2}</v1:diagnosisId>\r
            <!--Zero or more repetitions:-->\r
            <v1:referralPositionProfileId>${#TestCase#posProfId1}</v1:referralPositionProfileId>\r
            <v1:referralPositionProfileId>${#TestCase#nonExistedPosProfId1}</v1:referralPositionProfileId>\r
            <!--1 or more repetitions:-->\r
            <v1:receivingTreatmentId>${#TestCase#tId1}</v1:receivingTreatmentId>\r
            <v1:receivingTreatmentId>${#TestCase#tId2}</v1:receivingTreatmentId>\r
            <v1:receivingMedicalOrganizationId>${#TestCase#moId1}</v1:receivingMedicalOrganizationId>\r
            <!--Zero or more repetitions:-->\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId1}</v1:receivingMedicalFacilityId>\r
            <v1:receivingMedicalFacilityId>${#TestCase#mfId2}</v1:receivingMedicalFacilityId>\r
            <!--1 or more repetitions:-->\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId1}</v1:referralMedicalOrganizationId>\r
            <v1:referralMedicalOrganizationId>${#TestCase#otherMoId2}</v1:referralMedicalOrganizationId>\r
            <v1:needReferral>true</v1:needReferral>\r
         </typ:params>\r
      </typ:createRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a2810356-bc6a-4a14-b7b0-30572e99ea18" name="SOAP Response"/><con:assertion type="Not SOAP Fault Assertion" id="b6b0fa87-9002-499d-b781-2f9c08485859" name="SOAP Fault"/><con:assertion type="XPath Match" id="3719f000-7c15-4d57-914e-25dd52115970" name="Текст ошибки соответствует тексту E048"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//soap:Text</path><content>[ERROR] E048:  Значение справочника "Профили должностей" с идентификатором ${#TestCase#nonExistedPosProfId1} не найдено.
Parameters:
 id:  ${#TestCase#nonExistedPosProfId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="33481ae7-1814-45ee-ab6f-05da7efe9762" name="Есть сообщение"><con:configuration><token>message</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Тип сообщения = ERROR"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/@type</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Текст сообщения соответствует ошибке"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:message</path><content>Значение справочника "Профили должностей" с идентификатором ${#TestCase#nonExistedPosProfId1} не найдено.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Ключ параметра=id"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter/@key</path><content>id</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Значение параметра id = id архивного профиля должности"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:parameters/ns2:parameter</path><content>${#TestCase#nonExistedPosProfId1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="hasErrors=true"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:hasErrors</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d5fa8c2b-5ff7-42c5-8538-ce1bf64a3b79" name="Код сообщения = E048"><con:configuration><path>declare namespace ns2='http://emias.mos.ru/system/v1/faults/';
declare namespace ns1='http://emias.mos.ru/system/v1/userContext/';
declare namespace soap='http://www.w3.org/2003/05/soap-envelope';
//ns2:message/ns2:code</path><content>E048</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/createRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Проверить отсутствие новой записи в таблице route" id="396eedb1-ee26-4c95-aa49-c6526e519578"><con:description>все данные соответствуют переданным значениям в запросе</con:description><con:settings/><con:config><script>def scripts = new ScriptLibrary(context, testRunner, log)
sql=scripts.createDBConnection()

table = testRunner.testCase.testSuite.project.getPropertyValue("tableRoute")
countOld = testRunner.testCase.getPropertyValue("countRoutes").toInteger()

getItems = "SELECT * FROM "+table
items= sql.rows(getItems)
countNew= items.size()

assert countOld==countNew</script></con:config></con:testStep><con:testStep type="groovy" name="Очистить тестовые данные" id="814b42af-a03f-4e6d-bbe5-51ce5459165d"><con:settings/><con:config><script>def rir2scripts = new Rir2Library(context, testRunner, log)

//def Routes = new Routes(context, testRunner, log)
//Routes.clearRoute("id")
def JobExecution = new JobExecution(context, testRunner, log)
JobExecution.clearPosProf()

countTreatments=testRunner.testCase.getPropertyValue("countTreatments").toInteger()
def Treatments = new Treatments(context, testRunner, log)
Treatments.clearTreatments(countTreatments)

countDiagnosis=testRunner.testCase.getPropertyValue("countDiagnosis").toInteger()
def Diagnosis = new Diagnosis(context, testRunner, log)
Diagnosis.clearDiagnosis(countDiagnosis)

countReceiveMF=testRunner.testCase.getPropertyValue("countReceiveMF").toInteger()
countReferralMO=testRunner.testCase.getPropertyValue("countReferralMO").toInteger()
def MedOrganizations = new MedOrganizations(context, testRunner, log)
MedOrganizations.clearStructureOfMO(countReceiveMF)
MedOrganizations.clearMO(countReferralMO, "otherMoId")



</script></con:config></con:testStep><con:properties><con:property><con:name>countDiagnosis</con:name><con:value>2</con:value></con:property><con:property><con:name>countPosProf</con:name><con:value>1</con:value></con:property><con:property><con:name>countReceiveMF</con:name><con:value>2</con:value></con:property><con:property><con:name>countReferralMO</con:name><con:value>2</con:value></con:property><con:property><con:name>countRoutes</con:name><con:value>83</con:value></con:property><con:property><con:name>countTreatments</con:name><con:value>2</con:value></con:property><con:property><con:name>created</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>currentDate</con:name><con:value>2023-01-26T17:04:25.000709</con:value></con:property><con:property><con:name>document1</con:name><con:value>document1</con:value></con:property><con:property><con:name>id</con:name><con:value>100414</con:value></con:property><con:property><con:name>nonExistedDiagnosisId1</con:name><con:value>1001</con:value></con:property><con:property><con:name>nonExistedDiagnosisIdCreatedByTest1</con:name><con:value>1</con:value></con:property><con:property><con:name>number</con:name><con:value>100414</con:value></con:property><con:property><con:name>posProfCode2</con:name><con:value>code_autotest</con:value></con:property><con:property><con:name>posProfId2</con:name><con:value>-3</con:value></con:property><con:property><con:name>posProfIdCreatedByTest2</con:name><con:value>0</con:value></con:property><con:property><con:name>posProfTitle2</con:name><con:value>title_autotest</con:value></con:property><con:property><con:name>specId1</con:name><con:value>102</con:value></con:property><con:property><con:name>specIdCreatedByTest1</con:name><con:value>0</con:value></con:property><con:property><con:name>updated</con:name><con:value>2023-01-26T16:26:51.034289</con:value></con:property><con:property><con:name>nonExistedPosProfId1</con:name><con:value>204</con:value></con:property><con:property><con:name>nonExistedPosProfIdCreatedByTest1</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="2c95788f-1d7b-4edc-be4d-8abc747253a5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 16_ID262040" searchProperties="true"><con:settings/><con:testStep type="request" id="f13669f2-6a0c-462b-a0af-626a2d1c3ae3" name="getRoute - Request 1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>routeServiceBinding</con:interface><con:operation>getRoute</con:operation><con:request name="getRoute - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="61b2e3ac-518e-4d08-8e68-c081bc55d2fb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#RouteWSDL}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:user="http://emias.mos.ru/system/v1/userContext/" xmlns:typ="http://emias.mos.ru/supp/rir2/routeService/v1/types/" xmlns:v1="http://emias.mos.ru/supp/rir2/core/v1/">\r
   <soap:Header>\r
       <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:UsernameToken wsu:Id="UsernameToken-25145CA5C92E7F5041155145445404887">
            <wsse:Username>${#Project#securityUsername}</wsse:Username>
         </wsse:UsernameToken>
      </wsse:Security>
      <user:userContext>
         <user:systemName>${#Project#systemName}</user:systemName>
         <user:userName>${#Project#userName}</user:userName>
         <user:userRoleId>${#Project#userRoleId}</user:userRoleId>
         <user:userRights/>
         <user:jobExecutionId>${#Project#jobExecutionId}</user:jobExecutionId>
      </user:userContext>
   </soap:Header>\r
   <soap:Body>\r
      <typ:getRouteRequest>\r
         <typ:routeId>100151</typ:routeId>\r
      </typ:getRouteRequest>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c088bff3-6c4c-4fdc-a4a8-29bc4edf6877" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="27f1bb31-7daf-445f-a031-87a1fa38232b" name="Not SOAP Fault"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://emias.mos.ru/supp/rir2/routeService/v1/routeServicePortType/getRouteRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>dateTimeFormat</con:name><con:value>yyyy-MM-dd'T'HH:mm:ss.SSSSSS</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>ArScheduleWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/ArSchedule?wsdl</con:value></con:property><con:property><con:name>bootstrapServers</con:name><con:value>10.2.172.24:9092</con:value></con:property><con:property><con:name>dbConnect</con:name><con:value>10.2.173.127:5432/rir2</con:value></con:property><con:property><con:name>dbLogin</con:name><con:value>rir2</con:value></con:property><con:property><con:name>dbPassword</con:name><con:value>rir2</con:value></con:property><con:property><con:name>dbType</con:name><con:value>postgre</con:value></con:property><con:property><con:name>db_rir2_con</con:name><con:value>10.2.173.127:5432/rir2</con:value></con:property><con:property><con:name>db_rir2_password</con:name><con:value>rir2</con:value></con:property><con:property><con:name>db_rir2_user</con:name><con:value>rir2</con:value></con:property><con:property><con:name>jobExecutionId</con:name><con:value>112740</con:value></con:property><con:property><con:name>journalWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/Journal?wsdl</con:value></con:property><con:property><con:name>moName</con:name><con:value>МО 1 для автотестов сервиса маршруты</con:value></con:property><con:property><con:name>PushWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/push</con:value></con:property><con:property><con:name>ResourcesWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/Resources</con:value></con:property><con:property><con:name>RouteWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/Route?wsdl</con:value></con:property><con:property><con:name>SarScheduleWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/SarSchedule?wsdl</con:value></con:property><con:property><con:name>ScheduleWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/Schedule?wsdl</con:value></con:property><con:property><con:name>securityUsername</con:name><con:value>KPI_APC_METHODIST/HAdiatullina</con:value></con:property><con:property><con:name>systemName</con:name><con:value>KPI_APC_METHODIST</con:value></con:property><con:property><con:name>SystemWSDL</con:name><con:value>http://arschedule.rir2.test.emias.mos.ru/api/System?wsdl</con:value></con:property><con:property><con:name>tableAG</con:name><con:value>AGE_GROUP</con:value></con:property><con:property><con:name>tableAO</con:name><con:value>ADDRESS_OBJECT</con:value></con:property><con:property><con:name>tableArRuleType</con:name><con:value>AR_SCHRULE_TYPE</con:value></con:property><con:property><con:name>tableDepNom</con:name><con:value>DEPARTMENT_NOM</con:value></con:property><con:property><con:name>tableDiagnosis</con:name><con:value>diagnosis</con:value></con:property><con:property><con:name>tableE</con:name><con:value>EQUIPMENT</con:value></con:property><con:property><con:name>tableEP</con:name><con:value>EQUIPMENT_PROFILE</con:value></con:property><con:property><con:name>tableET</con:name><con:value>EQUIPMENT_TREATMENT</con:value></con:property><con:property><con:name>tableJ</con:name><con:value>JOURNAL</con:value></con:property><con:property><con:name>tableJE</con:name><con:value>JOB_EXECUTION</con:value></con:property><con:property><con:name>tableLoc</con:name><con:value>LOCATION</con:value></con:property><con:property><con:name>tableMF</con:name><con:value>MEDICAL_FACILITY</con:value></con:property><con:property><con:name>tableMFWH</con:name><con:value>MEDICAL_FACILITY_WORKHOURS</con:value></con:property><con:property><con:name>tableMO</con:name><con:value>MEDICAL_ORGANIZATION</con:value></con:property><con:property><con:name>tablePCalendar</con:name><con:value>PRODUCTION_CALENDAR</con:value></con:property><con:property><con:name>tablePosNom</con:name><con:value>POSITION_NOM</con:value></con:property><con:property><con:name>tablePosProf</con:name><con:value>position_profile</con:value></con:property><con:property><con:name>tablePosProfTreatment</con:name><con:value>position_profile_treatment</con:value></con:property><con:property><con:name>tableRes</con:name><con:value>"RESOURCE"</con:value></con:property><con:property><con:name>tableResSchedule</con:name><con:value>RESOURCE_SCHEDULE</con:value></con:property><con:property><con:name>tableResType</con:name><con:value>RESOURCE_TYPE</con:value></con:property><con:property><con:name>tableRoute</con:name><con:value>ROUTE</con:value></con:property><con:property><con:name>tableRouteDiag</con:name><con:value>ROUTE_DIAGNOSIS</con:value></con:property><con:property><con:name>tableRoutePosProf</con:name><con:value>route_position_profile</con:value></con:property><con:property><con:name>tableRouteRecMF</con:name><con:value>route_receiving_medical_facility</con:value></con:property><con:property><con:name>tableRouteRefMO</con:name><con:value>route_referral_medical_organization</con:value></con:property><con:property><con:name>tableRouteT</con:name><con:value>ROUTE_TREATMENT</con:value></con:property><con:property><con:name>tableRPCM</con:name><con:value>ROUTE_POSITION_CODE_MAPPING</con:value></con:property><con:property><con:name>tableRTLM</con:name><con:value>ROUTE_TREATMENT_LDP_MAPPING</con:value></con:property><con:property><con:name>tableSarRule</con:name><con:value>SAR_SCHRULE</con:value></con:property><con:property><con:name>tableSarRuleType</con:name><con:value>SAR_SCHRULE_TYPE</con:value></con:property><con:property><con:name>tableSchedule</con:name><con:value>SCHEDULE</con:value></con:property><con:property><con:name>tableSpec</con:name><con:value>SPECIALIZATION</con:value></con:property><con:property><con:name>tableSysLock</con:name><con:value>SYSTEM_LOCKS</con:value></con:property><con:property><con:name>tableSYSOP</con:name><con:value>SYSOP</con:value></con:property><con:property><con:name>tableT</con:name><con:value>TREATMENT</con:value></con:property><con:property><con:name>tableTC</con:name><con:value>TREATMENT_CATEGORY</con:value></con:property><con:property><con:name>userName</con:name><con:value>HAdiatullina</con:value></con:property><con:property><con:name>userRoleId</con:name><con:value>7014</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>